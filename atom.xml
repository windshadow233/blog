<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>逸风亭</title>
  <icon>https://blog.fyz666.xyz/images/avatar.jpg</icon>
  <subtitle>Shelter for Wind</subtitle>
  <link href="https://blog.fyz666.xyz/atom.xml" rel="self"/>
  
  <link href="https://blog.fyz666.xyz/"/>
  <updated>2024-05-11T08:15:27.837Z</updated>
  <id>https://blog.fyz666.xyz/</id>
  
  <author>
    <name>WindShadow</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Butterfly主题tabs外挂标签下代码块高度限制失效的解决方案</title>
    <link href="https://blog.fyz666.xyz/blog/11402/"/>
    <id>https://blog.fyz666.xyz/blog/11402/</id>
    <published>2024-05-10T14:22:11.000Z</published>
    <updated>2024-05-11T08:15:27.837Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo的Butterfly主题带有一些特有的、非Markdown语法的外挂标签，作为一种写作语法扩展非常好用。然而在使用<code>tabs</code>标签时，遇到了内部代码块高度限制失效的问题。</p><hr><p>我在Butterfly的主题文件中设置了代码块的高度限制：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">highlight_height_limit</span><span class="token punctuation">:</span> <span class="token number">300</span> <span class="token comment"># unit: px</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一般情况下，当代码块高度超过300px时便会隐藏超出范围的代码，并添加一个展开按钮，但这个特性在tabs标签下的非默认tab中失效。</p><p>审计了渲染代码后，我找到了处理这部分逻辑的代码，其位于主题目录下的<code>source/js/main.js</code>文件中的<code>createEle</code>函数：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">createEle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">lang<span class="token punctuation">,</span> item<span class="token punctuation">,</span> service</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> fragment <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createDocumentFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>isShowTool<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> hlTools <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span>        hlTools<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">highlight-tools </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>highlightShrinkClass<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>        hlTools<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> highlightShrinkEle <span class="token operator">+</span> lang <span class="token operator">+</span> highlightCopyEle        btf<span class="token punctuation">.</span><span class="token function">addEventListenerPjax</span><span class="token punctuation">(</span>hlTools<span class="token punctuation">,</span> <span class="token string">'click'</span><span class="token punctuation">,</span> highlightToolsFn<span class="token punctuation">)</span>        fragment<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>hlTools<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>highlightHeightLimit <span class="token operator">&amp;&amp;</span> item<span class="token punctuation">.</span>offsetHeight <span class="token operator">></span> highlightHeightLimit <span class="token operator">+</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> ele <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span>        ele<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'code-expand-btn'</span>        ele<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'&lt;i class="fas fa-angle-double-down">&lt;/i>'</span>        btf<span class="token punctuation">.</span><span class="token function">addEventListenerPjax</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> <span class="token string">'click'</span><span class="token punctuation">,</span> expandCode<span class="token punctuation">)</span>        fragment<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>service <span class="token operator">===</span> <span class="token string">'hl'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        item<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>fragment<span class="token punctuation">,</span> item<span class="token punctuation">.</span>firstChild<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        item<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>fragment<span class="token punctuation">,</span> item<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于<code>display:none</code>的元素其<code>offsetHeight</code>会变成0，导致无法进入函数中间的那个if语句，也就无法按我们的需求进行渲染。</p><p>对于这个问题，早就有了现成的解决方案，我们可以引入jQuery actual插件，通过它来获取隐藏元素的实际高度：</p><a class="tag-Link" target="_blank" href="https://github.com/dreamerslab/jquery.actual">    <div class="tag-link-tips">引用站外地址，不保证站点的可用性和安全性</div>    <div class="tag-link-bottom">        <div class="tag-link-left">            <img src="https://api.iowen.cn/favicon/github.com/dreamerslab/jquery.actual.png" onerror="this.onerror=null;this.src='/images/default-link.png';" />        </div>        <div class="tag-link-right">            <div class="tag-link-title">jQuery Actual Plugin</div>            <div class="tag-link-sitename">GitHub</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a><p>在butterfly的主题文件中<code>inject.head</code>项下引入jquery.actual文件：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">-</span> &lt;script src="https<span class="token punctuation">:</span>//cdnjs.cloudflare.com/ajax/libs/jquery.actual/1.0.19/jquery.actual.min.js"<span class="token punctuation">></span>&lt;/script<span class="token punctuation">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后修改<code>source/js/main.js</code>中的<code>createEle</code>函数：</p><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff"><span class="token coord">--- a/themes/butterfly/source/js/main.js</span><span class="token coord">+++ b/themes/butterfly/source/js/main.js</span>@@ -134,8 +134,9 @@ document.addEventListener('DOMContentLoaded', function () &#123;<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">        btf.addEventListenerPjax(hlTools, 'click', highlightToolsFn)</span><span class="token prefix unchanged"> </span><span class="token line">        fragment.appendChild(hlTools)</span><span class="token prefix unchanged"> </span><span class="token line">      &#125;</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">      const actualHeight = $(item).actual('height');</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"></span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">      if (highlightHeightLimit &amp;&amp; item.offsetHeight > highlightHeightLimit + 30) &#123;</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">      if (highlightHeightLimit &amp;&amp; actualHeight > highlightHeightLimit + 30) &#123;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">        const ele = document.createElement('div')</span><span class="token prefix unchanged"> </span><span class="token line">        ele.className = 'code-expand-btn'</span><span class="token prefix unchanged"> </span><span class="token line">        ele.innerHTML = '&lt;i class="fas fa-angle-double-down">&lt;/i>'</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虽然好像有点不优雅，但至少代码块渲染能按需求工作了。</p><hr><p>在作者的提示下才发现文档里已经有写：</p><a class="tag-Link" target="_blank" href="https://butterfly.js.org/posts/4aa8abbe/#%E4%BB%A3%E7%A2%BC%E9%AB%98%E5%BA%A6%E9%99%90%E5%88%B6">    <div class="tag-link-tips">引用站外地址，不保证站点的可用性和安全性</div>    <div class="tag-link-bottom">        <div class="tag-link-left">            <img src="https://api.iowen.cn/favicon/butterfly.js.org/posts/4aa8abbe/#%E4%BB%A3%E7%A2%BC%E9%AB%98%E5%BA%A6%E9%99%90%E5%88%B6.png" onerror="this.onerror=null;this.src='/images/default-link.png';" />        </div>        <div class="tag-link-right">            <div class="tag-link-title">代码高度限制</div>            <div class="tag-link-sitename">Butterfly</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a><blockquote><p>不适用于隐藏后的代码块（ css 设置 display: none）</p></blockquote><p>看来这是主题的预期行为。不过我个人认为让隐藏的代码块同样折叠起来更为合理。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;Hexo的Butterfly主题带有一些特有的、非Markdown语法的外挂标签，作为一种写作语法扩展非常好用。然而在使用&lt;code&gt;tabs&lt;/code&gt;标签时，遇到了内部代码块高度限制失效的问题。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;我在Butterfly的主题文件中设置了代码块的</summary>
        
      
    
    
    
    <category term="Debug" scheme="https://blog.fyz666.xyz/categories/debug/"/>
    
    <category term="博客相关" scheme="https://blog.fyz666.xyz/categories/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/"/>
    
    <category term="Hexo魔改" scheme="https://blog.fyz666.xyz/categories/hexo%E9%AD%94%E6%94%B9/"/>
    
    
    <category term="JavaScript" scheme="https://blog.fyz666.xyz/tags/javascript/"/>
    
    <category term="Hexo" scheme="https://blog.fyz666.xyz/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>在Hexo博客中添加GitHub Calendar</title>
    <link href="https://blog.fyz666.xyz/blog/11354/"/>
    <id>https://blog.fyz666.xyz/blog/11354/</id>
    <published>2024-05-10T02:48:17.000Z</published>
    <updated>2024-05-11T08:15:27.837Z</updated>
    
    <content type="html"><![CDATA[<p>逛别人的博客时，发现有许多博主的主页上会嵌入一个Github Calendar，如下图所示：</p><p><img src="https://fastly.jsdelivr.net/gh/windshadow233/BlogStorage@files/png/d8b94eb0e2eb259763b638226a9e719d.png" alt="image-20240510025333998"></p><p><del>放置在homepage可以让主页显得丰富一些。</del></p><p>简单一搜，找到了这个项目的出处：</p><a class="tag-Link" target="_blank" href="https://github.com/Bloggify/github-calendar">    <div class="tag-link-tips">引用站外地址，不保证站点的可用性和安全性</div>    <div class="tag-link-bottom">        <div class="tag-link-left">            <img src="https://api.iowen.cn/favicon/github.com/Bloggify/github-calendar.png" onerror="this.onerror=null;this.src='/images/default-link.png';" />        </div>        <div class="tag-link-right">            <div class="tag-link-title">github-calendar</div>            <div class="tag-link-sitename">GitHub</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a><p>另外，还找到一位大佬将该项目集成的Hexo插件：</p><a class="tag-Link" target="_blank" href="https://github.com/Zfour/hexo-github-calendar">    <div class="tag-link-tips">引用站外地址，不保证站点的可用性和安全性</div>    <div class="tag-link-bottom">        <div class="tag-link-left">            <img src="https://api.iowen.cn/favicon/github.com/Zfour/hexo-github-calendar.png" onerror="this.onerror=null;this.src='/images/default-link.png';" />        </div>        <div class="tag-link-right">            <div class="tag-link-title">hexo-github-calendar</div>            <div class="tag-link-sitename">GitHub</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a><p>基于这些信息，本文给出两种安装方法。</p><h2 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h2><div class="tabs" id="tab1"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="tab1-1">直接安装插件</button><button type="button" class="tab " data-href="tab1-2">自己动手魔改主题</button></ul><div class="tab-contents"><div class="tab-item-content active" id="tab1-1"><p>不愿意魔改主题的朋友可以直接安装前面提到的插件：<a href="https://github.com/Zfour/hexo-github-calendar">hexo-github-calendar</a>，</p><p>并在网站配置文件中添加：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">githubcalendar</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">priority</span><span class="token punctuation">:</span> <span class="token number">3</span>  <span class="token key atrule">enable_page</span><span class="token punctuation">:</span> /  <span class="token key atrule">user</span><span class="token punctuation">:</span> &lt;username<span class="token punctuation">></span>  <span class="token key atrule">layout</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> id    <span class="token key atrule">name</span><span class="token punctuation">:</span> recent<span class="token punctuation">-</span>posts    <span class="token key atrule">index</span><span class="token punctuation">:</span> <span class="token number">0</span>  <span class="token key atrule">githubcalendar_html</span><span class="token punctuation">:</span> <span class="token string">'&lt;div class="recent-post-item" style="width:100%;height:auto;padding:10px;">&lt;div id="github_loading" style="width:10%;height:100%;margin:0 auto;display: block">&lt;svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"  viewBox="0 0 50 50" style="enable-background:new 0 0 50 50" xml:space="preserve">&lt;path fill="#d0d0d0" d="M25.251,6.461c-10.318,0-18.683,8.365-18.683,18.683h4.068c0-8.071,6.543-14.615,14.615-14.615V6.461z" transform="rotate(275.098 25 25)">&lt;animateTransform attributeType="xml" attributeName="transform" type="rotate" from="0 25 25" to="360 25 25" dur="0.6s" repeatCount="indefinite">&lt;/animateTransform>&lt;/path>&lt;/svg>&lt;/div>&lt;div id="github_container">&lt;/div>&lt;/div>'</span>  <span class="token key atrule">pc_minheight</span><span class="token punctuation">:</span> 280px  <span class="token key atrule">mobile_minheight</span><span class="token punctuation">:</span> 0px  <span class="token key atrule">color</span><span class="token punctuation">:</span> <span class="token string">"['#ebedf0', '#fdcdec', '#fc9bd9', '#fa6ac5', '#f838b2', '#f5089f', '#c4067e', '#92055e', '#540336', '#48022f', '#30021f']"</span>  <span class="token key atrule">api</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//python<span class="token punctuation">-</span>github<span class="token punctuation">-</span>calendar<span class="token punctuation">-</span>api.vercel.app/api  <span class="token key atrule">calendar_js</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/gh/Zfour/hexo<span class="token punctuation">-</span>github<span class="token punctuation">-</span>calendar@1.21/hexo_githubcalendar.js  <span class="token key atrule">plus_style</span><span class="token punctuation">:</span> <span class="token string">""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里主要修改的内容是<code>user</code>控制显示的GitHub账号，<code>enable_page</code>控制生效的页面以及<code>layout</code>控制组件的位置，不再细说。</p><p>然而这个<code>api</code>应该是挂掉的，且看后文如何通过vercel自己搭建<code>api</code>。</p></div><div class="tab-item-content" id="tab1-2"><p>安装插件的方式不够灵活，所以我选择自己魔改主题。首先，我希望该组件显示在主页顶部，并且在主页的每一页都有显示，因此，找到主题的<code>layout/includes/layout.pug</code>这个文件，在需要插入组件的位置写上<code>#github_container</code>，例如我：</p><pre class="line-numbers language-pug" data-language="pug"><code class="language-pug"><span class="token punctuation">...</span><span class="token punctuation">-</span><span class="token code"> <span class="token keyword">var</span> isHome <span class="token operator">=</span> <span class="token function">is_home</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">'home'</span> <span class="token operator">:</span> <span class="token string">''</span></span><span class="token punctuation">...</span><span class="token flow-control"><span class="token branch keyword">if</span> isHome</span>  <span class="token tag"><span class="token attr-id">#top</span><span class="token attr-class">.top</span><span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">style</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token string">"width:1500px"</span></span><span class="token punctuation">)</span></span></span>    <span class="token punctuation">...</span>    <span class="token tag"><span class="token attr-class">.cards</span></span>      <span class="token tag"><span class="token attr-class">.gc</span><span class="token attr-id">#gc</span></span>        <span class="token tag"><span class="token attr-class">.recent-post-item</span><span class="token attr-class">.github_container</span><span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">style</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token string">'width:100%;height:auto;padding:10px;'</span></span><span class="token punctuation">)</span></span></span>          <span class="token tag"><span class="token attr-id">#github_container</span></span><span class="token tag">main<span class="token attr-id">#content-inner</span><span class="token attr-class">.layout</span><span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">class</span><span class="token punctuation">=</span><span class="token attr-value">hideAside</span><span class="token punctuation">)</span></span></span> <span class="token plain-text"># 原来的内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过<code>is_home</code>函数判断是否为主页，并且在主页原来该有的内容前面增加一些块，其中包含<code>#github_container</code>。</p><p>然后新建<code>source/js/githubcalendar.js</code>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">github_canlendar</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">git_user<span class="token punctuation">,</span> git_color</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> git_githubapiurl <span class="token operator">=</span> <span class="token string">"https://&lt;your-api>?user="</span> <span class="token operator">+</span> git_user<span class="token punctuation">;</span>    <span class="token keyword">var</span> git_fixed <span class="token operator">=</span> <span class="token string">'fixed'</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> git_px <span class="token operator">=</span> <span class="token string">'px'</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> git_month <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'一月'</span><span class="token punctuation">,</span> <span class="token string">'二月'</span><span class="token punctuation">,</span> <span class="token string">'三月'</span><span class="token punctuation">,</span> <span class="token string">'四月'</span><span class="token punctuation">,</span> <span class="token string">'五月'</span><span class="token punctuation">,</span> <span class="token string">'六月'</span><span class="token punctuation">,</span> <span class="token string">'七月'</span><span class="token punctuation">,</span> <span class="token string">'八月'</span><span class="token punctuation">,</span> <span class="token string">'九月'</span><span class="token punctuation">,</span> <span class="token string">'十月'</span><span class="token punctuation">,</span> <span class="token string">'十一月'</span><span class="token punctuation">,</span> <span class="token string">'十二月'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> git_monthchange <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> git_oneyearbeforeday <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> git_thisday <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> git_amonthago <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> git_aweekago <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> git_weekdatacore <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> git_datacore <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> git_total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> git_datadate <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> git_git_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> git_positionplusdata <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> git_firstweek <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> git_lastweek <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> git_beforeweek <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> git_thisweekdatacore <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> git_mounthbeforeday <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> git_mounthfirstindex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> git_crispedges <span class="token operator">=</span> <span class="token string">'crispedges'</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> git_thisdayindex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> git_amonthagoindex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> git_amonthagoweek <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> git_firstdate <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> git_first2date <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> git_montharrbefore <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> git_monthindex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> <span class="token function-variable function">retinaCanvas</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">canvas<span class="token punctuation">,</span> context<span class="token punctuation">,</span> ratio</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ratio <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> canvasWidth <span class="token operator">=</span> canvas<span class="token punctuation">.</span>width<span class="token punctuation">;</span>            <span class="token keyword">var</span> canvasHeight <span class="token operator">=</span> canvas<span class="token punctuation">.</span>height<span class="token punctuation">;</span>            canvas<span class="token punctuation">.</span>width <span class="token operator">=</span> canvasWidth <span class="token operator">*</span> ratio<span class="token punctuation">;</span>            canvas<span class="token punctuation">.</span>height <span class="token operator">=</span> canvasHeight <span class="token operator">*</span> ratio<span class="token punctuation">;</span>            canvas<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token string">'100%'</span><span class="token punctuation">;</span>            canvas<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> canvasHeight <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>            context<span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span>ratio<span class="token punctuation">,</span> ratio<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">responsiveChart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> ratio <span class="token operator">=</span> window<span class="token punctuation">.</span>devicePixelRatio <span class="token operator">||</span> <span class="token number">1</span>        <span class="token keyword">var</span> git_tooltip_container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'git_tooltip_container'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> git_x <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> git_y <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> git_span1 <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> git_span2 <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> c <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"gitcanvas"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span><span class="token string">'100%'</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> cmessage <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"gitmessage"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> ctx <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        width <span class="token operator">=</span> c<span class="token punctuation">.</span>width <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"gitcalendarcanvasbox"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>offsetWidth<span class="token punctuation">;</span>        height <span class="token operator">=</span> c<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">9</span> <span class="token operator">*</span> <span class="token number">0.96</span> <span class="token operator">*</span> c<span class="token punctuation">.</span>width <span class="token operator">/</span> git_data<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token function">retinaCanvas</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>ctx<span class="token punctuation">,</span> ratio<span class="token punctuation">)</span>        <span class="token keyword">var</span> linemaxwitdh <span class="token operator">=</span> height<span class="token operator">/</span> <span class="token number">9</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> lineminwitdh <span class="token operator">=</span> <span class="token number">0.8</span> <span class="token operator">*</span> linemaxwitdh<span class="token punctuation">;</span>        <span class="token keyword">var</span> setposition <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">0.02</span> <span class="token operator">*</span> width<span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">0.025</span> <span class="token operator">*</span> width<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> week <span class="token keyword">in</span> git_data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            weekdata <span class="token operator">=</span> git_data<span class="token punctuation">[</span>week<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> day <span class="token keyword">in</span> weekdata<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">var</span> dataitem <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">date</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>                git_positionplusdata<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>dataitem<span class="token punctuation">)</span><span class="token punctuation">;</span>                ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token function">git_thiscolor</span><span class="token punctuation">(</span>git_color<span class="token punctuation">,</span> weekdata<span class="token punctuation">[</span>day<span class="token punctuation">]</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>                setposition<span class="token punctuation">.</span>y <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>setposition<span class="token punctuation">.</span>y <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">;</span>                dataitem<span class="token punctuation">.</span>date <span class="token operator">=</span> weekdata<span class="token punctuation">[</span>day<span class="token punctuation">]</span><span class="token punctuation">.</span>date<span class="token punctuation">;</span>                dataitem<span class="token punctuation">.</span>count <span class="token operator">=</span> weekdata<span class="token punctuation">[</span>day<span class="token punctuation">]</span><span class="token punctuation">.</span>count<span class="token punctuation">;</span>                dataitem<span class="token punctuation">.</span>x <span class="token operator">=</span> setposition<span class="token punctuation">.</span>x<span class="token punctuation">;</span>                dataitem<span class="token punctuation">.</span>y <span class="token operator">=</span> setposition<span class="token punctuation">.</span>y<span class="token punctuation">;</span>                ctx<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span>setposition<span class="token punctuation">.</span>x<span class="token punctuation">,</span> setposition<span class="token punctuation">.</span>y<span class="token punctuation">,</span> lineminwitdh<span class="token punctuation">,</span> lineminwitdh<span class="token punctuation">)</span><span class="token punctuation">;</span>                setposition<span class="token punctuation">.</span>y <span class="token operator">=</span> setposition<span class="token punctuation">.</span>y <span class="token operator">+</span> linemaxwitdh            <span class="token punctuation">&#125;</span>            setposition<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">0.025</span> <span class="token operator">*</span> width<span class="token punctuation">;</span>            setposition<span class="token punctuation">.</span>x <span class="token operator">=</span> setposition<span class="token punctuation">.</span>x <span class="token operator">+</span> linemaxwitdh        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientWidth <span class="token operator">></span> <span class="token number">700</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ctx<span class="token punctuation">.</span>font <span class="token operator">=</span> <span class="token string">"600  Arial"</span><span class="token punctuation">;</span>            ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">'#aaa'</span><span class="token punctuation">;</span>            ctx<span class="token punctuation">.</span><span class="token function">fillText</span><span class="token punctuation">(</span><span class="token string">"日"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1.9</span> <span class="token operator">*</span> linemaxwitdh<span class="token punctuation">)</span><span class="token punctuation">;</span>            ctx<span class="token punctuation">.</span><span class="token function">fillText</span><span class="token punctuation">(</span><span class="token string">"二"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3.9</span> <span class="token operator">*</span> linemaxwitdh<span class="token punctuation">)</span><span class="token punctuation">;</span>            ctx<span class="token punctuation">.</span><span class="token function">fillText</span><span class="token punctuation">(</span><span class="token string">"四"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5.9</span> <span class="token operator">*</span> linemaxwitdh<span class="token punctuation">)</span><span class="token punctuation">;</span>            ctx<span class="token punctuation">.</span><span class="token function">fillText</span><span class="token punctuation">(</span><span class="token string">"六"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">7.9</span> <span class="token operator">*</span> linemaxwitdh<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> monthindexlist <span class="token operator">=</span> width <span class="token operator">/</span> <span class="token number">24</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> index <span class="token keyword">in</span> git_monthchange<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                ctx<span class="token punctuation">.</span><span class="token function">fillText</span><span class="token punctuation">(</span>git_monthchange<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> monthindexlist<span class="token punctuation">,</span> <span class="token number">0.7</span> <span class="token operator">*</span> linemaxwitdh<span class="token punctuation">)</span><span class="token punctuation">;</span>                monthindexlist <span class="token operator">=</span> monthindexlist <span class="token operator">+</span> width <span class="token operator">/</span> <span class="token number">12</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        c<span class="token punctuation">.</span><span class="token function-variable function">onmousemove</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.gitmessage'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                git_tooltip_container<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">""</span>            <span class="token punctuation">&#125;</span>            <span class="token function">getMousePos</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> event<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        git_tooltip_container<span class="token punctuation">.</span><span class="token function-variable function">onmousemove</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.gitmessage'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                git_tooltip_container<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">""</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">getMousePos</span><span class="token punctuation">(</span><span class="token parameter">canvas<span class="token punctuation">,</span> event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> rect <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> x <span class="token operator">=</span> event<span class="token punctuation">.</span>clientX <span class="token operator">-</span> rect<span class="token punctuation">.</span>left <span class="token operator">*</span> <span class="token punctuation">(</span>canvas<span class="token punctuation">.</span>width <span class="token operator">/</span> rect<span class="token punctuation">.</span>width<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> y <span class="token operator">=</span> event<span class="token punctuation">.</span>clientY <span class="token operator">-</span> rect<span class="token punctuation">.</span>top <span class="token operator">*</span> <span class="token punctuation">(</span>canvas<span class="token punctuation">.</span>height <span class="token operator">/</span> rect<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> item <span class="token keyword">of</span> git_positionplusdata<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">var</span> lenthx <span class="token operator">=</span> x <span class="token operator">-</span> item<span class="token punctuation">.</span>x<span class="token punctuation">;</span>                <span class="token keyword">var</span> lenthy <span class="token operator">=</span> y <span class="token operator">-</span> item<span class="token punctuation">.</span>y<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;</span> lenthx <span class="token operator">&amp;&amp;</span> lenthx <span class="token operator">&lt;</span> lineminwitdh<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;</span> lenthy <span class="token operator">&amp;&amp;</span> lenthy <span class="token operator">&lt;</span> lineminwitdh<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        git_span1 <span class="token operator">=</span> item<span class="token punctuation">.</span>date<span class="token punctuation">;</span>                        git_span2 <span class="token operator">=</span> item<span class="token punctuation">.</span>count<span class="token punctuation">;</span>                        git_x <span class="token operator">=</span> event<span class="token punctuation">.</span>clientX <span class="token operator">-</span> <span class="token number">100</span><span class="token punctuation">;</span>                        git_y <span class="token operator">=</span> event<span class="token punctuation">.</span>clientY <span class="token operator">-</span> <span class="token number">60</span><span class="token punctuation">;</span>                        html <span class="token operator">=</span> <span class="token function">tooltip_html</span><span class="token punctuation">(</span>git_x<span class="token punctuation">,</span> git_y<span class="token punctuation">,</span> git_span1<span class="token punctuation">,</span> git_span2<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">append_div_gitcalendar</span><span class="token punctuation">(</span>git_tooltip_container<span class="token punctuation">,</span> html<span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">addlastmonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>git_thisdayindex <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">thisweekcore</span><span class="token punctuation">(</span><span class="token number">52</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">thisweekcore</span><span class="token punctuation">(</span><span class="token number">51</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">thisweekcore</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">thisweekcore</span><span class="token punctuation">(</span><span class="token number">49</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">thisweekcore</span><span class="token punctuation">(</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            git_thisweekdatacore <span class="token operator">+=</span> git_firstdate<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span>count<span class="token punctuation">;</span>            git_amonthago <span class="token operator">=</span> git_firstdate<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span>date        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token function">thisweekcore</span><span class="token punctuation">(</span><span class="token number">52</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">thisweekcore</span><span class="token punctuation">(</span><span class="token number">51</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">thisweekcore</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">thisweekcore</span><span class="token punctuation">(</span><span class="token number">49</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">thisweek2core</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            git_amonthago <span class="token operator">=</span> git_first2date<span class="token punctuation">[</span>git_thisdayindex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>date        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">thisweek2core</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> git_thisdayindex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> git_first2date<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            git_thisweekdatacore <span class="token operator">+=</span> git_first2date<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>count        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">thisweekcore</span><span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> item <span class="token keyword">of</span> git_data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            git_thisweekdatacore <span class="token operator">+=</span> item<span class="token punctuation">.</span>count        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">addlastweek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> item <span class="token keyword">of</span> git_lastweek<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            git_weekdatacore <span class="token operator">+=</span> item<span class="token punctuation">.</span>count        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">addbeforeweek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> git_thisdayindex<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> git_beforeweek<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            git_weekdatacore <span class="token operator">+=</span> git_beforeweek<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>count        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">addweek</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>git_thisdayindex <span class="token operator">===</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            git_aweekago <span class="token operator">=</span> git_lastweek<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>date<span class="token punctuation">;</span>            <span class="token function">addlastweek</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            lastweek <span class="token operator">=</span> data<span class="token punctuation">.</span>contributions<span class="token punctuation">[</span><span class="token number">51</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            git_aweekago <span class="token operator">=</span> lastweek<span class="token punctuation">[</span>git_thisdayindex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>date<span class="token punctuation">;</span>            <span class="token function">addlastweek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">addbeforeweek</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">fetch</span><span class="token punctuation">(</span>git_githubapiurl<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=></span> data<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        git_data <span class="token operator">=</span> data<span class="token punctuation">.</span>contributions<span class="token punctuation">;</span>        git_total <span class="token operator">=</span> data<span class="token punctuation">.</span>total<span class="token punctuation">;</span>        git_first2date <span class="token operator">=</span> git_data<span class="token punctuation">[</span><span class="token number">48</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        git_firstdate <span class="token operator">=</span> git_data<span class="token punctuation">[</span><span class="token number">47</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        git_firstweek <span class="token operator">=</span> data<span class="token punctuation">.</span>contributions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        git_lastweek <span class="token operator">=</span> data<span class="token punctuation">.</span>contributions<span class="token punctuation">[</span><span class="token number">52</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        git_beforeweek <span class="token operator">=</span> data<span class="token punctuation">.</span>contributions<span class="token punctuation">[</span><span class="token number">51</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        git_thisdayindex <span class="token operator">=</span> git_lastweek<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        git_thisday <span class="token operator">=</span> git_lastweek<span class="token punctuation">[</span>git_thisdayindex<span class="token punctuation">]</span><span class="token punctuation">.</span>date<span class="token punctuation">;</span>        git_oneyearbeforeday <span class="token operator">=</span> git_firstweek<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>date<span class="token punctuation">;</span>        git_monthindex <span class="token operator">=</span> git_thisday<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">;</span>        git_montharrbefore <span class="token operator">=</span> git_month<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>git_monthindex<span class="token punctuation">,</span> <span class="token number">12</span> <span class="token operator">-</span> git_monthindex<span class="token punctuation">)</span><span class="token punctuation">;</span>        git_monthchange <span class="token operator">=</span> git_montharrbefore<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>git_month<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addweek</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addlastmonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> html <span class="token operator">=</span> <span class="token function">github_main_box</span><span class="token punctuation">(</span>git_monthchange<span class="token punctuation">,</span> git_data<span class="token punctuation">,</span> git_user<span class="token punctuation">,</span> git_color<span class="token punctuation">,</span> git_total<span class="token punctuation">,</span> git_thisweekdatacore<span class="token punctuation">,</span> git_weekdatacore<span class="token punctuation">,</span> git_oneyearbeforeday<span class="token punctuation">,</span> git_thisday<span class="token punctuation">,</span> git_aweekago<span class="token punctuation">,</span> git_amonthago<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">append_div_gitcalendar</span><span class="token punctuation">(</span>github_container<span class="token punctuation">,</span> html<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'github_loading'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'github_loading'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token function">responsiveChart</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    window<span class="token punctuation">.</span><span class="token function-variable function">onresize</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">responsiveChart</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    window<span class="token punctuation">.</span><span class="token function-variable function">onscroll</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.gitmessage'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            git_tooltip_container<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">""</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> <span class="token function-variable function">git_thiscolor</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">color<span class="token punctuation">,</span> x</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>x <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> color<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> color<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>x <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> color<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> color<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> <span class="token function-variable function">tooltip_html</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> span1<span class="token punctuation">,</span> span2</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> html <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>        html <span class="token operator">+=</span> <span class="token string">'&lt;div class="gitmessage" style="top:'</span> <span class="token operator">+</span> y <span class="token operator">+</span> <span class="token string">'px;left:'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'px;position: fixed;z-index:9999">&lt;div class="angle-wrapper" style="display:block;">&lt;span>'</span> <span class="token operator">+</span> span1 <span class="token operator">+</span> <span class="token string">'&amp;nbsp;&lt;/span>&lt;span>'</span> <span class="token operator">+</span> span2 <span class="token operator">+</span> <span class="token string">' 次上传&lt;/span>&lt;/div>&lt;/div>'</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> html    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> <span class="token function-variable function">github_canvas_box</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> html <span class="token operator">=</span> <span class="token string">'&lt;div id="gitcalendarcanvasbox"> &lt;canvas id="gitcanvas" style="animation: none;">&lt;/canvas>&lt;/div>'</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> html    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> <span class="token function-variable function">github_info_box</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">user<span class="token punctuation">,</span> color</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> html <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>        html <span class="token operator">+=</span> <span class="token string">'&lt;div id="git_tooltip_container">&lt;/div>&lt;div class="contrib-footer clearfix mt-1 mx-3 px-3 pb-1">&lt;div class="float-left text-gray">数据来源 &lt;a href="https://github.com/'</span> <span class="token operator">+</span> user <span class="token operator">+</span> <span class="token string">'" target="blank">@'</span> <span class="token operator">+</span> user <span class="token operator">+</span> <span class="token string">'&lt;/a>&lt;/div>&lt;div class="contrib-legend text-gray">Less &lt;ul class="legend">&lt;li style="background-color:'</span> <span class="token operator">+</span> color<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'">&lt;/li>&lt;li style="background-color:'</span> <span class="token operator">+</span> color<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'">&lt;/li>&lt;li style="background-color:'</span> <span class="token operator">+</span> color<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'">&lt;/li>&lt;li style="background-color:'</span> <span class="token operator">+</span> color<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'">&lt;/li>&lt;li style="background-color:'</span> <span class="token operator">+</span> color<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'">&lt;/li>&lt;/ul>More &lt;/div>&lt;/div>'</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> html    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> <span class="token function-variable function">github_main_box</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">monthchange<span class="token punctuation">,</span> git_data<span class="token punctuation">,</span> user<span class="token punctuation">,</span> color<span class="token punctuation">,</span> total<span class="token punctuation">,</span> thisweekdatacore<span class="token punctuation">,</span> weekdatacore<span class="token punctuation">,</span> oneyearbeforeday<span class="token punctuation">,</span> thisday<span class="token punctuation">,</span> aweekago<span class="token punctuation">,</span> amonthago</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> html <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> canvasbox <span class="token operator">=</span> <span class="token function">github_canvas_box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> infobox <span class="token operator">=</span> <span class="token function">github_info_box</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> style <span class="token operator">=</span> <span class="token function">github_main_style</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        html <span class="token operator">+=</span> <span class="token string">'&lt;div class="position-relative">&lt;div class="border py-2 graph-before-activity-overview">&lt;div class="js-gitcalendar-graph mx-md-2 mx-3 d-flex flex-column flex-items-end flex-xl-items-center overflow-hidden pt-1 is-graph-loading graph-canvas gitcalendar-graph height-full text-center">'</span> <span class="token operator">+</span> canvasbox <span class="token operator">+</span> <span class="token string">'&lt;/div>'</span> <span class="token operator">+</span> infobox <span class="token operator">+</span> <span class="token string">'&lt;/div>&lt;/div>'</span><span class="token punctuation">;</span>        html <span class="token operator">+=</span> <span class="token string">'&lt;div style="display:flex;width:100%">&lt;div class="contrib-column contrib-column-first table-column">&lt;span class="text-muted">过去一年提交&lt;/span>&lt;span class="contrib-number">'</span> <span class="token operator">+</span> total <span class="token operator">+</span> <span class="token string">'&lt;/span>&lt;span class="text-muted">'</span> <span class="token operator">+</span> oneyearbeforeday <span class="token operator">+</span> <span class="token string">'&amp;nbsp;-&amp;nbsp;'</span> <span class="token operator">+</span> thisday <span class="token operator">+</span> <span class="token string">'&lt;/span>&lt;/div>&lt;div class="contrib-column table-column">&lt;span class="text-muted">最近一月提交&lt;/span>&lt;span class="contrib-number">'</span> <span class="token operator">+</span> thisweekdatacore <span class="token operator">+</span> <span class="token string">'&lt;/span>&lt;span class="text-muted">'</span> <span class="token operator">+</span> amonthago <span class="token operator">+</span> <span class="token string">'&amp;nbsp;-&amp;nbsp;'</span> <span class="token operator">+</span> thisday <span class="token operator">+</span> <span class="token string">'&lt;/span>&lt;/div>&lt;div class="contrib-column table-column">&lt;span class="text-muted">最近一周提交&lt;/span>&lt;span class="contrib-number">'</span> <span class="token operator">+</span> weekdatacore <span class="token operator">+</span> <span class="token string">'&lt;/span>&lt;span class="text-muted">'</span> <span class="token operator">+</span> aweekago <span class="token operator">+</span> <span class="token string">'&amp;nbsp;-&amp;nbsp;'</span> <span class="token operator">+</span> thisday <span class="token operator">+</span> <span class="token string">'&lt;/span>&lt;/div>&lt;/div>'</span> <span class="token operator">+</span> style<span class="token punctuation">;</span>        <span class="token keyword">return</span> html    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> <span class="token function-variable function">github_main_style</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        style <span class="token operator">=</span> <span class="token string">'&lt;style>#github_container&#123;text-align:center;margin:0 auto;width:100%;display:flex;display:-webkit-flex;justify-content:center;align-items:center;flex-wrap:wrap;&#125;.gitcalendar-graph text.wday,.gitcalendar-graph text.month&#123;font-size:10px;fill:#aaa;&#125;.contrib-legend&#123;text-align:right;padding:0 14px 10px 0;display:inline-block;float:right;&#125;.contrib-legend .legend&#123;display:inline-block;list-style:none;margin:0 5px;position:relative;bottom:-1px;padding:0;&#125;.contrib-legend .legend li&#123;display:inline-block;width:10px;height:10px;&#125;.text-small&#123;font-size:12px;color:#767676;&#125;.gitcalendar-graph&#123;padding:15px 0 0;text-align:center;&#125;.contrib-column&#123;text-align:center;border-left:1px solid #ddd;border-top:1px solid #ddd;font-size:11px;&#125;.contrib-column-first&#123;border-left:0;&#125;.table-column&#123;padding:10px;display:table-cell;flex:1;vertical-align:top;&#125;.contrib-number&#123;font-weight:300;line-height:1.3em;font-size:24px;display:block;&#125;.gitcalendar img.spinner&#123;width:70px;margin-top:50px;min-height:70px;&#125;.monospace&#123;text-align:center;color:#000;font-family:monospace;&#125;.monospace a&#123;color:#1D75AB;text-decoration:none;&#125;.contrib-footer&#123;font-size:11px;padding:0 10px 12px;text-align:left;width:100%;box-sizing:border-box;height:26px;&#125;.left.text-muted&#123;float:left;margin-left:9px;color:#767676;&#125;.left.text-muted a&#123;color:#4078c0;text-decoration:none;&#125;.left.text-muted a:hover,.monospace a:hover&#123;text-decoration:underline;&#125;h2.f4.text-normal.mb-3&#123;display:none;&#125;.float-left.text-gray&#123;float:left;&#125;#user-activity-overview&#123;display:none;&#125;.day-tooltip&#123;white-space:nowrap;position:absolute;z-index:99999;padding:10px;font-size:12px;color:#959da5;text-align:center;background:rgba(0,0,0,.85);border-radius:3px;display:none;pointer-events:none;&#125;.day-tooltip strong&#123;color:#dfe2e5;&#125;.day-tooltip.is-visible&#123;display:block;&#125;.day-tooltip:after&#123;position:absolute;bottom:-10px;left:50%;width:5px;height:5px;box-sizing:border-box;margin:0 0 0 -5px;content:" ";border:5px solid transparent;border-top-color:rgba(0,0,0,.85)&#125;.position-relative&#123;width:100%;&#125;@media screen and (max-width:650px)&#123;.contrib-column&#123;display:none&#125;&#125;.angle-wrapper&#123;z-index:9999;display:inline;width:200px;height:40px;position:relative;padding:5px 0;background:rgba(0,0,0,0.8);border-radius:8px;text-align:center;color:white;&#125;.angle-box&#123;position:fixed;padding:10px&#125;.angle-wrapper span&#123;padding-bottom:1em;&#125;.angle-wrapper:before&#123;content:"";width:0;height:0;border:10px solid transparent;border-top-color:rgba(0,0,0,0.8);position:absolute;left:47.5%;top:100%;&#125;&lt;/style>'</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> style    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token function-variable function">append_div_gitcalendar</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">parent<span class="token punctuation">,</span> text</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> text <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> temp <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        temp<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> text<span class="token punctuation">;</span>        <span class="token keyword">var</span> frag <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createDocumentFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>firstChild<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            frag<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>firstChild<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        parent<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>frag<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        parent<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token function-variable function">loading_git</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">color</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    loading <span class="token operator">=</span> <span class="token string">'&lt;div id="github_loading" style="height:100%;display: flex;align-items: center;justify-content: center;">&lt;svg style="height:50px;" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"  viewBox="0 0 50 50" style="enable-background:new 0 0 50 50" xml:space="preserve">&lt;path fill="'</span> <span class="token operator">+</span> color <span class="token operator">+</span> <span class="token string">'" d="M25.251,6.461c-10.318,0-18.683,8.365-18.683,18.683h4.068c0-8.071,6.543-14.615,14.615-14.615V6.461z" transform="rotate(275.098 25 25)">&lt;animateTransform attributeType="xml" attributeName="transform" type="rotate" from="0 25 25" to="360 25 25" dur="0.6s" repeatCount="indefinite">&lt;/animateTransform>&lt;/path>&lt;/svg>&lt;/div>'</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> loading<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> git_user <span class="token operator">=</span> <span class="token string">'&lt;username>'</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> github_container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">'github_container'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> github_loading <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'github_loading'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> git_purple <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'#ebedf0'</span><span class="token punctuation">,</span> <span class="token string">'#fdcdec'</span><span class="token punctuation">,</span> <span class="token string">'#fc9bd9'</span><span class="token punctuation">,</span> <span class="token string">'#fa6ac5'</span><span class="token punctuation">,</span> <span class="token string">'#f838b2'</span><span class="token punctuation">,</span> <span class="token string">'#f5089f'</span><span class="token punctuation">,</span> <span class="token string">'#c4067e'</span><span class="token punctuation">,</span> <span class="token string">'#92055e'</span><span class="token punctuation">,</span> <span class="token string">'#540336'</span><span class="token punctuation">,</span> <span class="token string">'#48022f'</span><span class="token punctuation">,</span> <span class="token string">'#30021f'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> git_green <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'#ebedf0'</span><span class="token punctuation">,</span> <span class="token string">'#f0fff4'</span><span class="token punctuation">,</span> <span class="token string">'#dcffe4'</span><span class="token punctuation">,</span> <span class="token string">'#bef5cb'</span><span class="token punctuation">,</span> <span class="token string">'#85e89d'</span><span class="token punctuation">,</span> <span class="token string">'#34d058'</span><span class="token punctuation">,</span> <span class="token string">'#28a745'</span><span class="token punctuation">,</span> <span class="token string">'#22863a'</span><span class="token punctuation">,</span> <span class="token string">'#176f2c'</span><span class="token punctuation">,</span> <span class="token string">'#165c26'</span><span class="token punctuation">,</span> <span class="token string">'#144620'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> git_blue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'#ebedf0'</span><span class="token punctuation">,</span> <span class="token string">'#f1f8ff'</span><span class="token punctuation">,</span> <span class="token string">'#dbedff'</span><span class="token punctuation">,</span> <span class="token string">'#c8e1ff'</span><span class="token punctuation">,</span> <span class="token string">'#79b8ff'</span><span class="token punctuation">,</span> <span class="token string">'#2188ff'</span><span class="token punctuation">,</span> <span class="token string">'#0366d6'</span><span class="token punctuation">,</span> <span class="token string">'#005cc5'</span><span class="token punctuation">,</span> <span class="token string">'#044289'</span><span class="token punctuation">,</span> <span class="token string">'#032f62'</span><span class="token punctuation">,</span> <span class="token string">'#05264c'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> git_pink <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'#ebedf0'</span><span class="token punctuation">,</span> <span class="token string">'#fdcdec'</span><span class="token punctuation">,</span> <span class="token string">'#fc9bd9'</span><span class="token punctuation">,</span> <span class="token string">'#fa6ac5'</span><span class="token punctuation">,</span> <span class="token string">'#f838b2'</span><span class="token punctuation">,</span> <span class="token string">'#f5089f'</span><span class="token punctuation">,</span> <span class="token string">'#c4067e'</span><span class="token punctuation">,</span> <span class="token string">'#92055e'</span><span class="token punctuation">,</span> <span class="token string">'#540336'</span><span class="token punctuation">,</span> <span class="token string">'#48022f'</span><span class="token punctuation">,</span> <span class="token string">'#30021f'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> git_color <span class="token operator">=</span> git_purple<span class="token punctuation">;</span>    <span class="token function">append_div_gitcalendar</span><span class="token punctuation">(</span>github_container<span class="token punctuation">,</span> <span class="token function">loading_git</span><span class="token punctuation">(</span>git_color<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">github_canlendar</span><span class="token punctuation">(</span>git_user<span class="token punctuation">,</span> git_color<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码需要修改第269行的<code>&lt;username&gt;</code>为自己的GitHub用户名，第276行自定义Calendar颜色主题，以及第2行的<code>&lt;your-api&gt;</code>。</p><p>这里同样需要自建一个api来调用，且看下文。</p><p>在主题配置文件的<code>inject</code>的<code>head</code>或<code>bottom</code>配置下增加一条：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">-</span> &lt;script data<span class="token punctuation">-</span>pjax src="/js/githubcalendar.js"<span class="token punctuation">></span>&lt;/script<span class="token punctuation">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如不需要适配pjax则将<code>data-pjax</code>去掉，如主题不支持在配置文件中<code>inject</code>则自行想办法将该js文件引入。</p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="自建GitHub-Calendar-API"><a href="#自建GitHub-Calendar-API" class="headerlink" title="自建GitHub Calendar API"></a>自建GitHub Calendar API</h2><p>为啥要自建？当然你完全可以用我的api，但毕竟如果用别人的服务，哪天服务崩了也会影响自己，所以反正这个建起来比较快，又是免费的，何乐而不为？</p><p>这个东西的原理说白了，其实就是将GitHub个人主页上显示的东西爬取下来，按一定格式发送到前端，由前端解析渲染，因此如果你有自己的公网服务器，可以直接在服务器上运行下面的代码并且开放到公网：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: UTF-8 -*-</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> re<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> urlparse<span class="token punctuation">,</span> parse_qs<span class="token keyword">from</span> http<span class="token punctuation">.</span>server <span class="token keyword">import</span> BaseHTTPRequestHandler<span class="token punctuation">,</span>HTTPServer<span class="token keyword">import</span> json<span class="token keyword">def</span> <span class="token function">list_split</span><span class="token punctuation">(</span>items<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>items<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i <span class="token operator">+</span> n<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">getdata</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 2024-03-29 定义 headers 请求头</span>    <span class="token comment"># 请见 https://github.com/yuhengwei2001/python_github_calendar_api/commit/0f37cfc003f09e99a1892602d8bc2b38137899d2#diff-b014e93fcab9bae29f453d7a616da5eac2f02947f32d02a1a1bf200eeaab5a39L11</span>    headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">'Referer'</span><span class="token punctuation">:</span> <span class="token string">'https://github.com/'</span><span class="token operator">+</span> name<span class="token punctuation">,</span>        <span class="token string">'Sec-Ch-Ua'</span><span class="token punctuation">:</span> <span class="token string">'"Chromium";v="122", "Not(A:Brand";v="24", "Microsoft Edge";v="122"'</span><span class="token punctuation">,</span>        <span class="token string">'Sec-Ch-Ua-Mobile'</span><span class="token punctuation">:</span> <span class="token string">'?0'</span><span class="token punctuation">,</span>        <span class="token string">'Sec-Ch-Ua-Platform'</span><span class="token punctuation">:</span> <span class="token string">'"Windows"'</span><span class="token punctuation">,</span>        <span class="token string">'Sec-Fetch-Dest'</span><span class="token punctuation">:</span> <span class="token string">'empty'</span><span class="token punctuation">,</span>        <span class="token string">'Sec-Fetch-Mode'</span><span class="token punctuation">:</span> <span class="token string">'cors'</span><span class="token punctuation">,</span>        <span class="token string">'Sec-Fetch-Site'</span><span class="token punctuation">:</span> <span class="token string">'same-origin'</span><span class="token punctuation">,</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36 Edg/122.0.0.0'</span><span class="token punctuation">,</span>        <span class="token string">'X-Requested-With'</span><span class="token punctuation">:</span> <span class="token string">'XMLHttpRequest'</span>    <span class="token punctuation">&#125;</span>    <span class="token comment"># 发送请求时添加 headers 请求头</span>    <span class="token comment"># gitpage = requests.get("https://github.com/" + name)</span>    gitpage <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://github.com/"</span> <span class="token operator">+</span> name  <span class="token operator">+</span> <span class="token string">"?action=show&amp;controller=profiles&amp;tab=contributions&amp;user_id="</span><span class="token operator">+</span> name<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    data <span class="token operator">=</span> gitpage<span class="token punctuation">.</span>text        <span class="token comment"># 2023-11-22 更新正则 https://github.com/Zfour/python_github_calendar_api/issues/18</span>    datadatereg <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'data-date="(.*?)" id="contribution-day-component'</span><span class="token punctuation">)</span>    datacountreg <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'&lt;tool-tip .*?class="sr-only position-absolute">(.*?) contribution'</span><span class="token punctuation">)</span>        datadate <span class="token operator">=</span> datadatereg<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    datacount <span class="token operator">=</span> datacountreg<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    datacount <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token string">"No"</span> <span class="token keyword">else</span> i <span class="token keyword">for</span> i <span class="token keyword">in</span> datacount<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 检查datadate和datacount是否为空</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> datadate <span class="token keyword">or</span> <span class="token keyword">not</span> datacount<span class="token punctuation">:</span>        <span class="token comment"># 处理空数据情况</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token string">"total"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"contributions"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>            <span class="token comment"># 将datadate和datacount按照字典序排序</span>    sorted_data <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>datadate<span class="token punctuation">,</span> datacount<span class="token punctuation">)</span><span class="token punctuation">)</span>    datadate<span class="token punctuation">,</span> datacount <span class="token operator">=</span> <span class="token builtin">zip</span><span class="token punctuation">(</span><span class="token operator">*</span>sorted_data<span class="token punctuation">)</span>        contributions <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>datacount<span class="token punctuation">)</span>    datalist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> index<span class="token punctuation">,</span> item <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>datadate<span class="token punctuation">)</span><span class="token punctuation">:</span>        itemlist <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"date"</span><span class="token punctuation">:</span> item<span class="token punctuation">,</span> <span class="token string">"count"</span><span class="token punctuation">:</span> datacount<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">&#125;</span>        datalist<span class="token punctuation">.</span>append<span class="token punctuation">(</span>itemlist<span class="token punctuation">)</span>    datalistsplit <span class="token operator">=</span> list_split<span class="token punctuation">(</span>datalist<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span>    returndata <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">"total"</span><span class="token punctuation">:</span> contributions<span class="token punctuation">,</span>        <span class="token string">"contributions"</span><span class="token punctuation">:</span> datalistsplit    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> returndata<span class="token keyword">class</span> <span class="token class-name">handler</span><span class="token punctuation">(</span>BaseHTTPRequestHandler<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">do_GET</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        parsed_path <span class="token operator">=</span> urlparse<span class="token punctuation">(</span>self<span class="token punctuation">.</span>path<span class="token punctuation">)</span>        query_params <span class="token operator">=</span> parse_qs<span class="token punctuation">(</span>parsed_path<span class="token punctuation">.</span>query<span class="token punctuation">)</span>        user <span class="token operator">=</span> query_params<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment"># 获取'user'参数的值，如果不存在则默认为None</span>        data <span class="token operator">=</span> getdata<span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token keyword">if</span> user <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token string">"error"</span><span class="token punctuation">:</span> <span class="token string">"User parameter not provided"</span><span class="token punctuation">&#125;</span>        self<span class="token punctuation">.</span>send_response<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>send_header<span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Origin'</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>send_header<span class="token punctuation">(</span><span class="token string">'Content-type'</span><span class="token punctuation">,</span> <span class="token string">'application/json'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>end_headers<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>wfile<span class="token punctuation">.</span>write<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此代码通过<code>?user=</code>参数进行查询，这与前面通过插件安装的方法有所不同，插件是直接把用户名作为查询参数的：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> git_githubapiurl <span class="token operator">=</span> <span class="token string">"https://python-github-calendar-api.vercel.app/api?"</span> <span class="token operator">+</span> git_user<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果前面通过插件安装，则需要注意修改接口代码或修改插件查询参数格式。</p><hr><p>然而并不想为了运行这个玩意在服务器上开一个进程，那么我们还可以利用vercel这种平台来很方便地部署。</p><p>首先，显然需要注册一个vercel账号，然后选择Add New-&gt;Project，选择”Import Third-Party Git Repository →”，在其中粘贴以下链接：</p><p><code>https://github.com/Zfour/python_github_calendar_api</code></p><p>或直接粘贴我的：<code>https://github.com/windshadow233/python_github_calendar_api</code></p><p>然后vercel会让你创建一个存储库，随便命名即可（可以同样命名为python_github_calendar_api），公开或私有皆可。接下来等待vercel部署成功。</p><p>不过这里有一个小坑，直接一路啥都不改部署下来的服务，无论怎么查询都返回500，Google了半天发现似乎是Node版本的锅，在vercel项目的Settings里面将Node的版本从20.x降为18.x并重新部署，即可解决问题。</p><p><img src="https://fastly.jsdelivr.net/gh/windshadow233/BlogStorage@files/png/55cd9c468b5a52f6ef2c91d27a9f3350.png" alt="image-20240510034642117"></p><p>由于vercel的域名已经被污染了，这里我们可以绑定一个自己的域名。</p><p>前往Settings-&gt;Domains，添加自己的域名，然后将该域名的CNAME解析到<code>cname.vercel-dns.com</code>即可。</p><p>在浏览器中访问<code>https://&lt;your-domain&gt;/api?user=&lt;username&gt;</code>，如果服务正常，则可以获取到数据。</p><hr><p>最后在前面的文件中修改api链接。</p><div class="tabs" id="tab2"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="tab2-1">插件安装</button><button type="button" class="tab " data-href="tab2-2">魔改安装</button></ul><div class="tab-contents"><div class="tab-item-content active" id="tab2-1"><p>修改前面网站配置文件里的<code>githubcalendar.api</code>参数。</p></div><div class="tab-item-content" id="tab2-2"><p>修改前面js文件里的<code>git_githubapiurl</code>参数。</p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><p>最后的最后，Hexo一键三连即可！</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;逛别人的博客时，发现有许多博主的主页上会嵌入一个Github Calendar，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img</summary>
        
      
    
    
    
    <category term="博客相关" scheme="https://blog.fyz666.xyz/categories/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/"/>
    
    <category term="Hexo魔改" scheme="https://blog.fyz666.xyz/categories/hexo%E9%AD%94%E6%94%B9/"/>
    
    
    <category term="Web前端" scheme="https://blog.fyz666.xyz/tags/web%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Hexo" scheme="https://blog.fyz666.xyz/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>使用GitHub Actions自动部署Hexo博客</title>
    <link href="https://blog.fyz666.xyz/blog/11277/"/>
    <id>https://blog.fyz666.xyz/blog/11277/</id>
    <published>2024-05-05T17:51:57.000Z</published>
    <updated>2024-05-11T08:15:27.837Z</updated>
    
    <content type="html"><![CDATA[<p>为了更好地备份我的博客，我将其源码推送到了一个GitHub仓库。之前了解过一点GitHub Actions，遂想着通过这个东西来自动部署博客到我的服务器，一方面可以熟悉一下GitHub Actions的操作，另一方面顺便解决了在没有带电脑的时候无法修改博客的问题。</p><hr><h2 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h2><p>创建一个SSH密钥，用于此仓库远程连接服务器。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-b</span> <span class="token number">4096</span> <span class="token parameter variable">-C</span> <span class="token string">"git@github.com:windshadow233/blog.git"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里，<code>windshadow233/blog</code>是我的仓库名。</p><p>将此公钥上传到服务器，并将私钥粘贴到仓库的secrets下，命名为<code>SSH_PRIVATE_KEY</code>：</p><p><img src="https://fastly.jsdelivr.net/gh/windshadow233/BlogStorage@files/png/5ad4b9aae071cf3ea297ddc88713fd76.png" alt="image-20240505194134676"></p><p>创建变量<code>SERVER_IP</code>，值为服务器的ip地址：</p><p><img src="https://fastly.jsdelivr.net/gh/windshadow233/BlogStorage@files/png/3f3d7454c0b67a312900b0610169c95c.png" alt="image-20240505194228194"></p><h2 id="创建workflow文件"><a href="#创建workflow文件" class="headerlink" title="创建workflow文件"></a>创建workflow文件</h2><p>在仓库根目录创建目录：<code>.github/workflows/</code>，然后在该目录下创建文件：<code>deploy.yml</code></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">name</span><span class="token punctuation">:</span> Deploy Site<span class="token key atrule">on</span><span class="token punctuation">:</span>  <span class="token key atrule">push</span><span class="token punctuation">:</span>    <span class="token key atrule">branches</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> main    <span class="token key atrule">paths</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">'source/**'</span>      <span class="token punctuation">-</span> <span class="token string">'themes/**'</span>      <span class="token punctuation">-</span> <span class="token string">'_config.yml'</span>      <span class="token punctuation">-</span> <span class="token string">'_config.butterfly.yml'</span>  <span class="token key atrule">workflow_dispatch</span><span class="token punctuation">:</span><span class="token key atrule">jobs</span><span class="token punctuation">:</span>  <span class="token key atrule">build-and-deploy</span><span class="token punctuation">:</span>    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest    <span class="token key atrule">steps</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout      <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v4    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Set up Node      <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@v4      <span class="token key atrule">with</span><span class="token punctuation">:</span>        <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token string">'21.7.1'</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Cache Node modules      <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/cache@v4      <span class="token key atrule">with</span><span class="token punctuation">:</span>        <span class="token key atrule">path</span><span class="token punctuation">:</span> node_modules        <span class="token key atrule">key</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> runner.os <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">-</span>node<span class="token punctuation">-</span>$<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> hashFiles('<span class="token important">**/package-lock.json')</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>        <span class="token key atrule">restore-keys</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          $&#123;&#123; runner.os &#125;&#125;-node-</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Install Dependencies      <span class="token key atrule">run</span><span class="token punctuation">:</span> npm install    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Generate Static Files      <span class="token key atrule">run</span><span class="token punctuation">:</span> npm run b    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Set up SSH key      <span class="token key atrule">uses</span><span class="token punctuation">:</span> webfactory/ssh<span class="token punctuation">-</span>agent@v0.9.0      <span class="token key atrule">with</span><span class="token punctuation">:</span>        <span class="token key atrule">ssh-private-key</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> secrets.SSH_PRIVATE_KEY <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Deploy with Rsync      <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">        ssh-keyscan -p 22 -H $&#123;&#123; vars.SERVER_IP &#125;&#125; >> ~/.ssh/known_hosts        rsync -avz --delete -e "ssh -p 22" ./public/ root@$&#123;&#123; vars.SERVER_IP &#125;&#125;:/var/www/blog/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中<code>npm run b</code>是我定义在<code>package.json</code>文件中的命令。上述文件表示在检测到<code>main</code>分支的<code>source/,themes/</code>目录以及配置文件的发生变更时，自动触发GitHub Actions。</p><p>自此，GitHub Actions配置完成，现在对仓库提交commit时就会自动触发Hexo的部署流程。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;为了更好地备份我的博客，我将其源码推送到了一个GitHub仓库。之前了解过一点GitHub Actions，遂想着通过这个东西来自动部署博客到我的服务器，一方面可以熟悉一下GitHub</summary>
        
      
    
    
    
    <category term="博客相关" scheme="https://blog.fyz666.xyz/categories/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/"/>
    
    
    <category term="Hexo" scheme="https://blog.fyz666.xyz/tags/hexo/"/>
    
    <category term="GitHub" scheme="https://blog.fyz666.xyz/tags/github/"/>
    
    <category term="GitHub Actions" scheme="https://blog.fyz666.xyz/tags/github-actions/"/>
    
  </entry>
  
  <entry>
    <title>按创建时间管理Hexo博客的文章</title>
    <link href="https://blog.fyz666.xyz/blog/11229/"/>
    <id>https://blog.fyz666.xyz/blog/11229/</id>
    <published>2024-04-27T02:01:57.000Z</published>
    <updated>2024-05-11T08:15:27.837Z</updated>
    
    <content type="html"><![CDATA[<p>用Hexo写博客会有一个比较头疼的问题，即，Hexo默认将所有的文章都放在<code>source/_posts</code>这一级目录下，一旦文章多起来，就很乱七八糟，不好管理。如果能按时间将其归类，例如细化到月份，管理起来就会清晰很多。</p><div class="tabs" id="tab1"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="tab1-1">修改Hexo的配置文件</button><button type="button" class="tab " data-href="tab1-2">自己写脚本实现</button></ul><div class="tab-contents"><div class="tab-item-content active" id="tab1-1"><p><code>_config.yml</code>文件提供了一个配置项：<code>new_post_name</code>，可以用来定义文章的路径，将其值设置为<code>:year/:month/:title.md</code>即可。</p></div><div class="tab-item-content" id="tab1-2"><p>如果对文章路径有其他更个性化的需求，通过改配置文件的方法就显得不那么自由了，这一需求也可以通过编写脚本实现。</p><p>Hexo定义了一个处理文章路径的过滤器：<a href="https://hexo.io/zh-cn/api/filter#new-post-path">new_post_path</a>，可以通过对其注册一个函数来实现对文章本地路径的修改。与<a href="/blog/11219/">上篇文章</a>类似，我们在根目录的<code>scripts</code>目录下创建一个新的文件：<code>modify-post-path.js</code>，内容如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hexo<span class="token punctuation">.</span>extend<span class="token punctuation">.</span>filter<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">'new_post_path'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">filePath</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>filePath<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'source'</span><span class="token punctuation">,</span> <span class="token string">'_posts'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> filePath<span class="token punctuation">;</span>  <span class="token keyword">var</span> filename <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> dirname <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">dirname</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> year <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> month <span class="token operator">=</span> <span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> newPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>dirname<span class="token punctuation">,</span> year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> newPath<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该函数首先忽略了所有<code>page</code>，只对<code>post</code>页面进行处理，接下来的内容就不说了，非常容易理解。</p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><hr><p>由于我已设置了<code>permalink: /blog/:id/</code>，因此改变文件的路径不会影响对应文章在网页中的URL。</p><p>最后，根据我自己的需求，我需要修改一下<a href="/blog/11219/">上篇文章</a>中提到的自动生成唯一自增ID的函数。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs-extra'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> fm <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'hexo-front-matter'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hexo<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'new'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">post</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> postsDir <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'source'</span><span class="token punctuation">,</span> <span class="token string">'_posts'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>post<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>postsDir<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> fileName <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> years <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readdirSync</span><span class="token punctuation">(</span>postsDir<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> year <span class="token keyword">of</span> years<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> months <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readdirSync</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>postsDir<span class="token punctuation">,</span> year<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> month <span class="token keyword">of</span> months<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> files <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readdirSync</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>postsDir<span class="token punctuation">,</span> year<span class="token punctuation">,</span> month<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> postFiles <span class="token operator">=</span> files<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">file</span> <span class="token operator">=></span> file<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">'.md'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> file <span class="token operator">!==</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>postFiles<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> maxId <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        postFiles<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">file</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token keyword">let</span> content <span class="token operator">=</span> fm<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>postsDir<span class="token punctuation">,</span> year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> content<span class="token punctuation">.</span>id <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            maxId <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxId<span class="token punctuation">,</span> content<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        content <span class="token operator">=</span> fm<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>        content<span class="token punctuation">.</span>id <span class="token operator">=</span> maxId <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>post<span class="token punctuation">.</span>path<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> -> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>content<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span>path<span class="token punctuation">,</span> <span class="token string">'---\n'</span> <span class="token operator">+</span> fm<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于已经将文章按时间归类了，而文章的<code>id</code>又是自增的，因此只需要找到最新的月份目录即可确定当前的最大<code>id</code>。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;用Hexo写博客会有一个比较头疼的问题，即，Hexo默认将所有的文章都放在&lt;code&gt;source/_posts&lt;/code&gt;这一级目录下，一旦文章多起来，就很乱七八糟，不好管理。如果能按时间将其归类，例如细化到月份，管理起来就会清晰很多。&lt;/p&gt;
&lt;div</summary>
        
      
    
    
    
    <category term="博客相关" scheme="https://blog.fyz666.xyz/categories/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/"/>
    
    <category term="Hexo魔改" scheme="https://blog.fyz666.xyz/categories/hexo%E9%AD%94%E6%94%B9/"/>
    
    
    <category term="NodeJS" scheme="https://blog.fyz666.xyz/tags/nodejs/"/>
    
    <category term="Hexo" scheme="https://blog.fyz666.xyz/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>为Hexo文章自动生成唯一的自增ID</title>
    <link href="https://blog.fyz666.xyz/blog/11219/"/>
    <id>https://blog.fyz666.xyz/blog/11219/</id>
    <published>2024-04-25T18:37:04.000Z</published>
    <updated>2024-05-11T08:15:27.837Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/blog/11025/">前文</a>曾提到过我将博客从WordPress迁移到Hexo时，希望保留原有的永久链接格式：<code>/blog/:id/</code>，然而Hexo本身并不支持自动生成这样的<code>id</code>，虽然有一些插件例如<a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a>支持生成这种数字<code>id</code>，但好像也不是我想要的样子。</p><p>我仍希望保持之前那种WordPress下的格式，即每篇文章的<code>id</code>单调递增，且每次的递增值比较“随机”（这个自增在WordPress中是MySQL数据库的行为，MySQL会为<code>wp_post</code>表中的所有内容分配<code>id</code>，而这些内容不仅包含了已发布的文章，还包含文章中插入的图片、文章的修订版本以及文章的自动保存版本等等，因此在发布文章时，往往这个新文章的<code>id</code>会看上去比较随机地递增）。</p><p>而现在Hexo没有数据库了，但我仍想保持这种随机增长的文章<code>id</code>风格。那要怎么办呢？每次手动算<code>id</code>自然不太方便，不妨自己来写个插件。</p><hr><p>通过阅读<a href="https://hexo.io/zh-cn/api/events">Hexo的文档</a>，我简单了解了一下如何在Hexo中监听事件，例如在“生成新文章后”触发一些自定义的函数。首先在博客的根目录下（这里的根目录是项目的根目录，即包含了博客配置文件的目录）创建<code>scripts</code>文件夹，然后在下面创建的<code>javascript</code>文件会自动被Hexo读取执行。</p><p>先安装一个包：<code>fs-extra</code>，是<code>fs</code>模块的扩展。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> fs-extra <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我安装的版本：<code>&quot;fs-extra&quot;: &quot;^11.2.0&quot;</code></p><p>在<code>scripts</code>目录下创建一个<code>auto-id.js</code>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs-extra'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> fm <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'hexo-front-matter'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hexo<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'new'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">post</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>post<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'source'</span><span class="token punctuation">,</span> <span class="token string">'_posts'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> maxId <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  fs<span class="token punctuation">.</span><span class="token function">readdir</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'source'</span><span class="token punctuation">,</span> <span class="token string">'_posts'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> files</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err<span class="token punctuation">;</span>    files<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token parameter">fpath</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>fpath<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">'.md'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> content <span class="token operator">=</span> fm<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'source'</span><span class="token punctuation">,</span> <span class="token string">'_posts'</span><span class="token punctuation">,</span> fpath<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> content<span class="token punctuation">.</span>id <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          maxId <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxId<span class="token punctuation">,</span> content<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    content <span class="token operator">=</span> fm<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span>path<span class="token punctuation">,</span> <span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    content<span class="token punctuation">.</span>id <span class="token operator">=</span> maxId <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>post<span class="token punctuation">.</span>path<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> -> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>content<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span>path<span class="token punctuation">,</span> <span class="token string">'---\n'</span> <span class="token operator">+</span> fm<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后遍历一遍文章，取出当前最大的<code>id</code>（这个操作有点蠢，不过暂且这样吧，懒得用其他方式去做持久化），然后在此基础上加一个随机值，就得到了新的<code>id</code>，最后将它写入到新文章的<code>front-matter</code>中。不过不知道为什么最后得手动在最前面添加<code>---\n</code>，试了一下<code>fm.stringify</code>的参数<code>prefixSeparator</code>也并没有啥用。</p><p>这样就相当于写了一个非常简单的插件了，这个插件可以为文章自动生成一个<code>id</code>，效果如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">╰─➤  npx hexo new post <span class="token string">"为Hexo文章自动生成唯一的自增ID"</span>INFO  Validating configINFO  <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>      <span class="token comment">#####  #    # ##### ##### ###### #####  ###### #      #   #</span>      <span class="token comment">#    # #    #   #     #   #      #    # #      #       # #</span>      <span class="token comment">#####  #    #   #     #   #####  #    # #####  #        #</span>      <span class="token comment">#    # #    #   #     #   #      #####  #      #        #</span>      <span class="token comment">#    # #    #   #     #   #      #   #  #      #        #</span>      <span class="token comment">#####   ####    #     #   ###### #    # #      ######   #</span>                            <span class="token number">4.14</span>.0-b1  <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>INFO  Created: ~/<span class="token punctuation">..</span>./source/_posts/为Hexo文章自动生成唯一的自增ID.md<span class="token punctuation">..</span>./source/_posts/为Hexo文章自动生成唯一的自增ID.md -<span class="token operator">></span> <span class="token number">11219</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a</summary>
        
      
    
    
    
    <category term="博客相关" scheme="https://blog.fyz666.xyz/categories/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/"/>
    
    <category term="Hexo魔改" scheme="https://blog.fyz666.xyz/categories/hexo%E9%AD%94%E6%94%B9/"/>
    
    
    <category term="NodeJS" scheme="https://blog.fyz666.xyz/tags/nodejs/"/>
    
    <category term="Hexo" scheme="https://blog.fyz666.xyz/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>gulp-clean-css插件优化时的bug及解决方案</title>
    <link href="https://blog.fyz666.xyz/blog/11197/"/>
    <id>https://blog.fyz666.xyz/blog/11197/</id>
    <published>2024-04-18T18:13:10.000Z</published>
    <updated>2024-05-11T08:15:27.837Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/blog/11084/">之前的文章</a>提到我为了控制静态文件版本使用了一个叫Gulp的包，同时为了压缩css文件大小，在其中使用了一个名为<a href="https://github.com/scniro/gulp-clean-css">gulp-clean-css</a>的插件，不过这个插件存在一个<del>比较严重</del>其实也不是很严重的bug。</p><hr><p>一次，我魔改完主题样式，在本地测试效果良好的前提下，啪啪一顿执行<code>npm run b &amp;&amp; npm run d</code>将其部署上服务器，结果从手机上打开网站一看，发现菜单样式完全崩坏，与本地测试时看到的样子截然不同。</p><p>花了几分钟定位问题，发现优化完的css文件中有一些奇怪的东西：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.menus_item_child li:not(#sidebar-menusli)</span><span class="token punctuation">&#123;</span>    ...<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>显然该样式本来应该是这样的：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.menus_item_child li:not(#sidebar-menus li)</span><span class="token punctuation">&#123;</span>    ...<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>插件将<code>:not</code>选择器里的空格优化掉了。在<code>clean-css</code>的GitHub issues下面，果然找到了多条相关的bug，例如：</p><p><a href="https://github.com/clean-css/clean-css/issues/996">Spaces removed from :not statement</a></p><p><a href="https://github.com/clean-css/clean-css/issues/1175">Issue with minifying not pseudo-class alongside using selector inside it</a></p><p>第一条issue下面，项目的维护者回复:</p><blockquote><p>Fixed in <code>e651f24</code></p></blockquote><p>第二条则有其他用户的评论:</p><blockquote><p>I tested the version <code>5.1.3</code> and this issue is fixed in this version.</p></blockquote><p>于是，只要将gulp-clean-css插件依赖的clean-css版本修改到<code>5.1.3</code>，应该就可以解决问题。</p><p>然而直接改<code>package.json</code>应该不太行，于是我又找到了一条<a href="https://github.com/scniro/gulp-clean-css/issues/91">相关的issue</a>，下面有人评论：</p><blockquote><p>Here’s a fork that appears better maintained <a href="https://github.com/aptuitiv/gulp-clean-css">https://github.com/aptuitiv/gulp-clean-css</a></p></blockquote><p>火速卸载<code>gulp-clean-css</code>，再安装<code>@aptuitiv/gulp-clean-css</code>:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> uninstall gulp-clean-css <span class="token parameter variable">--save</span><span class="token function">npm</span> <span class="token function">install</span> @aptuitiv/gulp-clean-css <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>再将之前的<code>gulpfile.js</code>修改一下:</p><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff"><span class="token coord">@@ -1,5 +1,5 @@</span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">const gulp = require('gulp');</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">const cleancss = require('gulp-clean-css');</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">const cleancss = require('@aptuitiv/gulp-clean-css');</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">const uglify = require('gulp-uglify-es').default;</span><span class="token prefix unchanged"> </span><span class="token line">const htmlmin = require('gulp-html-minifier-terser');</span><span class="token prefix unchanged"> </span><span class="token line">const rev = require('gulp-rev-all');</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>即可修复这个bug。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;/blog/11084/&quot;&gt;之前的文章&lt;/a&gt;提到我为了控制静态文件版本使用了一个叫Gulp的包，同时为了压缩css文件大小，在其中使用了一个名为&lt;a</summary>
        
      
    
    
    
    <category term="Debug" scheme="https://blog.fyz666.xyz/categories/debug/"/>
    
    <category term="博客相关" scheme="https://blog.fyz666.xyz/categories/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/"/>
    
    
    <category term="Web前端" scheme="https://blog.fyz666.xyz/tags/web%E5%89%8D%E7%AB%AF/"/>
    
    <category term="npm" scheme="https://blog.fyz666.xyz/tags/npm/"/>
    
    <category term="NodeJS" scheme="https://blog.fyz666.xyz/tags/nodejs/"/>
    
    <category term="Gulp" scheme="https://blog.fyz666.xyz/tags/gulp/"/>
    
  </entry>
  
  <entry>
    <title>利用GitHub做对象存储服务</title>
    <link href="https://blog.fyz666.xyz/blog/11170/"/>
    <id>https://blog.fyz666.xyz/blog/11170/</id>
    <published>2024-04-17T11:27:24.000Z</published>
    <updated>2024-05-11T08:15:27.837Z</updated>
    
    <content type="html"><![CDATA[<p>我的blog上有很多图片，它们不仅分布于文章内容、文章封面，还会大量出现在相册里。</p><p>把所有的图片都存在服务器本地会大量占用硬盘空间，也会增加服务器需要处理请求的频率、消耗服务器带宽，另外也会拖慢hexo生成public目录的速度。因此使用第三方对象存储服务是很有必要的。</p><p>对比了各种对象存储服务商，我觉得我还是把GitHub利用起来吧，至少它免费、稳定、没有跑路风险。</p><p>不过仍有需要注意的地方⚠️</p><div class="note warning simple"><ul><li><p>GitHub原则上是反对仓库图床化的，当仓库超过 1G 后会有人工审核仓库内容，因此需要注意仓库不要太大。</p></li><li><p>jsDelivr 加速的单文件大小限制为 50M。</p></li></ul></div><p>基于上述原因，后续我会逐步将图片迁移到更加合适的对象存储平台。</p><hr><p>已有一些支持GitHub图床的软件：<a href="https://github.com/XPoet/picx">PicX</a>、<a href="https://github.com/PicGo/PicGo-Core">PicGo</a>，不过这些软件默认只能上传图片文件，没法传其他格式的文件。既然GitHub支持API管理仓库，那为什么不直接写个脚本来处理文件上传这件事呢？这样基本上任何需求都可以通过简单写几句代码实现，拥有更高的自由度，岂不美哉。</p><a class="tag-Link" target="_blank" href="https://docs.github.com/en/rest/using-the-rest-api/getting-started-with-the-rest-api">    <div class="tag-link-tips">引用站外地址，不保证站点的可用性和安全性</div>    <div class="tag-link-bottom">        <div class="tag-link-left">            <img src="https://api.iowen.cn/favicon/docs.github.com/en/rest/using-the-rest-api/getting-started-with-the-rest-api.png" onerror="this.onerror=null;this.src='/images/default-link.png';" />        </div>        <div class="tag-link-right">            <div class="tag-link-title">GitHub API文档</div>            <div class="tag-link-sitename">GitHub</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a><p>我的需求是将文件按后缀名分类，存储在对应的目录下，并且将文件重命名为它自身的md5摘要，这样肯定不会遇到collision吧（大概！），并且用<a href="https://www.jsdelivr.com/">jsDelivr</a>进行加速。这里我就直接贴代码了：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> requests<span class="token keyword">import</span> base64<span class="token keyword">import</span> hashlib<span class="token keyword">import</span> retry<span class="token keyword">def</span> <span class="token function">md5</span><span class="token punctuation">(</span>file_content<span class="token punctuation">)</span><span class="token punctuation">:</span>    hash_md5 <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">)</span>    hash_md5<span class="token punctuation">.</span>update<span class="token punctuation">(</span>file_content<span class="token punctuation">)</span>    <span class="token keyword">return</span> hash_md5<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">GitHubStorage</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> username<span class="token punctuation">,</span> repo<span class="token punctuation">,</span> token<span class="token punctuation">,</span> branch<span class="token operator">=</span><span class="token string">'main'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>username <span class="token operator">=</span> username        self<span class="token punctuation">.</span>repo <span class="token operator">=</span> repo        self<span class="token punctuation">.</span>token <span class="token operator">=</span> token        self<span class="token punctuation">.</span>branch <span class="token operator">=</span> branch        self<span class="token punctuation">.</span>headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">'Authorization'</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f'token </span><span class="token interpolation"><span class="token punctuation">&#123;</span>token<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">,</span>            <span class="token string">'Accept'</span><span class="token punctuation">:</span> <span class="token string">'application/vnd.github.v3+json'</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>        self<span class="token punctuation">.</span>cdn <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'https://cdn.jsdelivr.net/gh/</span><span class="token interpolation"><span class="token punctuation">&#123;</span>username<span class="token punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">&#123;</span>repo<span class="token punctuation">&#125;</span></span><span class="token string">@</span><span class="token interpolation"><span class="token punctuation">&#123;</span>branch<span class="token punctuation">&#125;</span></span><span class="token string">/'</span></span>            <span class="token keyword">def</span> <span class="token function">get_file_info</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> filepath<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filepath<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>            content <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        ext <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>splitext<span class="token punctuation">(</span>filepath<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        hash_md5 <span class="token operator">=</span> md5<span class="token punctuation">(</span>content<span class="token punctuation">)</span>        file_name <span class="token operator">=</span> hash_md5 <span class="token operator">+</span> ext        path <span class="token operator">=</span> <span class="token string">'blank'</span> <span class="token keyword">if</span> ext <span class="token operator">==</span> <span class="token string">''</span> <span class="token keyword">else</span> ext<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> content<span class="token punctuation">,</span> path<span class="token punctuation">,</span> file_name    <span class="token decorator annotation punctuation">@retry<span class="token punctuation">.</span>retry</span><span class="token punctuation">(</span>tries<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> delay<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">upload</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> filepath<span class="token punctuation">)</span><span class="token punctuation">:</span>        content<span class="token punctuation">,</span> path<span class="token punctuation">,</span> file_name <span class="token operator">=</span> self<span class="token punctuation">.</span>get_file_info<span class="token punctuation">(</span>filepath<span class="token punctuation">)</span>        api_url <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'https://api.github.com/repos/</span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>username<span class="token punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>repo<span class="token punctuation">&#125;</span></span><span class="token string">/contents/</span><span class="token interpolation"><span class="token punctuation">&#123;</span>path<span class="token punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">&#123;</span>file_name<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span>        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">'message'</span><span class="token punctuation">:</span> <span class="token string">'Upload new file'</span><span class="token punctuation">,</span>            <span class="token string">'content'</span><span class="token punctuation">:</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">'branch'</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>branch        <span class="token punctuation">&#125;</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>put<span class="token punctuation">(</span>api_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>self<span class="token punctuation">.</span>headers<span class="token punctuation">,</span> json<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>cdn <span class="token operator">+</span> <span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>path<span class="token punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">&#123;</span>file_name<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述脚本可以配合<code>typora</code>进行使用，实现markdown粘贴图片自动上传：</p><p><img src="https://fastly.jsdelivr.net/gh/windshadow233/BlogStorage@files/png/1b4951c40f326935fcb03a870aabb371.png" alt=""></p><p>顺便可以在脚本里加一句<code>os.remove()</code>，以删除<code>typora</code>自动在本地保存的图片。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;我的blog上有很多图片，它们不仅分布于文章内容、文章封面，还会大量出现在相册里。&lt;/p&gt;
&lt;p&gt;把所有的图片都存在服务器本地会大量占用硬盘空间，也会增加服务器需要处理请求的频率、消耗服务器带宽，另外也会拖慢hexo生成public目录的速度。因此使用第三方对象存储服务是很</summary>
        
      
    
    
    
    <category term="博客相关" scheme="https://blog.fyz666.xyz/categories/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/"/>
    
    
    <category term="Python" scheme="https://blog.fyz666.xyz/tags/python/"/>
    
    <category term="GitHub API" scheme="https://blog.fyz666.xyz/tags/github-api/"/>
    
  </entry>
  
  <entry>
    <title>使用Gulp解决Hexo静态站的文件缓存问题</title>
    <link href="https://blog.fyz666.xyz/blog/11084/"/>
    <id>https://blog.fyz666.xyz/blog/11084/</id>
    <published>2024-04-12T21:50:06.000Z</published>
    <updated>2024-05-11T08:15:27.837Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个喜欢魔改网站主题的人，在将博客迁移到静态站后，首先需要解决的便是浏览器的缓存问题。浏览器在遇到对静态资源的请求时，通常会采取两种缓存策略，分别是<strong>强制缓存</strong>和<strong>协商缓存</strong>。</p><ul><li>强制缓存：在一定时间（由服务器给出的请求头标识）内不再向服务器发出请求，而是直接使用缓存的内容。</li><li>协商缓存：与服务器协商是否需要重新请求。</li></ul><p>显然，由于缓存策略的存在，当服务端的静态文件发生变更后，客户端经常不会立刻加载最新版本的文件。对于这一点，之前我在动态博客中的解决方案是手动为静态文件加一个版本号，例如<code>theme.css?v=1.2.1</code>。不过在Hexo中所有的html页面都是自动编译生成的，而且会产生一大堆页面，因此并不可能一个一个地手动为静态文件添加版本。</p><p>经过一番搜索，我在一条<a href="https://github.com/hexojs/hexo/issues/3042#issuecomment-369648375">GitHub issue</a>下面找到了一个看上去不错的方案：</p><blockquote><p>directly use webpack or gulp (commend to install at root folder). first, hexo generate the publish files, then webpack or gulp revision the files.</p></blockquote><p>不过我先前几乎没有这些前端工作流的经验，因此花了半天时间才大概搞明白这句话的含义并让这个方案work。</p><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><p>Gulp是一个强大的前端自动化构建工具，其有很多插件，能够满足许多需求，为文件名添加hash只是其中一个插件的功能，还有一些插件可以用来优化文件大小，这里就顺带一并装上。</p><p>先全局安装gulp，并安装一些用于优化静态文件的插件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> gulp <span class="token parameter variable">--global</span><span class="token function">npm</span> <span class="token function">install</span> gulp gulp-clean-css gulp-uglify-es gulp-html-minifier-terser<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后安装一个可以为静态文件打版本tag的插件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> gulp-rev-all <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里的问题是，默认的gulp-rev-all版本是4，并不支持通过旧规范的<code>require</code>语句导入，因此我手动降了一下版本，将package.json里的大版本号改到了3，这里我使用的版本信息如下：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">...  <span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"gulp"</span><span class="token operator">:</span> <span class="token string">"^5.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"gulp-clean-css"</span><span class="token operator">:</span> <span class="token string">"^4.3.0"</span><span class="token punctuation">,</span>    <span class="token property">"gulp-html-minifier-terser"</span><span class="token operator">:</span> <span class="token string">"^7.1.0"</span><span class="token punctuation">,</span>    <span class="token property">"gulp-rev-all"</span><span class="token operator">:</span> <span class="token string">"^3.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"gulp-uglify-es"</span><span class="token operator">:</span> <span class="token string">"^3.0.0"</span><span class="token punctuation">,</span>    ...  <span class="token punctuation">&#125;</span>...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>做了版本号调整后，再重新安装，这样便能通过旧的语法进行导入了。</p><h2 id="编写gulpfile-js文件"><a href="#编写gulpfile-js文件" class="headerlink" title="编写gulpfile.js文件"></a>编写gulpfile.js文件</h2><p>在博客项目的根目录下创建gulpfile.js，内容如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> gulp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> cleancss <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-clean-css'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> uglify <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-uglify-es'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default<span class="token punctuation">;</span><span class="token keyword">const</span> htmlmin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-html-minifier-terser'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> RevAll <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-rev-all'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'minify-css'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'./public/**/*.css'</span><span class="token punctuation">)</span>           <span class="token comment">// 处理public目录下所有的css文件，下同</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">cleancss</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">compatibility</span><span class="token operator">:</span> <span class="token string">'ie8'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 兼容到IE8</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'./public'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'minify-js'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'./public/**/*.js'</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">uglify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'./public'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'minify-html'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'./public/**/*.html'</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">htmlmin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">removeComments</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                 <span class="token comment">// 移除注释</span>            <span class="token literal-property property">removeEmptyAttributes</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          <span class="token comment">// 移除值为空的参数</span>            <span class="token literal-property property">removeRedundantAttributes</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token comment">// 移除值跟默认值匹配的属性</span>            <span class="token literal-property property">collapseBooleanAttributes</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token comment">// 省略布尔属性的值</span>            <span class="token literal-property property">collapseWhitespace</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>             <span class="token comment">// 移除空格和空行</span>            <span class="token literal-property property">minifyCSS</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                      <span class="token comment">// 压缩HTML中的CSS</span>            <span class="token literal-property property">minifyJS</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                       <span class="token comment">// 压缩HTML中的JS</span>            <span class="token literal-property property">minifyURLs</span><span class="token operator">:</span> <span class="token boolean">true</span>                      <span class="token comment">// 压缩HTML中的链接</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'./public'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'rev'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'public/**/*.&#123;css,js,html&#125;'</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>RevAll<span class="token punctuation">.</span><span class="token function">revision</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>          <span class="token literal-property property">dontRenameFile</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'.html'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token literal-property property">dontUpdateReference</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'.html'</span><span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'./public'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>RevAll<span class="token punctuation">.</span><span class="token function">manifestFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'./public'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'default'</span><span class="token punctuation">,</span> gulp<span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span>    <span class="token string">'minify-css'</span><span class="token punctuation">,</span> <span class="token string">'minify-js'</span><span class="token punctuation">,</span> <span class="token string">'minify-html'</span><span class="token punctuation">,</span> <span class="token string">'rev'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该文件首先定义了四个任务，前三个任务分别优化css、js、html文件的大小，第四个任务用来为css、js的文件名添加hash值标签，默认生成8位的hash值，同时处理所有html，将其中对本地css、js文件的引用处修改为带hash标签的。</p><p>最后定义了一个默认任务，用以在执行<code>gulp</code>命令而不带任何参数时自动执行前面四个任务。</p><h2 id="配置npm脚本"><a href="#配置npm脚本" class="headerlink" title="配置npm脚本"></a>配置npm脚本</h2><p>在package.json中添加<code>scripts</code>字段，配置脚本：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">...  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"b"</span><span class="token operator">:</span> <span class="token string">"npx hexo clean &amp;&amp; npx hexo g &amp;&amp; gulp"</span><span class="token punctuation">,</span>    ...  <span class="token punctuation">&#125;</span>...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样只要在项目的根目录下执行<code>npm run b</code>，就可以直接完成编译+优化+添加版本一条龙。</p><hr><p>最近发现有个奇怪的bug，我只要用了<code>gulp-html-minifier-terser</code>，就会有一个html文件被”优化”成了空文件，研究了下发现原来不应该将最后的<code>rev</code>任务和前面三个并行起来，改成下面这样就好了:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'default'</span><span class="token punctuation">,</span> gulp<span class="token punctuation">.</span><span class="token function">series</span><span class="token punctuation">(</span>    gulp<span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token string">'minify-css'</span><span class="token punctuation">,</span> <span class="token string">'minify-js'</span><span class="token punctuation">,</span> <span class="token string">'minify-html'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">'rev'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;作为一个喜欢魔改网站主题的人，在将博客迁移到静态站后，首先需要解决的便是浏览器的缓存问题。浏览器在遇到对静态资源的请求时，通常会采取两种缓存策略，分别是&lt;strong&gt;强制缓存&lt;/strong&gt;和&lt;strong&gt;协商缓存&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;强制缓</summary>
        
      
    
    
    
    <category term="博客相关" scheme="https://blog.fyz666.xyz/categories/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/"/>
    
    
    <category term="Web前端" scheme="https://blog.fyz666.xyz/tags/web%E5%89%8D%E7%AB%AF/"/>
    
    <category term="npm" scheme="https://blog.fyz666.xyz/tags/npm/"/>
    
    <category term="NodeJS" scheme="https://blog.fyz666.xyz/tags/nodejs/"/>
    
    <category term="Gulp" scheme="https://blog.fyz666.xyz/tags/gulp/"/>
    
    <category term="Hexo" scheme="https://blog.fyz666.xyz/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>迁移WordPress到静态博客</title>
    <link href="https://blog.fyz666.xyz/blog/11025/"/>
    <id>https://blog.fyz666.xyz/blog/11025/</id>
    <published>2024-04-11T12:43:00.000Z</published>
    <updated>2024-05-11T08:15:27.837Z</updated>
    
    <content type="html"><![CDATA[<p>用WordPress写个人博客四年后，我终于下定决心把它迁移到了静态博客。本文是我使用Hexo框架写的第一篇文章。</p><hr><h2 id="迁移的动机"><a href="#迁移的动机" class="headerlink" title="迁移的动机"></a>迁移的动机</h2><ul><li>MySQL数据库占用的内存实在是太多了</li><li>有后台的博客虽然管理起来方便，但十分臃肿，而且会有补不完的漏洞</li><li>用Markdown来写文章十分简约，同时也很方便</li><li>比起PHP，我更愿意学习前端那一套框架</li><li>正好前段时间研究了如何将文章转成Markdown，满足了迁移的前置条件</li><li><del>发现大佬们似乎都是静态博客，跟个风</del></li></ul><h2 id="迁移的过程"><a href="#迁移的过程" class="headerlink" title="迁移的过程"></a>迁移的过程</h2><p>WordPress和Hexo对文章的处理有非常大的区别，因此我在这里将我主要遇到的问题、需要满足的需求及解决方法记录了一下。</p><h3 id="将全站文章导出为Markdown"><a href="#将全站文章导出为Markdown" class="headerlink" title="将全站文章导出为Markdown"></a>将全站文章导出为Markdown</h3><p>由于Hexo使用Markdown来写文章，因此必不可少的操作——将所有文章导出为Markdown格式。</p><p>事实上，目前已经有不少<strong>WordPress to Hexo</strong>的迁移工具了，然而这些工具基本都很难完全满足我的需求，我需要一种可高度自定义的迁移方法来应对我的一些奇奇怪怪的需求。</p><p>如<a href="/blog/10094/">上一篇文章</a>所述，我已经找到了一种令我比较满意的转换方法，不过当时的目的只是随意转换一下，看着舒服就行，在实际进行迁移操作时，又根据需求增加了不少细节。</p><ul><li>保持文章的<code>permalink</code>不变</li></ul><p>我之前的博客中文章的永久链接都是<code>/blog/id/</code>这种形式，我希望在新的博客下保持原有的永久链接格式。基于此需求，我为所有导出的文章自定义了frontmatter，增加了<code>id</code>字段，并且在Hexo配置文件中设置：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">permalink</span><span class="token punctuation">:</span> /blog/<span class="token punctuation">:</span>id/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>下载所有静态文件到本地（以后再考虑使用第三方对象存储服务）</li></ul><p>我的博客中静态文件除掉css、js等文件以外，还包含图片、音频、pdf，甚至zip压缩包，并且它们在我原来网站上的路径可能非常复杂，例如<code>/wp-content/uploads/2021/06/xxx.jpeg</code>，对于这些文件，我自然不希望它们保留原始路径（早知道以前就用第三方对象存储服务了。。。这样就能省事好多），这里可以开启Hexo的post asset folder功能：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">post_asset_folder</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后创建与post文件同路径、同名的目录，将每篇文章包含的静态文件下载到对应的asset目录下。</p><p>之后只需要正则匹配所有长得像文件的链接：</p><pre class="line-numbers language-none"><code class="language-none">https\:\&#x2F;\&#x2F;blog\.fyz666\.xyz\&#x2F;[a-zA-Z\d\&#x2F;_-]*\.[a-zA-Z\d_%@#-]+(?:\.[a-zA-Z\d_%@#-]+)*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>路径上至少包含一组<code>.xxx</code>结构的链接，大概率就是文件了，反正应该不至于出现太奇怪的东西。</p><ul><li>代码块语言标注</li></ul><p>在WordPress中，我使用<a href="https://github.com/EnlighterJS/EnlighterJS">EnlighterJS</a>进行代码块高亮，而Hexo默认使用<a href="https://highlightjs.org/">highlight.js</a>进行代码块高亮，虽然highlight.js自带<code>auto_detect</code>功能可以自动识别代码块的语言，但当代码比较短或缺乏对应语言的特点时，自动识别的效果就不太好。而手动为所有文章的代码块标注语言又太过繁琐，因此我研究了一下，发现feedparser支持一个解析参数：<code>sanitize_html=False</code>，可以禁止它对HTML文本进行净化，从而保留一些我需要的东西，例如代码块的语言。</p><ul><li>保留一些Markdown语法中没有的元素</li></ul><p>部分文章含有音频标签<code>&lt;audio&gt;</code>，很多文章都含有删除线<code>&lt;s&gt;</code>或<code>&lt;del&gt;</code>，然而markdownify的默认规则会直接忽略它们，可以通过自定义解析规则来保留。</p><ul><li>站内文件需要屏蔽pjax，不然会出问题</li></ul><p>通过手动给这类链接增加一个<code>target=&quot;_blank&quot;</code>来实现：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">file_exts <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'.pdf'</span><span class="token punctuation">,</span> <span class="token string">'.jpg'</span><span class="token punctuation">,</span> <span class="token string">'.jpeg'</span><span class="token punctuation">,</span> <span class="token string">'.png'</span><span class="token punctuation">,</span> <span class="token string">'.svg'</span><span class="token punctuation">,</span> <span class="token string">'.jfif'</span><span class="token punctuation">,</span>    <span class="token string">'.wav'</span><span class="token punctuation">,</span> <span class="token string">'.mp4'</span><span class="token punctuation">,</span> <span class="token string">'.mp3'</span><span class="token punctuation">,</span> <span class="token string">'.webm'</span><span class="token punctuation">,</span> <span class="token string">'.ogv'</span><span class="token punctuation">,</span>    <span class="token string">'.zip'</span><span class="token punctuation">,</span> <span class="token string">'.rar'</span><span class="token punctuation">,</span> <span class="token string">'.gz'</span><span class="token punctuation">,</span> <span class="token string">'.7z'</span><span class="token punctuation">,</span> <span class="token string">'.tar'</span><span class="token punctuation">,</span> <span class="token string">'.xz'</span><span class="token punctuation">,</span>    <span class="token string">'.pdf'</span><span class="token punctuation">,</span> <span class="token string">'.bat'</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">if</span> href<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span>home_url<span class="token punctuation">)</span> <span class="token keyword">and</span> ext<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">in</span> file_exts<span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"""&lt;a target="_blank" href="</span><span class="token interpolation"><span class="token punctuation">&#123;</span>href<span class="token punctuation">&#125;</span></span><span class="token string">" rel="external" title="</span><span class="token interpolation"><span class="token punctuation">&#123;</span>title_part<span class="token punctuation">&#125;</span></span><span class="token string">"></span><span class="token interpolation"><span class="token punctuation">&#123;</span>text<span class="token punctuation">&#125;</span></span><span class="token string">&lt;/a>"""</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="适配Gitalk"><a href="#适配Gitalk" class="headerlink" title="适配Gitalk"></a>适配Gitalk</h3><p>之前在动态博客里插入Gitalk只需要在几个PHP文件里写上下面内容即可：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> gitalk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gitalk</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">clientID</span><span class="token operator">:</span> <span class="token string">'xxxxxxxxxxxxxxxx'</span><span class="token punctuation">,</span>    <span class="token literal-property property">clientSecret</span><span class="token operator">:</span> <span class="token string">'xxxxxxxxxxxxxxxx'</span><span class="token punctuation">,</span>    <span class="token literal-property property">body</span><span class="token operator">:</span> location<span class="token punctuation">.</span>href<span class="token punctuation">,</span>    <span class="token literal-property property">repo</span><span class="token operator">:</span> <span class="token string">'BlogComments'</span><span class="token punctuation">,</span>    <span class="token literal-property property">owner</span><span class="token operator">:</span> <span class="token string">'windshadow233'</span><span class="token punctuation">,</span>    <span class="token literal-property property">admin</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'windshadow233'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token literal-property property">createIssueManually</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token literal-property property">id</span><span class="token operator">:</span> location<span class="token punctuation">.</span>pathname<span class="token punctuation">,</span>    <span class="token literal-property property">distractionFreeMode</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gitalk<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'gitalk-container'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而显然，这样的写法在静态博客中是达不到我想要的效果的，因为静态博客在编译时并不会把<code>location.pathname</code>和<code>location.href</code>动态解析为用户访问时的链接。所以需要对主题文件中对Gitalk的导入部分进行修改。</p><p>该文件在butterfly主题下位于<code>themes/butterfly/layout/includes/third-party/comments/gitalk.pug</code>，我将下面这部分进行了一定的修改：</p><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff"><span class="token coord">@@ -9,7 +9,8 @@</span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">        repo: '!&#123;repo&#125;',</span><span class="token prefix unchanged"> </span><span class="token line">        owner: '!&#123;owner&#125;',</span><span class="token prefix unchanged"> </span><span class="token line">        admin: ['!&#123;admin&#125;'],</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">        id: '!&#123;md5(page.path)&#125;',</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">        id: '!&#123;page.path&#125;',</span><span class="token prefix inserted">+</span><span class="token line">        body: '!&#123;page.permalink&#125;',</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">        updateCountCallback: commentCount</span><span class="token prefix unchanged"> </span><span class="token line">      &#125;,!&#123;JSON.stringify(option)&#125;))</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样Hexo在编译时就会将这些参数读取出来，然后写死在每个html文件里，从而达到我想要的效果。</p><hr><p>要做的工作大概就这些，其他问题等遇到了再手动修改即可。最后附上我的迁移代码：</p><h2 id="Python脚本"><a href="#Python脚本" class="headerlink" title="Python脚本"></a>Python脚本</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> feedparser<span class="token keyword">import</span> time<span class="token keyword">import</span> os<span class="token keyword">import</span> re<span class="token keyword">import</span> tqdm<span class="token keyword">import</span> requests<span class="token keyword">from</span> markdownify <span class="token keyword">import</span> MarkdownConverter<span class="token punctuation">,</span> chomp<span class="token keyword">from</span> retry <span class="token keyword">import</span> retryfile_exts <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'.pdf'</span><span class="token punctuation">,</span> <span class="token string">'.jpg'</span><span class="token punctuation">,</span> <span class="token string">'.jpeg'</span><span class="token punctuation">,</span> <span class="token string">'.png'</span><span class="token punctuation">,</span> <span class="token string">'.svg'</span><span class="token punctuation">,</span> <span class="token string">'.jfif'</span><span class="token punctuation">,</span>    <span class="token string">'.wav'</span><span class="token punctuation">,</span> <span class="token string">'.mp4'</span><span class="token punctuation">,</span> <span class="token string">'.mp3'</span><span class="token punctuation">,</span> <span class="token string">'.webm'</span><span class="token punctuation">,</span> <span class="token string">'.ogv'</span><span class="token punctuation">,</span>    <span class="token string">'.zip'</span><span class="token punctuation">,</span> <span class="token string">'.rar'</span><span class="token punctuation">,</span> <span class="token string">'.gz'</span><span class="token punctuation">,</span> <span class="token string">'.7z'</span><span class="token punctuation">,</span> <span class="token string">'.tar'</span><span class="token punctuation">,</span> <span class="token string">'.xz'</span><span class="token punctuation">,</span>    <span class="token string">'.pdf'</span><span class="token punctuation">,</span> <span class="token string">'.bat'</span><span class="token punctuation">&#125;</span>language_alias <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'generic'</span><span class="token punctuation">:</span> <span class="token string">'plaintext'</span><span class="token punctuation">,</span>    <span class="token string">'shell'</span><span class="token punctuation">:</span> <span class="token string">'bash'</span><span class="token punctuation">&#125;</span>feed_url <span class="token operator">=</span> <span class="token string">'https://blog.fyz666.xyz/feed/'</span>home_url <span class="token operator">=</span> <span class="token string">'https://blog.fyz666.xyz/'</span><span class="token keyword">class</span> <span class="token class-name">CustomConverter</span><span class="token punctuation">(</span>MarkdownConverter<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Create a custom MarkdownConverter that adds two newlines after an image    """</span>    <span class="token keyword">def</span> <span class="token function">convert_del</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> el<span class="token punctuation">,</span> text<span class="token punctuation">,</span> convert_as_inline<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">str</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">convert_s</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> el<span class="token punctuation">,</span> text<span class="token punctuation">,</span> convert_as_inline<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">str</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">convert_audio</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> el<span class="token punctuation">,</span> text<span class="token punctuation">,</span> convert_as_inline<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">str</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">convert_sup</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> el<span class="token punctuation">,</span> text<span class="token punctuation">,</span> convert_as_inline<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">str</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">convert_sub</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> el<span class="token punctuation">,</span> text<span class="token punctuation">,</span> convert_as_inline<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">str</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">convert_a</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> el<span class="token punctuation">,</span> text<span class="token punctuation">,</span> convert_as_inline<span class="token punctuation">)</span><span class="token punctuation">:</span>        prefix<span class="token punctuation">,</span> suffix<span class="token punctuation">,</span> text <span class="token operator">=</span> chomp<span class="token punctuation">(</span>text<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> text<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">''</span>        href <span class="token operator">=</span> el<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">)</span>        title <span class="token operator">=</span> el<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">)</span>        ext <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>splitext<span class="token punctuation">(</span>href<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        title_part <span class="token operator">=</span> <span class="token string">' "%s"'</span> <span class="token operator">%</span> title<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'"'</span><span class="token punctuation">,</span> <span class="token string">r'\"'</span><span class="token punctuation">)</span> <span class="token keyword">if</span> title <span class="token keyword">else</span> <span class="token string">''</span>        <span class="token keyword">if</span> href<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span>home_url<span class="token punctuation">)</span> <span class="token keyword">and</span> ext<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">in</span> file_exts<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"""&lt;a target="_blank" href="</span><span class="token interpolation"><span class="token punctuation">&#123;</span>href<span class="token punctuation">&#125;</span></span><span class="token string">" rel="external" title="</span><span class="token interpolation"><span class="token punctuation">&#123;</span>title_part<span class="token punctuation">&#125;</span></span><span class="token string">"></span><span class="token interpolation"><span class="token punctuation">&#123;</span>text<span class="token punctuation">&#125;</span></span><span class="token string">&lt;/a>"""</span></span>        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>prefix<span class="token punctuation">&#125;</span></span><span class="token string">[</span><span class="token interpolation"><span class="token punctuation">&#123;</span>text<span class="token punctuation">&#125;</span></span><span class="token string">](</span><span class="token interpolation"><span class="token punctuation">&#123;</span>href<span class="token punctuation">&#125;</span></span><span class="token interpolation"><span class="token punctuation">&#123;</span>title_part<span class="token punctuation">&#125;</span></span><span class="token string">)</span><span class="token interpolation"><span class="token punctuation">&#123;</span>suffix<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span> <span class="token keyword">if</span> href <span class="token keyword">else</span> text    <span class="token keyword">def</span> <span class="token function">convert_pre</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> el<span class="token punctuation">,</span> text<span class="token punctuation">,</span> convert_as_inline<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> text<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">''</span>        language <span class="token operator">=</span> el<span class="token punctuation">.</span>attrs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'data-enlighter-language'</span><span class="token punctuation">)</span>        language <span class="token operator">=</span> language_alias<span class="token punctuation">.</span>get<span class="token punctuation">(</span>language<span class="token punctuation">,</span> language<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"""\n```</span><span class="token interpolation"><span class="token punctuation">&#123;</span>language<span class="token punctuation">&#125;</span></span><span class="token string">\n</span><span class="token interpolation"><span class="token punctuation">&#123;</span>text<span class="token punctuation">&#125;</span></span><span class="token string">\n```\n"""</span></span>    <span class="token keyword">def</span> <span class="token function">convert_div</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> el<span class="token punctuation">,</span> text<span class="token punctuation">,</span> convert_as_inline<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> el<span class="token punctuation">.</span>attrs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'class'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'introduce'</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"""&lt;div class="introduce"></span><span class="token interpolation"><span class="token punctuation">&#123;</span>text<span class="token punctuation">&#125;</span></span><span class="token string">&lt;/div>"""</span></span>        <span class="token keyword">return</span> text<span class="token keyword">def</span> <span class="token function">md</span><span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token operator">**</span>options<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> CustomConverter<span class="token punctuation">(</span><span class="token operator">**</span>options<span class="token punctuation">)</span><span class="token punctuation">.</span>convert<span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">WordPress2MD</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> feed_url<span class="token punctuation">,</span> home_url<span class="token punctuation">,</span> out_folder<span class="token operator">=</span><span class="token string">'output'</span><span class="token punctuation">,</span> download_files<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>url <span class="token operator">=</span> feed_url        self<span class="token punctuation">.</span>home <span class="token operator">=</span> home_url        self<span class="token punctuation">.</span>out_folder <span class="token operator">=</span> out_folder        self<span class="token punctuation">.</span>download_files <span class="token operator">=</span> download_files    <span class="token decorator annotation punctuation">@retry</span><span class="token punctuation">(</span>tries<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> delay<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get_cover</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> file_name<span class="token punctuation">,</span> id_<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>self<span class="token punctuation">.</span>out_folder<span class="token punctuation">,</span> file_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>self<span class="token punctuation">.</span>out_folder<span class="token punctuation">,</span> file_name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                lines <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">for</span> line <span class="token keyword">in</span> lines<span class="token punctuation">:</span>                    <span class="token keyword">if</span> line<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'cover'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                        cover <span class="token operator">=</span> line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token keyword">return</span> cover        info_url <span class="token operator">=</span> self<span class="token punctuation">.</span>home <span class="token operator">+</span> <span class="token string-interpolation"><span class="token string">f'wp-json/wp/v2/posts/</span><span class="token interpolation"><span class="token punctuation">&#123;</span>id_<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>info_url<span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> r<span class="token punctuation">[</span><span class="token string">'featured_media'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">''</span>        id_ <span class="token operator">=</span> r<span class="token punctuation">[</span><span class="token string">'featured_media'</span><span class="token punctuation">]</span>        media_url <span class="token operator">=</span> self<span class="token punctuation">.</span>home <span class="token operator">+</span> <span class="token string-interpolation"><span class="token string">f'wp-json/wp/v2/media/</span><span class="token interpolation"><span class="token punctuation">&#123;</span>id_<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>media_url<span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> r<span class="token punctuation">[</span><span class="token string">'source_url'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">make_assets_folder</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> asset_folder<span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>self<span class="token punctuation">.</span>out_folder<span class="token punctuation">,</span> asset_folder<span class="token punctuation">)</span><span class="token punctuation">,</span> exist_ok<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@retry</span><span class="token punctuation">(</span>tries<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> delay<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">download_asset_file_and_replace</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> file_url<span class="token punctuation">,</span> assets_folder<span class="token punctuation">,</span> md_content<span class="token punctuation">)</span><span class="token punctuation">:</span>        filename <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>split<span class="token punctuation">(</span>file_url<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        folder <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>self<span class="token punctuation">.</span>out_folder<span class="token punctuation">,</span> assets_folder<span class="token punctuation">)</span>        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>folder<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> md_content<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>file_url<span class="token punctuation">,</span> filename<span class="token punctuation">)</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>file_url<span class="token punctuation">)</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>folder<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>r<span class="token punctuation">.</span>content<span class="token punctuation">)</span>        md_content <span class="token operator">=</span> md_content<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>file_url<span class="token punctuation">,</span> filename<span class="token punctuation">)</span>        <span class="token keyword">return</span> md_content    <span class="token keyword">def</span> <span class="token function">find_and_replace_asset_files</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> assets_folder<span class="token punctuation">,</span> md_content<span class="token punctuation">)</span><span class="token punctuation">:</span>        pattern <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>home<span class="token punctuation">&#125;</span></span><span class="token string">[a-zA-Z\d\/_-]*\.[a-zA-Z\d_%@#-]+(?:\.[a-zA-Z\d_%@#-]+)*'</span></span><span class="token punctuation">)</span>        files <span class="token operator">=</span> pattern<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>md_content<span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token builtin">file</span> <span class="token keyword">in</span> tqdm<span class="token punctuation">.</span>tqdm<span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">,</span> desc<span class="token operator">=</span><span class="token string-interpolation"><span class="token string">f"Downloading files to </span><span class="token interpolation"><span class="token punctuation">&#123;</span>assets_folder<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token builtin">file</span><span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'.php'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">continue</span>                md_content <span class="token operator">=</span> self<span class="token punctuation">.</span>download_asset_file_and_replace<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">,</span> assets_folder<span class="token punctuation">,</span> md_content<span class="token punctuation">)</span>            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">,</span> assets_folder<span class="token punctuation">,</span> e<span class="token punctuation">)</span>        <span class="token keyword">return</span> md_content    <span class="token keyword">def</span> <span class="token function">html2md</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> html_text<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> md<span class="token punctuation">(</span>html_text<span class="token punctuation">,</span> bullets<span class="token operator">=</span><span class="token string">'-'</span><span class="token punctuation">,</span> escape_underscores<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> heading_style<span class="token operator">=</span><span class="token string">'atx'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">parse_entry</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> entry<span class="token punctuation">)</span><span class="token punctuation">:</span>        title <span class="token operator">=</span> entry<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span>        date <span class="token operator">=</span> entry<span class="token punctuation">[</span><span class="token string">'published_parsed'</span><span class="token punctuation">]</span>        id_ <span class="token operator">=</span> entry<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rsplit<span class="token punctuation">(</span><span class="token string">'?p='</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        base_name <span class="token operator">=</span> title<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>os<span class="token punctuation">.</span>sep<span class="token punctuation">,</span> <span class="token string">"|"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">)</span>        file_name <span class="token operator">=</span> base_name <span class="token operator">+</span> <span class="token string">'.md'</span>        category<span class="token punctuation">,</span> <span class="token operator">*</span>tags <span class="token operator">=</span> <span class="token punctuation">[</span>_<span class="token punctuation">[</span><span class="token string">'term'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> entry<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'tags'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        cover <span class="token operator">=</span> self<span class="token punctuation">.</span>get_cover<span class="token punctuation">(</span>file_name<span class="token punctuation">,</span> id_<span class="token punctuation">)</span>        meta <span class="token operator">=</span> <span class="token string">"---\n"</span> \               <span class="token string-interpolation"><span class="token string">f"title: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>title<span class="token punctuation">&#125;</span></span><span class="token string">\n"</span></span> \               <span class="token string-interpolation"><span class="token string">f"id: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>id_<span class="token punctuation">&#125;</span></span><span class="token string">\n"</span></span> \               <span class="token string-interpolation"><span class="token string">f"date: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d %H:%M:%S'</span><span class="token punctuation">,</span> date<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">\n"</span></span> \               <span class="token string-interpolation"><span class="token string">f"categories: [</span><span class="token interpolation"><span class="token punctuation">&#123;</span>category<span class="token punctuation">&#125;</span></span><span class="token string">]\n"</span></span> \               <span class="token string-interpolation"><span class="token string">f"tags: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>tags<span class="token punctuation">&#125;</span></span><span class="token string">\n"</span></span> \               <span class="token string-interpolation"><span class="token string">f"cover: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>cover<span class="token punctuation">&#125;</span></span><span class="token string">\n"</span></span> \               <span class="token string-interpolation"><span class="token string">f"disableNunjucks: true\n"</span></span> \               <span class="token string-interpolation"><span class="token string">f"---\n\n"</span></span>        content <span class="token operator">=</span> entry<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span>        md_content <span class="token operator">=</span> meta <span class="token operator">+</span> self<span class="token punctuation">.</span>html2md<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">.</span>rsplit<span class="token punctuation">(</span><span class="token string">'\n\n'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>download_files<span class="token punctuation">:</span>            assets_folder <span class="token operator">=</span> base_name            self<span class="token punctuation">.</span>make_assets_folder<span class="token punctuation">(</span>assets_folder<span class="token punctuation">)</span>            md_content <span class="token operator">=</span> self<span class="token punctuation">.</span>find_and_replace_asset_files<span class="token punctuation">(</span>assets_folder<span class="token punctuation">,</span> md_content<span class="token punctuation">)</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>self<span class="token punctuation">.</span>out_folder<span class="token punctuation">,</span> file_name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>md_content<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>self<span class="token punctuation">.</span>out_folder<span class="token punctuation">,</span> exist_ok<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        feed <span class="token operator">=</span> feedparser<span class="token punctuation">.</span>parse<span class="token punctuation">(</span>self<span class="token punctuation">.</span>url<span class="token punctuation">,</span> sanitize_html<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> entry <span class="token keyword">in</span> tqdm<span class="token punctuation">.</span>tqdm<span class="token punctuation">(</span>feed<span class="token punctuation">.</span>entries<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> title <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> title <span class="token operator">==</span> entry<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>parse_entry<span class="token punctuation">(</span>entry<span class="token punctuation">)</span>                    <span class="token keyword">break</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>parse_entry<span class="token punctuation">(</span>entry<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> title <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Article not found!'</span><span class="token punctuation">)</span>wp2md <span class="token operator">=</span> WordPress2MD<span class="token punctuation">(</span>feed_url<span class="token punctuation">,</span> home_url<span class="token punctuation">,</span> <span class="token string">'_posts'</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>wp2md<span class="token punctuation">.</span>parse<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">时隔四年，我终于把博客从WordPress迁移到了Hexo</summary>
    
    
    
    <category term="博客相关" scheme="https://blog.fyz666.xyz/categories/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/"/>
    
    
    <category term="Python" scheme="https://blog.fyz666.xyz/tags/python/"/>
    
    <category term="WordPress" scheme="https://blog.fyz666.xyz/tags/wordpress/"/>
    
    <category term="Hexo" scheme="https://blog.fyz666.xyz/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>将WordPress文章转化为Markdown格式</title>
    <link href="https://blog.fyz666.xyz/blog/10094/"/>
    <id>https://blog.fyz666.xyz/blog/10094/</id>
    <published>2024-04-03T05:53:31.000Z</published>
    <updated>2024-05-11T08:15:27.837Z</updated>
    
    <content type="html"><![CDATA[<p>在某些时候，我有将我的博客文章转化为markdown的需求，我的博客是用WordPress写的，想改静态博客但暂时懒得折腾，于是找了个折中的办法。</p><div class="note info simple"><p>然而刚写完这篇文章没多久就迁Hexo了，正好把本文提到的转换方法用了起来。</p></div><p>GitHub上有不少WordPress转Markdown的脚本，大多是通过解析WordPress导出的xml文件实现转换，但实测效果则非常一般了，因为导出的内容中会含有大量类似这样的东西：<code>&lt;!-- wp:paragraph --&gt;</code>，虽然大部分markdown渲染器会忽略这些内容，但看着还是很乱七八糟，另外如果文中有自定义的block，还会出现下面这种没有解析的内容：</p><pre class="line-numbers language-none"><code class="language-none">&lt;!-- wp:block-lab&#x2F;download &#123;&quot;url&quot;:&quot;https:&#x2F;&#x2F;xxx.com&quot;,&quot;text&quot;:&quot;xxx&quot;&#125; &#x2F;--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这些脚本还经常处理不好文本换行，导致解析出来的文件里许多本该换行的文字挤在一团。虽然可以手动调整以达到过得去的效果，但十分费时费眼。</p><p>注意到rss订阅链接返回的数据包含了文章内容的纯HTML文本，于是想到可以用HTML来转markdown，将两种规范的标记语言进行互相转换应该问题会小很多。对于这一需求，已经有比较成熟的软件支持了，例如<a href="https://github.com/jgm/pandoc">pandoc</a>，不过这个软件支持转换的文件类型非常多，对我来说好像暂时有点浪费，于是我找了一种比较轻量的方法，即写Python脚本解决，我找到了两个库，一个用来解析rss订阅，一个用来做html转换到markdown的工作：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> feedparserpip <span class="token function">install</span> markdownify<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>脚本如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> feedparser<span class="token keyword">from</span> markdownify <span class="token keyword">import</span> markdownify <span class="token keyword">as</span> md<span class="token keyword">import</span> time<span class="token keyword">import</span> os<span class="token keyword">class</span> <span class="token class-name">RSS2MD</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> url<span class="token punctuation">,</span> out_folder<span class="token operator">=</span><span class="token string">'output'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>url <span class="token operator">=</span> url        self<span class="token punctuation">.</span>out_folder <span class="token operator">=</span> out_folder    <span class="token keyword">def</span> <span class="token function">parse_entry</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> entry<span class="token punctuation">)</span><span class="token punctuation">:</span>        title <span class="token operator">=</span> entry<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span>        link <span class="token operator">=</span> entry<span class="token punctuation">[</span><span class="token string">'link'</span><span class="token punctuation">]</span>        date <span class="token operator">=</span> entry<span class="token punctuation">[</span><span class="token string">'published_parsed'</span><span class="token punctuation">]</span>        tags <span class="token operator">=</span> <span class="token punctuation">[</span>_<span class="token punctuation">[</span><span class="token string">'term'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> entry<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'tags'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        meta <span class="token operator">=</span> <span class="token string">"---\n"</span> \               <span class="token string-interpolation"><span class="token string">f"title: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>title<span class="token punctuation">&#125;</span></span><span class="token string">\n"</span></span> \               <span class="token string-interpolation"><span class="token string">f"slug: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>link<span class="token punctuation">&#125;</span></span><span class="token string">\n"</span></span> \               <span class="token string-interpolation"><span class="token string">f"date: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d'</span><span class="token punctuation">,</span> date<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">\n"</span></span> \               <span class="token string-interpolation"><span class="token string">f"tags: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>tags<span class="token punctuation">&#125;</span></span><span class="token string">\n"</span></span> \               <span class="token string-interpolation"><span class="token string">f"---\n\n"</span></span>        content <span class="token operator">=</span> entry<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span>        md_content <span class="token operator">=</span> meta <span class="token operator">+</span> md<span class="token punctuation">(</span>html_text<span class="token punctuation">,</span> bullets<span class="token operator">=</span><span class="token string">'-'</span><span class="token punctuation">,</span> escape_underscores<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rsplit<span class="token punctuation">(</span><span class="token string">'\n\n'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        file_name <span class="token operator">=</span> title<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>os<span class="token punctuation">.</span>sep<span class="token punctuation">,</span> <span class="token string">"|"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.md'</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>self<span class="token punctuation">.</span>out_folder<span class="token punctuation">,</span> file_name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>md_content<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>self<span class="token punctuation">.</span>out_folder<span class="token punctuation">,</span> exist_ok<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        feed <span class="token operator">=</span> feedparser<span class="token punctuation">.</span>parse<span class="token punctuation">(</span>self<span class="token punctuation">.</span>url<span class="token punctuation">)</span>        <span class="token keyword">for</span> entry <span class="token keyword">in</span> feed<span class="token punctuation">.</span>entries<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>parse_entry<span class="token punctuation">(</span>entry<span class="token punctuation">)</span>rss2md <span class="token operator">=</span> RSS2MD<span class="token punctuation">(</span><span class="token string">'https://blog.fyz666.xyz/feed/'</span><span class="token punctuation">,</span> <span class="token string">'output'</span><span class="token punctuation">)</span>rss2md<span class="token punctuation">.</span>parse<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>markdownify这个库支持非常高自由度的配置，转化的效果也非常OK。</p><p>不过有一个小问题，那就是WordPress的rss订阅会把文中出现的emoji转化为img标签，指向一个域名为s.w.org的链接，似乎是为了兼容各种古早版本的阅读器，然而我并不需要这部分功能，于是可以在WordPress的<code>functions.php</code>文件加入以下代码来禁用此功能：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">remove_action</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'wp_head'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'print_emoji_detection_script'</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">remove_action</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'admin_print_scripts'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'print_emoji_detection_script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">remove_action</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'wp_print_styles'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'print_emoji_styles'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">remove_action</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'admin_print_styles'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'print_emoji_styles'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">remove_filter</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'the_content_feed'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'wp_staticize_emoji'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">remove_filter</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'comment_text_rss'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'wp_staticize_emoji'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">remove_filter</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'wp_mail'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'wp_staticize_emoji_for_email'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">一种可高度自定义的WordPress文章转Markdown的方法</summary>
    
    
    
    <category term="博客相关" scheme="https://blog.fyz666.xyz/categories/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/"/>
    
    
    <category term="Python" scheme="https://blog.fyz666.xyz/tags/python/"/>
    
    <category term="WordPress" scheme="https://blog.fyz666.xyz/tags/wordpress/"/>
    
    <category term="Markdown" scheme="https://blog.fyz666.xyz/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>优雅地管理SSL证书及其关联服务</title>
    <link href="https://blog.fyz666.xyz/blog/10068/"/>
    <id>https://blog.fyz666.xyz/blog/10068/</id>
    <published>2024-04-02T15:09:38.000Z</published>
    <updated>2024-05-11T08:15:27.837Z</updated>
    
    <content type="html"><![CDATA[<p>我的服务器上开着一堆服务，其中有一些需要用到SSL证书，例如Nginx及前面刚刚部署的邮件服务。我的SSL证书是通过certbot向Let’s Encrypt申请的，证书有效期为90天，也就是说每隔80多天就得更新一下证书。</p><h2 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h2><p>在证书更新后，自然需要将所有用到证书的服务reload一下，以加载新的证书，通常我会写一条crontab作业来干这件事。之前我只有一台服务器A跑Nginx服务的时候，这样感觉还比较舒服，而现在情况变得更加复杂了：</p><p>这两年我都在维护我们实验室主办的学术会议的官网（规模不大，因此把官网部署在我的服务器上完全没问题），所以需要同时维护两个域名的证书。另外，我现在还同时维护着另一台B服务器——两台服务器上的服务共享着同一个域名证书，所以需要在A服务器上的证书更新时同步到B服务器上，并在B服务器上reload所有用到证书的服务。</p><p>于是原先的方法感觉就不太优雅了。正巧这两天iBug大佬发布了一篇文章，介绍了一种通过systemd来reload一些服务的方法：</p><a class="tag-Link" target="_blank" href="https://ibug.io/blog/2024/03/reload-ssl-cert-with-systemd/">    <div class="tag-link-tips">引用站外地址，不保证站点的可用性和安全性</div>    <div class="tag-link-bottom">        <div class="tag-link-left">            <img src="https://api.iowen.cn/favicon/ibug.io/blog/2024/03/reload-ssl-cert-with-systemd/.png" onerror="this.onerror=null;this.src='/images/default-link.png';" />        </div>        <div class="tag-link-right">            <div class="tag-link-title">Reload SSL certificates with systemd</div>            <div class="tag-link-sitename">iBug</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a><p>看上去非常优雅，于是我学习了一下，也给整了起来。</p><h2 id="服务器A上的操作"><a href="#服务器A上的操作" class="headerlink" title="服务器A上的操作"></a>服务器A上的操作</h2><p>首先我将申请证书的脚本从certbot换成了更轻量的<a href="https://github.com/acmesh-official/acme.sh">acme.sh</a>，安装完成后直接支持通过接入cloudflare以及godaddy的dns api来更新泛域名证书（而certbot则需要分别安装两者的插件，感觉稍显笨重）</p><p>我将A服务器作为更新证书的机器，更新证书后自动同步给B，在A服务器上只有Nginx服务需要reload，因此先创建<code>/etc/systemd/system/ssl-certificate.target</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># /etc/systemd/system/ssl-certificate.target</span><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span><span class="token assign-left variable">Description</span><span class="token operator">=</span>SSL certificates reload helper<span class="token assign-left variable">PropagatesReloadTo</span><span class="token operator">=</span>nginx.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后创建一个path文件<code>/etc/systemd/system/ssl-certificate.path</code>来监听证书文件的变更事件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># /etc/systemd/system/ssl-certificate.path</span><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span><span class="token assign-left variable">Description</span><span class="token operator">=</span>SSL certificate reload helper<span class="token assign-left variable">Wants</span><span class="token operator">=</span>%N.target<span class="token punctuation">[</span>Path<span class="token punctuation">]</span><span class="token assign-left variable">PathChanged</span><span class="token operator">=</span>/path/to/cert1/fullchain.cer<span class="token assign-left variable">PathChanged</span><span class="token operator">=</span>/path/to/cert2/fullchain.cer<span class="token punctuation">[</span>Install<span class="token punctuation">]</span><span class="token assign-left variable">WantedBy</span><span class="token operator">=</span>multi-user.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我有两个证书，所以这里加了两条<code>PathChanged</code>字段分别监听证书1和证书2的变更事件。</p><p>最后由于path单元只能激活服务而没办法重载服务，所以需要创建一个“一次性”的（oneshot）service，每次激活时来reload服务：</p><p><code>/etc/systemd/system/ssl-certificate.service</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># /etc/systemd/system/ssl-certificate.service</span><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span><span class="token assign-left variable">Description</span><span class="token operator">=</span>SSL certificate reload helper<span class="token assign-left variable">StartLimitIntervalSec</span><span class="token operator">=</span>5s<span class="token assign-left variable">StartLimitBurst</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">[</span>Service<span class="token punctuation">]</span><span class="token assign-left variable">Type</span><span class="token operator">=</span>oneshot<span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/bin/sh <span class="token parameter variable">-c</span> <span class="token string">'/bin/systemctl reload %N.target; /usr/local/bin/rsync_cert.sh'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我需要额外执行的工作还有向B服务器同步证书1，因此采用了将两条命令写在一起的方式。同步证书则使用了<code>rsync</code>命令。</p><p><code>/usr/local/bin/rsync_cert.sh</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token function">rsync</span> <span class="token parameter variable">-avzL</span> <span class="token parameter variable">-e</span> <span class="token string">'ssh -i /path/to/priv_key'</span> /path/to/cert1/ user@serverB:/path/to/cert1/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>需要先手动执行一下这个脚本将服务器B的公钥写入到<code>~/.ssh/known_hosts</code>，后面就能自动化了。</p><p>最后启动创建的path单元：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl daemon-reloadsystemctl <span class="token builtin class-name">enable</span> <span class="token parameter variable">--now</span> ssl-certificate.path<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="服务器B上的操作"><a href="#服务器B上的操作" class="headerlink" title="服务器B上的操作"></a>服务器B上的操作</h2><p>在服务器B上，同样可以创建与前面相似的<code>target</code>、<code>path</code>及<code>service</code>单元，这样当新的证书同步过去后，也会触发reload。</p><p>由于我的mailserver是部署在docker里的，好像不太好通过systemd来维护，因此同样采用了这种更愚蠢的办法，只是因为命令比较多，就干脆专门写了一个文件：</p><p><code>/etc/systemd/system/ssl-certificate.service</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># /etc/systemd/system/ssl-certificate.service</span><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span><span class="token assign-left variable">Description</span><span class="token operator">=</span>SSL certificate reload helper<span class="token assign-left variable">StartLimitIntervalSec</span><span class="token operator">=</span>5s<span class="token assign-left variable">StartLimitBurst</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">[</span>Service<span class="token punctuation">]</span><span class="token assign-left variable">Type</span><span class="token operator">=</span>oneshot<span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/local/bin/reload-services.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>/usr/local/bin/reload-services.sh</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token builtin class-name">set</span> +e/bin/systemctl reload ssl-certificate.target/bin/docker <span class="token builtin class-name">exec</span> mailserver postfix reload/bin/docker <span class="token builtin class-name">exec</span> mailserver dovecot reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如此配置，当SSL证书更新时，两台服务器上的所有相关服务都可以顺利自动重新加载证书了！</p>]]></content>
    
    
    <summary type="html">通过systemd来重载SSL证书</summary>
    
    
    
    <category term="瞎捣鼓经历" scheme="https://blog.fyz666.xyz/categories/%E7%9E%8E%E6%8D%A3%E9%BC%93%E7%BB%8F%E5%8E%86/"/>
    
    
    <category term="Linux" scheme="https://blog.fyz666.xyz/tags/linux/"/>
    
    <category term="SSL" scheme="https://blog.fyz666.xyz/tags/ssl/"/>
    
  </entry>
  
  <entry>
    <title>使用Nginx反向代理DoH服务</title>
    <link href="https://blog.fyz666.xyz/blog/10026/"/>
    <id>https://blog.fyz666.xyz/blog/10026/</id>
    <published>2024-03-28T03:32:32.000Z</published>
    <updated>2024-05-11T08:15:27.837Z</updated>
    
    <content type="html"><![CDATA[<p>DoH（DNS over Https）是一种通过HTTPS来进行DNS解析的协议，它使用HTTPS协议加密DoH客户端和基于DoH的DNS解析程序之间的数据，防止中间人对DNS数据的窃听和操纵，从而提高客户端隐私和安全性。</p><p>国内外都有一些服务商提供公共的DoH服务，不过由于一些众所周知的原因，我会更倾向于使用国外服务商的DoH，随便列举几条比较知名的：</p><ul><li>OpenDNS: <code>https://doh.opendns.com/dns-query</code></li><li>CloudFlare: <code>https://cloudflare-dns.com/dns-query</code></li><li>dns.sb: <code>https://doh.dns.sb/dns-query</code></li><li>Google: <code>https://dns.google/resolve</code></li><li>IBM Quad9: <code>https://dns.quad9.net:5053/dns-query</code></li></ul><p>同样的，由于一些原因，我们访问这些服务会有些困难。考虑到我有一台位于海外的云服务器，因此可以考虑通过Nginx做一个反向代理，来间接访问这些服务。下面是我配置的反向代理：</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">upstream</span> google</span><span class="token punctuation">&#123;</span>  <span class="token directive"><span class="token keyword">server</span> 8.8.8.8:443</span><span class="token punctuation">;</span>  <span class="token directive"><span class="token keyword">server</span> 8.8.4.4:443</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token directive"><span class="token keyword">upstream</span> cloudflare</span><span class="token punctuation">&#123;</span>  <span class="token directive"><span class="token keyword">server</span> 104.16.249.249:443</span><span class="token punctuation">;</span>  <span class="token directive"><span class="token keyword">server</span> 104.16.248.249:443</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token directive"><span class="token keyword">upstream</span> sbdns</span><span class="token punctuation">&#123;</span>  <span class="token directive"><span class="token keyword">server</span> 185.222.222.222:443</span><span class="token punctuation">;</span>  <span class="token directive"><span class="token keyword">server</span> 103.121.210.210:443</span><span class="token punctuation">;</span>  <span class="token directive"><span class="token keyword">server</span> 202.5.221.130:443</span><span class="token punctuation">;</span>  <span class="token directive"><span class="token keyword">server</span> 202.5.221.131:443</span><span class="token punctuation">;</span>  <span class="token directive"><span class="token keyword">server</span> 202.5.221.132:443</span><span class="token punctuation">;</span>  <span class="token directive"><span class="token keyword">server</span> 202.5.221.133:443</span><span class="token punctuation">;</span>  <span class="token directive"><span class="token keyword">server</span> 202.5.221.134:443</span><span class="token punctuation">;</span>  <span class="token directive"><span class="token keyword">server</span> 45.125.0.26:443</span><span class="token punctuation">;</span>  <span class="token directive"><span class="token keyword">server</span> 165.22.61.129:443</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token directive"><span class="token keyword">upstream</span> opendns</span><span class="token punctuation">&#123;</span>  <span class="token directive"><span class="token keyword">server</span> 146.112.41.2:443</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token directive"><span class="token keyword">upstream</span> ibm-quad9</span><span class="token punctuation">&#123;</span>  <span class="token directive"><span class="token keyword">server</span> 9.9.9.9:5053</span><span class="token punctuation">;</span>  <span class="token directive"><span class="token keyword">server</span> 149.112.112.112:5053</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token directive"><span class="token keyword">server</span></span><span class="token punctuation">&#123;</span>  ...  <span class="token directive"><span class="token keyword">location</span> /query-google</span><span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">proxy_pass</span> https://google/resolve</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">proxy_set_header</span> Host dns.google</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">proxy_set_header</span> accept application/dns-json</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Real-IP <span class="token variable">$remote_addr</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Forwarded-For <span class="token variable">$proxy_add_x_forwarded_for</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Forwarded-Proto <span class="token variable">$scheme</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">proxy_pass_request_headers</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token directive"><span class="token keyword">location</span> /query-cf</span><span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">proxy_pass</span> https://cloudflare/dns-query</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">proxy_set_header</span> Host cloudflare-dns.com</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">proxy_set_header</span> accept application/dns-json</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Real-IP <span class="token variable">$remote_addr</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Forwarded-For <span class="token variable">$proxy_add_x_forwarded_for</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Forwarded-Proto <span class="token variable">$scheme</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">proxy_pass_request_headers</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token directive"><span class="token keyword">location</span> /query-sb</span><span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">proxy_pass</span> https://sbdns/dns-query</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">proxy_set_header</span> Host doh.sb</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">proxy_set_header</span> accept application/dns-json</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Real-IP <span class="token variable">$remote_addr</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Forwarded-For <span class="token variable">$proxy_add_x_forwarded_for</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Forwarded-Proto <span class="token variable">$scheme</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">proxy_pass_request_headers</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token directive"><span class="token keyword">location</span> /query-ibm</span><span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">proxy_pass</span> https://ibm-quad9/dns-query</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">proxy_set_header</span> Host dns.quad9.net</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">proxy_set_header</span> accept application/dns-json</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Real-IP <span class="token variable">$remote_addr</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Forwarded-For <span class="token variable">$proxy_add_x_forwarded_for</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Forwarded-Proto <span class="token variable">$scheme</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">proxy_pass_request_headers</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token directive"><span class="token keyword">location</span> /</span><span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">default_type</span> text/html</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">return</span> <span class="token number">418</span> <span class="token string">"I'm a teapot"</span></span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如此，就可以通过这个反向代理来对这些海外公共DoH服务进行访问了，使用的方法也很简单，可以用<a href="https://github.com/cloudflare/cloudflared">cloudflared</a>将其部署在树莓派之类的设备上。</p><p>为了避免通过域名DoH来解析自己导致死循环，可以加一个本地host。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;DoH（DNS over</summary>
        
      
    
    
    
    <category term="瞎捣鼓经历" scheme="https://blog.fyz666.xyz/categories/%E7%9E%8E%E6%8D%A3%E9%BC%93%E7%BB%8F%E5%8E%86/"/>
    
    
    <category term="Nginx" scheme="https://blog.fyz666.xyz/tags/nginx/"/>
    
    <category term="DNS" scheme="https://blog.fyz666.xyz/tags/dns/"/>
    
    <category term="反向代理" scheme="https://blog.fyz666.xyz/tags/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    
    <category term="DNS over HTTPS" scheme="https://blog.fyz666.xyz/tags/dns-over-https/"/>
    
  </entry>
  
  <entry>
    <title>自部署邮箱接收不到某些邮件的原因排查</title>
    <link href="https://blog.fyz666.xyz/blog/10001/"/>
    <id>https://blog.fyz666.xyz/blog/10001/</id>
    <published>2024-03-24T09:14:31.000Z</published>
    <updated>2024-05-11T08:15:27.837Z</updated>
    
    <content type="html"><![CDATA[<p>用上自部署邮箱后，我就将一些社交平台的绑定邮箱换成了自己的新邮箱。然而某些平台的验证邮件却始终无法收到——即使在垃圾邮件箱。</p><ul><li>Twitter</li></ul><p>查看日志后发现以下内容：</p><pre class="line-numbers language-raw" data-language="raw"><code class="language-raw">Mar 24 03:13:07 mail postfix&#x2F;smtpd[27111]: connect from spruce-goose-al.twitter.com[199.59.150.81]Mar 24 03:13:07 mail postfix&#x2F;smtpd[27111]: Anonymous TLS connection established from spruce-goose-al.twitter.com[199.59.150.81]: TLSv1.2 with cipher ECDHE-ECDSA-AES256-GCM-SHA384 (256&#x2F;256 bits)Mar 24 03:13:08 mail postfix&#x2F;smtpd[27111]: CD556EB3A9: client&#x3D;spruce-goose-al.twitter.com[199.59.150.81]Mar 24 03:13:09 mail opendkim[695]: CD556EB3A9: spruce-goose-al.twitter.com [199.59.150.81] not internalMar 24 03:13:14 mail postfix&#x2F;cleanup[27120]: CD556EB3A9: milter-reject: END-OF-MESSAGE from spruce-goose-al.twitter.com[199.59.150.81]: 5.7.1 rejected by DMARC policy for x.com; from&#x3D;&lt;n08055319d2-77aa9b8824bc4a3a-me&#x3D;&#x3D;&#x3D;mail.fyz666.xyz@bounce.x.com&gt; to&#x3D;&lt;me@mail.fyz666.xyz&gt; proto&#x3D;ESMTP helo&#x3D;&lt;spruce-goose-al.x.com&gt;Mar 24 03:13:19 mail postfix&#x2F;smtpd[27111]: disconnect from spruce-goose-al.twitter.com[199.59.150.81] ehlo&#x3D;2 starttls&#x3D;1 mail&#x3D;1 rcpt&#x3D;1 data&#x3D;0&#x2F;1 quit&#x3D;1 commands&#x3D;6&#x2F;7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现这封来自twitter的邮件似乎因为DMARC验证失败而被reject了：rejected by DMARC policy for x.com;</p><p><del>看来应该是twitter的锅。</del>考虑到之前DMARC的DNS解析内容是<code>v=DMARC1; p=quarantine;</code> 为了能正常接收到邮件，根据<a href="https://github.com/internetstandards/toolbox-wiki/blob/main/DMARC-how-to.md#overview-of-dmarc-configuration-tags">这个文档</a>的解释，我尝试了一下将这里p的值改成了<code>none</code>。</p><p>过了一段时间等DNS缓存刷新后再次进行尝试，发现可以正常收到邮件了。</p><hr><ul><li>Oray</li></ul><pre class="line-numbers language-raw" data-language="raw"><code class="language-raw">Mar 25 22:44:09 mail policyd-spf[507719]: prepend Received-SPF: None (mailfrom) identity&#x3D;mailfrom; client-ip&#x3D;140.205.208.10; helo&#x3D;out208-10.dm.aliyun.com; envelope-from&#x3D;no-reply@news.oray.cn; receiver&#x3D;&lt;UNKNOWN&gt;Mar 25 22:44:09 mail opendmarc[703]: 44B5BEB3AD: news.oray.cn noneMar 25 22:44:09 mail postfix&#x2F;qmgr[162952]: 44B5BEB3AD: from&#x3D;&lt;no-reply@news.oray.cn&gt;, size&#x3D;3073, nrcpt&#x3D;1 (queue active)Mar 25 22:44:09 mail amavis[162976]: (162976-16) Blocked BAD-HEADER-0 &#123;BouncedInbound,Quarantined&#125;, [140.205.208.10]:45205 [140.205.208.10] &lt;no-reply@news.oray.cn&gt; -&gt; &lt;me@mail.fyz666.xyz&gt;, quarantine: V&#x2F;badh-V4on_mWyAIEY, Queue-ID: 44B5BEB3AD, mail_id: V4on_mWyAIEY, Hits: -, size: 2953, 72 msMar 25 22:44:15 mail postfix&#x2F;smtp[507949]: EB1C6EB3EA: to&#x3D;&lt;no-reply@news.oray.cn&gt;, relay&#x3D;mx100.olivemail.net[119.38.129.76]:25, delay&#x3D;5.3, delays&#x3D;0.01&#x2F;0.01&#x2F;2&#x2F;3.2, dsn&#x3D;5.0.0, status&#x3D;bounced (host mx100.olivemail.net[119.38.129.76] said: 550 User not found: no-reply@news.oray.cn (in reply to RCPT TO command))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>好像是<a href="https://en.wikipedia.org/wiki/Amavis">Amavis</a>把它拦了。Amavis是一个开源的电子邮件内容过滤器，这里的日志提到了BAD-HEADER-0，应该是邮件头部之类的问题。查到<a href="https://github.com/docker-mailserver/docker-mailserver/issues/1498">这个issue</a>，为了解决这个问题，可以直接将这个头部过滤策略去掉。</p><p>新建<code>docker-data/dms/config/amavis.cf</code>文件，写入下面内容：</p><pre class="line-numbers language-none"><code class="language-none">$final_bad_header_destiny &#x3D; D_PASS;$bad_header_quarantine_to &#x3D; undef;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后重启容器即可。</p><p>注意，重启docker-mailserver不能使用<code>docker restart</code>命令，而必须先<code>docker compose down</code>再<code>docker compose up -d</code></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;用上自部署邮箱后，我就将一些社交平台的绑定邮箱换成了自己的新邮箱。然而某些平台的验证邮件却始终无法收到——即使在垃圾邮件箱。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Twitter&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;查看日志后发现以下内容：&lt;/p&gt;
&lt;pre</summary>
        
      
    
    
    
    <category term="Debug" scheme="https://blog.fyz666.xyz/categories/debug/"/>
    
    
    <category term="Email" scheme="https://blog.fyz666.xyz/tags/email/"/>
    
    <category term="Docker-mailserver" scheme="https://blog.fyz666.xyz/tags/docker-mailserver/"/>
    
  </entry>
  
  <entry>
    <title>自建docker-mailserver邮件服务器</title>
    <link href="https://blog.fyz666.xyz/blog/9930/"/>
    <id>https://blog.fyz666.xyz/blog/9930/</id>
    <published>2024-03-20T17:06:36.000Z</published>
    <updated>2024-05-11T08:15:27.837Z</updated>
    
    <content type="html"><![CDATA[<p>大约两年前我就想过整一个自己域名的邮件服务，这样就可以随意注册邮箱账号了，<del>而且看上去很帅</del>。然而这件事却一拖再拖，到今天总算是整上了，于是就在这里记录一下整的过程。</p><p><img src="https://fastly.jsdelivr.net/gh/windshadow233/BlogStorage@files/png/0455fced579cc6ca57b6e07c464dd553.png" alt=""><br>我所使用的服务器是腾讯云的轻量应用服务器，地域在新加坡，配置是最low的2核2G入门型，由于配置比较低还跑了一些其他的服务，我只能放弃一些诸如mailcow这样的选项，最后选择的是比较轻量的<a href="https://github.com/docker-mailserver/docker-mailserver/">docker-mailserver</a>，不开启反病毒功能的前提下内存占用比较少。</p><h2 id="一些约定"><a href="#一些约定" class="headerlink" title="一些约定"></a>一些约定</h2><p>为了方便描述，本文中出现的下面内容均为示例，需要替换为实际值。</p><ul><li>一级域名：example.com</li><li>邮件服务器域名：mail.example.com</li><li>主机IP地址：1.2.3.4</li><li>邮件用户名：admin</li><li>邮件用户密码：password</li></ul><p>涉及到的所有DNS解析，均只写主机名，而省略一级域名example.com。</p><h2 id="开启端口"><a href="#开启端口" class="headerlink" title="开启端口"></a>开启端口</h2><p>邮件服务器需要用到的端口非常多，首先需要确保没有其他进程占用这些端口，并将它们打开：</p><ul><li>25：SMTP（显式TLS端口，不可用于身份认证）</li><li>143：IMAP4（显式TLS端口）</li><li>465：ESMTP（隐式TLS端口）</li><li>587：ESMTP（显式TLS端口）</li><li>993：IMAP4 (隐式TLS端口)</li><li>110：POP3</li><li>995：POP3（TLS端口）</li></ul><p>其中25端口被一些国内主机商默认封锁，需要手动申请解封。我的服务器好像没有封，不拿来发邮件感觉问题不大。</p><p>对于这些乱七八糟的端口的理解可以参考<a href="https://docker-mailserver.github.io/docker-mailserver/latest/config/security/understanding-the-ports/#overview-of-email-ports">这个链接</a>。</p><h2 id="解析DNS"><a href="#解析DNS" class="headerlink" title="解析DNS"></a>解析DNS</h2><p>在开始之前，需要做几条基本的DNS解析。</p><ul><li>A记录：<code>mail -&gt; 1.2.3.4</code></li><li>MX记录：<code>mail -&gt; mail.example.com</code></li></ul><h2 id="正式开始安装"><a href="#正式开始安装" class="headerlink" title="正式开始安装"></a>正式开始安装</h2><h3 id="下载、修改配置文件"><a href="#下载、修改配置文件" class="headerlink" title="下载、修改配置文件"></a>下载、修改配置文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> mailserver <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> mailserver<span class="token assign-left variable">DMS_GITHUB_URL</span><span class="token operator">=</span><span class="token string">'https://raw.githubusercontent.com/docker-mailserver/docker-mailserver/master'</span><span class="token function">wget</span> <span class="token string">"<span class="token variable">$&#123;DMS_GITHUB_URL&#125;</span>/compose.yaml"</span><span class="token function">wget</span> <span class="token string">"<span class="token variable">$&#123;DMS_GITHUB_URL&#125;</span>/mailserver.env"</span><span class="token function">wget</span> <span class="token string">"<span class="token variable">$&#123;DMS_GITHUB_URL&#125;</span>/setup.sh"</span><span class="token function">chmod</span> +x setup.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>修改compose.yaml：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">mailserver</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> ghcr.io/docker<span class="token punctuation">-</span>mailserver/docker<span class="token punctuation">-</span>mailserver<span class="token punctuation">:</span>latest    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> mailserver    <span class="token comment"># Provide the FQDN of your mail server here (Your DNS MX record should point to this value)</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> mail.example.com    <span class="token key atrule">env_file</span><span class="token punctuation">:</span> mailserver.env    <span class="token comment"># More information about the mail-server ports:</span>    <span class="token comment"># https://docker-mailserver.github.io/docker-mailserver/latest/config/security/understanding-the-ports/</span>    <span class="token comment"># To avoid conflicts with yaml base-60 float, DO NOT remove the quotation marks.</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"25:25"</span>    <span class="token comment"># SMTP  (explicit TLS => STARTTLS, Authentication is DISABLED => use port 465/587 instead)</span>      <span class="token punctuation">-</span> <span class="token string">"143:143"</span>  <span class="token comment"># IMAP4 (explicit TLS => STARTTLS)</span>      <span class="token punctuation">-</span> <span class="token string">"465:465"</span>  <span class="token comment"># ESMTP (implicit TLS)</span>      <span class="token punctuation">-</span> <span class="token string">"587:587"</span>  <span class="token comment"># ESMTP (explicit TLS => STARTTLS)</span>      <span class="token punctuation">-</span> <span class="token string">"993:993"</span>  <span class="token comment"># IMAP4 (implicit TLS)</span>      <span class="token punctuation">-</span> <span class="token string">"110:110"</span>  <span class="token comment"># POP3</span>      <span class="token punctuation">-</span> <span class="token string">"995:995"</span>  <span class="token comment"># POP3 (with TLS)</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> /root/.certificates/<span class="token punctuation">:</span>/etc/letsencrypt/  <span class="token comment"># 挂载证书</span>      <span class="token punctuation">-</span> ./docker<span class="token punctuation">-</span>data/dms/mail<span class="token punctuation">-</span>data/<span class="token punctuation">:</span>/var/mail/      <span class="token punctuation">-</span> ./docker<span class="token punctuation">-</span>data/dms/mail<span class="token punctuation">-</span>state/<span class="token punctuation">:</span>/var/mail<span class="token punctuation">-</span>state/      <span class="token punctuation">-</span> ./docker<span class="token punctuation">-</span>data/dms/mail<span class="token punctuation">-</span>logs/<span class="token punctuation">:</span>/var/log/mail/      <span class="token punctuation">-</span> ./docker<span class="token punctuation">-</span>data/dms/config/<span class="token punctuation">:</span>/tmp/docker<span class="token punctuation">-</span>mailserver/      <span class="token punctuation">-</span> /etc/localtime<span class="token punctuation">:</span>/etc/localtime<span class="token punctuation">:</span>ro    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">stop_grace_period</span><span class="token punctuation">:</span> 1m    <span class="token comment"># Uncomment if using `ENABLE_FAIL2BAN=1`:</span>    <span class="token key atrule">cap_add</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> NET_ADMIN    <span class="token key atrule">healthcheck</span><span class="token punctuation">:</span>      <span class="token key atrule">test</span><span class="token punctuation">:</span> <span class="token string">"ss --listening --tcp | grep -P 'LISTEN.+:smtp' || exit 1"</span>      <span class="token key atrule">timeout</span><span class="token punctuation">:</span> 3s      <span class="token key atrule">retries</span><span class="token punctuation">:</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我将主机上已经有的域名证书直接挂载到了容器内，以便容器内的邮件服务对其进行读取，如果还没有证书，则也可以在后面设置用Let’s Encrypt获取。</p><p>另外添加了POP3的两个端口映射。</p><hr><p>修改mailserver.env：</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini">...<span class="token key attr-name">ENABLE_POP3</span><span class="token punctuation">=</span><span class="token value attr-value">1  # 开启POP3协议</span>...<span class="token key attr-name">SSL_TYPE</span><span class="token punctuation">=</span><span class="token value attr-value">manual  # 指定SSL证书类型，manual表示手动指定路径，这里可以改成letsencrypt（自动获取）</span><span class="token comment"># 如果是manual，则手动填写下面的路径</span><span class="token key attr-name">SSL_CERT_PATH</span><span class="token punctuation">=</span><span class="token value attr-value">/path/to/fullchain.pem</span><span class="token key attr-name">SSL_KEY_PATH</span><span class="token punctuation">=</span><span class="token value attr-value">/path/to/privkey.pem</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="设置邮件账户"><a href="#设置邮件账户" class="headerlink" title="设置邮件账户"></a>设置邮件账户</h3><p>这个邮件服务在启动之前得预先设置一个邮件账户。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./setup.sh email <span class="token function">add</span> admin@mail.example.com password./setup.sh <span class="token builtin class-name">alias</span> <span class="token function">add</span> postmaster@mail.example.com admin@mail.example.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>创建了一个admin用户（不一定得是admin），然后添加了一条alias将postmaster用户指向它。</p><h3 id="添加额外的DNS解析"><a href="#添加额外的DNS解析" class="headerlink" title="添加额外的DNS解析"></a>添加额外的DNS解析</h3><p>接下来需要添几条与邮件安全相关的DNS。</p><ul><li>SPF记录</li></ul><blockquote><p><strong>发件人策略框架</strong>（英语：<strong>Sender Policy Framework</strong>；简称<strong>SPF</strong>； RFC 4408）是一套电子邮件认证机制，可以确认电子邮件确实是由网域授权的邮件服务器寄出，防止有人伪冒身份网络钓鱼或寄出垃圾电邮。SPF允许管理员设定一个DNS TXT记录或SPF记录设定发送邮件服务器的IP范围，如有任何邮件并非从上述指明授权的IP地址寄出，则很可能该邮件并非确实由真正的寄件者寄出（邮件上声称的“寄件者”为假冒）。</p><p><a href="https://zh.wikipedia.org/wiki/%E5%8F%91%E4%BB%B6%E4%BA%BA%E7%AD%96%E7%95%A5%E6%A1%86%E6%9E%B6">维基百科：SPF</a></p></blockquote><p><code>TXT mail -&gt; &quot;v=spf1 a mx ip4:1.2.3.4 ~all&quot;</code></p><p>SPF语法详见<a href="http://www.open-spf.org/SPF_Record_Syntax/">此链接</a>。</p><ul><li>DMARC记录</li></ul><blockquote><p><strong>基于域的消息认证，报告和一致性</strong>（英语：<strong>Domain-based Message Authentication, Reporting and Conformance</strong>，简称<strong>DMARC</strong>）是一套以SPF及DKIM为基础的电子邮件认证机制，可以检测及防止伪冒身份、对付网络钓鱼或垃圾电邮。</p><p><a href="https://zh.wikipedia.org/wiki/%E5%9F%BA%E4%BA%8E%E5%9F%9F%E7%9A%84%E6%B6%88%E6%81%AF%E8%AE%A4%E8%AF%81%EF%BC%8C%E6%8A%A5%E5%91%8A%E5%92%8C%E4%B8%80%E8%87%B4%E6%80%A7">维基百科：DMARC</a></p></blockquote><p><code>TXT _dmarc.mail -&gt; &quot;v=DMARC1; p=quarantine; sp=none; fo=0; adkim=r; aspf=r; pct=100; rf=afrf; ri=86400; rua=mailto:postmaster@mail.example.com; ruf=mailto:postmaster@mail.example.com&quot;</code></p><p>DMARC的详细配置见<a href="https://github.com/internetstandards/toolbox-wiki/blob/main/DMARC-how-to.md#overview-of-dmarc-configuration-tags">此链接</a>。</p><ul><li>DKIM记录</li></ul><blockquote><p><strong>域名密钥识别邮件</strong>（英语：<strong>DomainKeys Identified Mail</strong>，简称<strong>DKIM</strong>）是一套电子邮件认证机制，使用公开密钥加密的基础提供了数字签名与身份验证的功能，以检测寄件者、主旨、内文、附件等部分有否被伪冒或窜改。</p><p><a href="https://zh.wikipedia.org/wiki/%E5%9F%9F%E5%90%8D%E5%AF%86%E9%92%A5%E8%AF%86%E5%88%AB%E9%82%AE%E4%BB%B6">维基百科：DKIM</a></p></blockquote><p>这个相当于将公钥通过DNS解析的方式分发到客户端，发件服务器用私钥签名，从而收件方可验证来源。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./setup.sh config dkim<span class="token function">cat</span> docker-data/dms/config/opendkim/keys/mail.example.com/mail.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>将<code>cat</code>得到的<code>( &quot;</code>与<code>&quot; )</code>之间的内容（记为X）解析到DNS：</p><p><code>TXT mail._domainkey.mail -&gt; X</code></p><hr><p>如果可以的话，再设置一条PTR记录（DNS反向解析记录），用以降低被识别为垃圾邮件的概率。（然而腾讯云轻量应用服务器不给解析，就此作罢。）</p><p><img src="https://fastly.jsdelivr.net/gh/windshadow233/BlogStorage@files/png/6f5e6a22c0ea026754c435320961ced8.png" alt=""></p><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><p>在启动服务之前，由于一个<a href="https://github.com/docker-mailserver/docker-mailserver/issues/2545">也许是feature的bug</a>，我们需要给容器打一个<a href="https://github.com/docker-mailserver/docker-mailserver/issues/2545#issuecomment-1097590082">patch</a>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token comment">##</span><span class="token comment">## to match what should be escaped whitespaces are escapted with \s and the other character with \character</span><span class="token comment">## the final string does not need to be escaped</span><span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s/mydestination\s=\s\$myhostname,\slocalhost\.\$mydomain,\slocalhost/mydestination=localhost.$mydomain,localhost/g'</span> /etc/postfix/main.cf<span class="token builtin class-name">echo</span> <span class="token string">"user-patches.sh successfully executed with custom main.cf hotfix"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将上述脚本放置在<code>docker-data/dms/config/user-patches.sh</code>，然后：</p><pre class="line-numbers language-none"><code class="language-none">docker compose up -d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以前往<a href="https://www.checktls.com/TestReceiver">这个网站</a>测试一下tls是否可用。</p><p>实测该服务占用内存在100M左右，可以说是非常轻量了：</p><p><img src="https://fastly.jsdelivr.net/gh/windshadow233/BlogStorage@files/png/ccdbb9f72cb72b3f22b9dd6d310c8f2e.png" alt=""></p><h2 id="部署起来了，然而怎么使用？"><a href="#部署起来了，然而怎么使用？" class="headerlink" title="部署起来了，然而怎么使用？"></a>部署起来了，然而怎么使用？</h2><p>这个邮件服务器并没有自带的web服务，因此我们需要使用第三方客户端来登录账号，进行邮件收发。</p><p>使用Python脚本通过587端口发邮件：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> smtplib<span class="token keyword">from</span> email<span class="token punctuation">.</span>mime<span class="token punctuation">.</span>text <span class="token keyword">import</span> MIMEText<span class="token keyword">from</span> email<span class="token punctuation">.</span>utils <span class="token keyword">import</span> formatdatemail_host <span class="token operator">=</span> <span class="token string">'mail.example.com'</span>mail_user <span class="token operator">=</span> <span class="token string">'admin@mail.example.com'</span>mail_pass <span class="token operator">=</span> <span class="token string">'password'</span>sender <span class="token operator">=</span> <span class="token string">'FBI'</span>receivers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'admin@mail.114514.com'</span><span class="token punctuation">]</span>content <span class="token operator">=</span> <span class="token triple-quoted-string string">"""Open the door!!!"""</span>message <span class="token operator">=</span> MIMEText<span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token string">'plain'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>message<span class="token punctuation">[</span><span class="token string">'Subject'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Your email has been hacked!'</span>message<span class="token punctuation">[</span><span class="token string">'From'</span><span class="token punctuation">]</span> <span class="token operator">=</span> sendermessage<span class="token punctuation">[</span><span class="token string">'To'</span><span class="token punctuation">]</span> <span class="token operator">=</span> receivers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>message<span class="token punctuation">[</span><span class="token string">'Date'</span><span class="token punctuation">]</span> <span class="token operator">=</span> formatdate<span class="token punctuation">(</span><span class="token punctuation">)</span>server <span class="token operator">=</span> smtplib<span class="token punctuation">.</span>SMTP<span class="token punctuation">(</span>mail_host<span class="token punctuation">,</span> <span class="token number">587</span><span class="token punctuation">)</span>  <span class="token comment"># 连接587端口</span>server<span class="token punctuation">.</span>ehlo<span class="token punctuation">(</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span>starttls<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 开启tls</span>server<span class="token punctuation">.</span>login<span class="token punctuation">(</span>mail_user<span class="token punctuation">,</span> mail_pass<span class="token punctuation">)</span>server<span class="token punctuation">.</span>sendmail<span class="token punctuation">(</span>sender<span class="token punctuation">,</span> receivers<span class="token punctuation">,</span> message<span class="token punctuation">.</span>as_string<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>iOS邮箱app：</p><p><img src="https://fastly.jsdelivr.net/gh/windshadow233/BlogStorage@files/jpg/daae7a2dfc0bb3254ab03f63a310f677.jpg" alt=""><br>后续设置中，将发件服务器端口设置为587或者465，勾选SSL。</p><hr><p>最后，可以在<a href="https://www.appmaildev.com/cn/dkim">这个网站</a>对上面设置的DKIM、SPF等进行测试：</p><p><img src="https://fastly.jsdelivr.net/gh/windshadow233/BlogStorage@files/png/14b1091c9c434b0cfa192e4a4fd7bf3c.png" alt=""><br>以及<a href="https://www.mail-tester.com/">这个网站</a>，可以进一步测试邮件的得分：</p><p><img src="https://fastly.jsdelivr.net/gh/windshadow233/BlogStorage@files/png/a0c2f4d194410ec75ac27e100222f5df.png" alt=""></p><p><img src="https://fastly.jsdelivr.net/gh/windshadow233/BlogStorage@files/png/edc8dedc399fae1343875e12fd967eca.png" alt=""><br>很遗憾，我的<code>.xyz</code>域名被识别为了<code>SUSPICIOUS_NTLD</code>，再加上用不上rDNS，估计会被以很高的置信度丢进垃圾箱了 🙁 以后再改进！</p>]]></content>
    
    
    <summary type="html">用docker部署了个邮件服务器～</summary>
    
    
    
    <category term="瞎捣鼓经历" scheme="https://blog.fyz666.xyz/categories/%E7%9E%8E%E6%8D%A3%E9%BC%93%E7%BB%8F%E5%8E%86/"/>
    
    
    <category term="Docker" scheme="https://blog.fyz666.xyz/tags/docker/"/>
    
    <category term="Email" scheme="https://blog.fyz666.xyz/tags/email/"/>
    
    <category term="Docker-mailserver" scheme="https://blog.fyz666.xyz/tags/docker-mailserver/"/>
    
  </entry>
  
  <entry>
    <title>Gitalk发起Oauth时无法完成跨域请求的问题</title>
    <link href="https://blog.fyz666.xyz/blog/9864/"/>
    <id>https://blog.fyz666.xyz/blog/9864/</id>
    <published>2024-03-19T09:14:25.000Z</published>
    <updated>2024-05-11T08:15:27.837Z</updated>
    
    <content type="html"><![CDATA[<p>我的博客接入Gitalk之后，经常会遇到Gitalk登录失败的问题，表现为Gitalk组件长时间转圈加载不出来，一段时间后渲染出Network Error等字样。</p><p>经过研究，发现是因为Gitalk在发起跨域请求时，其默认的代理出了问题，详情可见<a href="https://github.com/gitalk/gitalk/issues/514">此issue</a>。</p><pre class="line-numbers language-raw" data-language="raw"><code class="language-raw">https:&#x2F;&#x2F;cors-anywhere.azm.workers.dev&#x2F;https:&#x2F;&#x2F;github.com&#x2F;login&#x2F;oauth&#x2F;access_token<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面这个跨域代理的域名已经被墙了，在没有科学上网环境或网络环境差的时候就会寄。</p><p>于是我们可以自己整一个代理，方案有几种，如果没有云服务器，可以找一些免费的托管平台来搞一个代理，例如Vercel，可参考<a href="https://prohibitorum.top/7cc2c97a15b4.html">这篇文章</a></p><p>不过实际体验了一下，我发现vercel的域名好像也被墙了（DNS污染）。。。</p><p>考虑到我的网站是用Nginx部署在自己的云服务器上的，并且我的云服务器在境外，可以直连GitHub，因此我采用了另一种更加方便的方案，即用Nginx来转发跨域请求（参考自<a href="https://blog.weiyigeek.top/2022/8-17-682.html">这篇文章</a>）。</p><p>在网站的Nginx配置下加一条<code>location</code>字段：</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">location</span> /github</span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">if</span> (<span class="token variable">$request_method</span> = <span class="token string">'OPTIONS'</span>)</span> <span class="token punctuation">&#123;</span>      <span class="token directive"><span class="token keyword">return</span> <span class="token number">204</span></span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token directive"><span class="token keyword">proxy_pass</span> https://github.com/</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后<code>nginx -s reload</code>重新加载配置。</p><p>最后只要配置一下Gitalk组件，加一个<code>proxy</code>参数：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> gitalk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gitalk</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">clientID</span><span class="token operator">:</span> <span class="token string">'xxxxxxxxxxxxxxxx'</span><span class="token punctuation">,</span>    <span class="token literal-property property">clientSecret</span><span class="token operator">:</span> <span class="token string">'xxxxxxxxxxxxxxxx'</span><span class="token punctuation">,</span>    <span class="token literal-property property">body</span><span class="token operator">:</span> location<span class="token punctuation">.</span>href<span class="token punctuation">,</span>    <span class="token literal-property property">repo</span><span class="token operator">:</span> <span class="token string">'BlogComments'</span><span class="token punctuation">,</span>    <span class="token literal-property property">owner</span><span class="token operator">:</span> <span class="token string">'windshadow233'</span><span class="token punctuation">,</span>    <span class="token literal-property property">admin</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'windshadow233'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token literal-property property">createIssueManually</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token literal-property property">id</span><span class="token operator">:</span> location<span class="token punctuation">.</span>pathname<span class="token punctuation">,</span>    <span class="token literal-property property">distractionFreeMode</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token string">'/github/login/oauth/access_token'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;我的博客接入Gitalk之后，经常会遇到Gitalk登录失败的问题，表现为Gitalk组件长时间转圈加载不出来，一段时间后渲染出Network Error等字样。&lt;/p&gt;
&lt;p&gt;经过研究，发现是因为Gitalk在发起跨域请求时，其默认的代理出了问题，详情可见&lt;a</summary>
        
      
    
    
    
    <category term="Debug" scheme="https://blog.fyz666.xyz/categories/debug/"/>
    
    
    <category term="Nginx" scheme="https://blog.fyz666.xyz/tags/nginx/"/>
    
    <category term="CORS" scheme="https://blog.fyz666.xyz/tags/cors/"/>
    
    <category term="Oauth" scheme="https://blog.fyz666.xyz/tags/oauth/"/>
    
    <category term="Gitalk" scheme="https://blog.fyz666.xyz/tags/gitalk/"/>
    
  </entry>
  
  <entry>
    <title>博客接入Gitalk评论系统</title>
    <link href="https://blog.fyz666.xyz/blog/9827/"/>
    <id>https://blog.fyz666.xyz/blog/9827/</id>
    <published>2024-03-17T15:49:52.000Z</published>
    <updated>2024-05-11T08:15:27.837Z</updated>
    
    <content type="html"><![CDATA[<div class="note info simple"><p>2024-04-21 更新: 基于GitHub Issue的评论系统在嵌套评论时叠金字塔的行为太丑了，于是我已经将评论系统换成了基于GitHub Dissussion的<a href="https://github.com/giscus/giscus">Giscus</a>。</p></div><p>自从开始写这个博客以来，我就嫌博客主题自带的评论系统太丑，又懒得大改CSS，于是我的博客一直没有开启评论功能。</p><p>但忽然觉得不开评论区好像过于冷清<s>（虽然开了也不怎么会有人评论）</s>，然而我又不是很希望访客的评论占用数据库，因此我打算看看能不能整一个Serverless的评论系统。</p><p>最近接触了下GitHub REST API，于是想了一下，觉得既然GitHub的API那么方便，那为什么不试试把GitHub的Issue系统渲染到自己的网页上当评论系统用呢？（之前听说过有人拿GitHub当云存储的，<del>简直就是人才</del>）</p><p>考虑到受众群体应该不会有人没有GitHub账号，感觉这个想法很不错，然而当我研究的如火如荼之时，突然在网上搜到了别人已经造好的轮子：<a href="https://github.com/gitalk/gitalk">Gitalk</a>。<del>草，果然。</del></p><p><img src="https://fastly.jsdelivr.net/gh/windshadow233/BlogStorage@files/png/9c32e2867c784770c9937826c6403bf6.png" alt=""><br>那何不拿来主义？毕竟我也比较讨厌写前端代码。于是我啪就整起来了，很快啊！就把Gittalk接入了一下，说实话这个评论系统的前端还挺不错的，基本契合我用的主题，稍微改了一下夜间模式下的样式就OK了。</p><p>接入的方法已经在<a href="https://github.com/gitalk/gitalk/blob/master/readme.md">官方文档</a>中写的非常详细了，我则加了几条夜间模式CSS：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.darkmode--activated .gt-comment-content</span><span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> black<span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.darkmode--activated .gt-comment-content p, .darkmode--activated .gt-comment-body</span><span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.darkmode--activated .gt-popup</span><span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> black<span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.darkmode--activated .gt-header-preview</span><span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> black<span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> gitalk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gitalk</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">clientID</span><span class="token operator">:</span> <span class="token string">'xxxxxxxxxxxxxxxx'</span><span class="token punctuation">,</span>    <span class="token literal-property property">clientSecret</span><span class="token operator">:</span> <span class="token string">'xxxxxxxxxxxxxxxx'</span><span class="token punctuation">,</span>    <span class="token literal-property property">body</span><span class="token operator">:</span> location<span class="token punctuation">.</span>href<span class="token punctuation">,</span>    <span class="token literal-property property">repo</span><span class="token operator">:</span> <span class="token string">'BlogComments'</span><span class="token punctuation">,</span>    <span class="token literal-property property">owner</span><span class="token operator">:</span> <span class="token string">'windshadow233'</span><span class="token punctuation">,</span>    <span class="token literal-property property">admin</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'windshadow233'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token literal-property property">createIssueManually</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token literal-property property">id</span><span class="token operator">:</span> location<span class="token punctuation">.</span>pathname<span class="token punctuation">,</span>    <span class="token literal-property property">distractionFreeMode</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gitalk<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'gitalk-container'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据<a href="https://github.com/imsun/gitment?tab=readme-ov-file#about-security">这条解释</a>，把secret泄漏了似乎也并没有什么问题。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;div class=&quot;note info simple&quot;&gt;&lt;p&gt;2024-04-21 更新: 基于GitHub Issue的评论系统在嵌套评论时叠金字塔的行为太丑了，于是我已经将评论系统换成了基于GitHub Dissussion的&lt;a</summary>
        
      
    
    
    
    <category term="博客相关" scheme="https://blog.fyz666.xyz/categories/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/"/>
    
    
    <category term="GitHub API" scheme="https://blog.fyz666.xyz/tags/github-api/"/>
    
    <category term="Gitalk" scheme="https://blog.fyz666.xyz/tags/gitalk/"/>
    
  </entry>
  
  <entry>
    <title>一个随Star数动态变化的GitHub仓库</title>
    <link href="https://blog.fyz666.xyz/blog/9506/"/>
    <id>https://blog.fyz666.xyz/blog/9506/</id>
    <published>2024-02-23T18:00:43.000Z</published>
    <updated>2024-05-11T08:15:27.837Z</updated>
    
    <content type="html"><![CDATA[<p>几年前曾看到过@iBug大佬的<a href="https://github.com/iBug/This-Repo-Has-0-Stars">一个GitHub仓库</a>，这个仓库的名字以及描述会实时显示当前的Star数量，令当时的我觉得非常有意思，不过那会我并没有去研究原理。几年过去了，却不知昨天为啥突然想到，于是读了一下大佬的<a href="https://ibug.io/p/41">文章</a>，试着复现了一下。</p><p>我复现的仓库链接如下：</p><a class="tag-Link" target="_blank" href="https://github.com/windshadow233/This-Repo-Has-0-Stars">    <div class="tag-link-tips">引用站外地址，不保证站点的可用性和安全性</div>    <div class="tag-link-bottom">        <div class="tag-link-left">            <img src="https://api.iowen.cn/favicon/github.com/windshadow233/This-Repo-Has-0-Stars.png" onerror="this.onerror=null;this.src='/images/default-link.png';" />        </div>        <div class="tag-link-right">            <div class="tag-link-title">This Repo Has 0 Stars</div>            <div class="tag-link-sitename">GitHub</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a><p>朋友们可以进去点个star看看效果～<del>（没想到我第一次骗star竟是为这）</del></p><hr><p>项目很简单，但其背后的原理覆盖了一些我之前没有接触过的东西，例如GitHub REST API、Webhook（这个倒是在做telegram bot的时候接触过）、AWS Lambda等。如果能熟练利用，感觉会是个很高效、很方便的辅助工具。由于iBug大佬的文章省略了好多「有手就行」但我不会的内容，所以在过程中踩了一些坑，因此我来水篇文章，更详细地记录一下。</p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>这个东西的原理其实就是，使用GitHub自带的Webhook，监听仓库的各种事件（如本例监听的是「Star」事件），一旦事件发生，则自动推送消息到指定的URL，通过URL背后的代码来调用GitHub REST API，从而实现在Star数更新时自动修改GitHub repo名。我们可以自定义该URL，为降低复杂度、提升维护的便利性，选择使用AWS Lambda这种Serverless的服务。</p><h2 id="创建GitHub-Repo并添加Webhook"><a href="#创建GitHub-Repo并添加Webhook" class="headerlink" title="创建GitHub Repo并添加Webhook"></a>创建GitHub Repo并添加Webhook</h2><p>第一步自然是需要把仓库建立起来，可以随便起个名，例如“This-Repo-Has-0-Stars”。然后前往仓库的「Settings-&gt;Webhooks」标签，点击「Add webhook」。</p><ul><li>Payload URL：推送消息的目的地址，这里我们还没有申请AWS的API，先不管。</li><li>Content type：我比较喜欢用JSON，于是我选择了「application/json」，实际也就是写代码的时候略有区别。</li><li>Secret：Webhook的签名字符串，可用来验签，可以不填，不过还是建议用密码生成器来生成一个。</li><li>Which events would you like to trigger this webhook? 由于我们的目的是监听Star事件，因此这里选择「Let me select individual events」，然后在下面的列表中取消勾选「Pushes」，勾选「Stars」。</li></ul><p>于是还剩Payload URL没有配置，暂时先放着，进入下一步。</p><h2 id="创建GitHub-Access-Token"><a href="#创建GitHub-Access-Token" class="headerlink" title="创建GitHub Access Token"></a>创建GitHub Access Token</h2><p>为通过GitHub REST API修改仓库名，需要搞一个token用来鉴权。<a href="https://github.com/settings/tokens">此处前往token申请页面</a></p><p><img src="https://fastly.jsdelivr.net/gh/windshadow233/BlogStorage@files/png/0b842b41077a21768b19fdc4c6077292.png" alt=""><br>如上，申请一个用于管理repo的token，将其保存下来。</p><h2 id="创建AWS-Lambda函数"><a href="#创建AWS-Lambda函数" class="headerlink" title="创建AWS Lambda函数"></a>创建AWS Lambda函数</h2><p>由于之前发生过一次因不了解AWS平台的计费方式而白白浪费了100多rmb的惨痛经历，于是这次我提前摸清了套路：</p><p><img src="https://fastly.jsdelivr.net/gh/windshadow233/BlogStorage@files/png/b16be8fe50b9ab5a3604ba02f66e490c.png" alt=""><br>作为一个娱乐项目肯定稳稳够用了。</p><p>前往<a href="https://console.aws.amazon.com/">AWS控制台</a>，在「服务」中搜索lambda：</p><p><img src="https://fastly.jsdelivr.net/gh/windshadow233/BlogStorage@files/png/fc6f1e676e40023f54d6e7325436c326.png" alt=""><br>创建一个lambda函数，并选择你喜欢的编程语言<s>（Python 3.8）</s>：</p><p><img src="https://fastly.jsdelivr.net/gh/windshadow233/BlogStorage@files/png/141591ad60ec1fdd621d28e451bd0d1b.png" alt=""><br>点「创建函数」即可。进入代码页，发现它为我们提供了最基础的（Python）代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> json<span class="token keyword">def</span> <span class="token function">lambda_handler</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># TODO implement</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        <span class="token string">'statusCode'</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span>        <span class="token string">'body'</span><span class="token punctuation">:</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token string">'Hello from Lambda!'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不过它好像并不能直接使用，而是要通过AWS其他地方的接口来调用，这个东西称为<a href="https://console.aws.amazon.com/apigateway/main">AWS API Gateway</a>。</p><h2 id="配置AWS-API-Gateway"><a href="#配置AWS-API-Gateway" class="headerlink" title="配置AWS API Gateway"></a>配置AWS API Gateway</h2><p><img src="https://fastly.jsdelivr.net/gh/windshadow233/BlogStorage@files/png/2a2cd66dca325096ccd7276f47b61194.png" alt=""><br>这玩意则是收费的，不过很便宜，不公开接口的话应该开销不大。</p><p>点击「创建API」，并选择「HTTP API」：</p><p><img src="https://fastly.jsdelivr.net/gh/windshadow233/BlogStorage@files/png/2668837da3012db8132b8b54eca98177.png" alt=""><br>添加一个Lambda集成，并选择前面创建的Lambda函数，最后点「下一步」：</p><p><img src="https://fastly.jsdelivr.net/gh/windshadow233/BlogStorage@files/png/cd50a23967f4337dc5a68819594e0aed.png" alt=""><br>配置路由，按iBug大佬<a href="https://ibug.io/cn/2021/02/github-webhook-on-aws-lambda/#api-gateway">所说</a>，填写$default：</p><p><img src="https://fastly.jsdelivr.net/gh/windshadow233/BlogStorage@files/png/1a33ef7f7dbe11a28a33701994de02ac.png" alt=""><br>这样便创建好了一个HTTP API，AWS为其分配了一个ID，即下面的87z7tufbtk：</p><p><img src="https://fastly.jsdelivr.net/gh/windshadow233/BlogStorage@files/png/fbe85d2db6553829ed92f5a0d3fe52b6.png" alt=""><br>可以通过下面的方法简单测试一下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">curl</span> https://87z7tufbtk.execute-api.us-east-1.amazonaws.com/<span class="token string">"Hello from Lambda!"</span>%<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这串URL：<code>https://87z7tufbtk.execute-api.us-east-1.amazonaws.com/</code> 也正是前面创建webhook时留着没填的那个Payload URL。</p><h2 id="编写Lambda函数"><a href="#编写Lambda函数" class="headerlink" title="编写Lambda函数"></a>编写Lambda函数</h2><p>刚刚的接口测试说明Lambda函数已经work了，于是需要编写一下这个Lambda函数以使其达到我们想要的效果——获取到repo的star数，然后把它的名字、描述改了。这里的参数研究等过程建议直接阅读<a href="https://ibug.io/cn/2021/02/github-webhook-on-aws-lambda/#lambda-code">iBug大佬的文章</a>，我就直接贴完整的代码了（此代码修改自iBug大佬的代码，也可以在<a href="https://github.com/windshadow233/This-Repo-Has-0-Stars">我的仓库</a>里看到）</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64<span class="token keyword">import</span> hashlib<span class="token keyword">import</span> hmac<span class="token keyword">import</span> os<span class="token keyword">import</span> json<span class="token keyword">import</span> requestsGITHUB_TOKEN <span class="token operator">=</span> os<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'GITHUB_TOKEN'</span><span class="token punctuation">)</span>SECRET <span class="token operator">=</span> os<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'SECRET'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">lambda_handler</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">:</span>    path <span class="token operator">=</span> event<span class="token punctuation">[</span><span class="token string">'rawPath'</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token string">'body'</span> <span class="token keyword">in</span> event<span class="token punctuation">:</span>        <span class="token keyword">if</span> event<span class="token punctuation">[</span><span class="token string">'isBase64Encoded'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            body <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>event<span class="token punctuation">[</span><span class="token string">'body'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            body <span class="token operator">=</span> event<span class="token punctuation">[</span><span class="token string">'body'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        body <span class="token operator">=</span> <span class="token string">b""</span>    signature <span class="token operator">=</span> event<span class="token punctuation">[</span><span class="token string">'headers'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'x-hub-signature-256'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    hashsum <span class="token operator">=</span> hmac<span class="token punctuation">.</span>new<span class="token punctuation">(</span>SECRET<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msg<span class="token operator">=</span>body<span class="token punctuation">,</span> digestmod<span class="token operator">=</span>hashlib<span class="token punctuation">.</span>sha256<span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> hashsum <span class="token operator">!=</span> signature<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>            <span class="token string">'statusCode'</span><span class="token punctuation">:</span> <span class="token number">401</span><span class="token punctuation">,</span>            <span class="token string">'body'</span><span class="token punctuation">:</span> <span class="token string">'Bad signature'</span>        <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> path <span class="token operator">==</span> <span class="token string">"/"</span><span class="token punctuation">:</span>        <span class="token comment"># https://docs.github.com/en/developers/webhooks-and-events/webhook-events-and-payloads#star</span>        payload <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>body<span class="token punctuation">)</span>        repository <span class="token operator">=</span> payload<span class="token punctuation">[</span><span class="token string">'repository'</span><span class="token punctuation">]</span>        repository_url <span class="token operator">=</span> repository<span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span>        stars <span class="token operator">=</span> repository<span class="token punctuation">[</span><span class="token string">'stargazers_count'</span><span class="token punctuation">]</span>        new_name <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"This-Repo-Has-</span><span class="token interpolation"><span class="token punctuation">&#123;</span>stars<span class="token punctuation">&#125;</span></span><span class="token string">-Star</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token string">'s'</span> <span class="token keyword">if</span> stars <span class="token operator">!=</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token string">''</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span>        new_description <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"Thanks for stopping by! This repository now has </span><span class="token interpolation"><span class="token punctuation">&#123;</span>stars<span class="token punctuation">&#125;</span></span><span class="token string"> star</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token string">'s'</span> <span class="token keyword">if</span> stars <span class="token operator">!=</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token string">''</span><span class="token punctuation">&#125;</span></span><span class="token string">~🌟🌟🌟"</span></span>        headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'Authorization'</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f"Bearer </span><span class="token interpolation"><span class="token punctuation">&#123;</span>GITHUB_TOKEN<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">&#125;</span>        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">'name'</span><span class="token punctuation">:</span> new_name<span class="token punctuation">,</span>            <span class="token string">'description'</span><span class="token punctuation">:</span> new_description        <span class="token punctuation">&#125;</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>patch<span class="token punctuation">(</span>repository_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> json<span class="token operator">=</span>data<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token string">'statusCode'</span><span class="token punctuation">:</span> response<span class="token punctuation">.</span>status_code<span class="token punctuation">,</span> <span class="token string">'body'</span><span class="token punctuation">:</span> <span class="token string">"OK"</span><span class="token punctuation">&#125;</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token string">'statusCode'</span><span class="token punctuation">:</span> <span class="token number">404</span><span class="token punctuation">,</span> <span class="token string">'body'</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>注意到代码最前面读取了俩环境变量，GITHUB_TOKEN和SECRET分别是前面申请的GitHub Access Token和Webhook Secret字符串，为在代码中获取，需要将其设置在Lambda函数的「配置-&gt;环境变量」标签栏下：</p><p><img src="https://fastly.jsdelivr.net/gh/windshadow233/BlogStorage@files/png/557096d4f67f0052976cbd52facca6d6.png" alt=""></p><h3 id="添加第三方库"><a href="#添加第三方库" class="headerlink" title="添加第三方库"></a>添加第三方库</h3><p>设置完上面的内容后，我给仓库点了个star，然而</p><p><img src="https://fastly.jsdelivr.net/gh/windshadow233/BlogStorage@files/png/5385911526e61a25e9cd3b8d833ed57b.png" alt=""><br>debug了半天发现原来是Lambda函数的Python 3.8环境没有第三方库，例如requests，于是要想办法把第三方库集成进去。</p><p>研究了一会，发现Lambda提供一种叫「层」的功能：</p><p><img src="https://fastly.jsdelivr.net/gh/windshadow233/BlogStorage@files/png/584646ce929f46a1f6c31e942b764a3d.png" alt=""><br>通过添加「层」，可以将第三方库打包添加进去。下面先打包第三方库。</p><p>在本地的Python 3.8环境中执行下述命令，得到python目录，将该目录打包为python.zip</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> <span class="token parameter variable">--target</span> ./python requests <span class="token assign-left variable">urllib3</span><span class="token operator">==</span><span class="token number">1.26</span>.16<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后「创建层」：</p><p><img src="https://fastly.jsdelivr.net/gh/windshadow233/BlogStorage@files/png/8178a6c7d9f32019c89b8f0e1c3a6dbd.png" alt=""><br>名称可以随意填写，点击「上传」按钮，将前面的python.zip上传，选择几个合适的运行时，点击「创建」。</p><p>回到Lambda的「代码」部分，拉到最底下，有一块「层」区域：</p><p><img src="https://fastly.jsdelivr.net/gh/windshadow233/BlogStorage@files/png/b9d8d8e1ba41b8aef4a78192b751ccb3.png" alt=""><br>我们在这里添加刚刚创建的层，即可让Python环境拥有requests。</p><p><img src="https://fastly.jsdelivr.net/gh/windshadow233/BlogStorage@files/png/b3e4598f853c256a1a6f3021bcdda2e8.png" alt=""></p><hr><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>到了这里，这个会自动随star数更新名字和描述的repo就已经做完了。不过其中所用到的技术，仍有很大的应用空间尚未研究，「下次一定」找个机会多玩玩！</p>]]></content>
    
    
    <summary type="html">一个有意思的GitHub仓库</summary>
    
    
    
    <category term="杂趣" scheme="https://blog.fyz666.xyz/categories/%E6%9D%82%E8%B6%A3/"/>
    
    
    <category term="Python" scheme="https://blog.fyz666.xyz/tags/python/"/>
    
    <category term="API GateWay" scheme="https://blog.fyz666.xyz/tags/api-gateway/"/>
    
    <category term="AWS Lambda" scheme="https://blog.fyz666.xyz/tags/aws-lambda/"/>
    
    <category term="GitHub API" scheme="https://blog.fyz666.xyz/tags/github-api/"/>
    
    <category term="Webhook" scheme="https://blog.fyz666.xyz/tags/webhook/"/>
    
  </entry>
  
  <entry>
    <title>使用Cloudflare为网站部署免费的防御措施</title>
    <link href="https://blog.fyz666.xyz/blog/9307/"/>
    <id>https://blog.fyz666.xyz/blog/9307/</id>
    <published>2024-02-21T15:37:32.000Z</published>
    <updated>2024-05-11T08:15:27.837Z</updated>
    
    <content type="html"><![CDATA[<p>我决定给我的博客套一层Cloudflare。</p><blockquote><p>“不是，你网站那点访问量套个der的cf啊？”</p><p>“我之前也觉得没必要，但为什么我这么小的站都有人来搞事啊。。。看来还是有必要上一下防了。反正Cloudflare有free plan，那个够好用了，不用白不用。”</p></blockquote><h2 id="发生肾磨石了？"><a href="#发生肾磨石了？" class="headerlink" title="发生肾磨石了？"></a>发生肾磨石了？</h2><p>朋友们好啊，我是本博客的博主。</p><p>刚才有个朋友问我，你的个人博客为肾磨访问不了了，我说怎么回事？给我发了几张服务器无响应的截图，我一看Nginx日志，哦！源赖氏港才，有两个IP地址，非常可疑，一个请求90多万次，一个请求80多万次。</p><p>我一看这请求量！啊…我的服务器CPU占用率直线上升，到了100%，诶…服务器扛不住了，我说这是怎么回事。我说你这个请求来得太频繁了，不能这么搞，他不理我。我说小朋友你看这个CPU负载，他看都不看。他说你这也没什么办法。我说我这个有办法，得用防火墙拦截全部流量，传统运维是讲防御的，四两拨千斤，二百多万的每分钟请求数都敌不过我这一条防火墙规则啊…哈！他非得继续攻击，我说可以。</p><p>诶…我一说他脚本啪就跑起来了，很快啊！然后上来就是，一个拒绝服务，一个CC攻击，一个API滥用！</p><p>我全部防出去了，防出去了啊，防出去以后自然是赛博攻防以点到为止，封了他的IP，未进一步采取行动。我笑一下，准备降低防火墙的防御级别。</p><p>因为这时间，按传统赛博攻防的点到为止，他已经输了，如果不解封IP，他这些IP永远访问不到我的网站。</p><p>他也承认我先封了他IP。他承认我先封了他IP，啊！我降低防火墙级别的时间不拦截了，他突然换了几个IP地址来继续攻击，啊，我大E了啊，没有闪。</p><p>诶…他的新IP地址给我服务器，啊，一瞬间，过载了一下，但没关系啊！几分钟以后，当时我紧急优化防火墙规则了，我说停停。然后几分钟以后，CPU负载就稳住了。</p><p>我说小伙子你不讲武德你不懂，他忙说对不起对不起，我不懂技术，啊，我是…他说他是随便试试的。</p><p>他可不是随便试试的啊，DoS、CC、API攻击，训练有素，后来他说他学过三四年网络安全，啊，看来是有bear来。</p><p>这个攻击者，不讲武德，</p><p>来，扫！</p><p>来，过载！</p><p>我1核2G的低配服务器。这好吗？这不好。</p><p>我劝！这位攻击者耗子尾汁，好好反思，以后不要再犯这样的聪明，小聪明啊，额…互联网要以和为贵，要讲武德，不要搞窝里斗。</p><p>谢谢朋友们！</p><p>（以上内容存在一定的艺术创作成分）</p><hr><p>虽然风波暂时过去了，但这让我意识到即使是我这种平时根本没有访问量的小站，也有必要部署一些防御措施来抵御这类偶发的高频请求。</p><p>说起网站防御，那必不能不提Cloudflare，其提供的free plan对于我这样的个人建站者而言，已经足够好用了。不过由于是第一次使用这类工具，缺少一些经验，因此花了一点时间，下面把部署过程记录一下。</p><p><img src="https://fastly.jsdelivr.net/gh/windshadow233/BlogStorage@files/png/b7bea3941069ffed98f5e68ca6432b86.png" alt=""></p><h2 id="DNS托管"><a href="#DNS托管" class="headerlink" title="DNS托管"></a>DNS托管</h2><p>首先注册一个Cloudflare账号，选择free plan（对于小网站而言已经足够）。第一步需要将DNS服务器设置为Cloudflare提供的两个名称服务器：</p><p><img src="https://fastly.jsdelivr.net/gh/windshadow233/BlogStorage@files/png/26e068616a73723e5bffe8dbde599c9d.png" alt=""><br>该步骤需要前往之前的域名DNS服务提供商进行更改，更改成功后，需要将原先的所有DNS记录都托管到Cloudflare的DNS解析服务下。更改DNS名称服务器及解析这一步需要等上一段时间，激活成功后，Cloudflare会发一封邮件到注册邮箱：</p><p><img src="https://fastly.jsdelivr.net/gh/windshadow233/BlogStorage@files/png/0972b39a2668f07cb4d8ad6e9ea49b16.png" alt=""></p><h2 id="设置CDN"><a href="#设置CDN" class="headerlink" title="设置CDN"></a>设置CDN</h2><p>DNS解析完成后，此时我们仅仅使用了Cloudflare的DNS解析功能，还没有为站点激活防御措施。为了激活该功能，我们需要为需要的二级域名开启代理状态，如下图为本站域名的DNS配置：</p><p><img src="https://fastly.jsdelivr.net/gh/windshadow233/BlogStorage@files/png/05fa0bfc01c2f2a6fbc63e5b0a91b9f9.png" alt=""></p><h2 id="设置SSL-TLS"><a href="#设置SSL-TLS" class="headerlink" title="设置SSL/TLS"></a>设置SSL/TLS</h2><p>如果你的站点本身具有TLS证书，那么需要在「SSL/TLS-&gt;概述」中将加密模式设置为 完全（严格），否则在访问站点时会报“重定向次数过多”。</p><h2 id="配置WAF"><a href="#配置WAF" class="headerlink" title="配置WAF"></a>配置WAF</h2><p>下文的WAF部署过程参考了<a href="https://www.2dan.cc/archives/cloudflare-rule.html">这篇文章</a>，在此致谢！</p><p>在「安全性-&gt;WAF」设置下依次配置「自定义规则」、「速率限制规则」</p><h3 id="自定义规则"><a href="#自定义规则" class="headerlink" title="自定义规则"></a>自定义规则</h3><p>免费用户支持五条自定义规则，适合每个网站的WAF配置都不一样，不过可以先配置三条较为通用的：</p><ul><li>白名单</li></ul><p>根据需求定义一个白名单，首先可以放行一些经Cloudflare验证的自动程序，比如谷歌、百度的爬虫等。</p><pre class="line-numbers language-none"><code class="language-none">(cf.verified_bot_category in &#123;&quot;Search Engine Crawler&quot; &quot;Search Engine Optimization&quot; &quot;Monitoring &amp; Analytics&quot; &quot;Advertising &amp; Marketing&quot; &quot;Page Preview&quot; &quot;Academic Research&quot; &quot;Security&quot; &quot;Accessibility&quot; &quot;Webhooks&quot; &quot;Feed Fetcher&quot; &quot;AI Crawler&quot; &quot;Aggregator&quot; &quot;Other&quot;&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>操作选择「跳过」，要跳过的 WAF 组件可以全勾上，我则去掉了两个速率限制规则。</p><p>其他的IP白名单等，可自行根据需求来定义。</p><ul><li>ASN质询</li></ul><p>对一些常见数据中心服务商的ASN自治网络进行验证。</p><pre class="line-numbers language-none"><code class="language-none">(ip.geoip.asnum in &#123;174 195 209 577 792 793 794 1215 1216 1217 2497 2914 3223 3255 3269 3326 3329 3457 3462 3598 4184 4190 4637 4694 4755 4785 4788 4816 4826 4835 5056 5610 5617 6471 6584 6830 6876 6877 6939 7029 7224 7303 7489 7552 7684 8068 8069 8070 8071 8074 8075 8100 8220 8560 8881 8987 9009 9299 9312 9370 9534 9678 9952 9984 10026 10453 11351 11426 11691 12076 12271 12334 12367 12874 12876 12989 14061 14117 14140 14576 14618 15169 16276 16509 16591 16629 17043 17428 17707 17788 17789 17790 17791 18013 18228 18403 18450 18599 18734 18978 19527 19740 20207 20473 20552 20554 20860 21704 21769 21859 21887 22773 22884 23468 23724 23885 23959 23969 24088 24192 24424 24429 24940 25429 25697 25820 25935 25961 26160 26496 26818 27715 28429 28431 28438 28725 29066 29286 29287 29802 30083 30823 31122 31235 31400 31898 32097 32098 32505 32613 34081 34248 34549 34947 35070 35212 35320 35540 35593 35804 35816 35908 35916 36351 36352 36384 36385 36444 36492 36806 37963 37969 38001 38197 38283 38365 38538 38587 38588 38627 39284 40065 40676 40788 41009 41096 41264 41378 42652 42905 43289 43624 43989 45011 45012 45062 45076 45085 45090 45102 45102 45102 45103 45104 45139 45458 45566 45576 45629 45753 45899 45932 46484 46844 47232 47285 47927 48024 48024 48337 48905 49327 49588 49981 50297 50340 50837 51852 52000 52228 52341 53089 54463 54538 54574 54600 54854 54994 55158 55330 55720 55799 55924 55933 55960 55967 55990 55992 56005 56011 56109 56222 57613 58073 58199 58461 58466 58519 58543 58563 58593 58772 58773 58774 58775 58776 58844 58854 58862 58879 59019 59028 59048 59050 59051 59052 59053 59054 59055 59067 59077 59374 60068 60592 60631 60798 61154 61317 61348 61577 61853 62044 62240 62468 62785 62904 63018 63023 63075 63288 63314 63545 63612 63620 63631 63655 63677 63678 63679 63727 63728 63729 63835 63838 63888 63916 63949 64050 131090 131106 131138 131139 131140 131141 131293 131428 131444 131477 131486 131495 132196 132203 132509 132510 132513 132591 132839 133024 133199 133380 133478 133492 133746 133752 133774 133775 133776 133905 133929 134238 134327 134760 134761 134763 134764 134769 134770 134771 134835 134963 135061 135290 135300 135330 135377 135629 137693 137697 137699 137753 137784 137785 137787 137788 137876 137969 138366 138407 138607 138915 138949 138950 138952 138982 138994 139007 139018 139124 139144 139201 139203 139220 139316 139327 139726 139887 140096 140596 140701 140716 140717 140720 140723 140979 141157 141180 142570 149167 177453 177549 197099 197540 198047 198651 199490 199506 199524 199883 200756 201094 201978 202053 202675 203087 204601 204720 206092 206204 206791 206798 207319 207400 207590 208425 208556 211914 212708 213251 213375 262187 263022 263196 263639 263693 264344 264509 265443 265537 266706 267784 269939 270110 328608 394699 395003 395936 395954 395973 398101 &#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>操作选择了「JS质询」。</p><ul><li>风险IP质询</li></ul><p>创建一个风险IP列表，利用Cloudflare提供的威胁分数和这个IP列表来判断IP的危险度，由于列表过大，需要先通过「管理账户-&gt;配置-&gt;列表」创建一个IP列表，为方便起见，可以从下面提供的CSV文件下载该列表并导入。</p><p><a target="_blank" href="https://fastly.jsdelivr.net/gh/windshadow233/BlogStorage@files/csv/5224de023a5d29f7e7a649a40a23aacf.csv" download="badip.csv">badip.csv</a></p><p>然后添加下面规则：</p><pre class="line-numbers language-none"><code class="language-none">(ip.src in $badip and cf.threat_score gt 30)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>操作同样选择了「JS质询」。</p><h3 id="速率限制规则"><a href="#速率限制规则" class="headerlink" title="速率限制规则"></a>速率限制规则</h3><p>免费用户支持配置一条速率限制规则，我们可以根据服务器的情况来进行配置，我这里配置如下：</p><p><code>(http.request.uri.path eq &quot;/&quot;)</code></p><p>当速率超过50次/10秒时触发。免费用户只支持一种操作，即「阻止」，响应方式选择了「默认 Cloudflare 速率限制响应」。</p><h2 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h2><p>「安全性→设置→安全级别」：高（在网站受攻击时可以使用「I’m Under Attack!」）<br>「安全性→设置→质询通过期」：15分钟或者30分钟，受到攻击较严重时则可以设置到5分钟<br>「安全性→设置→浏览器完整性检查」：打开</p><p>「安全性→DDoS→HTTP DDoS 攻击防护」：</p><p><img src="https://fastly.jsdelivr.net/gh/windshadow233/BlogStorage@files/png/26e293e9f7522a09d047c5c79a54879c.png" alt=""><br>「安全性→自动程序」：打开自动程序攻击模式。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;我决定给我的博客套一层Cloudflare。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“不是，你网站那点访问量套个der的cf啊？”&lt;/p&gt;
&lt;p&gt;“我之前也觉得没必要，但为什么我这么小的站都有人来搞事啊。。。看来还是有必要上一下防了。反正Cloudflare有free</summary>
        
      
    
    
    
    <category term="博客相关" scheme="https://blog.fyz666.xyz/categories/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/"/>
    
    
    <category term="计算机网络" scheme="https://blog.fyz666.xyz/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    <category term="Cloudflare" scheme="https://blog.fyz666.xyz/tags/cloudflare/"/>
    
    <category term="防火墙" scheme="https://blog.fyz666.xyz/tags/%E9%98%B2%E7%81%AB%E5%A2%99/"/>
    
  </entry>
  
  <entry>
    <title>重塑密码管理体系——Bitwarden服务端自部署</title>
    <link href="https://blog.fyz666.xyz/blog/9235/"/>
    <id>https://blog.fyz666.xyz/blog/9235/</id>
    <published>2024-02-02T15:11:27.000Z</published>
    <updated>2024-05-11T08:15:27.837Z</updated>
    
    <content type="html"><![CDATA[<p>经常问我借账号的朋友都知道，我这个人记性不好，也因此，我所有平台的密码都长的大同小异（基本都是由同一个字符串通过变换字母大小写、截取子串，或者添加一两个特殊符号得来的）。</p><h2 id="使用相似密码的坏处"><a href="#使用相似密码的坏处" class="headerlink" title="使用相似密码的坏处"></a>使用相似密码的坏处</h2><p>像我这样在各平台用相似度极高的密码，虽然方便了记忆，但后果也很严重：<a href="https://www.csdn.net/">某些不负责任的平台<i class="iconfont icon-csdn"></i></a>会用明文存储用户密码，然后还tm<a href="https://zh.wikipedia.org/wiki/2011%E5%B9%B4%E4%B8%AD%E5%9B%BD%E7%BD%91%E7%AB%99%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2%E4%BA%8B%E4%BB%B6">泄漏了</a>。。。这就造成了我们的常用密码被添加到了字典里，黑客便可通过这些字典来轻松破解我们其他平台的密码<s>（虽然并没有什么值得被黑客盯上的东西）</s>。</p><p>因此，将各种平台的密码设成互相毫无关联的随机字符串才是妥当的方案，这种安全的密码设置画风应该是下面这样的：</p><ul><li>QQ：Tx8RYq%*fStp3r</li><li>微信：D6MuyvxS!6e$Zc</li><li>Apple账号：&amp;Nm4PvAdL*cH#v</li><li>科大邮箱：vSP6nC$QZrh3z%</li><li>…</li></ul><p>然而如果把各平台的密码都设成这种鸟样，安全性虽然能保证了，但毕竟我的脑子不是硬盘，肯定是记不住的，所以很自然地就需要一款能为我们管理各平台的密码的软件。<del>拥有过目不忘能力的同学到了这就已经可以不用往下看了。</del></p><p>这种软件需要至少满足下面的条件：</p><ul><li>安全可靠：能够为我生成强密码且有密码学安全的密码库加密算法</li><li>可移植性：支持各种操作系统、各种浏览器端都有集成插件</li><li>云端存储：支持多设备间同步密码库</li><li>使用便捷：支持用户名密码自动填充、支持生物识别功能（例如人脸、指纹等）</li><li>集成一些特殊功能：例如双因子验证（即所谓的2FA）</li></ul><p>事实上这样的软件有非常之多，例如比较有名的1Password。我这里选择了一款名为Bitwarden的软件，原因是它免费、开源且可自部署<s>（还不是因为开不起1Password的会员）</s>，这篇文章就用来记录一下部署的过程。</p><p><img src="https://fastly.jsdelivr.net/gh/windshadow233/BlogStorage@files/png/3544de41b963dcab61e6a72495d90a80.png" alt=""></p><h2 id="部署Bitwarden"><a href="#部署Bitwarden" class="headerlink" title="部署Bitwarden"></a>部署Bitwarden</h2><p>项目的GitHub地址如下：</p><a class="tag-Link" target="_blank" href="https://github.com/mprasil/bitwarden_rs">    <div class="tag-link-tips">引用站外地址，不保证站点的可用性和安全性</div>    <div class="tag-link-bottom">        <div class="tag-link-left">            <img src="https://api.iowen.cn/favicon/github.com/mprasil/bitwarden_rs.png" onerror="this.onerror=null;this.src='/images/default-link.png';" />        </div>        <div class="tag-link-right">            <div class="tag-link-title">bitwarden_rs</div>            <div class="tag-link-sitename">GitHub</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a><p>为方便起见，使用docker进行部署。</p><p>docker-compose.yml：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">bitwarden</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> bitwardenrs/server<span class="token punctuation">:</span>latest    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> bitwarden    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./bw<span class="token punctuation">-</span>data<span class="token punctuation">:</span>/data    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> WEBSOCKET_ENABLED=true      <span class="token punctuation">-</span> SIGNUPS_ALLOWED=true      <span class="token punctuation">-</span> WEB_VAULT_ENABLED=true      <span class="token punctuation">-</span> ADMIN_TOKEN=xxxxxxxx      <span class="token punctuation">-</span> SHOW_PASSWORD_HINT=true      <span class="token punctuation">-</span> DOMAIN=xxxxxxxxx    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"127.0.0.1:8889:80"</span>      <span class="token punctuation">-</span> <span class="token string">"127.0.0.1:8810:3012"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里需要设置一个ADMIN_TOKEN作为管理员账号的密码，并且在DOMAIN字段填上完整的访问链接，在容器开启以后，可访问/admin进入管理界面。上面配置中，SIGNUPS_ALLOWED=true表示支持新用户注册，我们可以在注册完自己的账号后将该配置改为false并更新容器。</p><h2 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h2><p>另外，我们在容器外部用Nginx做一个反向代理，代理到443端口并提供TLS证书（以我个人的配置为例）：</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">listen</span> <span class="token number">80</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">listen</span> <span class="token number">443</span> ssl</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">server_name</span> bitwarden.fyz666.xyz</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">ssl_certificate</span> /path/to/fullchain.pem</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">ssl_certificate_key</span> /path/to/privkey.pem</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">if</span> (<span class="token variable">$scheme</span> = http)</span><span class="token punctuation">&#123;</span>      <span class="token directive"><span class="token keyword">return</span> <span class="token number">301</span> https://<span class="token variable">$host</span><span class="token variable">$request_uri</span></span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token directive"><span class="token keyword">client_max_body_size</span> <span class="token number">128M</span></span><span class="token punctuation">;</span>    <span class="token comment"># reverse proxy</span>    <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">&#123;</span>        <span class="token directive"><span class="token keyword">proxy_set_header</span> Host <span class="token variable">$host</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Real-IP <span class="token variable">$remote_addr</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Forwarded-For <span class="token variable">$proxy_add_x_forwarded_for</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Forwarded-Proto <span class="token variable">$scheme</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_pass</span> http://bitwarden-default</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token directive"><span class="token keyword">location</span> /notifications/hub/negotiate</span> <span class="token punctuation">&#123;</span>        <span class="token directive"><span class="token keyword">proxy_set_header</span> Host <span class="token variable">$host</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Real-IP <span class="token variable">$remote_addr</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Forwarded-For <span class="token variable">$proxy_add_x_forwarded_for</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Forwarded-Proto <span class="token variable">$scheme</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_pass</span> http://bitwarden-default</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token directive"><span class="token keyword">location</span> /notifications/hub</span> <span class="token punctuation">&#123;</span>        <span class="token directive"><span class="token keyword">proxy_set_header</span> Upgrade <span class="token variable">$http_upgrade</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_set_header</span> Connection <span class="token variable">$http_connection</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Real-IP <span class="token variable">$remote_addr</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_pass</span> http://bitwarden-ws</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token directive"><span class="token keyword">location</span> = /identity/accounts/prelogin</span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">rewrite</span> ^/identity/accounts/prelogin$ /api/accounts/prelogin</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">proxy_pass</span> http://127.0.0.1:5000/</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如此一来，bitwarden就配置好了。</p><h2 id="配置自动备份"><a href="#配置自动备份" class="headerlink" title="配置自动备份"></a>配置自动备份</h2><p>由于今后所有的密码都打算用这个自部署的bitwarden管理，万一哪天服务器寄了、数据库没了，麻烦可就大了，因此有必要定期为数据库进行备份。这里我使用的是支持webdav的<a href="https://www.jianguoyun.com/">坚果云</a>，虽然月免费上传额度只有1GB，不过只用来备份bitwarden数据库肯定是够用了。</p><p>首先前往坚果云，创建一个bitwarden文件夹，用以存放bitwarden的数据库备份，然后前往“<a href="https://www.jianguoyun.com/d/home#/safety">安全选项</a>”页面申请一个应用，它会提供一个访问密码。然后<s>写</s>抄一个Shell脚本用来向打包数据库并上传到坚果云：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span><span class="token builtin class-name">set</span> <span class="token parameter variable">-e</span><span class="token assign-left variable">username</span><span class="token operator">=</span>xxx<span class="token assign-left variable">password</span><span class="token operator">=</span>xxx<span class="token assign-left variable">filename</span><span class="token operator">=</span><span class="token string">"bitwarden-<span class="token variable"><span class="token variable">`</span><span class="token function">date</span> +%F<span class="token variable">`</span></span>.tar.gz"</span><span class="token builtin class-name">cd</span> /root/bitwarden/<span class="token function">tar</span> czf <span class="token string">"<span class="token variable">$&#123;filename&#125;</span>"</span> bw-data/<span class="token function">curl</span> <span class="token parameter variable">-u</span> <span class="token string">"<span class="token variable">$&#123;username&#125;</span>:<span class="token variable">$&#123;password&#125;</span>"</span> <span class="token parameter variable">-T</span> <span class="token string">"<span class="token variable">$&#123;filename&#125;</span>"</span> <span class="token string">"https://dav.jianguoyun.com/dav/bitwarden/"</span><span class="token function">rm</span> <span class="token string">"<span class="token variable">$&#123;filename&#125;</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码中，需要将username和password分别修改为坚果云的账号以及前面申请的访问密码。</p><p>最后，设置一条crontab定时任务，一天执行一次该脚本。</p><p>终于把密码库部署完了，好耶！「忘记主密码」、「密码库被盗」等随机事件可指日而待也！</p>]]></content>
    
    
    <summary type="html">自部署一个密码管理平台</summary>
    
    
    
    <category term="瞎捣鼓经历" scheme="https://blog.fyz666.xyz/categories/%E7%9E%8E%E6%8D%A3%E9%BC%93%E7%BB%8F%E5%8E%86/"/>
    
    
    <category term="Docker" scheme="https://blog.fyz666.xyz/tags/docker/"/>
    
    <category term="Bitwarden" scheme="https://blog.fyz666.xyz/tags/bitwarden/"/>
    
  </entry>
  
  <entry>
    <title>“The Password Game”攻略</title>
    <link href="https://blog.fyz666.xyz/blog/9097/"/>
    <id>https://blog.fyz666.xyz/blog/9097/</id>
    <published>2024-01-20T11:18:09.000Z</published>
    <updated>2024-05-11T08:15:27.837Z</updated>
    
    <content type="html"><![CDATA[<p>这两天偶然发现了一个有点意思的“小游戏”，名为“The Password Game”，传送门如下：</p><a class="tag-Link" target="_blank" href="https://neal.fun/password-game/">    <div class="tag-link-tips">引用站外地址，不保证站点的可用性和安全性</div>    <div class="tag-link-bottom">        <div class="tag-link-left">            <img src="https://api.iowen.cn/favicon/neal.fun/password-game/.png" onerror="this.onerror=null;this.src='/images/default-link.png';" />        </div>        <div class="tag-link-right">            <div class="tag-link-title">The Password Game</div>            <div class="tag-link-sitename"></div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a><hr><p><img src="https://fastly.jsdelivr.net/gh/windshadow233/BlogStorage@files/png/28da5671e3959e37a3cee1917411d4d8.png" alt=""><br>大概是给你一堆层层递进又互相强耦合的规则，让你设置一个符合所有规则的密码。我第一次通关花了几个小时，而通关两次以后，已经摸透了通关的方法，因此来记录一下。</p><p>由于其中包含Google Map和Youtube等内容，故科学上网是通关的必要条件。</p><p>本文所有的代码已集成到Greasyfork：</p><a class="tag-Link" target="_blank" href="https://greasyfork.org/scripts/485695">    <div class="tag-link-tips">引用站外地址，不保证站点的可用性和安全性</div>    <div class="tag-link-bottom">        <div class="tag-link-left">            <img src="https://api.iowen.cn/favicon/greasyfork.org/scripts/485695.png" onerror="this.onerror=null;this.src='/images/default-link.png';" />        </div>        <div class="tag-link-right">            <div class="tag-link-title">Password Game Assistant</div>            <div class="tag-link-sitename">Greasyfork</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a><p>小游戏共有35条规则，在下面依次给出。</p><h2 id="Rule-1-4"><a href="#Rule-1-4" class="headerlink" title="Rule 1-4"></a>Rule 1-4</h2><ul><li>Your password must be at least 5 characters.</li><li>Your password must include a number.</li><li>Your password must include an uppercase letter.</li><li>Your password must include a special character.</li></ul><p>送分规则，略</p><h2 id="Rule-5"><a href="#Rule-5" class="headerlink" title="Rule 5"></a>Rule 5</h2><ul><li>The digits in your password must add up to 25.</li></ul><p>这条规则看上去很简单，然而如果是第一次玩，没有经验，在后续规则中稍不注意就会让数字之和超过25，到那时再想调整就很麻烦了。这里可以先写5个5，后续可以对这些5进行调整来不断地让密码符合该Rule。</p><p>由于这条规则的存在，我们在后续规则中，要尽可能选择阿拉伯数字比较小的解。</p><h2 id="Rule-6"><a href="#Rule-6" class="headerlink" title="Rule 6"></a>Rule 6</h2><ul><li>Your password must include a month of the year.</li></ul><p>比较简单，随便找个月份的英语就行，我倾向于选择“may”，因为比较短。并且这里我特意将首字母小写了，在后续的规则中，有一些会受到字母大小写的影响，为了尽可能避免冲突，在大小写不敏感的情况下全使用小写比较好。</p><h2 id="Rule-7"><a href="#Rule-7" class="headerlink" title="Rule 7"></a>Rule 7</h2><ul><li>Your password must include a roman numeral.</li></ul><p>罗马数字包含大写的”I、V、X、L、C、D、M”，分别表示1、5、10、50、100、500、1000。</p><p>这里看似随便写一个就行，但考虑到后面将要出现的的规则，我选择写入XXXV，表示阿拉伯数字的35。不过，这里若是写VVII，后期容错性会更强一些。</p><h2 id="Rule-8"><a href="#Rule-8" class="headerlink" title="Rule 8"></a>Rule 8</h2><ul><li>Your password must include one of our sponsors: Pepsi、Starbucks、Shell</li></ul><p>随便选一个即可，例如pepsi（同理，小写首字母）</p><h2 id="Rule-9"><a href="#Rule-9" class="headerlink" title="Rule 9"></a>Rule 9</h2><ul><li>The roman numerals in your password should multiply to 35.</li></ul><p>密码中包含的罗马数字的乘积为35。由于前面写了XXXV，自动满足该条件。</p><p>然而，如果密码中包含其他的”V、X、L、C、D、M”这些字母，就寄了，因此“在大小写不敏感的情况下全使用小写比较好”。</p><h2 id="Rule-10"><a href="#Rule-10" class="headerlink" title="Rule 10"></a>Rule 10</h2><ul><li>Your password must include this CAPTCHA</li></ul><p>验证码可以随意刷新，考虑到规则5的存在，刷一条不包含阿拉伯数字的不过分吧。</p><h2 id="Rule-11"><a href="#Rule-11" class="headerlink" title="Rule 11"></a>Rule 11</h2><ul><li>Your password must include today’s Wordle answer.</li></ul><p>上网一搜就行，例如博主写下这篇文章的那天，搜索：January 20, 2024 Wordle</p><h2 id="Rule-12"><a href="#Rule-12" class="headerlink" title="Rule 12"></a>Rule 12</h2><ul><li>Your password must include a two letter symbol from the periodic table.</li></ul><p>包含一个2个字母的元素周期表内的元素。可以先随便写一个，例如He。</p><h2 id="Rule-13"><a href="#Rule-13" class="headerlink" title="Rule 13"></a>Rule 13</h2><ul><li>Your password must include the current phase of the moon as an emoji.</li></ul><p>注意一下农历日期，然后在<a href="https://emojidb.org/current-phase-moon-emojis">这个网站</a>找一个对应的月相。</p><h2 id="Rule-14"><a href="#Rule-14" class="headerlink" title="Rule 14"></a>Rule 14</h2><ul><li>Your password must include the name of this country.</li></ul><p>一个简单的图寻，不需要任何技巧，截图放到Google Lens即可直接搜到。</p><p>与前面类似，国家首字母使用小写以免冲突。</p><p>另外，发现把iframe的margin-top属性设为0可以直接调出Google map来源链接，于是可以：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">Rule14</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">let</span> iframe <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.geo-wrapper iframe'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>iframe <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>iframe<span class="token punctuation">.</span>style<span class="token punctuation">.</span>marginTop <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Rule-15"><a href="#Rule-15" class="headerlink" title="Rule 15"></a>Rule 15</h2><ul><li>Your password must include a leap year.</li></ul><p>包含一个闰年，写个0就行。</p><h2 id="Rule-16"><a href="#Rule-16" class="headerlink" title="Rule 16"></a>Rule 16</h2><ul><li>Your password must include the best move in <a href="https://en.wikipedia.org/wiki/Algebraic_notation_(chess">algebraic chess notation.</a>)</li></ul><p>一个国际象棋棋局，需要找出最优的下一步，并用国际象棋的代数记谱法表示。这里的棋局都比较简单，我正好会一点点国际象棋，刚好能应付。实在不会可以利用这个网站：<a href="https://nextchessmove.com/">https://nextchessmove.com/</a></p><p>这里由于不得不输入阿拉伯数字，需要调整前面的数字以满足规则5。</p><h2 id="Rule-17"><a href="#Rule-17" class="headerlink" title="Rule 17"></a>Rule 17</h2><ul><li>🥚 ← This is my chicken Paul. He hasn’t hatched yet, please put him in your password and keep him safe.</li></ul><p>本游戏最烦的角色出现了，这里先照做即可，将🥚复制到密码里。</p><h2 id="Rule-18"><a href="#Rule-18" class="headerlink" title="Rule 18"></a>Rule 18</h2><ul><li>The elements in your password must have atomic numbers that add up to 200.</li></ul><p>密码中包含的所有元素其原子数之和为200。如果我们严格控制了前面所有内容的大小写，那么正常情况下，此时Rule 9的XXXV会包含一个V（钒 / 23），Rule 12会包含一个元素He（氦 / 2），还有Rule 16也可能会包含一个元素，手算一下并避开首字母为”V、X、L、C、D、M”的元素即可通过。</p><h2 id="Rule-19"><a href="#Rule-19" class="headerlink" title="Rule 19"></a>Rule 19</h2><ul><li>All the vowels in your password must be bolded.</li></ul><p>将元音字母（aeiouy及其大写）加粗。</p><p>很累的体力活，因此写了个Javascript脚本，粘贴到Console运行一下批量操作。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">Rule19</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> <span class="token function">processNodeRule19</span><span class="token punctuation">(</span><span class="token parameter">textNode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> text <span class="token operator">=</span> textNode<span class="token punctuation">.</span>nodeValue<span class="token punctuation">;</span>        <span class="token keyword">const</span> parent <span class="token operator">=</span> textNode<span class="token punctuation">.</span>parentNode<span class="token punctuation">;</span>        <span class="token keyword">const</span> fragments <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">([aeiouyAEIOUY])</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fragments<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">fragment</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[aeiouyAEIOUY]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>fragment<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">const</span> strong <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'strong'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                strong<span class="token punctuation">.</span>textContent <span class="token operator">=</span> fragment<span class="token punctuation">;</span>                parent<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>strong<span class="token punctuation">,</span> textNode<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                parent<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>fragment<span class="token punctuation">)</span><span class="token punctuation">,</span> textNode<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        parent<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>textNode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">processRule19</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>nodeType <span class="token operator">===</span> Node<span class="token punctuation">.</span><span class="token constant">TEXT_NODE</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">processNodeRule19</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>nodeType <span class="token operator">===</span> Node<span class="token punctuation">.</span><span class="token constant">ELEMENT_NODE</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>childNodes<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>processRule19<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> paragraphs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'.ProseMirror p'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    paragraphs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>processRule19<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在过Rule 19之前可以保存一下当前的密码，以快速通过下面的Rule 20。</p><h2 id="Rule-20"><a href="#Rule-20" class="headerlink" title="Rule 20"></a>Rule 20</h2><ul><li>Oh no! Your password is on fire. Quick, put it out!</li></ul><p>血压高起来了。。。需要快速删除所有的🔥以减少损失。如果上一步保存了密码，则可以快速还原。</p><h2 id="Rule-21"><a href="#Rule-21" class="headerlink" title="Rule 21"></a>Rule 21</h2><ul><li>Your password is not strong enough 🏋️‍♂️</li></ul><p>粘贴三个🏋️‍♂️到密码里。</p><h2 id="Rule-22"><a href="#Rule-22" class="headerlink" title="Rule 22"></a>Rule 22</h2><ul><li>Your password must contain one of the following affirmations:<br>I am loved<br>I am worthy<br>I am enough</li></ul><p>写一句 “i am loved”，元音加粗。</p><h2 id="Rule-23"><a href="#Rule-23" class="headerlink" title="Rule 23"></a>Rule 23</h2><ul><li>Paul has hatched! Please don’t forget to feed him, he eats three 🐛 every minute.</li></ul><p>注意到前面的🥚变成了坤坤（🐔），它每分钟吃3条🐛，需要我们在密码里维护至少1个、至多3个🐛，数量超了，坤坤会被撑死，数量为0且超过20秒则会饿死。维护是不可能手动维护的，这里也可以写一个脚本定期检查🐛的数量并自动在密码里添加。不过既然都在用脚本了，不如直接：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">Rule23</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".ProseMirror"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> p <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> span <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    span<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">"🐛"</span><span class="token punctuation">;</span>    p<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>span<span class="token punctuation">)</span><span class="token punctuation">;</span>    input<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> end <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">clearInterval</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        input<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span>lastChild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过这个操作可以直接把坤坤每20秒吃一条🐛的定时任务删了，然后就不用管它了。</p><h2 id="Rule-24"><a href="#Rule-24" class="headerlink" title="Rule 24"></a>Rule 24</h2><ul><li>Your password must include the URL of a 24 minute 18 second long YouTube video.</li></ul><p>我愿称之为血压最高的一条规则。</p><p>只会去YouTube乱搜，例如搜“24 minute 18 second”，同时把时间限制在20分钟以上来缩小搜索范围。需要注意的是，即使找到一个符合时长条件的视频，也未必是能用的，你可能会遇到下面几种情况之一：</p><ol><li>包含”V、X、L、C、D、M”导致规则9炸掉。</li><li>包含一堆原子序数很大的元素符号导致规则18炸掉。</li><li>包含一堆阿拉伯数字导致规则5炸掉。</li><li>见下图：</li></ol><p><img src="https://fastly.jsdelivr.net/gh/windshadow233/BlogStorage@files/png/e1d02164426e7a5f48762c1e3ae7ca25.png" alt=""><br>好在视频的时长上下浮动1秒也会被接受，并且可以将视频链接后面的一串参数删掉，这样可以稍微增加一点点成功率。</p><p>例如这里我找到的视频为<a href="https://youtu.be/jOfB_jKEOBU">https://youtu.be/jOfB_jKEOBU</a>，长度24m19s，可通过该Rule。</p><h2 id="Rule-25"><a href="#Rule-25" class="headerlink" title="Rule 25"></a>Rule 25</h2><ul><li>A sacrifice must be made. Pick 2 letters that you will no longer be able to use.</li></ul><p>要求选择两个不在密码中使用的字母。多次实验发现j、k、f、z这些字母比较少见，然而不巧这几个字母几乎都出现在了我Rule 24的url里，很难受，只好换一个：<a href="https://youtu.be/phqGheRT-0Y">https://youtu.be/phqGheRT-0Y</a></p><h2 id="Rule-26"><a href="#Rule-26" class="headerlink" title="Rule 26"></a>Rule 26</h2><ul><li>Your password must contain twice as many italic characters as bold.</li></ul><p>全选密码，设置为斜体即可。</p><h2 id="Rule-27"><a href="#Rule-27" class="headerlink" title="Rule 27"></a>Rule 27</h2><ul><li>At least 30% of your password must be in the Wingdings font.</li></ul><p>随便选一段换成Wingdings字体。不过这个字体没有可读性，后面有时候需要暂时切回可读字体来回顾内容。</p><h2 id="Rule-28"><a href="#Rule-28" class="headerlink" title="Rule 28"></a>Rule 28</h2><ul><li>Your password must include this color in hex.</li></ul><p>用取色器读是不靠谱的，应该inspect查看一下该色块实际使用的RGB值，再转换为hex。这里可以不断刷新找一个hex值对全局影响较小的颜色。</p><p>我也写了一个脚本来做这件事：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">Rule28</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">let</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.refresh'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>btn <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token keyword">let</span> color <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">".rand-color"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>color <span class="token operator">=</span> color<span class="token punctuation">.</span>style<span class="token punctuation">.</span>background<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\d+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">"#"</span><span class="token punctuation">;</span>color<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>s <span class="token operator">+=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".ProseMirror"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> p <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> span <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    span<span class="token punctuation">.</span>innerText <span class="token operator">=</span> s<span class="token punctuation">;</span>    p<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>span<span class="token punctuation">)</span><span class="token punctuation">;</span>    input<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Rule-29"><a href="#Rule-29" class="headerlink" title="Rule 29"></a>Rule 29</h2><ul><li>All roman numerals must be in Times New Roman.</li></ul><p>不知道为什么把前面的XXXV改了仍无法通过，多选了一些附近的字符改就过了。</p><h2 id="Rule-30"><a href="#Rule-30" class="headerlink" title="Rule 30"></a>Rule 30</h2><ul><li>The font size of every digit must be equal to its square.</li></ul><p>体力活，上脚本！</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">Rule30</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> <span class="token function">processNodeRule30</span><span class="token punctuation">(</span><span class="token parameter">textNode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> text <span class="token operator">=</span> textNode<span class="token punctuation">.</span>nodeValue<span class="token punctuation">;</span>        <span class="token keyword">const</span> parent <span class="token operator">=</span> textNode<span class="token punctuation">.</span>parentNode<span class="token punctuation">;</span>        <span class="token keyword">const</span> parentFontFamily <span class="token operator">=</span> <span class="token function">getComputedStyle</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">.</span>fontFamily<span class="token punctuation">;</span>        <span class="token keyword">const</span> fragments <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\d)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fragments<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">fragment</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\d</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>fragment<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">const</span> span <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">const</span> fontSize <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>fragment<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                span<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>fontSize<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">px</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>                span<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontFamily <span class="token operator">=</span> parentFontFamily<span class="token punctuation">;</span>                span<span class="token punctuation">.</span>textContent <span class="token operator">=</span> fragment<span class="token punctuation">;</span>                parent<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>span<span class="token punctuation">,</span> textNode<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                parent<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>fragment<span class="token punctuation">)</span><span class="token punctuation">,</span> textNode<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        parent<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>textNode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">processRule30</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>nodeType <span class="token operator">===</span> Node<span class="token punctuation">.</span><span class="token constant">TEXT_NODE</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">processNodeRule30</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>nodeType <span class="token operator">===</span> Node<span class="token punctuation">.</span><span class="token constant">ELEMENT_NODE</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>childNodes<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>processRule30<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">let</span> items <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">".ProseMirror p"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>items<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>processRule30<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Rule-31"><a href="#Rule-31" class="headerlink" title="Rule 31"></a>Rule 31</h2><ul><li>Every instance of the same letter must have a different font size.</li></ul><p>又是体力活。不过这里必须保证每个字母出现的次数不超过10次。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">Rule31</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">processNodeRule31</span><span class="token punctuation">(</span><span class="token parameter">textNode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> text <span class="token operator">=</span> textNode<span class="token punctuation">.</span>nodeValue<span class="token punctuation">;</span>        <span class="token keyword">const</span> parent <span class="token operator">=</span> textNode<span class="token punctuation">.</span>parentNode<span class="token punctuation">;</span>        <span class="token keyword">const</span> parentFontFamily <span class="token operator">=</span> <span class="token function">getComputedStyle</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">.</span>fontFamily<span class="token punctuation">;</span>        <span class="token keyword">const</span> fragments <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">([a-zA-Z])</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fragments<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">fragment</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[a-zA-Z]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>fragment<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">let</span> letter <span class="token operator">=</span> fragment<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                counter<span class="token punctuation">[</span>letter<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>counter<span class="token punctuation">[</span>letter<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">const</span> span <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">const</span> fontSize <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>counter<span class="token punctuation">[</span>letter<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                span<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>fontSize<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">px</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>                span<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontFamily <span class="token operator">=</span> parentFontFamily<span class="token punctuation">;</span>                span<span class="token punctuation">.</span>textContent <span class="token operator">=</span> fragment<span class="token punctuation">;</span>                parent<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>span<span class="token punctuation">,</span> textNode<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                parent<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>fragment<span class="token punctuation">)</span><span class="token punctuation">,</span> textNode<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        parent<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>textNode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">processRule31</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>nodeType <span class="token operator">===</span> Node<span class="token punctuation">.</span><span class="token constant">TEXT_NODE</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">processNodeRule31</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>nodeType <span class="token operator">===</span> Node<span class="token punctuation">.</span><span class="token constant">ELEMENT_NODE</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>childNodes<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>processRule31<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">let</span> items <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">".ProseMirror p"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>items<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>processRule31<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Rule-32-33"><a href="#Rule-32-33" class="headerlink" title="Rule 32-33"></a>Rule 32-33</h2><ul><li>Your password must include the length of your password.</li><li>The length of your password must be a prime number.</li></ul><p>此时，密码长度应该有90多了，考虑到Rule 5，这里我们选一个数字之和比较小的素数：101，写在密码里，然后调整Rule 5。</p><p>为了将长度补足到101，我们可以打一堆空格。</p><h2 id="Rule-34"><a href="#Rule-34" class="headerlink" title="Rule 34"></a>Rule 34</h2><ul><li>Uhhh let’s skip this one.</li></ul><p>Uhhh</p><h2 id="Rule-35"><a href="#Rule-35" class="headerlink" title="Rule 35"></a>Rule 35</h2><ul><li>Your password must include the current time.</li></ul><p>到了这一步，前面的数字基本都已经定下来了，由于很强的耦合性，这里直接填入当前的时间大概率会牵一发动全身，非常难受。好在我们可以通过修改系统时间的方法来通过这条规则。</p><p>在密码最后写下01:00（如果这里写00:00，则需要注意网站会将00:00当成12:00来处理），然后调整数字之和与密码长度。</p><p>由此，得到了类似下面的密码：</p><p><img src="https://fastly.jsdelivr.net/gh/windshadow233/BlogStorage@files/png/123ee70ca95986ab477ec074d538cdae.png" alt=""><br>（这里为了看着舒服暂时把字体调回了正常大小，可以修改完再用脚本改回去)</p><p><img src="https://fastly.jsdelivr.net/gh/windshadow233/BlogStorage@files/png/c28d4da8e7d02deb276281726d58b6fb.png" alt=""><br>最后修改系统时间到01:00即可通过全部35条规则。</p><h2 id="Final"><a href="#Final" class="headerlink" title="Final"></a>Final</h2><p><img src="https://fastly.jsdelivr.net/gh/windshadow233/BlogStorage@files/png/b562efb492a1909d21a1fa55c500ae64.png" alt=""><br>Is this your final password?</p><p>在点击Yes之前，需要对密码全文进行一个全选复制（不要问我是怎么知道的</p><p>这样一来，我们就顺利通关了！</p><p><img src="https://fastly.jsdelivr.net/gh/windshadow233/BlogStorage@files/png/9826c9c2a9cffbbf158535b2081cf059.png" alt=""><br><s>以后再也不怕某些网站在设置密码时刁难我了。</s></p>]]></content>
    
    
    <summary type="html">一个有意思的小游戏</summary>
    
    
    
    <category term="杂趣" scheme="https://blog.fyz666.xyz/categories/%E6%9D%82%E8%B6%A3/"/>
    
    
    <category term="JavaScript" scheme="https://blog.fyz666.xyz/tags/javascript/"/>
    
  </entry>
  
</feed>
